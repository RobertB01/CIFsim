//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Disable Eclipse Java formatter for generated code file:
// @formatter:off

package org.eclipse.escet.setext.runtime.expterms;

import static org.eclipse.escet.common.java.Strings.fmt;

import java.io.IOException;

import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.ParserHooksBase;
import org.eclipse.escet.setext.runtime.Token;

/**
 * ExpectedTermsParser.
 *
 * <p>This parser is generated by SeText for main symbol
 * "S".</p>
 */
public final class ExpectedTermsParser extends Parser<Integer> {
    /** The names of the non-terminals, ordered by their unique ids. */
    private static final String[] NON_TERMINAL_NAMES = {
        "S",
        "X",
    };

    /**
     * The entry symbol names for each of the parser states, and {@code null}
     * for the initial state.
     */
    private static final String[] ENTRY_SYMBOL_NAMES = new String[] {
        null,
        "AKW",
        "BKW",
        "S",
        "CKW",
        "X",
        "AKW",
        "DKW",
        "X",
        "BKW",
    };

    /** Parser call back hook methods. */
    private final ExpectedTermsParserHooks hooks;

    /** Whether parsing has completed (final result has been accepted). */
    private boolean accept;

    /** The parse result, but only if {@code #accept} is {@code true}. */
    private Integer acceptObject;

    /** The current scanner token to process, if any. */
    private Token token;

    /** Whether parsing has resulted in a reduce action. */
    private boolean reduce;

    /** The state from which to reduce, if {@code #reduce} is {@code true}. */
    private int reduceState;

    /** The non-terminal to reduce, if {@code #reduce} is {@code true}. */
    private int reduceNonTerminal;

    /** Constructor for the {@link ExpectedTermsParser} class. */
    public ExpectedTermsParser() {
        super(new ExpectedTermsScanner());
        entrySymbolNames = ENTRY_SYMBOL_NAMES;
        firstTerminals = FirstTerminals.FIRST_TERMINALS;
        firstTerminalsReduced = FirstTerminalsReduced.FIRST_TERMINALS_REDUCED;
        reducibleNonTerminals = ReducibleNonTerminals.REDUCIBLE_NON_TERMINALS;
        reducibleNonTerminalsReduced = ReducibleNonTerminalsReduced.REDUCIBLE_NON_TERMINALS_REDUCED;
        hooks = new ExpectedTermsParserHooks();
    }

    @Override
    public ParserHooksBase getHooks() {
        return hooks;
    }

    @Override
    protected final Integer parse() throws IOException {
        token = nextToken();
        int state;

        accept = false;

        while (true) {
            // Perform action.
            state = getCurrentState();
            reduce = false;

            switch (state) {
                case 0:
                    action0();
                    break;
                case 1:
                    action1();
                    break;
                case 2:
                    action2();
                    break;
                case 3:
                    action3();
                    break;
                case 4:
                    action4();
                    break;
                case 5:
                    action5();
                    break;
                case 6:
                    action6();
                    break;
                case 7:
                    action7();
                    break;
                case 8:
                    action8();
                    break;
                case 9:
                    action9();
                    break;
                default:
                    String msg = "Unknown parser state: " + state;
                    throw new RuntimeException(msg);
            }

            // Accept action.
            if (accept) {
                return acceptObject;
            }

            // Shift action.
            if (!reduce) {
                continue;
            }

            // Perform goto (as part of a reduce action).
            switch (reduceState) {
                case 0:
                    goto0();
                    break;
                case 1:
                    goto1();
                    break;
                case 2:
                    goto2();
                    break;
                case 3:
                    goto3();
                    break;
                case 4:
                    goto4();
                    break;
                case 5:
                    goto5();
                    break;
                case 6:
                    goto6();
                    break;
                case 7:
                    goto7();
                    break;
                case 8:
                    goto8();
                    break;
                case 9:
                    goto9();
                    break;
                default:
                    String msg = fmt("Unknown reduce state %d.", reduceState);
                    throw new RuntimeException(msg);
            }
        }
    }

    /**
     * Parser action code for parser state 0.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action0() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 1: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 1.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action1() throws IOException {
        switch (token.id) {
            case 2: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 2.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action2() throws IOException {
        switch (token.id) {
            case 2: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 3.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action3() throws IOException {
        switch (token.id) {
            case 5: {
                // Accept.
                Object rslt = doAccept(token);
                accept = true;
                acceptObject = (Integer)rslt;
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 4.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action4() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 0:
            case 1: {
                // Reduce X : CKW;
                doReduce1(token, 1);
                doReduce2();

                Double o = hooks.parseX1();

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 5.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action5() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 6.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action6() throws IOException {
        switch (token.id) {
            case 5: {
                // Reduce S : BKW X AKW;
                doReduce1(token, 0);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                Integer o = hooks.parseS2((Double)o2);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 7.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action7() throws IOException {
        switch (token.id) {
            case 0:
            case 1: {
                // Reduce X : CKW DKW;
                doReduce1(token, 1);
                doReduce2();
                doReduce2();

                Double o = hooks.parseX2();

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 8.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action8() throws IOException {
        switch (token.id) {
            case 1: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 9.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action9() throws IOException {
        switch (token.id) {
            case 5: {
                // Reduce S : AKW X BKW;
                doReduce1(token, 0);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                Integer o = hooks.parseS1((Double)o2);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /** Parser goto code for parser state 0. */
    private final void goto0() {
        switch (reduceNonTerminal) {
            case 0:
                // S
                doGoto(3);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 1. */
    private final void goto1() {
        switch (reduceNonTerminal) {
            case 1:
                // X
                doGoto(8);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 2. */
    private final void goto2() {
        switch (reduceNonTerminal) {
            case 1:
                // X
                doGoto(5);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 3. */
    private final void goto3() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 4. */
    private final void goto4() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 5. */
    private final void goto5() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 6. */
    private final void goto6() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 7. */
    private final void goto7() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 8. */
    private final void goto8() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 9. */
    private final void goto9() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    @Override
    protected final String getNonTerminalName(int nonTerminalId) {
        return NON_TERMINAL_NAMES[nonTerminalId];
    }

    /** See {@code Parser.firstTerminals}. */
    private static final class FirstTerminals {
        /** See {@code Parser.firstTerminals}. */
        private static final int[][] FIRST_TERMINALS = new int[10][];

        static {
            init0();
            init1();
            init2();
            init3();
            init4();
            init5();
            init6();
            init7();
            init8();
            init9();
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [0]}. */
        private static void init0() {
            FIRST_TERMINALS[0] = new int[] {0, 1};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [1]}. */
        private static void init1() {
            FIRST_TERMINALS[1] = new int[] {2};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [2]}. */
        private static void init2() {
            FIRST_TERMINALS[2] = new int[] {2};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [3]}. */
        private static void init3() {
            FIRST_TERMINALS[3] = new int[] {5};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [4]}. */
        private static void init4() {
            FIRST_TERMINALS[4] = new int[] {3};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [5]}. */
        private static void init5() {
            FIRST_TERMINALS[5] = new int[] {0};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [6]}. */
        private static void init6() {
            FIRST_TERMINALS[6] = new int[] {};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [7]}. */
        private static void init7() {
            FIRST_TERMINALS[7] = new int[] {};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [8]}. */
        private static void init8() {
            FIRST_TERMINALS[8] = new int[] {1};
        }

        /** Initialize {@link #FIRST_TERMINALS}{@code [9]}. */
        private static void init9() {
            FIRST_TERMINALS[9] = new int[] {};
        }
    }

    /** See {@code Parser.firstTerminalsReduced}. */
    private static final class FirstTerminalsReduced {
        /** See {@code Parser.firstTerminalsReduced}. */
        private static final int[][][] FIRST_TERMINALS_REDUCED = new int[10][][];

        static {
            init0();
            init1();
            init2();
            init3();
            init4();
            init5();
            init6();
            init7();
            init8();
            init9();
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [0]}. */
        private static void init0() {
            FIRST_TERMINALS_REDUCED[0] = new int[][] {
                {0, 5},
            };
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [1]}. */
        private static void init1() {
            FIRST_TERMINALS_REDUCED[1] = new int[][] {
                {1, 1},
            };
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [2]}. */
        private static void init2() {
            FIRST_TERMINALS_REDUCED[2] = new int[][] {
                {1, 0},
            };
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [3]}. */
        private static void init3() {
            FIRST_TERMINALS_REDUCED[3] = new int[][] {};
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [4]}. */
        private static void init4() {
            FIRST_TERMINALS_REDUCED[4] = new int[][] {};
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [5]}. */
        private static void init5() {
            FIRST_TERMINALS_REDUCED[5] = new int[][] {};
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [6]}. */
        private static void init6() {
            FIRST_TERMINALS_REDUCED[6] = new int[][] {};
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [7]}. */
        private static void init7() {
            FIRST_TERMINALS_REDUCED[7] = new int[][] {};
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [8]}. */
        private static void init8() {
            FIRST_TERMINALS_REDUCED[8] = new int[][] {};
        }

        /** Initialize {@link #FIRST_TERMINALS_REDUCED}{@code [9]}. */
        private static void init9() {
            FIRST_TERMINALS_REDUCED[9] = new int[][] {};
        }
    }

    /** See {@code Parser.reducibleNonTerminals}. */
    private static final class ReducibleNonTerminals {
        /** See {@code Parser.reducibleNonTerminals}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS = new int[10][][];

        static {
            init0();
            init1();
            init2();
            init3();
            init4();
            init5();
            init6();
            init7();
            init8();
            init9();
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [0]}. */
        private static void init0() {
            REDUCIBLE_NON_TERMINALS[0] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [1]}. */
        private static void init1() {
            REDUCIBLE_NON_TERMINALS[1] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [2]}. */
        private static void init2() {
            REDUCIBLE_NON_TERMINALS[2] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [3]}. */
        private static void init3() {
            REDUCIBLE_NON_TERMINALS[3] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [4]}. */
        private static void init4() {
            REDUCIBLE_NON_TERMINALS[4] = new int[][] {
                {1, 1},
            };
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [5]}. */
        private static void init5() {
            REDUCIBLE_NON_TERMINALS[5] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [6]}. */
        private static void init6() {
            REDUCIBLE_NON_TERMINALS[6] = new int[][] {
                {0, 3},
            };
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [7]}. */
        private static void init7() {
            REDUCIBLE_NON_TERMINALS[7] = new int[][] {
                {1, 2},
            };
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [8]}. */
        private static void init8() {
            REDUCIBLE_NON_TERMINALS[8] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS}{@code [9]}. */
        private static void init9() {
            REDUCIBLE_NON_TERMINALS[9] = new int[][] {
                {0, 3},
            };
        }
    }

    /** See {@code Parser.reducibleNonTerminalsReduced}. */
    private static final class ReducibleNonTerminalsReduced {
        /** See {@code Parser.reducibleNonTerminalsReduced}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS_REDUCED = new int[10][][];

        static {
            init0();
            init1();
            init2();
            init3();
            init4();
            init5();
            init6();
            init7();
            init8();
            init9();
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [0]}. */
        private static void init0() {
            REDUCIBLE_NON_TERMINALS_REDUCED[0] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [1]}. */
        private static void init1() {
            REDUCIBLE_NON_TERMINALS_REDUCED[1] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [2]}. */
        private static void init2() {
            REDUCIBLE_NON_TERMINALS_REDUCED[2] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [3]}. */
        private static void init3() {
            REDUCIBLE_NON_TERMINALS_REDUCED[3] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [4]}. */
        private static void init4() {
            REDUCIBLE_NON_TERMINALS_REDUCED[4] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [5]}. */
        private static void init5() {
            REDUCIBLE_NON_TERMINALS_REDUCED[5] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [6]}. */
        private static void init6() {
            REDUCIBLE_NON_TERMINALS_REDUCED[6] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [7]}. */
        private static void init7() {
            REDUCIBLE_NON_TERMINALS_REDUCED[7] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [8]}. */
        private static void init8() {
            REDUCIBLE_NON_TERMINALS_REDUCED[8] = new int[][] {};
        }

        /** Initialize {@link #REDUCIBLE_NON_TERMINALS_REDUCED}{@code [9]}. */
        private static void init9() {
            REDUCIBLE_NON_TERMINALS_REDUCED[9] = new int[][] {};
        }
    }

    /** Parser call back hooks for {@link ExpectedTermsParser}. */
    public interface Hooks extends ParserHooksBase {
        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code S : AKW X BKW;}</p>
         *
         * @param d2 {@code X}.
         * @return The parser call back hook result.
         */
        public Integer parseS1(Double d2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code S : BKW X AKW;}</p>
         *
         * @param d2 {@code X}.
         * @return The parser call back hook result.
         */
        public Integer parseS2(Double d2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code X : CKW;}</p>
         *
         * @return The parser call back hook result.
         */
        public Double parseX1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code X : CKW DKW;}</p>
         *
         * @return The parser call back hook result.
         */
        public Double parseX2();
    }
}
