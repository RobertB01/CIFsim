//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Disable Eclipse Java formatter for generated code file:
// @formatter:off

package org.eclipse.escet.setext.runtime.parser;

import static org.eclipse.escet.common.java.Strings.fmt;

import java.io.IOException;
import java.util.List;

import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.ParserHooksBase;
import org.eclipse.escet.setext.runtime.Token;

/**
 * CalcTestParser.
 *
 * <p>This parser is generated by SeText for main symbol
 * "Program".</p>
 */
@SuppressWarnings("unchecked")
public final class CalcTestParser extends Parser<List<Double>> {
    /** The names of the non-terminals, ordered by their unique ids. */
    private static final String[] NON_TERMINAL_NAMES = {
        "Program",
        "Statements",
        "Statement",
        "Expression",
        "TimesExpression",
        "MinusExpression",
        "BaseExpression",
    };

    /**
     * The entry symbol names for each of the parser states, and {@code null}
     * for the initial state.
     */
    private static final String[] ENTRY_SYMBOL_NAMES = new String[] {
        null,
        "PIKW",
        "NAME",
        "NUMBER",
        "MINUS",
        "LPAREN",
        "BaseExpression",
        "Expression",
        "MinusExpression",
        "Program",
        "Statement",
        "Statements",
        "TimesExpression",
        "TIMES",
        "DIVIDE",
        "NAME",
        "MinusExpression",
        "MinusExpression",
        "Statement",
        "SEMICOL",
        "SEMICOL",
        "PLUS",
        "MINUS",
        "TimesExpression",
        "TimesExpression",
        "Expression",
        "RPAREN",
        "MinusExpression",
        "EQUALS",
        "Expression",
    };

    /** Parser call back hook methods. */
    private final CalcTestHooks hooks;

    /** Whether parsing has completed (final result has been accepted). */
    private boolean accept;

    /** The parse result, but only if {@code #accept} is {@code true}. */
    private List<Double> acceptObject;

    /** The current scanner token to process, if any. */
    private Token token;

    /** Whether parsing has resulted in a reduce action. */
    private boolean reduce;

    /** The state from which to reduce, if {@code #reduce} is {@code true}. */
    private int reduceState;

    /** The non-terminal to reduce, if {@code #reduce} is {@code true}. */
    private int reduceNonTerminal;

    /** Constructor for the {@link CalcTestParser} class. */
    public CalcTestParser() {
        super(new CalcTestScanner());
        entrySymbolNames = ENTRY_SYMBOL_NAMES;
        firstTerminals = FirstTerminals.FIRST_TERMINALS;
        firstTerminalsReduced = FirstTerminalsReduced.FIRST_TERMINALS_REDUCED;
        reducibleNonTerminals = ReducibleNonTerminals.REDUCIBLE_NON_TERMINALS;
        reducibleNonTerminalsReduced = ReducibleNonTerminalsReduced.REDUCIBLE_NON_TERMINALS_REDUCED;
        hooks = new CalcTestHooks();
    }

    @Override
    public ParserHooksBase getHooks() {
        return hooks;
    }

    @Override
    protected final List<Double> parse() throws IOException {
        token = nextToken();
        int state;

        accept = false;

        while (true) {
            // Perform action.
            state = getCurrentState();
            reduce = false;

            switch (state) {
                case 0:
                    action0();
                    break;
                case 1:
                    action1();
                    break;
                case 2:
                    action2();
                    break;
                case 3:
                    action3();
                    break;
                case 4:
                    action4();
                    break;
                case 5:
                    action5();
                    break;
                case 6:
                    action6();
                    break;
                case 7:
                    action7();
                    break;
                case 8:
                    action8();
                    break;
                case 9:
                    action9();
                    break;
                case 10:
                    action10();
                    break;
                case 11:
                    action11();
                    break;
                case 12:
                    action12();
                    break;
                case 13:
                    action13();
                    break;
                case 14:
                    action14();
                    break;
                case 15:
                    action15();
                    break;
                case 16:
                    action16();
                    break;
                case 17:
                    action17();
                    break;
                case 18:
                    action18();
                    break;
                case 19:
                    action19();
                    break;
                case 20:
                    action20();
                    break;
                case 21:
                    action21();
                    break;
                case 22:
                    action22();
                    break;
                case 23:
                    action23();
                    break;
                case 24:
                    action24();
                    break;
                case 25:
                    action25();
                    break;
                case 26:
                    action26();
                    break;
                case 27:
                    action27();
                    break;
                case 28:
                    action28();
                    break;
                case 29:
                    action29();
                    break;
                default:
                    String msg = "Unknown parser state: " + state;
                    throw new RuntimeException(msg);
            }

            // Accept action.
            if (accept) {
                return acceptObject;
            }

            // Shift action.
            if (!reduce) {
                continue;
            }

            // Perform goto (as part of a reduce action).
            switch (reduceState) {
                case 0:
                    goto0();
                    break;
                case 1:
                    goto1();
                    break;
                case 2:
                    goto2();
                    break;
                case 3:
                    goto3();
                    break;
                case 4:
                    goto4();
                    break;
                case 5:
                    goto5();
                    break;
                case 6:
                    goto6();
                    break;
                case 7:
                    goto7();
                    break;
                case 8:
                    goto8();
                    break;
                case 9:
                    goto9();
                    break;
                case 10:
                    goto10();
                    break;
                case 11:
                    goto11();
                    break;
                case 12:
                    goto12();
                    break;
                case 13:
                    goto13();
                    break;
                case 14:
                    goto14();
                    break;
                case 15:
                    goto15();
                    break;
                case 16:
                    goto16();
                    break;
                case 17:
                    goto17();
                    break;
                case 18:
                    goto18();
                    break;
                case 19:
                    goto19();
                    break;
                case 20:
                    goto20();
                    break;
                case 21:
                    goto21();
                    break;
                case 22:
                    goto22();
                    break;
                case 23:
                    goto23();
                    break;
                case 24:
                    goto24();
                    break;
                case 25:
                    goto25();
                    break;
                case 26:
                    goto26();
                    break;
                case 27:
                    goto27();
                    break;
                case 28:
                    goto28();
                    break;
                case 29:
                    goto29();
                    break;
                default:
                    String msg = fmt("Unknown reduce state %d.", reduceState);
                    throw new RuntimeException(msg);
            }
        }
    }

    /**
     * Parser action code for parser state 0.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action0() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 1: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 12: {
                // Reduce Program : ;
                doReduce1(token, 0);
                List<Double> o = hooks.parseProgram1();

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            case 10: {
                // Reduce Statement : ;
                doReduce1(token, 2);
                List<Double> o = hooks.parseStatement1();

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 1.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action1() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce BaseExpression : PIKW;
                doReduce1(token, 6);
                doReduce2();

                Double o = hooks.parseBaseExpression3();

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 2.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action2() throws IOException {
        switch (token.id) {
            case 7: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 3:
            case 4:
            case 5:
            case 6:
            case 10: {
                // Reduce BaseExpression : NAME;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Double o = hooks.parseBaseExpression2((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 3.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action3() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce BaseExpression : NUMBER;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Double o = hooks.parseBaseExpression1((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 4.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action4() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 5.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action5() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 6.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action6() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce MinusExpression : BaseExpression;
                doReduce1(token, 5);
                Object o1 = doReduce2();

                Double o = hooks.parseMinusExpression1((Double)o1);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 7.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action7() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 4: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 10: {
                // Reduce Statement : Expression;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                List<Double> o = hooks.parseStatement3((Double)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 8.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action8() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce TimesExpression : MinusExpression;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Double o = hooks.parseTimesExpression1((Double)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 9.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action9() throws IOException {
        switch (token.id) {
            case 12: {
                // Accept.
                Object rslt = doAccept(token);
                accept = true;
                acceptObject = (List<Double>)rslt;
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 10.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action10() throws IOException {
        switch (token.id) {
            case 10: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 11.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action11() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 1: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 12: {
                // Reduce Program : Statements;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                List<Double> o = hooks.parseProgram2((List<Double>)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            case 10: {
                // Reduce Statement : ;
                doReduce1(token, 2);
                List<Double> o = hooks.parseStatement1();

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 12.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action12() throws IOException {
        switch (token.id) {
            case 5: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 6: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 3:
            case 4:
            case 9:
            case 10: {
                // Reduce Expression : TimesExpression;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Double o = hooks.parseExpression1((Double)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 13.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action13() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 14.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action14() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 15.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action15() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce BaseExpression : NAME;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Double o = hooks.parseBaseExpression2((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 16.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action16() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce TimesExpression : TimesExpression DIVIDE MinusExpression;
                doReduce1(token, 4);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                Double o = hooks.parseTimesExpression3((Double)o1, (Double)o3);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 17.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action17() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce TimesExpression : TimesExpression TIMES MinusExpression;
                doReduce1(token, 4);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                Double o = hooks.parseTimesExpression2((Double)o1, (Double)o3);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 18.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action18() throws IOException {
        switch (token.id) {
            case 10: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 19.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action19() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 2:
            case 4:
            case 8:
            case 10:
            case 12: {
                // Reduce Statements : Statements Statement SEMICOL;
                doReduce1(token, 1);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<Double> o = hooks.parseStatements2((List<Double>)o1, (List<Double>)o2);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 20.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action20() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 2:
            case 4:
            case 8:
            case 10:
            case 12: {
                // Reduce Statements : Statement SEMICOL;
                doReduce1(token, 1);
                doReduce2();
                Object o1 = doReduce2();

                List<Double> o = hooks.parseStatements1((List<Double>)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 21.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action21() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 22.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action22() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 23.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action23() throws IOException {
        switch (token.id) {
            case 5: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 6: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 3:
            case 4:
            case 9:
            case 10: {
                // Reduce Expression : Expression MINUS TimesExpression;
                doReduce1(token, 3);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                Double o = hooks.parseExpression3((Double)o1, (Double)o3);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 24.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action24() throws IOException {
        switch (token.id) {
            case 5: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 6: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 3:
            case 4:
            case 9:
            case 10: {
                // Reduce Expression : Expression PLUS TimesExpression;
                doReduce1(token, 3);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                Double o = hooks.parseExpression2((Double)o1, (Double)o3);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 25.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action25() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 4: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 9: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 26.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action26() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce BaseExpression : LPAREN Expression RPAREN;
                doReduce1(token, 6);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                Double o = hooks.parseBaseExpression4((Double)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 27.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action27() throws IOException {
        switch (token.id) {
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 10: {
                // Reduce MinusExpression : MINUS MinusExpression;
                doReduce1(token, 5);
                Object o2 = doReduce2();
                doReduce2();

                Double o = hooks.parseMinusExpression2((Double)o2);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 28.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action28() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 2: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 4: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 1: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 29.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action29() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 4: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 10: {
                // Reduce Statement : NAME EQUALS Expression;
                doReduce1(token, 2);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<Double> o = hooks.parseStatement2((Token)o1, (Double)o3);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /** Parser goto code for parser state 0. */
    private final void goto0() {
        switch (reduceNonTerminal) {
            case 0:
                // Program
                doGoto(9);
                return;

            case 1:
                // Statements
                doGoto(11);
                return;

            case 2:
                // Statement
                doGoto(10);
                return;

            case 3:
                // Expression
                doGoto(7);
                return;

            case 4:
                // TimesExpression
                doGoto(12);
                return;

            case 5:
                // MinusExpression
                doGoto(8);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 1. */
    private final void goto1() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 2. */
    private final void goto2() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 3. */
    private final void goto3() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 4. */
    private final void goto4() {
        switch (reduceNonTerminal) {
            case 5:
                // MinusExpression
                doGoto(27);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 5. */
    private final void goto5() {
        switch (reduceNonTerminal) {
            case 3:
                // Expression
                doGoto(25);
                return;

            case 4:
                // TimesExpression
                doGoto(12);
                return;

            case 5:
                // MinusExpression
                doGoto(8);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 6. */
    private final void goto6() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 7. */
    private final void goto7() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 8. */
    private final void goto8() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 9. */
    private final void goto9() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 10. */
    private final void goto10() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 11. */
    private final void goto11() {
        switch (reduceNonTerminal) {
            case 2:
                // Statement
                doGoto(18);
                return;

            case 3:
                // Expression
                doGoto(7);
                return;

            case 4:
                // TimesExpression
                doGoto(12);
                return;

            case 5:
                // MinusExpression
                doGoto(8);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 12. */
    private final void goto12() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 13. */
    private final void goto13() {
        switch (reduceNonTerminal) {
            case 5:
                // MinusExpression
                doGoto(17);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 14. */
    private final void goto14() {
        switch (reduceNonTerminal) {
            case 5:
                // MinusExpression
                doGoto(16);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 15. */
    private final void goto15() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 16. */
    private final void goto16() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 17. */
    private final void goto17() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 18. */
    private final void goto18() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 19. */
    private final void goto19() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 20. */
    private final void goto20() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 21. */
    private final void goto21() {
        switch (reduceNonTerminal) {
            case 4:
                // TimesExpression
                doGoto(24);
                return;

            case 5:
                // MinusExpression
                doGoto(8);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 22. */
    private final void goto22() {
        switch (reduceNonTerminal) {
            case 4:
                // TimesExpression
                doGoto(23);
                return;

            case 5:
                // MinusExpression
                doGoto(8);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 23. */
    private final void goto23() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 24. */
    private final void goto24() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 25. */
    private final void goto25() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 26. */
    private final void goto26() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 27. */
    private final void goto27() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 28. */
    private final void goto28() {
        switch (reduceNonTerminal) {
            case 3:
                // Expression
                doGoto(29);
                return;

            case 4:
                // TimesExpression
                doGoto(12);
                return;

            case 5:
                // MinusExpression
                doGoto(8);
                return;

            case 6:
                // BaseExpression
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 29. */
    private final void goto29() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    @Override
    protected final String getNonTerminalName(int nonTerminalId) {
        return NON_TERMINAL_NAMES[nonTerminalId];
    }

    /** See {@code Parser.firstTerminals}. */
    private static final class FirstTerminals {
        /** See {@code Parser.firstTerminals}. */
        private static final int[][] FIRST_TERMINALS = new int[][] {
            {0, 1, 2, 4, 8, 10, 12}, // state 0
            {}, // state 1
            {7}, // state 2
            {}, // state 3
            {0, 1, 2, 4, 8}, // state 4
            {0, 1, 2, 4, 8}, // state 5
            {}, // state 6
            {3, 4}, // state 7
            {}, // state 8
            {12}, // state 9
            {10}, // state 10
            {0, 1, 2, 4, 8, 10}, // state 11
            {5, 6}, // state 12
            {0, 1, 2, 4, 8}, // state 13
            {0, 1, 2, 4, 8}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {10}, // state 18
            {}, // state 19
            {}, // state 20
            {0, 1, 2, 4, 8}, // state 21
            {0, 1, 2, 4, 8}, // state 22
            {5, 6}, // state 23
            {5, 6}, // state 24
            {3, 4, 9}, // state 25
            {}, // state 26
            {}, // state 27
            {0, 1, 2, 4, 8}, // state 28
            {3, 4}, // state 29
        };
    }

    /** See {@code Parser.firstTerminalsReduced}. */
    private static final class FirstTerminalsReduced {
        /** See {@code Parser.firstTerminalsReduced}. */
        private static final int[][][] FIRST_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {0, 12},
                {1, 0, 1, 2, 4, 8, 10},
                {2, 10},
                {3, 3, 4},
                {4, 5, 6},
            },
            {}, // state 1
            {}, // state 2
            {}, // state 3
            {}, // state 4
            { // state 5
                {3, 3, 4, 9},
                {4, 5, 6},
            },
            {}, // state 6
            {}, // state 7
            {}, // state 8
            {}, // state 9
            {}, // state 10
            { // state 11
                {2, 10},
                {3, 3, 4},
                {4, 5, 6},
            },
            {}, // state 12
            {}, // state 13
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            { // state 21
                {4, 5, 6},
            },
            { // state 22
                {4, 5, 6},
            },
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            { // state 28
                {3, 3, 4},
                {4, 5, 6},
            },
            {}, // state 29
        };
    }

    /** See {@code Parser.reducibleNonTerminals}. */
    private static final class ReducibleNonTerminals {
        /** See {@code Parser.reducibleNonTerminals}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS = new int[][][] {
            { // state 0
                {0, 0},
                {2, 0},
            },
            { // state 1
                {6, 1},
            },
            { // state 2
                {6, 1},
            },
            { // state 3
                {6, 1},
            },
            {}, // state 4
            {}, // state 5
            { // state 6
                {5, 1},
            },
            { // state 7
                {2, 1},
            },
            { // state 8
                {4, 1},
            },
            {}, // state 9
            {}, // state 10
            { // state 11
                {0, 1},
                {2, 0},
            },
            { // state 12
                {3, 1},
            },
            {}, // state 13
            {}, // state 14
            { // state 15
                {6, 1},
            },
            { // state 16
                {4, 3},
            },
            { // state 17
                {4, 3},
            },
            {}, // state 18
            { // state 19
                {1, 3},
            },
            { // state 20
                {1, 2},
            },
            {}, // state 21
            {}, // state 22
            { // state 23
                {3, 3},
            },
            { // state 24
                {3, 3},
            },
            {}, // state 25
            { // state 26
                {6, 3},
            },
            { // state 27
                {5, 2},
            },
            {}, // state 28
            { // state 29
                {2, 3},
            },
        };
    }

    /** See {@code Parser.reducibleNonTerminalsReduced}. */
    private static final class ReducibleNonTerminalsReduced {
        /** See {@code Parser.reducibleNonTerminalsReduced}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {1, 0, 0},
                {3, 2, 0},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 1
            {}, // state 2
            {}, // state 3
            { // state 4
                {5, 5, 1},
                {6, 5, 0},
            },
            { // state 5
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 6
            {}, // state 7
            {}, // state 8
            {}, // state 9
            {}, // state 10
            { // state 11
                {3, 2, 0},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 12
            { // state 13
                {5, 4, 2},
                {6, 5, 0},
            },
            { // state 14
                {5, 4, 2},
                {6, 5, 0},
            },
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            { // state 21
                {4, 3, 2},
                {5, 4, 0},
                {6, 5, 0},
            },
            { // state 22
                {4, 3, 2},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            { // state 28
                {3, 2, 2},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 29
        };
    }

    /** Parser call back hooks for {@link CalcTestParser}. */
    public interface Hooks extends ParserHooksBase {
        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Program : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<Double> parseProgram1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Program : Statements;}</p>
         *
         * @param l1 {@code Statements}.
         * @return The parser call back hook result.
         */
        public List<Double> parseProgram2(List<Double> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Statements : Statement SEMICOL;}</p>
         *
         * @param l1 {@code Statement}.
         * @return The parser call back hook result.
         */
        public List<Double> parseStatements1(List<Double> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Statements : Statements Statement SEMICOL;}</p>
         *
         * @param l1 {@code Statements}.
         * @param l2 {@code Statement}.
         * @return The parser call back hook result.
         */
        public List<Double> parseStatements2(List<Double> l1, List<Double> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Statement : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<Double> parseStatement1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Statement : @NAME EQUALS Expression;}</p>
         *
         * @param t1 {@code NAME}.
         * @param d3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<Double> parseStatement2(Token t1, Double d3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Statement : Expression;}</p>
         *
         * @param d1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<Double> parseStatement3(Double d1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : TimesExpression;}</p>
         *
         * @param d1 {@code TimesExpression}.
         * @return The parser call back hook result.
         */
        public Double parseExpression1(Double d1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : Expression PLUS TimesExpression;}</p>
         *
         * @param d1 {@code Expression}.
         * @param d3 {@code TimesExpression}.
         * @return The parser call back hook result.
         */
        public Double parseExpression2(Double d1, Double d3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : Expression MINUS TimesExpression;}</p>
         *
         * @param d1 {@code Expression}.
         * @param d3 {@code TimesExpression}.
         * @return The parser call back hook result.
         */
        public Double parseExpression3(Double d1, Double d3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code TimesExpression : MinusExpression;}</p>
         *
         * @param d1 {@code MinusExpression}.
         * @return The parser call back hook result.
         */
        public Double parseTimesExpression1(Double d1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code TimesExpression : TimesExpression TIMES MinusExpression;}</p>
         *
         * @param d1 {@code TimesExpression}.
         * @param d3 {@code MinusExpression}.
         * @return The parser call back hook result.
         */
        public Double parseTimesExpression2(Double d1, Double d3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code TimesExpression : TimesExpression DIVIDE MinusExpression;}</p>
         *
         * @param d1 {@code TimesExpression}.
         * @param d3 {@code MinusExpression}.
         * @return The parser call back hook result.
         */
        public Double parseTimesExpression3(Double d1, Double d3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MinusExpression : BaseExpression;}</p>
         *
         * @param d1 {@code BaseExpression}.
         * @return The parser call back hook result.
         */
        public Double parseMinusExpression1(Double d1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MinusExpression : MINUS MinusExpression;}</p>
         *
         * @param d2 {@code MinusExpression}.
         * @return The parser call back hook result.
         */
        public Double parseMinusExpression2(Double d2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BaseExpression : @NUMBER;}</p>
         *
         * @param t1 {@code NUMBER}.
         * @return The parser call back hook result.
         */
        public Double parseBaseExpression1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BaseExpression : @NAME;}</p>
         *
         * @param t1 {@code NAME}.
         * @return The parser call back hook result.
         */
        public Double parseBaseExpression2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BaseExpression : PIKW;}</p>
         *
         * @return The parser call back hook result.
         */
        public Double parseBaseExpression3();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BaseExpression : LPAREN Expression RPAREN;}</p>
         *
         * @param d2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public Double parseBaseExpression4(Double d2);
    }
}
