Parser automaton for main state "Sr1":

initial state 0:
  + S' : . Sr1 {¶}
  - Sr1 : . NAME {MINUS, PLUS, ¶}
  - Sr1 : . Sr1 MINUS Sr1 {MINUS, PLUS, ¶}
  - Sr1 : . Sr1 PLUS Sr1 {MINUS, PLUS, ¶}

  NAME -> shift to state 1

  Sr1 -> goto state 2

state 1:
  + Sr1 : NAME . {MINUS, PLUS, ¶}

  MINUS -> reduce Sr1 : NAME;
  PLUS  -> reduce Sr1 : NAME;
  ¶     -> reduce Sr1 : NAME;

state 2:
  + S' : Sr1 . {¶}
  + Sr1 : Sr1 . MINUS Sr1 {MINUS, PLUS, ¶}
  + Sr1 : Sr1 . PLUS Sr1 {MINUS, PLUS, ¶}

  MINUS -> shift to state 4
  PLUS  -> shift to state 3

  ¶     -> accept

state 3:
  + Sr1 : Sr1 PLUS . Sr1 {MINUS, PLUS, ¶}
  - Sr1 : . NAME {MINUS, PLUS, ¶}
  - Sr1 : . Sr1 MINUS Sr1 {MINUS, PLUS, ¶}
  - Sr1 : . Sr1 PLUS Sr1 {MINUS, PLUS, ¶}

  NAME -> shift to state 1

  Sr1 -> goto state 6

state 4:
  + Sr1 : Sr1 MINUS . Sr1 {MINUS, PLUS, ¶}
  - Sr1 : . NAME {MINUS, PLUS, ¶}
  - Sr1 : . Sr1 MINUS Sr1 {MINUS, PLUS, ¶}
  - Sr1 : . Sr1 PLUS Sr1 {MINUS, PLUS, ¶}

  NAME -> shift to state 1

  Sr1 -> goto state 5

state 5:
  + Sr1 : Sr1 . MINUS Sr1 {MINUS, PLUS, ¶}
  + Sr1 : Sr1 . PLUS Sr1 {MINUS, PLUS, ¶}
  + Sr1 : Sr1 MINUS Sr1 . {MINUS, PLUS, ¶}

! shift/reduce conflict on MINUS
! shift/reduce conflict on PLUS

! MINUS -> shift to state 4
! PLUS  -> shift to state 3

  ¶     -> reduce Sr1 : Sr1 MINUS Sr1;
! MINUS -> reduce Sr1 : Sr1 MINUS Sr1;
! PLUS  -> reduce Sr1 : Sr1 MINUS Sr1;

state 6:
  + Sr1 : Sr1 . MINUS Sr1 {MINUS, PLUS, ¶}
  + Sr1 : Sr1 . PLUS Sr1 {MINUS, PLUS, ¶}
  + Sr1 : Sr1 PLUS Sr1 . {MINUS, PLUS, ¶}

! shift/reduce conflict on MINUS
! shift/reduce conflict on PLUS

! MINUS -> shift to state 4
! PLUS  -> shift to state 3

  ¶     -> reduce Sr1 : Sr1 PLUS Sr1;
! MINUS -> reduce Sr1 : Sr1 PLUS Sr1;
! PLUS  -> reduce Sr1 : Sr1 PLUS Sr1;

4 conflict(s) in total (4 shift/reduce, 0 reduce/reduce, 0 accept/reduce).
