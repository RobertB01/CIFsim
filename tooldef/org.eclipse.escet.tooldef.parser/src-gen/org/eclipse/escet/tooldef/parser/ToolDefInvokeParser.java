//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Disable Eclipse Java formatter for generated code file:
// @formatter:off

package org.eclipse.escet.tooldef.parser;

import static org.eclipse.escet.common.java.Strings.fmt;

import java.io.IOException;
import java.util.List;

import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.ParserHooksBase;
import org.eclipse.escet.setext.runtime.Token;
import org.eclipse.escet.tooldef.metamodel.tooldef.expressions.Expression;
import org.eclipse.escet.tooldef.metamodel.tooldef.expressions.MapEntry;
import org.eclipse.escet.tooldef.metamodel.tooldef.expressions.ToolArgument;
import org.eclipse.escet.tooldef.metamodel.tooldef.expressions.ToolInvokeExpression;
import org.eclipse.escet.tooldef.metamodel.tooldef.expressions.ToolRef;
import org.eclipse.escet.tooldef.metamodel.tooldef.types.ToolDefType;

/**
 * ToolDefInvokeParser.
 *
 * <p>This parser is generated by SeText for start symbol
 * "ToolInvokeExpression".</p>
 */
@SuppressWarnings("unchecked")
public final class ToolDefInvokeParser extends Parser<ToolInvokeExpression> {
    /** The names of the non-terminals, ordered by their unique ids. */
    private static final String[] NON_TERMINAL_NAMES = {
        "BuiltInIoTool",
        "BuiltInGenericTool",
        "BuiltInPathTool",
        "BuiltInFileTool",
        "BuiltInDataTool",
        "Types",
        "Type",
        "Expressions",
        "OptExpression",
        "Expression",
        "AndExpression",
        "CompareExpression",
        "AddExpression",
        "MulExpression",
        "UnaryExpression",
        "ProjExpression",
        "ExpressionFactor",
        "MapEntries",
        "ToolInvokeExpression",
        "ToolRef",
        "BuiltInTool",
        "ToolArgs",
        "Name",
        "OptComma",
    };

    /**
     * The entry symbol names for each of the parser states, and {@code null}
     * for the initial state.
     */
    private static final String[] ENTRY_SYMBOL_NAMES = new String[] {
        null,
        "ERRKW",
        "ERRLNKW",
        "OUTKW",
        "OUTLNKW",
        "APPKW",
        "EXECKW",
        "TOOLDEFKW",
        "ABSPATHKW",
        "BASENAMEKW",
        "CHDIRKW",
        "CHFILEEXTKW",
        "CURDIRKW",
        "DIRNAMEKW",
        "FILEEXTKW",
        "HASFILEEXTKW",
        "PATHJOINKW",
        "SCRIPTPATHKW",
        "CPDIRKW",
        "CPFILEKW",
        "DIFFKW",
        "EXISTSKW",
        "FILENEWERKW",
        "FILESIZEKW",
        "FINDKW",
        "ISDIRKW",
        "ISFILEKW",
        "MKDIRKW",
        "MVDIRKW",
        "MVFILEKW",
        "READLINESKW",
        "RMDIRKW",
        "RMFILEKW",
        "WRITEFILEKW",
        "ABSKW",
        "CEILKW",
        "CONTAINSKW",
        "DELKW",
        "DELIDXKW",
        "EMPTYKW",
        "ENDSWITHKW",
        "ENTRIESKW",
        "ENUMERATEKW",
        "FLOORKW",
        "FMTKW",
        "INDEXOFKW",
        "JOINKW",
        "KEYSKW",
        "LASTINDEXOFKW",
        "LNKW",
        "LOGKW",
        "LOWERKW",
        "LTRIMKW",
        "MAXKW",
        "MINKW",
        "POWKW",
        "RANGEKW",
        "REPLACEKW",
        "REVERSEKW",
        "ROUNDKW",
        "RTRIMKW",
        "SIZEKW",
        "SORTEDKW",
        "SPLITKW",
        "SQRTKW",
        "STARTSWITHKW",
        "STRKW",
        "STRDUPKW",
        "SUBSETKW",
        "TRIMKW",
        "UPPERKW",
        "VALUESKW",
        "IDENTIFIERTK",
        "RELATIVENAMETK",
        "BuiltInDataTool",
        "BuiltInFileTool",
        "BuiltInGenericTool",
        "BuiltInIoTool",
        "BuiltInPathTool",
        "BuiltInTool",
        "Name",
        "ToolInvokeExpression",
        "ToolRef",
        "PAROPENTK",
        "FALSEKW",
        "NULLKW",
        "TRUEKW",
        "NOTKW",
        "CUROPENTK",
        "LTTK",
        "MINUSTK",
        "PARCLOSETK",
        "PAROPENTK",
        "PLUSTK",
        "SQOPENTK",
        "IDENTIFIERTK",
        "NUMBERTK",
        "DOUBLETK",
        "STRINGTK",
        "AddExpression",
        "AndExpression",
        "CompareExpression",
        "Expression",
        "ExpressionFactor",
        "MulExpression",
        "Name",
        "ProjExpression",
        "ToolArgs",
        "ToolInvokeExpression",
        "UnaryExpression",
        "COMMATK",
        "OptComma",
        "PARCLOSETK",
        "IDENTIFIERTK",
        "Expression",
        "ORKW",
        "AndExpression",
        "ANDKW",
        "CompareExpression",
        "EQEQTK",
        "GETK",
        "GTTK",
        "LETK",
        "LTTK",
        "NETK",
        "AddExpression",
        "MINUSTK",
        "PLUSTK",
        "MulExpression",
        "DIVKW",
        "MODKW",
        "ASTERISKTK",
        "SLASHTK",
        "UnaryExpression",
        "UnaryExpression",
        "UnaryExpression",
        "UnaryExpression",
        "MulExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "EQTK",
        "Expression",
        "SQOPENTK",
        "Expression",
        "OptExpression",
        "COLONTK",
        "Expression",
        "OptExpression",
        "SQCLOSETK",
        "SQCLOSETK",
        "EQTK",
        "Expression",
        "SQCLOSETK",
        "Expression",
        "Expressions",
        "COMMATK",
        "OptComma",
        "SQCLOSETK",
        "Expression",
        "UnaryExpression",
        "Expression",
        "COMMATK",
        "PARCLOSETK",
        "Expressions",
        "OptComma",
        "PARCLOSETK",
        "UnaryExpression",
        "BOOLKW",
        "DOUBLEKW",
        "INTKW",
        "LISTKW",
        "LONGKW",
        "MAPKW",
        "OBJECTKW",
        "SETKW",
        "STRINGKW",
        "TUPLEKW",
        "Name",
        "Type",
        "GTTK",
        "ExpressionFactor",
        "PAROPENTK",
        "QUESTIONTK",
        "PAROPENTK",
        "Type",
        "COMMATK",
        "Type",
        "Types",
        "COMMATK",
        "PARCLOSETK",
        "Type",
        "Type",
        "COMMATK",
        "Types",
        "PARCLOSETK",
        "QUESTIONTK",
        "QUESTIONTK",
        "Type",
        "Type",
        "QUESTIONTK",
        "PAROPENTK",
        "QUESTIONTK",
        "PAROPENTK",
        "Type",
        "COLONTK",
        "Type",
        "PARCLOSETK",
        "Type",
        "COLONTK",
        "Type",
        "PARCLOSETK",
        "QUESTIONTK",
        "QUESTIONTK",
        "Type",
        "Type",
        "QUESTIONTK",
        "QUESTIONTK",
        "QUESTIONTK",
        "CURCLOSETK",
        "Expression",
        "Expressions",
        "MapEntries",
        "COMMATK",
        "OptComma",
        "CURCLOSETK",
        "Expression",
        "COLONTK",
        "Expression",
        "OptComma",
        "CURCLOSETK",
        "COLONTK",
        "Expression",
        "UnaryExpression",
    };

    /** Parser call back hook methods. */
    private final ToolDefHooks hooks;

    /** Whether parsing has completed (final result has been accepted). */
    private boolean accept;

    /** The parse result, but only if {@code #accept} is {@code true}. */
    private ToolInvokeExpression acceptObject;

    /** The current scanner token to process, if any. */
    private Token token;

    /** Whether parsing has resulted in a reduce action. */
    private boolean reduce;

    /** The state from which to reduce, if {@code #reduce} is {@code true}. */
    private int reduceState;

    /** The non-terminal to reduce, if {@code #reduce} is {@code true}. */
    private int reduceNonTerminal;

    /** Constructor for the {@link ToolDefInvokeParser} class. */
    public ToolDefInvokeParser() {
        super(new ToolDefScanner());
        entrySymbolNames = ENTRY_SYMBOL_NAMES;
        firstTerminals = FirstTerminals.FIRST_TERMINALS;
        firstTerminalsReduced = FirstTerminalsReduced.FIRST_TERMINALS_REDUCED;
        reducibleNonTerminals = ReducibleNonTerminals.REDUCIBLE_NON_TERMINALS;
        reducibleNonTerminalsReduced = ReducibleNonTerminalsReduced.REDUCIBLE_NON_TERMINALS_REDUCED;
        hooks = ((ToolDefScanner)scanner).hooks;
    }

    @Override
    public ParserHooksBase getHooks() {
        return hooks;
    }

    @Override
    protected final ToolInvokeExpression parse() throws IOException {
        token = nextToken();
        int state;

        accept = false;

        while (true) {
            // Perform action.
            state = getCurrentState();
            reduce = false;

            switch (state) {
                case 0:
                    action0();
                    break;
                case 1:
                    action1();
                    break;
                case 2:
                    action2();
                    break;
                case 3:
                    action3();
                    break;
                case 4:
                    action4();
                    break;
                case 5:
                    action5();
                    break;
                case 6:
                    action6();
                    break;
                case 7:
                    action7();
                    break;
                case 8:
                    action8();
                    break;
                case 9:
                    action9();
                    break;
                case 10:
                    action10();
                    break;
                case 11:
                    action11();
                    break;
                case 12:
                    action12();
                    break;
                case 13:
                    action13();
                    break;
                case 14:
                    action14();
                    break;
                case 15:
                    action15();
                    break;
                case 16:
                    action16();
                    break;
                case 17:
                    action17();
                    break;
                case 18:
                    action18();
                    break;
                case 19:
                    action19();
                    break;
                case 20:
                    action20();
                    break;
                case 21:
                    action21();
                    break;
                case 22:
                    action22();
                    break;
                case 23:
                    action23();
                    break;
                case 24:
                    action24();
                    break;
                case 25:
                    action25();
                    break;
                case 26:
                    action26();
                    break;
                case 27:
                    action27();
                    break;
                case 28:
                    action28();
                    break;
                case 29:
                    action29();
                    break;
                case 30:
                    action30();
                    break;
                case 31:
                    action31();
                    break;
                case 32:
                    action32();
                    break;
                case 33:
                    action33();
                    break;
                case 34:
                    action34();
                    break;
                case 35:
                    action35();
                    break;
                case 36:
                    action36();
                    break;
                case 37:
                    action37();
                    break;
                case 38:
                    action38();
                    break;
                case 39:
                    action39();
                    break;
                case 40:
                    action40();
                    break;
                case 41:
                    action41();
                    break;
                case 42:
                    action42();
                    break;
                case 43:
                    action43();
                    break;
                case 44:
                    action44();
                    break;
                case 45:
                    action45();
                    break;
                case 46:
                    action46();
                    break;
                case 47:
                    action47();
                    break;
                case 48:
                    action48();
                    break;
                case 49:
                    action49();
                    break;
                case 50:
                    action50();
                    break;
                case 51:
                    action51();
                    break;
                case 52:
                    action52();
                    break;
                case 53:
                    action53();
                    break;
                case 54:
                    action54();
                    break;
                case 55:
                    action55();
                    break;
                case 56:
                    action56();
                    break;
                case 57:
                    action57();
                    break;
                case 58:
                    action58();
                    break;
                case 59:
                    action59();
                    break;
                case 60:
                    action60();
                    break;
                case 61:
                    action61();
                    break;
                case 62:
                    action62();
                    break;
                case 63:
                    action63();
                    break;
                case 64:
                    action64();
                    break;
                case 65:
                    action65();
                    break;
                case 66:
                    action66();
                    break;
                case 67:
                    action67();
                    break;
                case 68:
                    action68();
                    break;
                case 69:
                    action69();
                    break;
                case 70:
                    action70();
                    break;
                case 71:
                    action71();
                    break;
                case 72:
                    action72();
                    break;
                case 73:
                    action73();
                    break;
                case 74:
                    action74();
                    break;
                case 75:
                    action75();
                    break;
                case 76:
                    action76();
                    break;
                case 77:
                    action77();
                    break;
                case 78:
                    action78();
                    break;
                case 79:
                    action79();
                    break;
                case 80:
                    action80();
                    break;
                case 81:
                    action81();
                    break;
                case 82:
                    action82();
                    break;
                case 83:
                    action83();
                    break;
                case 84:
                    action84();
                    break;
                case 85:
                    action85();
                    break;
                case 86:
                    action86();
                    break;
                case 87:
                    action87();
                    break;
                case 88:
                    action88();
                    break;
                case 89:
                    action89();
                    break;
                case 90:
                    action90();
                    break;
                case 91:
                    action91();
                    break;
                case 92:
                    action92();
                    break;
                case 93:
                    action93();
                    break;
                case 94:
                    action94();
                    break;
                case 95:
                    action95();
                    break;
                case 96:
                    action96();
                    break;
                case 97:
                    action97();
                    break;
                case 98:
                    action98();
                    break;
                case 99:
                    action99();
                    break;
                case 100:
                    action100();
                    break;
                case 101:
                    action101();
                    break;
                case 102:
                    action102();
                    break;
                case 103:
                    action103();
                    break;
                case 104:
                    action104();
                    break;
                case 105:
                    action105();
                    break;
                case 106:
                    action106();
                    break;
                case 107:
                    action107();
                    break;
                case 108:
                    action108();
                    break;
                case 109:
                    action109();
                    break;
                case 110:
                    action110();
                    break;
                case 111:
                    action111();
                    break;
                case 112:
                    action112();
                    break;
                case 113:
                    action113();
                    break;
                case 114:
                    action114();
                    break;
                case 115:
                    action115();
                    break;
                case 116:
                    action116();
                    break;
                case 117:
                    action117();
                    break;
                case 118:
                    action118();
                    break;
                case 119:
                    action119();
                    break;
                case 120:
                    action120();
                    break;
                case 121:
                    action121();
                    break;
                case 122:
                    action122();
                    break;
                case 123:
                    action123();
                    break;
                case 124:
                    action124();
                    break;
                case 125:
                    action125();
                    break;
                case 126:
                    action126();
                    break;
                case 127:
                    action127();
                    break;
                case 128:
                    action128();
                    break;
                case 129:
                    action129();
                    break;
                case 130:
                    action130();
                    break;
                case 131:
                    action131();
                    break;
                case 132:
                    action132();
                    break;
                case 133:
                    action133();
                    break;
                case 134:
                    action134();
                    break;
                case 135:
                    action135();
                    break;
                case 136:
                    action136();
                    break;
                case 137:
                    action137();
                    break;
                case 138:
                    action138();
                    break;
                case 139:
                    action139();
                    break;
                case 140:
                    action140();
                    break;
                case 141:
                    action141();
                    break;
                case 142:
                    action142();
                    break;
                case 143:
                    action143();
                    break;
                case 144:
                    action144();
                    break;
                case 145:
                    action145();
                    break;
                case 146:
                    action146();
                    break;
                case 147:
                    action147();
                    break;
                case 148:
                    action148();
                    break;
                case 149:
                    action149();
                    break;
                case 150:
                    action150();
                    break;
                case 151:
                    action151();
                    break;
                case 152:
                    action152();
                    break;
                case 153:
                    action153();
                    break;
                case 154:
                    action154();
                    break;
                case 155:
                    action155();
                    break;
                case 156:
                    action156();
                    break;
                case 157:
                    action157();
                    break;
                case 158:
                    action158();
                    break;
                case 159:
                    action159();
                    break;
                case 160:
                    action160();
                    break;
                case 161:
                    action161();
                    break;
                case 162:
                    action162();
                    break;
                case 163:
                    action163();
                    break;
                case 164:
                    action164();
                    break;
                case 165:
                    action165();
                    break;
                case 166:
                    action166();
                    break;
                case 167:
                    action167();
                    break;
                case 168:
                    action168();
                    break;
                case 169:
                    action169();
                    break;
                case 170:
                    action170();
                    break;
                case 171:
                    action171();
                    break;
                case 172:
                    action172();
                    break;
                case 173:
                    action173();
                    break;
                case 174:
                    action174();
                    break;
                case 175:
                    action175();
                    break;
                case 176:
                    action176();
                    break;
                case 177:
                    action177();
                    break;
                case 178:
                    action178();
                    break;
                case 179:
                    action179();
                    break;
                case 180:
                    action180();
                    break;
                case 181:
                    action181();
                    break;
                case 182:
                    action182();
                    break;
                case 183:
                    action183();
                    break;
                case 184:
                    action184();
                    break;
                case 185:
                    action185();
                    break;
                case 186:
                    action186();
                    break;
                case 187:
                    action187();
                    break;
                case 188:
                    action188();
                    break;
                case 189:
                    action189();
                    break;
                case 190:
                    action190();
                    break;
                case 191:
                    action191();
                    break;
                case 192:
                    action192();
                    break;
                case 193:
                    action193();
                    break;
                case 194:
                    action194();
                    break;
                case 195:
                    action195();
                    break;
                case 196:
                    action196();
                    break;
                case 197:
                    action197();
                    break;
                case 198:
                    action198();
                    break;
                case 199:
                    action199();
                    break;
                case 200:
                    action200();
                    break;
                case 201:
                    action201();
                    break;
                case 202:
                    action202();
                    break;
                case 203:
                    action203();
                    break;
                case 204:
                    action204();
                    break;
                case 205:
                    action205();
                    break;
                case 206:
                    action206();
                    break;
                case 207:
                    action207();
                    break;
                case 208:
                    action208();
                    break;
                case 209:
                    action209();
                    break;
                case 210:
                    action210();
                    break;
                case 211:
                    action211();
                    break;
                case 212:
                    action212();
                    break;
                case 213:
                    action213();
                    break;
                case 214:
                    action214();
                    break;
                case 215:
                    action215();
                    break;
                case 216:
                    action216();
                    break;
                case 217:
                    action217();
                    break;
                case 218:
                    action218();
                    break;
                case 219:
                    action219();
                    break;
                case 220:
                    action220();
                    break;
                case 221:
                    action221();
                    break;
                case 222:
                    action222();
                    break;
                case 223:
                    action223();
                    break;
                case 224:
                    action224();
                    break;
                case 225:
                    action225();
                    break;
                case 226:
                    action226();
                    break;
                case 227:
                    action227();
                    break;
                case 228:
                    action228();
                    break;
                case 229:
                    action229();
                    break;
                case 230:
                    action230();
                    break;
                case 231:
                    action231();
                    break;
                case 232:
                    action232();
                    break;
                case 233:
                    action233();
                    break;
                case 234:
                    action234();
                    break;
                case 235:
                    action235();
                    break;
                default:
                    String msg = "Unknown parser state: " + state;
                    throw new RuntimeException(msg);
            }

            // Accept action.
            if (accept) {
                return acceptObject;
            }

            // Shift action.
            if (!reduce) {
                continue;
            }

            // Perform goto (as part of a reduce action).
            switch (reduceState) {
                case 0:
                    goto0();
                    break;
                case 1:
                    goto1();
                    break;
                case 2:
                    goto2();
                    break;
                case 3:
                    goto3();
                    break;
                case 4:
                    goto4();
                    break;
                case 5:
                    goto5();
                    break;
                case 6:
                    goto6();
                    break;
                case 7:
                    goto7();
                    break;
                case 8:
                    goto8();
                    break;
                case 9:
                    goto9();
                    break;
                case 10:
                    goto10();
                    break;
                case 11:
                    goto11();
                    break;
                case 12:
                    goto12();
                    break;
                case 13:
                    goto13();
                    break;
                case 14:
                    goto14();
                    break;
                case 15:
                    goto15();
                    break;
                case 16:
                    goto16();
                    break;
                case 17:
                    goto17();
                    break;
                case 18:
                    goto18();
                    break;
                case 19:
                    goto19();
                    break;
                case 20:
                    goto20();
                    break;
                case 21:
                    goto21();
                    break;
                case 22:
                    goto22();
                    break;
                case 23:
                    goto23();
                    break;
                case 24:
                    goto24();
                    break;
                case 25:
                    goto25();
                    break;
                case 26:
                    goto26();
                    break;
                case 27:
                    goto27();
                    break;
                case 28:
                    goto28();
                    break;
                case 29:
                    goto29();
                    break;
                case 30:
                    goto30();
                    break;
                case 31:
                    goto31();
                    break;
                case 32:
                    goto32();
                    break;
                case 33:
                    goto33();
                    break;
                case 34:
                    goto34();
                    break;
                case 35:
                    goto35();
                    break;
                case 36:
                    goto36();
                    break;
                case 37:
                    goto37();
                    break;
                case 38:
                    goto38();
                    break;
                case 39:
                    goto39();
                    break;
                case 40:
                    goto40();
                    break;
                case 41:
                    goto41();
                    break;
                case 42:
                    goto42();
                    break;
                case 43:
                    goto43();
                    break;
                case 44:
                    goto44();
                    break;
                case 45:
                    goto45();
                    break;
                case 46:
                    goto46();
                    break;
                case 47:
                    goto47();
                    break;
                case 48:
                    goto48();
                    break;
                case 49:
                    goto49();
                    break;
                case 50:
                    goto50();
                    break;
                case 51:
                    goto51();
                    break;
                case 52:
                    goto52();
                    break;
                case 53:
                    goto53();
                    break;
                case 54:
                    goto54();
                    break;
                case 55:
                    goto55();
                    break;
                case 56:
                    goto56();
                    break;
                case 57:
                    goto57();
                    break;
                case 58:
                    goto58();
                    break;
                case 59:
                    goto59();
                    break;
                case 60:
                    goto60();
                    break;
                case 61:
                    goto61();
                    break;
                case 62:
                    goto62();
                    break;
                case 63:
                    goto63();
                    break;
                case 64:
                    goto64();
                    break;
                case 65:
                    goto65();
                    break;
                case 66:
                    goto66();
                    break;
                case 67:
                    goto67();
                    break;
                case 68:
                    goto68();
                    break;
                case 69:
                    goto69();
                    break;
                case 70:
                    goto70();
                    break;
                case 71:
                    goto71();
                    break;
                case 72:
                    goto72();
                    break;
                case 73:
                    goto73();
                    break;
                case 74:
                    goto74();
                    break;
                case 75:
                    goto75();
                    break;
                case 76:
                    goto76();
                    break;
                case 77:
                    goto77();
                    break;
                case 78:
                    goto78();
                    break;
                case 79:
                    goto79();
                    break;
                case 80:
                    goto80();
                    break;
                case 81:
                    goto81();
                    break;
                case 82:
                    goto82();
                    break;
                case 83:
                    goto83();
                    break;
                case 84:
                    goto84();
                    break;
                case 85:
                    goto85();
                    break;
                case 86:
                    goto86();
                    break;
                case 87:
                    goto87();
                    break;
                case 88:
                    goto88();
                    break;
                case 89:
                    goto89();
                    break;
                case 90:
                    goto90();
                    break;
                case 91:
                    goto91();
                    break;
                case 92:
                    goto92();
                    break;
                case 93:
                    goto93();
                    break;
                case 94:
                    goto94();
                    break;
                case 95:
                    goto95();
                    break;
                case 96:
                    goto96();
                    break;
                case 97:
                    goto97();
                    break;
                case 98:
                    goto98();
                    break;
                case 99:
                    goto99();
                    break;
                case 100:
                    goto100();
                    break;
                case 101:
                    goto101();
                    break;
                case 102:
                    goto102();
                    break;
                case 103:
                    goto103();
                    break;
                case 104:
                    goto104();
                    break;
                case 105:
                    goto105();
                    break;
                case 106:
                    goto106();
                    break;
                case 107:
                    goto107();
                    break;
                case 108:
                    goto108();
                    break;
                case 109:
                    goto109();
                    break;
                case 110:
                    goto110();
                    break;
                case 111:
                    goto111();
                    break;
                case 112:
                    goto112();
                    break;
                case 113:
                    goto113();
                    break;
                case 114:
                    goto114();
                    break;
                case 115:
                    goto115();
                    break;
                case 116:
                    goto116();
                    break;
                case 117:
                    goto117();
                    break;
                case 118:
                    goto118();
                    break;
                case 119:
                    goto119();
                    break;
                case 120:
                    goto120();
                    break;
                case 121:
                    goto121();
                    break;
                case 122:
                    goto122();
                    break;
                case 123:
                    goto123();
                    break;
                case 124:
                    goto124();
                    break;
                case 125:
                    goto125();
                    break;
                case 126:
                    goto126();
                    break;
                case 127:
                    goto127();
                    break;
                case 128:
                    goto128();
                    break;
                case 129:
                    goto129();
                    break;
                case 130:
                    goto130();
                    break;
                case 131:
                    goto131();
                    break;
                case 132:
                    goto132();
                    break;
                case 133:
                    goto133();
                    break;
                case 134:
                    goto134();
                    break;
                case 135:
                    goto135();
                    break;
                case 136:
                    goto136();
                    break;
                case 137:
                    goto137();
                    break;
                case 138:
                    goto138();
                    break;
                case 139:
                    goto139();
                    break;
                case 140:
                    goto140();
                    break;
                case 141:
                    goto141();
                    break;
                case 142:
                    goto142();
                    break;
                case 143:
                    goto143();
                    break;
                case 144:
                    goto144();
                    break;
                case 145:
                    goto145();
                    break;
                case 146:
                    goto146();
                    break;
                case 147:
                    goto147();
                    break;
                case 148:
                    goto148();
                    break;
                case 149:
                    goto149();
                    break;
                case 150:
                    goto150();
                    break;
                case 151:
                    goto151();
                    break;
                case 152:
                    goto152();
                    break;
                case 153:
                    goto153();
                    break;
                case 154:
                    goto154();
                    break;
                case 155:
                    goto155();
                    break;
                case 156:
                    goto156();
                    break;
                case 157:
                    goto157();
                    break;
                case 158:
                    goto158();
                    break;
                case 159:
                    goto159();
                    break;
                case 160:
                    goto160();
                    break;
                case 161:
                    goto161();
                    break;
                case 162:
                    goto162();
                    break;
                case 163:
                    goto163();
                    break;
                case 164:
                    goto164();
                    break;
                case 165:
                    goto165();
                    break;
                case 166:
                    goto166();
                    break;
                case 167:
                    goto167();
                    break;
                case 168:
                    goto168();
                    break;
                case 169:
                    goto169();
                    break;
                case 170:
                    goto170();
                    break;
                case 171:
                    goto171();
                    break;
                case 172:
                    goto172();
                    break;
                case 173:
                    goto173();
                    break;
                case 174:
                    goto174();
                    break;
                case 175:
                    goto175();
                    break;
                case 176:
                    goto176();
                    break;
                case 177:
                    goto177();
                    break;
                case 178:
                    goto178();
                    break;
                case 179:
                    goto179();
                    break;
                case 180:
                    goto180();
                    break;
                case 181:
                    goto181();
                    break;
                case 182:
                    goto182();
                    break;
                case 183:
                    goto183();
                    break;
                case 184:
                    goto184();
                    break;
                case 185:
                    goto185();
                    break;
                case 186:
                    goto186();
                    break;
                case 187:
                    goto187();
                    break;
                case 188:
                    goto188();
                    break;
                case 189:
                    goto189();
                    break;
                case 190:
                    goto190();
                    break;
                case 191:
                    goto191();
                    break;
                case 192:
                    goto192();
                    break;
                case 193:
                    goto193();
                    break;
                case 194:
                    goto194();
                    break;
                case 195:
                    goto195();
                    break;
                case 196:
                    goto196();
                    break;
                case 197:
                    goto197();
                    break;
                case 198:
                    goto198();
                    break;
                case 199:
                    goto199();
                    break;
                case 200:
                    goto200();
                    break;
                case 201:
                    goto201();
                    break;
                case 202:
                    goto202();
                    break;
                case 203:
                    goto203();
                    break;
                case 204:
                    goto204();
                    break;
                case 205:
                    goto205();
                    break;
                case 206:
                    goto206();
                    break;
                case 207:
                    goto207();
                    break;
                case 208:
                    goto208();
                    break;
                case 209:
                    goto209();
                    break;
                case 210:
                    goto210();
                    break;
                case 211:
                    goto211();
                    break;
                case 212:
                    goto212();
                    break;
                case 213:
                    goto213();
                    break;
                case 214:
                    goto214();
                    break;
                case 215:
                    goto215();
                    break;
                case 216:
                    goto216();
                    break;
                case 217:
                    goto217();
                    break;
                case 218:
                    goto218();
                    break;
                case 219:
                    goto219();
                    break;
                case 220:
                    goto220();
                    break;
                case 221:
                    goto221();
                    break;
                case 222:
                    goto222();
                    break;
                case 223:
                    goto223();
                    break;
                case 224:
                    goto224();
                    break;
                case 225:
                    goto225();
                    break;
                case 226:
                    goto226();
                    break;
                case 227:
                    goto227();
                    break;
                case 228:
                    goto228();
                    break;
                case 229:
                    goto229();
                    break;
                case 230:
                    goto230();
                    break;
                case 231:
                    goto231();
                    break;
                case 232:
                    goto232();
                    break;
                case 233:
                    goto233();
                    break;
                case 234:
                    goto234();
                    break;
                case 235:
                    goto235();
                    break;
                default:
                    String msg = fmt("Unknown reduce state %d.", reduceState);
                    throw new RuntimeException(msg);
            }
        }
    }

    /**
     * Parser action code for parser state 0.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action0() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 1.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action1() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInIoTool : ERRKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInIoTool1((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 2.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action2() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInIoTool : ERRLNKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInIoTool2((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 3.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action3() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInIoTool : OUTKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInIoTool3((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 4.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action4() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInIoTool : OUTLNKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInIoTool4((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 5.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action5() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInGenericTool : APPKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInGenericTool1((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 6.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action6() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInGenericTool : EXECKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInGenericTool2((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 7.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action7() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInGenericTool : TOOLDEFKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInGenericTool3((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 8.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action8() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : ABSPATHKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool01((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 9.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action9() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : BASENAMEKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool02((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 10.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action10() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : CHDIRKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool03((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 11.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action11() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : CHFILEEXTKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool04((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 12.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action12() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : CURDIRKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool05((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 13.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action13() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : DIRNAMEKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool06((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 14.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action14() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : FILEEXTKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool07((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 15.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action15() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : HASFILEEXTKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool08((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 16.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action16() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : PATHJOINKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool09((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 17.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action17() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInPathTool : SCRIPTPATHKW;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInPathTool10((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 18.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action18() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : CPDIRKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool01((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 19.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action19() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : CPFILEKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool02((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 20.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action20() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : DIFFKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool03((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 21.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action21() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : EXISTSKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool04((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 22.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action22() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : FILENEWERKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool05((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 23.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action23() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : FILESIZEKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool06((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 24.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action24() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : FINDKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool07((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 25.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action25() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : ISDIRKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool08((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 26.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action26() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : ISFILEKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool09((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 27.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action27() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : MKDIRKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool10((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 28.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action28() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : MVDIRKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool11((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 29.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action29() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : MVFILEKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool12((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 30.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action30() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : READLINESKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool13((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 31.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action31() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : RMDIRKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool14((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 32.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action32() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : RMFILEKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool15((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 33.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action33() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInFileTool : WRITEFILEKW;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInFileTool16((Token)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 34.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action34() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : ABSKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool01((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 35.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action35() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : CEILKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool02((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 36.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action36() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : CONTAINSKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool03((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 37.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action37() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : DELKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool04((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 38.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action38() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : DELIDXKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool05((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 39.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action39() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : EMPTYKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool06((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 40.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action40() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : ENDSWITHKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool07((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 41.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action41() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : ENTRIESKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool08((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 42.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action42() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : ENUMERATEKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool09((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 43.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action43() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : FLOORKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool10((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 44.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action44() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : FMTKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool11((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 45.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action45() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : INDEXOFKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool12((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 46.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action46() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : JOINKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool13((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 47.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action47() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : KEYSKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool14((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 48.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action48() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : LASTINDEXOFKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool15((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 49.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action49() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : LNKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool16((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 50.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action50() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : LOGKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool17((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 51.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action51() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : LOWERKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool18((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 52.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action52() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : LTRIMKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool19((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 53.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action53() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : MAXKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool20((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 54.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action54() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : MINKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool21((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 55.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action55() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : POWKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool22((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 56.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action56() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : RANGEKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool23((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 57.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action57() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : REPLACEKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool24((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 58.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action58() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : REVERSEKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool25((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 59.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action59() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : ROUNDKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool26((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 60.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action60() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : RTRIMKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool27((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 61.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action61() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : SIZEKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool28((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 62.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action62() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : SORTEDKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool29((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 63.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action63() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : SPLITKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool30((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 64.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action64() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : SQRTKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool31((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 65.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action65() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : STARTSWITHKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool32((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 66.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action66() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : STRKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool33((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 67.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action67() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : STRDUPKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool34((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 68.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action68() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : SUBSETKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool35((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 69.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action69() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : TRIMKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool36((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 70.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action70() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : UPPERKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool37((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 71.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action71() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInDataTool : VALUESKW;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                Token o = hooks.parseBuiltInDataTool38((Token)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 72.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action72() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce Name : IDENTIFIERTK;
                doReduce1(token, 22);
                Object o1 = doReduce2();

                Token o = hooks.parseName1((Token)o1);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 73.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action73() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce Name : RELATIVENAMETK;
                doReduce1(token, 22);
                Object o1 = doReduce2();

                Token o = hooks.parseName2((Token)o1);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 74.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action74() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInTool : BuiltInDataTool;
                doReduce1(token, 20);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseBuiltInTool5((Token)o1);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 75.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action75() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInTool : BuiltInFileTool;
                doReduce1(token, 20);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseBuiltInTool4((Token)o1);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 76.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action76() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInTool : BuiltInGenericTool;
                doReduce1(token, 20);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseBuiltInTool2((Token)o1);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 77.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action77() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInTool : BuiltInIoTool;
                doReduce1(token, 20);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseBuiltInTool1((Token)o1);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 78.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action78() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce BuiltInTool : BuiltInPathTool;
                doReduce1(token, 20);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseBuiltInTool3((Token)o1);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 79.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action79() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce ToolRef : BuiltInTool;
                doReduce1(token, 19);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseToolRef1((ToolRef)o1);

                reduce = true;
                reduceNonTerminal = 19;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 80.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action80() throws IOException {
        switch (token.id) {
            case 121: {
                // Reduce ToolRef : Name;
                doReduce1(token, 19);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseToolRef2((Token)o1);

                reduce = true;
                reduceNonTerminal = 19;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 81.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action81() throws IOException {
        switch (token.id) {
            case 136: {
                // Accept.
                Object rslt = doAccept(token);
                accept = true;
                acceptObject = (ToolInvokeExpression)rslt;
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 82.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action82() throws IOException {
        switch (token.id) {
            case 121: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 83.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action83() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 120: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 128: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 84.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action84() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : FALSEKW;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor02((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 85.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action85() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : NULLKW;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor05((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 86.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action86() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : TRUEKW;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor01((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 87.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action87() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 88.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action88() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 109: {
                // Shift 221.
                token = doShift(token, 221);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 89.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action89() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 90.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action90() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 91.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action91() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127:
            case 136: {
                // Reduce ToolInvokeExpression : ToolRef PAROPENTK PARCLOSETK;
                doReduce1(token, 18);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ToolInvokeExpression o = hooks.parseToolInvokeExpression2((ToolRef)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 18;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 92.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action92() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 93.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action93() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 94.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action94() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 126: {
                // Shift 155.
                token = doShift(token, 155);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 95.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action95() throws IOException {
        switch (token.id) {
            case 113: {
                // Shift 153.
                token = doShift(token, 153);
                return;
            }

            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 108:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 125:
            case 127: {
                // Reduce Name : IDENTIFIERTK;
                doReduce1(token, 22);
                Object o1 = doReduce2();

                Token o = hooks.parseName1((Token)o1);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 96.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action96() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : NUMBERTK;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor03((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 97.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action97() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : DOUBLETK;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor04((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 98.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action98() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : STRINGTK;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor06((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 99.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action99() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : AddExpression;
                doReduce1(token, 11);
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 100.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action100() throws IOException {
        switch (token.id) {
            case 100: {
                // Shift 117.
                token = doShift(token, 117);
                return;
            }

            case 104:
            case 107:
            case 108:
            case 109:
            case 120:
            case 126: {
                // Reduce Expression : AndExpression;
                doReduce1(token, 9);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 101.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action101() throws IOException {
        switch (token.id) {
            case 112: {
                // Shift 119.
                token = doShift(token, 119);
                return;
            }

            case 114: {
                // Shift 120.
                token = doShift(token, 120);
                return;
            }

            case 115: {
                // Shift 121.
                token = doShift(token, 121);
                return;
            }

            case 116: {
                // Shift 122.
                token = doShift(token, 122);
                return;
            }

            case 117: {
                // Shift 123.
                token = doShift(token, 123);
                return;
            }

            case 119: {
                // Shift 124.
                token = doShift(token, 124);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 120:
            case 126: {
                // Reduce AndExpression : CompareExpression;
                doReduce1(token, 10);
                Object o1 = doReduce2();

                Expression o = hooks.parseAndExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 10;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 102.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action102() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 120: {
                // Reduce ToolArgs : Expression;
                doReduce1(token, 21);
                Object o1 = doReduce2();

                List<ToolArgument> o = hooks.parseToolArgs1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 21;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 103.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action103() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ProjExpression : ExpressionFactor;
                doReduce1(token, 15);
                Object o1 = doReduce2();

                Expression o = hooks.parseProjExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 104.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action104() throws IOException {
        switch (token.id) {
            case 101: {
                // Shift 129.
                token = doShift(token, 129);
                return;
            }

            case 102: {
                // Shift 130.
                token = doShift(token, 130);
                return;
            }

            case 105: {
                // Shift 131.
                token = doShift(token, 131);
                return;
            }

            case 125: {
                // Shift 132.
                token = doShift(token, 132);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 126: {
                // Reduce AddExpression : MulExpression;
                doReduce1(token, 12);
                Object o1 = doReduce2();

                Expression o = hooks.parseAddExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 12;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 105.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action105() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : Name;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor16((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            case 121: {
                // Reduce ToolRef : Name;
                doReduce1(token, 19);
                Object o1 = doReduce2();

                ToolRef o = hooks.parseToolRef2((Token)o1);

                reduce = true;
                reduceNonTerminal = 19;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 106.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action106() throws IOException {
        switch (token.id) {
            case 127: {
                // Shift 145.
                token = doShift(token, 145);
                return;
            }

            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce UnaryExpression : ProjExpression;
                doReduce1(token, 14);
                Object o1 = doReduce2();

                Expression o = hooks.parseUnaryExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 14;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 107.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action107() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 120: {
                // Reduce OptComma : ;
                doReduce1(token, 23);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 108.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action108() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : ToolInvokeExpression;
                doReduce1(token, 16);
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor15((ToolInvokeExpression)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 109.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action109() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce MulExpression : UnaryExpression;
                doReduce1(token, 13);
                Object o1 = doReduce2();

                Expression o = hooks.parseMulExpression1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 110.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action110() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 120: {
                // Reduce OptComma : COMMATK;
                doReduce1(token, 23);
                Object o1 = doReduce2();

                Token o = hooks.parseOptComma2((Token)o1);

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 111.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action111() throws IOException {
        switch (token.id) {
            case 120: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 112.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action112() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127:
            case 136: {
                // Reduce ToolInvokeExpression : ToolRef PAROPENTK ToolArgs OptComma PARCLOSETK;
                doReduce1(token, 18);
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ToolInvokeExpression o = hooks.parseToolInvokeExpression1((ToolRef)o1, (Token)o2, (List<ToolArgument>)o3, (Token)o4);

                reduce = true;
                reduceNonTerminal = 18;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 113.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action113() throws IOException {
        switch (token.id) {
            case 113: {
                // Shift 143.
                token = doShift(token, 143);
                return;
            }

            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 108:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 125:
            case 127: {
                // Reduce Name : IDENTIFIERTK;
                doReduce1(token, 22);
                Object o1 = doReduce2();

                Token o = hooks.parseName1((Token)o1);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 114.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action114() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 120: {
                // Reduce ToolArgs : ToolArgs COMMATK Expression;
                doReduce1(token, 21);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ToolArgument> o = hooks.parseToolArgs3((List<ToolArgument>)o1, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 21;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 115.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action115() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 116.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action116() throws IOException {
        switch (token.id) {
            case 100: {
                // Shift 117.
                token = doShift(token, 117);
                return;
            }

            case 104:
            case 107:
            case 108:
            case 109:
            case 120:
            case 126: {
                // Reduce Expression : Expression ORKW AndExpression;
                doReduce1(token, 9);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpression2((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 117.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action117() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 118.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action118() throws IOException {
        switch (token.id) {
            case 112: {
                // Shift 119.
                token = doShift(token, 119);
                return;
            }

            case 114: {
                // Shift 120.
                token = doShift(token, 120);
                return;
            }

            case 115: {
                // Shift 121.
                token = doShift(token, 121);
                return;
            }

            case 116: {
                // Shift 122.
                token = doShift(token, 122);
                return;
            }

            case 117: {
                // Shift 123.
                token = doShift(token, 123);
                return;
            }

            case 119: {
                // Shift 124.
                token = doShift(token, 124);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 120:
            case 126: {
                // Reduce AndExpression : AndExpression ANDKW CompareExpression;
                doReduce1(token, 10);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseAndExpression2((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 10;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 119.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action119() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 120.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action120() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 121.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action121() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 122.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action122() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 123.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action123() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 124.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action124() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 125.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action125() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : CompareExpression NETK AddExpression;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression5((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 126.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action126() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 127.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action127() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 128.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action128() throws IOException {
        switch (token.id) {
            case 101: {
                // Shift 129.
                token = doShift(token, 129);
                return;
            }

            case 102: {
                // Shift 130.
                token = doShift(token, 130);
                return;
            }

            case 105: {
                // Shift 131.
                token = doShift(token, 131);
                return;
            }

            case 125: {
                // Shift 132.
                token = doShift(token, 132);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 126: {
                // Reduce AddExpression : AddExpression PLUSTK MulExpression;
                doReduce1(token, 12);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseAddExpression3((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 12;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 129.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action129() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 130.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action130() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 131.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action131() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 132.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action132() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 133.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action133() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce MulExpression : MulExpression SLASHTK UnaryExpression;
                doReduce1(token, 13);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseMulExpression3((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 134.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action134() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce MulExpression : MulExpression ASTERISKTK UnaryExpression;
                doReduce1(token, 13);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseMulExpression2((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 135.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action135() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce MulExpression : MulExpression MODKW UnaryExpression;
                doReduce1(token, 13);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseMulExpression5((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 136.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action136() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce MulExpression : MulExpression DIVKW UnaryExpression;
                doReduce1(token, 13);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseMulExpression4((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 137.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action137() throws IOException {
        switch (token.id) {
            case 101: {
                // Shift 129.
                token = doShift(token, 129);
                return;
            }

            case 102: {
                // Shift 130.
                token = doShift(token, 130);
                return;
            }

            case 105: {
                // Shift 131.
                token = doShift(token, 131);
                return;
            }

            case 125: {
                // Shift 132.
                token = doShift(token, 132);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 126: {
                // Reduce AddExpression : AddExpression MINUSTK MulExpression;
                doReduce1(token, 12);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseAddExpression2((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 12;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 138.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action138() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : CompareExpression LTTK AddExpression;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression2((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 139.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action139() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : CompareExpression LETK AddExpression;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression3((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 140.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action140() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : CompareExpression GTTK AddExpression;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression7((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 141.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action141() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : CompareExpression GETK AddExpression;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression6((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 142.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action142() throws IOException {
        switch (token.id) {
            case 118: {
                // Shift 126.
                token = doShift(token, 126);
                return;
            }

            case 122: {
                // Shift 127.
                token = doShift(token, 127);
                return;
            }

            case 100:
            case 104:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 119:
            case 120:
            case 126: {
                // Reduce CompareExpression : CompareExpression EQEQTK AddExpression;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseCompareExpression4((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 143.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action143() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 144.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action144() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 120: {
                // Reduce ToolArgs : ToolArgs COMMATK IDENTIFIERTK EQTK Expression;
                doReduce1(token, 21);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ToolArgument> o = hooks.parseToolArgs4((List<ToolArgument>)o1, (Token)o3, (Expression)o5);

                reduce = true;
                reduceNonTerminal = 21;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 145.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action145() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 107: {
                // Reduce OptExpression : ;
                doReduce1(token, 8);
                Expression o = hooks.parseOptExpression1();

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 146.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action146() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 126: {
                // Shift 152.
                token = doShift(token, 152);
                return;
            }

            case 107: {
                // Reduce OptExpression : Expression;
                doReduce1(token, 8);
                Object o1 = doReduce2();

                Expression o = hooks.parseOptExpression2((Expression)o1);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 147.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action147() throws IOException {
        switch (token.id) {
            case 107: {
                // Shift 148.
                token = doShift(token, 148);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 148.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action148() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 126: {
                // Reduce OptExpression : ;
                doReduce1(token, 8);
                Expression o = hooks.parseOptExpression1();

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 149.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action149() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 126: {
                // Reduce OptExpression : Expression;
                doReduce1(token, 8);
                Object o1 = doReduce2();

                Expression o = hooks.parseOptExpression2((Expression)o1);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 150.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action150() throws IOException {
        switch (token.id) {
            case 126: {
                // Shift 151.
                token = doShift(token, 151);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 151.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action151() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ProjExpression : ProjExpression SQOPENTK OptExpression COLONTK OptExpression SQCLOSETK;
                doReduce1(token, 15);
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseProjExpression3((Expression)o1, (Token)o2, (Expression)o3, (Expression)o5);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 152.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action152() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ProjExpression : ProjExpression SQOPENTK Expression SQCLOSETK;
                doReduce1(token, 15);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseProjExpression2((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 153.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action153() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 154.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action154() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 120: {
                // Reduce ToolArgs : IDENTIFIERTK EQTK Expression;
                doReduce1(token, 21);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ToolArgument> o = hooks.parseToolArgs2((Token)o1, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 21;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 155.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action155() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : SQOPENTK SQCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor08((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 156.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action156() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 120:
            case 126: {
                // Reduce Expressions : Expression;
                doReduce1(token, 7);
                Object o1 = doReduce2();

                List<Expression> o = hooks.parseExpressions1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 157.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action157() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 126: {
                // Reduce OptComma : ;
                doReduce1(token, 23);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 158.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action158() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 109:
            case 120:
            case 126: {
                // Reduce OptComma : COMMATK;
                doReduce1(token, 23);
                Object o1 = doReduce2();

                Token o = hooks.parseOptComma2((Token)o1);

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 159.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action159() throws IOException {
        switch (token.id) {
            case 126: {
                // Shift 160.
                token = doShift(token, 160);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 160.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action160() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : SQOPENTK Expressions OptComma SQCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor09((Token)o1, (List<Expression>)o2, (Token)o3);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 161.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action161() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 109:
            case 120:
            case 126: {
                // Reduce Expressions : Expressions COMMATK Expression;
                doReduce1(token, 7);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<Expression> o = hooks.parseExpressions2((List<Expression>)o1, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 162.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action162() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce UnaryExpression : PLUSTK UnaryExpression;
                doReduce1(token, 14);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseUnaryExpression3((Token)o1, (Expression)o2);

                reduce = true;
                reduceNonTerminal = 14;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 163.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action163() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108: {
                // Shift 164.
                token = doShift(token, 164);
                return;
            }

            case 120: {
                // Shift 165.
                token = doShift(token, 165);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 164.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action164() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 165.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action165() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : PAROPENTK Expression PARCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                Expression o = hooks.parseExpressionFactor14((Expression)o2);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 166.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action166() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 120: {
                // Reduce OptComma : ;
                doReduce1(token, 23);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 167.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action167() throws IOException {
        switch (token.id) {
            case 120: {
                // Shift 168.
                token = doShift(token, 168);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 168.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action168() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : PAROPENTK Expression COMMATK Expressions OptComma PARCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor13((Token)o1, (Expression)o2, (List<Expression>)o4, (Token)o5);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 169.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action169() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce UnaryExpression : MINUSTK UnaryExpression;
                doReduce1(token, 14);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseUnaryExpression2((Token)o1, (Expression)o2);

                reduce = true;
                reduceNonTerminal = 14;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 170.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action170() throws IOException {
        switch (token.id) {
            case 123: {
                // Shift 220.
                token = doShift(token, 220);
                return;
            }

            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : BOOLKW;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType01((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 171.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action171() throws IOException {
        switch (token.id) {
            case 123: {
                // Shift 219.
                token = doShift(token, 219);
                return;
            }

            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : DOUBLEKW;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType07((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 172.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action172() throws IOException {
        switch (token.id) {
            case 123: {
                // Shift 218.
                token = doShift(token, 218);
                return;
            }

            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : INTKW;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType03((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 173.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action173() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            case 123: {
                // Shift 215.
                token = doShift(token, 215);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 174.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action174() throws IOException {
        switch (token.id) {
            case 123: {
                // Shift 214.
                token = doShift(token, 214);
                return;
            }

            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : LONGKW;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType05((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 175.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action175() throws IOException {
        switch (token.id) {
            case 121: {
                // Shift 203.
                token = doShift(token, 203);
                return;
            }

            case 123: {
                // Shift 204.
                token = doShift(token, 204);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 176.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action176() throws IOException {
        switch (token.id) {
            case 123: {
                // Shift 202.
                token = doShift(token, 202);
                return;
            }

            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : OBJECTKW;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType19((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 177.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action177() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            case 123: {
                // Shift 199.
                token = doShift(token, 199);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 178.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action178() throws IOException {
        switch (token.id) {
            case 123: {
                // Shift 198.
                token = doShift(token, 198);
                return;
            }

            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : STRINGKW;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType09((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 179.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action179() throws IOException {
        switch (token.id) {
            case 121: {
                // Shift 184.
                token = doShift(token, 184);
                return;
            }

            case 123: {
                // Shift 185.
                token = doShift(token, 185);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 180.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action180() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : Name;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType21((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 181.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action181() throws IOException {
        switch (token.id) {
            case 115: {
                // Shift 182.
                token = doShift(token, 182);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 182.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action182() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 183.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action183() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : LTTK Type GTTK ExpressionFactor;
                doReduce1(token, 16);
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor07((Token)o1, (ToolDefType)o2, (Expression)o4);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 184.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action184() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 185.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action185() throws IOException {
        switch (token.id) {
            case 121: {
                // Shift 186.
                token = doShift(token, 186);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 186.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action186() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 187.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action187() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 188.
                token = doShift(token, 188);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 188.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action188() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 189.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action189() throws IOException {
        switch (token.id) {
            case 108:
            case 120: {
                // Reduce Types : Type;
                doReduce1(token, 5);
                Object o1 = doReduce2();

                List<ToolDefType> o = hooks.parseTypes1((ToolDefType)o1);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 190.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action190() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 191.
                token = doShift(token, 191);
                return;
            }

            case 120: {
                // Shift 192.
                token = doShift(token, 192);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 191.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action191() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 192.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action192() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : TUPLEKW QUESTIONTK PAROPENTK Type COMMATK Types PARCLOSETK;
                doReduce1(token, 6);
                doReduce2();
                Object o6 = doReduce2();
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType18((Token)o1, (ToolDefType)o4, (List<ToolDefType>)o6);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 193.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action193() throws IOException {
        switch (token.id) {
            case 108:
            case 120: {
                // Reduce Types : Types COMMATK Type;
                doReduce1(token, 5);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ToolDefType> o = hooks.parseTypes2((List<ToolDefType>)o1, (ToolDefType)o3);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 194.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action194() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 195.
                token = doShift(token, 195);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 195.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action195() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 196.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action196() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 191.
                token = doShift(token, 191);
                return;
            }

            case 120: {
                // Shift 197.
                token = doShift(token, 197);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 197.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action197() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : TUPLEKW PAROPENTK Type COMMATK Types PARCLOSETK;
                doReduce1(token, 6);
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType17((Token)o1, (ToolDefType)o3, (List<ToolDefType>)o5);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 198.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action198() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : STRINGKW QUESTIONTK;
                doReduce1(token, 6);
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType10((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 199.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action199() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 200.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action200() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : SETKW Type;
                doReduce1(token, 6);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType13((Token)o1, (ToolDefType)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 201.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action201() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : SETKW QUESTIONTK Type;
                doReduce1(token, 6);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType14((Token)o1, (ToolDefType)o3);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 202.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action202() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : OBJECTKW QUESTIONTK;
                doReduce1(token, 6);
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType20((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 203.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action203() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 204.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action204() throws IOException {
        switch (token.id) {
            case 121: {
                // Shift 205.
                token = doShift(token, 205);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 205.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action205() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 206.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action206() throws IOException {
        switch (token.id) {
            case 107: {
                // Shift 207.
                token = doShift(token, 207);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 207.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action207() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 208.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action208() throws IOException {
        switch (token.id) {
            case 120: {
                // Shift 209.
                token = doShift(token, 209);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 209.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action209() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : MAPKW QUESTIONTK PAROPENTK Type COLONTK Type PARCLOSETK;
                doReduce1(token, 6);
                doReduce2();
                Object o6 = doReduce2();
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType16((Token)o1, (ToolDefType)o4, (ToolDefType)o6);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 210.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action210() throws IOException {
        switch (token.id) {
            case 107: {
                // Shift 211.
                token = doShift(token, 211);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 211.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action211() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 212.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action212() throws IOException {
        switch (token.id) {
            case 120: {
                // Shift 213.
                token = doShift(token, 213);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 213.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action213() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : MAPKW PAROPENTK Type COLONTK Type PARCLOSETK;
                doReduce1(token, 6);
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType15((Token)o1, (ToolDefType)o3, (ToolDefType)o5);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 214.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action214() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : LONGKW QUESTIONTK;
                doReduce1(token, 6);
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType06((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 215.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action215() throws IOException {
        switch (token.id) {
            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 1: {
                // Shift 170.
                token = doShift(token, 170);
                return;
            }

            case 4: {
                // Shift 171.
                token = doShift(token, 171);
                return;
            }

            case 15: {
                // Shift 172.
                token = doShift(token, 172);
                return;
            }

            case 16: {
                // Shift 173.
                token = doShift(token, 173);
                return;
            }

            case 17: {
                // Shift 174.
                token = doShift(token, 174);
                return;
            }

            case 18: {
                // Shift 175.
                token = doShift(token, 175);
                return;
            }

            case 20: {
                // Shift 176.
                token = doShift(token, 176);
                return;
            }

            case 22: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 23: {
                // Shift 178.
                token = doShift(token, 178);
                return;
            }

            case 26: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 216.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action216() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : LISTKW Type;
                doReduce1(token, 6);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType11((Token)o1, (ToolDefType)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 217.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action217() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : LISTKW QUESTIONTK Type;
                doReduce1(token, 6);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType12((Token)o1, (ToolDefType)o3);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 218.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action218() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : INTKW QUESTIONTK;
                doReduce1(token, 6);
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType04((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 219.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action219() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : DOUBLEKW QUESTIONTK;
                doReduce1(token, 6);
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType08((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 220.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action220() throws IOException {
        switch (token.id) {
            case 107:
            case 108:
            case 115:
            case 120: {
                // Reduce Type : BOOLKW QUESTIONTK;
                doReduce1(token, 6);
                doReduce2();
                Object o1 = doReduce2();

                ToolDefType o = hooks.parseType02((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 221.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action221() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : CUROPENTK CURCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor10((Token)o1);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 222.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action222() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 107: {
                // Shift 233.
                token = doShift(token, 233);
                return;
            }

            case 108:
            case 109: {
                // Reduce Expressions : Expression;
                doReduce1(token, 7);
                Object o1 = doReduce2();

                List<Expression> o = hooks.parseExpressions1((Expression)o1);

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 223.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action223() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 109: {
                // Reduce OptComma : ;
                doReduce1(token, 23);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 224.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action224() throws IOException {
        switch (token.id) {
            case 108: {
                // Shift 225.
                token = doShift(token, 225);
                return;
            }

            case 109: {
                // Reduce OptComma : ;
                doReduce1(token, 23);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 225.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action225() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 109: {
                // Reduce OptComma : COMMATK;
                doReduce1(token, 23);
                Object o1 = doReduce2();

                Token o = hooks.parseOptComma2((Token)o1);

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 226.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action226() throws IOException {
        switch (token.id) {
            case 109: {
                // Shift 227.
                token = doShift(token, 227);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 227.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action227() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : CUROPENTK MapEntries OptComma CURCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor12((Token)o1, (List<MapEntry>)o2, (Token)o3);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 228.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action228() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 107: {
                // Shift 229.
                token = doShift(token, 229);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 229.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action229() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 230.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action230() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 109: {
                // Reduce MapEntries : MapEntries COMMATK Expression COLONTK Expression;
                doReduce1(token, 17);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<MapEntry> o = hooks.parseMapEntries2((List<MapEntry>)o1, (Expression)o3, (Token)o4, (Expression)o5);

                reduce = true;
                reduceNonTerminal = 17;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 231.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action231() throws IOException {
        switch (token.id) {
            case 109: {
                // Shift 232.
                token = doShift(token, 232);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 232.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action232() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126:
            case 127: {
                // Reduce ExpressionFactor : CUROPENTK Expressions OptComma CURCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseExpressionFactor11((Token)o1, (List<Expression>)o2, (Token)o3);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 233.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action233() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 30: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 31: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 32: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 33: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 34: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 35: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 36: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 37: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 38: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 39: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 40: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 41: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 43: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 44: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 45: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 46: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 47: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 48: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 49: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 50: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 51: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 52: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 53: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 54: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 55: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 56: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 57: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 58: {
                // Shift 30.
                token = doShift(token, 30);
                return;
            }

            case 59: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            case 60: {
                // Shift 32.
                token = doShift(token, 32);
                return;
            }

            case 61: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            case 62: {
                // Shift 34.
                token = doShift(token, 34);
                return;
            }

            case 63: {
                // Shift 35.
                token = doShift(token, 35);
                return;
            }

            case 64: {
                // Shift 36.
                token = doShift(token, 36);
                return;
            }

            case 65: {
                // Shift 37.
                token = doShift(token, 37);
                return;
            }

            case 66: {
                // Shift 38.
                token = doShift(token, 38);
                return;
            }

            case 67: {
                // Shift 39.
                token = doShift(token, 39);
                return;
            }

            case 68: {
                // Shift 40.
                token = doShift(token, 40);
                return;
            }

            case 69: {
                // Shift 41.
                token = doShift(token, 41);
                return;
            }

            case 70: {
                // Shift 42.
                token = doShift(token, 42);
                return;
            }

            case 71: {
                // Shift 43.
                token = doShift(token, 43);
                return;
            }

            case 72: {
                // Shift 44.
                token = doShift(token, 44);
                return;
            }

            case 73: {
                // Shift 45.
                token = doShift(token, 45);
                return;
            }

            case 74: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 75: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 76: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 77: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 78: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 79: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 80: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 81: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 82: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 83: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 84: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 85: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 86: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 87: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 88: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 89: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 90: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 91: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 92: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 93: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 94: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 95: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 96: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 97: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 98: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 99: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 128: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 129: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 9: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 19: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 25: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 103: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 110: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 117: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 118: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 121: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 122: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 127: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 130: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 131: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 132: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 234.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action234() throws IOException {
        switch (token.id) {
            case 104: {
                // Shift 115.
                token = doShift(token, 115);
                return;
            }

            case 108:
            case 109: {
                // Reduce MapEntries : Expression COLONTK Expression;
                doReduce1(token, 17);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<MapEntry> o = hooks.parseMapEntries1((Expression)o1, (Token)o2, (Expression)o3);

                reduce = true;
                reduceNonTerminal = 17;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 235.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action235() throws IOException {
        switch (token.id) {
            case 100:
            case 101:
            case 102:
            case 104:
            case 105:
            case 107:
            case 108:
            case 109:
            case 112:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 122:
            case 125:
            case 126: {
                // Reduce UnaryExpression : NOTKW UnaryExpression;
                doReduce1(token, 14);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                Expression o = hooks.parseUnaryExpression4((Token)o1, (Expression)o2);

                reduce = true;
                reduceNonTerminal = 14;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /** Parser goto code for parser state 0. */
    private final void goto0() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(81);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(80);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 1. */
    private final void goto1() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 2. */
    private final void goto2() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 3. */
    private final void goto3() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 4. */
    private final void goto4() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 5. */
    private final void goto5() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 6. */
    private final void goto6() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 7. */
    private final void goto7() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 8. */
    private final void goto8() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 9. */
    private final void goto9() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 10. */
    private final void goto10() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 11. */
    private final void goto11() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 12. */
    private final void goto12() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 13. */
    private final void goto13() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 14. */
    private final void goto14() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 15. */
    private final void goto15() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 16. */
    private final void goto16() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 17. */
    private final void goto17() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 18. */
    private final void goto18() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 19. */
    private final void goto19() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 20. */
    private final void goto20() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 21. */
    private final void goto21() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 22. */
    private final void goto22() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 23. */
    private final void goto23() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 24. */
    private final void goto24() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 25. */
    private final void goto25() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 26. */
    private final void goto26() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 27. */
    private final void goto27() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 28. */
    private final void goto28() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 29. */
    private final void goto29() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 30. */
    private final void goto30() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 31. */
    private final void goto31() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 32. */
    private final void goto32() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 33. */
    private final void goto33() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 34. */
    private final void goto34() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 35. */
    private final void goto35() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 36. */
    private final void goto36() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 37. */
    private final void goto37() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 38. */
    private final void goto38() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 39. */
    private final void goto39() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 40. */
    private final void goto40() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 41. */
    private final void goto41() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 42. */
    private final void goto42() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 43. */
    private final void goto43() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 44. */
    private final void goto44() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 45. */
    private final void goto45() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 46. */
    private final void goto46() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 47. */
    private final void goto47() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 48. */
    private final void goto48() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 49. */
    private final void goto49() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 50. */
    private final void goto50() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 51. */
    private final void goto51() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 52. */
    private final void goto52() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 53. */
    private final void goto53() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 54. */
    private final void goto54() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 55. */
    private final void goto55() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 56. */
    private final void goto56() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 57. */
    private final void goto57() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 58. */
    private final void goto58() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 59. */
    private final void goto59() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 60. */
    private final void goto60() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 61. */
    private final void goto61() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 62. */
    private final void goto62() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 63. */
    private final void goto63() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 64. */
    private final void goto64() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 65. */
    private final void goto65() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 66. */
    private final void goto66() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 67. */
    private final void goto67() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 68. */
    private final void goto68() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 69. */
    private final void goto69() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 70. */
    private final void goto70() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 71. */
    private final void goto71() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 72. */
    private final void goto72() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 73. */
    private final void goto73() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 74. */
    private final void goto74() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 75. */
    private final void goto75() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 76. */
    private final void goto76() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 77. */
    private final void goto77() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 78. */
    private final void goto78() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 79. */
    private final void goto79() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 80. */
    private final void goto80() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 81. */
    private final void goto81() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 82. */
    private final void goto82() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 83. */
    private final void goto83() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(102);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 21:
                // ToolArgs
                doGoto(107);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 84. */
    private final void goto84() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 85. */
    private final void goto85() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 86. */
    private final void goto86() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 87. */
    private final void goto87() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(235);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 88. */
    private final void goto88() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 7:
                // Expressions
                doGoto(223);
                return;

            case 9:
                // Expression
                doGoto(222);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 17:
                // MapEntries
                doGoto(224);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 89. */
    private final void goto89() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(181);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 90. */
    private final void goto90() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(169);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 91. */
    private final void goto91() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 92. */
    private final void goto92() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(163);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 93. */
    private final void goto93() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(162);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 94. */
    private final void goto94() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 7:
                // Expressions
                doGoto(157);
                return;

            case 9:
                // Expression
                doGoto(156);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 95. */
    private final void goto95() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 96. */
    private final void goto96() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 97. */
    private final void goto97() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 98. */
    private final void goto98() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 99. */
    private final void goto99() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 100. */
    private final void goto100() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 101. */
    private final void goto101() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 102. */
    private final void goto102() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 103. */
    private final void goto103() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 104. */
    private final void goto104() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 105. */
    private final void goto105() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 106. */
    private final void goto106() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 107. */
    private final void goto107() {
        switch (reduceNonTerminal) {
            case 23:
                // OptComma
                doGoto(111);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 108. */
    private final void goto108() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 109. */
    private final void goto109() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 110. */
    private final void goto110() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(114);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 111. */
    private final void goto111() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 112. */
    private final void goto112() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 113. */
    private final void goto113() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 114. */
    private final void goto114() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 115. */
    private final void goto115() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 10:
                // AndExpression
                doGoto(116);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 116. */
    private final void goto116() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 117. */
    private final void goto117() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 11:
                // CompareExpression
                doGoto(118);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 118. */
    private final void goto118() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 119. */
    private final void goto119() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 12:
                // AddExpression
                doGoto(142);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 120. */
    private final void goto120() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 12:
                // AddExpression
                doGoto(141);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 121. */
    private final void goto121() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 12:
                // AddExpression
                doGoto(140);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 122. */
    private final void goto122() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 12:
                // AddExpression
                doGoto(139);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 123. */
    private final void goto123() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 12:
                // AddExpression
                doGoto(138);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 124. */
    private final void goto124() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 12:
                // AddExpression
                doGoto(125);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 125. */
    private final void goto125() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 126. */
    private final void goto126() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 13:
                // MulExpression
                doGoto(137);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 127. */
    private final void goto127() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 13:
                // MulExpression
                doGoto(128);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 128. */
    private final void goto128() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 129. */
    private final void goto129() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(136);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 130. */
    private final void goto130() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(135);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 131. */
    private final void goto131() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(134);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 132. */
    private final void goto132() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 14:
                // UnaryExpression
                doGoto(133);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 133. */
    private final void goto133() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 134. */
    private final void goto134() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 135. */
    private final void goto135() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 136. */
    private final void goto136() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 137. */
    private final void goto137() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 138. */
    private final void goto138() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 139. */
    private final void goto139() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 140. */
    private final void goto140() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 141. */
    private final void goto141() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 142. */
    private final void goto142() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 143. */
    private final void goto143() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(144);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 144. */
    private final void goto144() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 145. */
    private final void goto145() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 8:
                // OptExpression
                doGoto(147);
                return;

            case 9:
                // Expression
                doGoto(146);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 146. */
    private final void goto146() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 147. */
    private final void goto147() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 148. */
    private final void goto148() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 8:
                // OptExpression
                doGoto(150);
                return;

            case 9:
                // Expression
                doGoto(149);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 149. */
    private final void goto149() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 150. */
    private final void goto150() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 151. */
    private final void goto151() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 152. */
    private final void goto152() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 153. */
    private final void goto153() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(154);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 154. */
    private final void goto154() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 155. */
    private final void goto155() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 156. */
    private final void goto156() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 157. */
    private final void goto157() {
        switch (reduceNonTerminal) {
            case 23:
                // OptComma
                doGoto(159);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 158. */
    private final void goto158() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(161);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 159. */
    private final void goto159() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 160. */
    private final void goto160() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 161. */
    private final void goto161() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 162. */
    private final void goto162() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 163. */
    private final void goto163() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 164. */
    private final void goto164() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 7:
                // Expressions
                doGoto(166);
                return;

            case 9:
                // Expression
                doGoto(156);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 165. */
    private final void goto165() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 166. */
    private final void goto166() {
        switch (reduceNonTerminal) {
            case 23:
                // OptComma
                doGoto(167);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 167. */
    private final void goto167() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 168. */
    private final void goto168() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 169. */
    private final void goto169() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 170. */
    private final void goto170() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 171. */
    private final void goto171() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 172. */
    private final void goto172() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 173. */
    private final void goto173() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(216);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 174. */
    private final void goto174() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 175. */
    private final void goto175() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 176. */
    private final void goto176() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 177. */
    private final void goto177() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(200);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 178. */
    private final void goto178() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 179. */
    private final void goto179() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 180. */
    private final void goto180() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 181. */
    private final void goto181() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 182. */
    private final void goto182() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 16:
                // ExpressionFactor
                doGoto(183);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 183. */
    private final void goto183() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 184. */
    private final void goto184() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(194);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 185. */
    private final void goto185() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 186. */
    private final void goto186() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(187);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 187. */
    private final void goto187() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 188. */
    private final void goto188() {
        switch (reduceNonTerminal) {
            case 5:
                // Types
                doGoto(190);
                return;

            case 6:
                // Type
                doGoto(189);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 189. */
    private final void goto189() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 190. */
    private final void goto190() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 191. */
    private final void goto191() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(193);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 192. */
    private final void goto192() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 193. */
    private final void goto193() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 194. */
    private final void goto194() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 195. */
    private final void goto195() {
        switch (reduceNonTerminal) {
            case 5:
                // Types
                doGoto(196);
                return;

            case 6:
                // Type
                doGoto(189);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 196. */
    private final void goto196() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 197. */
    private final void goto197() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 198. */
    private final void goto198() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 199. */
    private final void goto199() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(201);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 200. */
    private final void goto200() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 201. */
    private final void goto201() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 202. */
    private final void goto202() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 203. */
    private final void goto203() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(210);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 204. */
    private final void goto204() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 205. */
    private final void goto205() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(206);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 206. */
    private final void goto206() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 207. */
    private final void goto207() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(208);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 208. */
    private final void goto208() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 209. */
    private final void goto209() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 210. */
    private final void goto210() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 211. */
    private final void goto211() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(212);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 212. */
    private final void goto212() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 213. */
    private final void goto213() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 214. */
    private final void goto214() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 215. */
    private final void goto215() {
        switch (reduceNonTerminal) {
            case 6:
                // Type
                doGoto(217);
                return;

            case 22:
                // Name
                doGoto(180);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 216. */
    private final void goto216() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 217. */
    private final void goto217() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 218. */
    private final void goto218() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 219. */
    private final void goto219() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 220. */
    private final void goto220() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 221. */
    private final void goto221() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 222. */
    private final void goto222() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 223. */
    private final void goto223() {
        switch (reduceNonTerminal) {
            case 23:
                // OptComma
                doGoto(231);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 224. */
    private final void goto224() {
        switch (reduceNonTerminal) {
            case 23:
                // OptComma
                doGoto(226);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 225. */
    private final void goto225() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(228);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 226. */
    private final void goto226() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 227. */
    private final void goto227() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 228. */
    private final void goto228() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 229. */
    private final void goto229() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(230);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 230. */
    private final void goto230() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 231. */
    private final void goto231() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 232. */
    private final void goto232() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 233. */
    private final void goto233() {
        switch (reduceNonTerminal) {
            case 0:
                // BuiltInIoTool
                doGoto(77);
                return;

            case 1:
                // BuiltInGenericTool
                doGoto(76);
                return;

            case 2:
                // BuiltInPathTool
                doGoto(78);
                return;

            case 3:
                // BuiltInFileTool
                doGoto(75);
                return;

            case 4:
                // BuiltInDataTool
                doGoto(74);
                return;

            case 9:
                // Expression
                doGoto(234);
                return;

            case 10:
                // AndExpression
                doGoto(100);
                return;

            case 11:
                // CompareExpression
                doGoto(101);
                return;

            case 12:
                // AddExpression
                doGoto(99);
                return;

            case 13:
                // MulExpression
                doGoto(104);
                return;

            case 14:
                // UnaryExpression
                doGoto(109);
                return;

            case 15:
                // ProjExpression
                doGoto(106);
                return;

            case 16:
                // ExpressionFactor
                doGoto(103);
                return;

            case 18:
                // ToolInvokeExpression
                doGoto(108);
                return;

            case 19:
                // ToolRef
                doGoto(82);
                return;

            case 20:
                // BuiltInTool
                doGoto(79);
                return;

            case 22:
                // Name
                doGoto(105);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 234. */
    private final void goto234() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 235. */
    private final void goto235() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    @Override
    protected final String getNonTerminalName(int nonTerminalId) {
        return NON_TERMINAL_NAMES[nonTerminalId];
    }

    /** See {@code Parser.firstTerminals}. */
    private static final class FirstTerminals {
        /** See {@code Parser.firstTerminals}. */
        private static final int[][] FIRST_TERMINALS = new int[][] {
            {29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 128, 129}, // state 0
            {}, // state 1
            {}, // state 2
            {}, // state 3
            {}, // state 4
            {}, // state 5
            {}, // state 6
            {}, // state 7
            {}, // state 8
            {}, // state 9
            {}, // state 10
            {}, // state 11
            {}, // state 12
            {}, // state 13
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            {}, // state 29
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
            {}, // state 34
            {}, // state 35
            {}, // state 36
            {}, // state 37
            {}, // state 38
            {}, // state 39
            {}, // state 40
            {}, // state 41
            {}, // state 42
            {}, // state 43
            {}, // state 44
            {}, // state 45
            {}, // state 46
            {}, // state 47
            {}, // state 48
            {}, // state 49
            {}, // state 50
            {}, // state 51
            {}, // state 52
            {}, // state 53
            {}, // state 54
            {}, // state 55
            {}, // state 56
            {}, // state 57
            {}, // state 58
            {}, // state 59
            {}, // state 60
            {}, // state 61
            {}, // state 62
            {}, // state 63
            {}, // state 64
            {}, // state 65
            {}, // state 66
            {}, // state 67
            {}, // state 68
            {}, // state 69
            {}, // state 70
            {}, // state 71
            {}, // state 72
            {}, // state 73
            {}, // state 74
            {}, // state 75
            {}, // state 76
            {}, // state 77
            {}, // state 78
            {}, // state 79
            {}, // state 80
            {136}, // state 81
            {121}, // state 82
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 120, 121, 122, 127, 128, 129, 130, 131, 132}, // state 83
            {}, // state 84
            {}, // state 85
            {}, // state 86
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 87
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 109, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 88
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 89
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 90
            {}, // state 91
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 92
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 93
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 126, 127, 128, 129, 130, 131, 132}, // state 94
            {113}, // state 95
            {}, // state 96
            {}, // state 97
            {}, // state 98
            {118, 122}, // state 99
            {100}, // state 100
            {112, 114, 115, 116, 117, 119}, // state 101
            {104}, // state 102
            {}, // state 103
            {101, 102, 105, 125}, // state 104
            {}, // state 105
            {127}, // state 106
            {108, 120}, // state 107
            {}, // state 108
            {}, // state 109
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 110
            {120}, // state 111
            {}, // state 112
            {113}, // state 113
            {104}, // state 114
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 115
            {100}, // state 116
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 117
            {112, 114, 115, 116, 117, 119}, // state 118
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 119
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 120
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 121
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 122
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 123
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 124
            {118, 122}, // state 125
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 126
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 127
            {101, 102, 105, 125}, // state 128
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 129
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 130
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 131
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 132
            {}, // state 133
            {}, // state 134
            {}, // state 135
            {}, // state 136
            {101, 102, 105, 125}, // state 137
            {118, 122}, // state 138
            {118, 122}, // state 139
            {118, 122}, // state 140
            {118, 122}, // state 141
            {118, 122}, // state 142
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 143
            {104}, // state 144
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 107, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 145
            {104, 126}, // state 146
            {107}, // state 147
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 126, 127, 128, 129, 130, 131, 132}, // state 148
            {104}, // state 149
            {126}, // state 150
            {}, // state 151
            {}, // state 152
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 153
            {104}, // state 154
            {}, // state 155
            {104}, // state 156
            {108, 126}, // state 157
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 158
            {126}, // state 159
            {}, // state 160
            {104}, // state 161
            {}, // state 162
            {104, 108, 120}, // state 163
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 164
            {}, // state 165
            {108, 120}, // state 166
            {120}, // state 167
            {}, // state 168
            {}, // state 169
            {123}, // state 170
            {123}, // state 171
            {123}, // state 172
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 123, 128, 129}, // state 173
            {123}, // state 174
            {121, 123}, // state 175
            {123}, // state 176
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 123, 128, 129}, // state 177
            {123}, // state 178
            {121, 123}, // state 179
            {}, // state 180
            {115}, // state 181
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 110, 117, 121, 127, 128, 129, 130, 131, 132}, // state 182
            {}, // state 183
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 184
            {121}, // state 185
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 186
            {108}, // state 187
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 188
            {}, // state 189
            {108, 120}, // state 190
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 191
            {}, // state 192
            {}, // state 193
            {108}, // state 194
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 195
            {108, 120}, // state 196
            {}, // state 197
            {}, // state 198
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 199
            {}, // state 200
            {}, // state 201
            {}, // state 202
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 203
            {121}, // state 204
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 205
            {107}, // state 206
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 207
            {120}, // state 208
            {}, // state 209
            {107}, // state 210
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 211
            {120}, // state 212
            {}, // state 213
            {}, // state 214
            {1, 4, 15, 16, 17, 18, 20, 22, 23, 26, 128, 129}, // state 215
            {}, // state 216
            {}, // state 217
            {}, // state 218
            {}, // state 219
            {}, // state 220
            {}, // state 221
            {104, 107}, // state 222
            {108, 109}, // state 223
            {108, 109}, // state 224
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 225
            {109}, // state 226
            {}, // state 227
            {104, 107}, // state 228
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 229
            {104}, // state 230
            {109}, // state 231
            {}, // state 232
            {9, 19, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 110, 117, 118, 121, 122, 127, 128, 129, 130, 131, 132}, // state 233
            {104}, // state 234
            {}, // state 235
        };
    }

    /** See {@code Parser.firstTerminalsReduced}. */
    private static final class FirstTerminalsReduced {
        /** See {@code Parser.firstTerminalsReduced}. */
        private static final int[][][] FIRST_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {41, 136},
                {42, 121},
            },
            {}, // state 1
            {}, // state 2
            {}, // state 3
            {}, // state 4
            {}, // state 5
            {}, // state 6
            {}, // state 7
            {}, // state 8
            {}, // state 9
            {}, // state 10
            {}, // state 11
            {}, // state 12
            {}, // state 13
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            {}, // state 29
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
            {}, // state 34
            {}, // state 35
            {}, // state 36
            {}, // state 37
            {}, // state 38
            {}, // state 39
            {}, // state 40
            {}, // state 41
            {}, // state 42
            {}, // state 43
            {}, // state 44
            {}, // state 45
            {}, // state 46
            {}, // state 47
            {}, // state 48
            {}, // state 49
            {}, // state 50
            {}, // state 51
            {}, // state 52
            {}, // state 53
            {}, // state 54
            {}, // state 55
            {}, // state 56
            {}, // state 57
            {}, // state 58
            {}, // state 59
            {}, // state 60
            {}, // state 61
            {}, // state 62
            {}, // state 63
            {}, // state 64
            {}, // state 65
            {}, // state 66
            {}, // state 67
            {}, // state 68
            {}, // state 69
            {}, // state 70
            {}, // state 71
            {}, // state 72
            {}, // state 73
            {}, // state 74
            {}, // state 75
            {}, // state 76
            {}, // state 77
            {}, // state 78
            {}, // state 79
            {}, // state 80
            {}, // state 81
            {}, // state 82
            { // state 83
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
                {44, 108, 120},
            },
            {}, // state 84
            {}, // state 85
            {}, // state 86
            { // state 87
                {38, 127},
                {42, 121},
            },
            { // state 88
                {30, 108, 109},
                {32, 104, 107},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {40, 108, 109},
                {42, 121},
            },
            { // state 89
                {29, 115},
            },
            { // state 90
                {38, 127},
                {42, 121},
            },
            {}, // state 91
            { // state 92
                {32, 104, 108, 120},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 93
                {38, 127},
                {42, 121},
            },
            { // state 94
                {30, 108, 126},
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 95
            {}, // state 96
            {}, // state 97
            {}, // state 98
            {}, // state 99
            {}, // state 100
            {}, // state 101
            {}, // state 102
            {}, // state 103
            {}, // state 104
            {}, // state 105
            {}, // state 106
            { // state 107
                {47, 120},
            },
            {}, // state 108
            {}, // state 109
            { // state 110
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 111
            {}, // state 112
            {}, // state 113
            {}, // state 114
            { // state 115
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 116
            { // state 117
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 118
            { // state 119
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 120
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 121
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 122
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 123
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 124
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 125
            { // state 126
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            { // state 127
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 128
            { // state 129
                {38, 127},
                {42, 121},
            },
            { // state 130
                {38, 127},
                {42, 121},
            },
            { // state 131
                {38, 127},
                {42, 121},
            },
            { // state 132
                {38, 127},
                {42, 121},
            },
            {}, // state 133
            {}, // state 134
            {}, // state 135
            {}, // state 136
            {}, // state 137
            {}, // state 138
            {}, // state 139
            {}, // state 140
            {}, // state 141
            {}, // state 142
            { // state 143
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 144
            { // state 145
                {31, 107},
                {32, 104, 126},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 146
            {}, // state 147
            { // state 148
                {31, 126},
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 149
            {}, // state 150
            {}, // state 151
            {}, // state 152
            { // state 153
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 154
            {}, // state 155
            {}, // state 156
            { // state 157
                {47, 126},
            },
            { // state 158
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 159
            {}, // state 160
            {}, // state 161
            {}, // state 162
            {}, // state 163
            { // state 164
                {30, 108, 120},
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 165
            { // state 166
                {47, 120},
            },
            {}, // state 167
            {}, // state 168
            {}, // state 169
            {}, // state 170
            {}, // state 171
            {}, // state 172
            {}, // state 173
            {}, // state 174
            {}, // state 175
            {}, // state 176
            {}, // state 177
            {}, // state 178
            {}, // state 179
            {}, // state 180
            {}, // state 181
            { // state 182
                {42, 121},
            },
            {}, // state 183
            { // state 184
                {29, 108},
            },
            {}, // state 185
            { // state 186
                {29, 108},
            },
            {}, // state 187
            { // state 188
                {28, 108, 120},
            },
            {}, // state 189
            {}, // state 190
            {}, // state 191
            {}, // state 192
            {}, // state 193
            {}, // state 194
            { // state 195
                {28, 108, 120},
            },
            {}, // state 196
            {}, // state 197
            {}, // state 198
            {}, // state 199
            {}, // state 200
            {}, // state 201
            {}, // state 202
            { // state 203
                {29, 107},
            },
            {}, // state 204
            { // state 205
                {29, 107},
            },
            {}, // state 206
            { // state 207
                {29, 120},
            },
            {}, // state 208
            {}, // state 209
            {}, // state 210
            { // state 211
                {29, 120},
            },
            {}, // state 212
            {}, // state 213
            {}, // state 214
            {}, // state 215
            {}, // state 216
            {}, // state 217
            {}, // state 218
            {}, // state 219
            {}, // state 220
            {}, // state 221
            {}, // state 222
            { // state 223
                {47, 109},
            },
            { // state 224
                {47, 109},
            },
            { // state 225
                {32, 104, 107},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 226
            {}, // state 227
            {}, // state 228
            { // state 229
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 230
            {}, // state 231
            {}, // state 232
            { // state 233
                {32, 104},
                {33, 100},
                {34, 112, 114, 115, 116, 117, 119},
                {35, 118, 122},
                {36, 101, 102, 105, 125},
                {38, 127},
                {42, 121},
            },
            {}, // state 234
            {}, // state 235
        };
    }

    /** See {@code Parser.reducibleNonTerminals}. */
    private static final class ReducibleNonTerminals {
        /** See {@code Parser.reducibleNonTerminals}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS = new int[][][] {
            {}, // state 0
            { // state 1
                {0, 1},
            },
            { // state 2
                {0, 1},
            },
            { // state 3
                {0, 1},
            },
            { // state 4
                {0, 1},
            },
            { // state 5
                {1, 1},
            },
            { // state 6
                {1, 1},
            },
            { // state 7
                {1, 1},
            },
            { // state 8
                {2, 1},
            },
            { // state 9
                {2, 1},
            },
            { // state 10
                {2, 1},
            },
            { // state 11
                {2, 1},
            },
            { // state 12
                {2, 1},
            },
            { // state 13
                {2, 1},
            },
            { // state 14
                {2, 1},
            },
            { // state 15
                {2, 1},
            },
            { // state 16
                {2, 1},
            },
            { // state 17
                {2, 1},
            },
            { // state 18
                {3, 1},
            },
            { // state 19
                {3, 1},
            },
            { // state 20
                {3, 1},
            },
            { // state 21
                {3, 1},
            },
            { // state 22
                {3, 1},
            },
            { // state 23
                {3, 1},
            },
            { // state 24
                {3, 1},
            },
            { // state 25
                {3, 1},
            },
            { // state 26
                {3, 1},
            },
            { // state 27
                {3, 1},
            },
            { // state 28
                {3, 1},
            },
            { // state 29
                {3, 1},
            },
            { // state 30
                {3, 1},
            },
            { // state 31
                {3, 1},
            },
            { // state 32
                {3, 1},
            },
            { // state 33
                {3, 1},
            },
            { // state 34
                {4, 1},
            },
            { // state 35
                {4, 1},
            },
            { // state 36
                {4, 1},
            },
            { // state 37
                {4, 1},
            },
            { // state 38
                {4, 1},
            },
            { // state 39
                {4, 1},
            },
            { // state 40
                {4, 1},
            },
            { // state 41
                {4, 1},
            },
            { // state 42
                {4, 1},
            },
            { // state 43
                {4, 1},
            },
            { // state 44
                {4, 1},
            },
            { // state 45
                {4, 1},
            },
            { // state 46
                {4, 1},
            },
            { // state 47
                {4, 1},
            },
            { // state 48
                {4, 1},
            },
            { // state 49
                {4, 1},
            },
            { // state 50
                {4, 1},
            },
            { // state 51
                {4, 1},
            },
            { // state 52
                {4, 1},
            },
            { // state 53
                {4, 1},
            },
            { // state 54
                {4, 1},
            },
            { // state 55
                {4, 1},
            },
            { // state 56
                {4, 1},
            },
            { // state 57
                {4, 1},
            },
            { // state 58
                {4, 1},
            },
            { // state 59
                {4, 1},
            },
            { // state 60
                {4, 1},
            },
            { // state 61
                {4, 1},
            },
            { // state 62
                {4, 1},
            },
            { // state 63
                {4, 1},
            },
            { // state 64
                {4, 1},
            },
            { // state 65
                {4, 1},
            },
            { // state 66
                {4, 1},
            },
            { // state 67
                {4, 1},
            },
            { // state 68
                {4, 1},
            },
            { // state 69
                {4, 1},
            },
            { // state 70
                {4, 1},
            },
            { // state 71
                {4, 1},
            },
            { // state 72
                {46, 1},
            },
            { // state 73
                {46, 1},
            },
            { // state 74
                {43, 1},
            },
            { // state 75
                {43, 1},
            },
            { // state 76
                {43, 1},
            },
            { // state 77
                {43, 1},
            },
            { // state 78
                {43, 1},
            },
            { // state 79
                {42, 1},
            },
            { // state 80
                {42, 1},
            },
            {}, // state 81
            {}, // state 82
            {}, // state 83
            { // state 84
                {39, 1},
            },
            { // state 85
                {39, 1},
            },
            { // state 86
                {39, 1},
            },
            {}, // state 87
            {}, // state 88
            {}, // state 89
            {}, // state 90
            { // state 91
                {41, 3},
            },
            {}, // state 92
            {}, // state 93
            {}, // state 94
            { // state 95
                {46, 1},
            },
            { // state 96
                {39, 1},
            },
            { // state 97
                {39, 1},
            },
            { // state 98
                {39, 1},
            },
            { // state 99
                {34, 1},
            },
            { // state 100
                {32, 1},
            },
            { // state 101
                {33, 1},
            },
            { // state 102
                {44, 1},
            },
            { // state 103
                {38, 1},
            },
            { // state 104
                {35, 1},
            },
            { // state 105
                {39, 1},
                {42, 1},
            },
            { // state 106
                {37, 1},
            },
            { // state 107
                {47, 0},
            },
            { // state 108
                {39, 1},
            },
            { // state 109
                {36, 1},
            },
            { // state 110
                {47, 1},
            },
            {}, // state 111
            { // state 112
                {41, 5},
            },
            { // state 113
                {46, 1},
            },
            { // state 114
                {44, 3},
            },
            {}, // state 115
            { // state 116
                {32, 3},
            },
            {}, // state 117
            { // state 118
                {33, 3},
            },
            {}, // state 119
            {}, // state 120
            {}, // state 121
            {}, // state 122
            {}, // state 123
            {}, // state 124
            { // state 125
                {34, 3},
            },
            {}, // state 126
            {}, // state 127
            { // state 128
                {35, 3},
            },
            {}, // state 129
            {}, // state 130
            {}, // state 131
            {}, // state 132
            { // state 133
                {36, 3},
            },
            { // state 134
                {36, 3},
            },
            { // state 135
                {36, 3},
            },
            { // state 136
                {36, 3},
            },
            { // state 137
                {35, 3},
            },
            { // state 138
                {34, 3},
            },
            { // state 139
                {34, 3},
            },
            { // state 140
                {34, 3},
            },
            { // state 141
                {34, 3},
            },
            { // state 142
                {34, 3},
            },
            {}, // state 143
            { // state 144
                {44, 5},
            },
            { // state 145
                {31, 0},
            },
            { // state 146
                {31, 1},
            },
            {}, // state 147
            { // state 148
                {31, 0},
            },
            { // state 149
                {31, 1},
            },
            {}, // state 150
            { // state 151
                {38, 6},
            },
            { // state 152
                {38, 4},
            },
            {}, // state 153
            { // state 154
                {44, 3},
            },
            { // state 155
                {39, 2},
            },
            { // state 156
                {30, 1},
            },
            { // state 157
                {47, 0},
            },
            { // state 158
                {47, 1},
            },
            {}, // state 159
            { // state 160
                {39, 4},
            },
            { // state 161
                {30, 3},
            },
            { // state 162
                {37, 2},
            },
            {}, // state 163
            {}, // state 164
            { // state 165
                {39, 3},
            },
            { // state 166
                {47, 0},
            },
            {}, // state 167
            { // state 168
                {39, 6},
            },
            { // state 169
                {37, 2},
            },
            { // state 170
                {29, 1},
            },
            { // state 171
                {29, 1},
            },
            { // state 172
                {29, 1},
            },
            {}, // state 173
            { // state 174
                {29, 1},
            },
            {}, // state 175
            { // state 176
                {29, 1},
            },
            {}, // state 177
            { // state 178
                {29, 1},
            },
            {}, // state 179
            { // state 180
                {29, 1},
            },
            {}, // state 181
            {}, // state 182
            { // state 183
                {39, 4},
            },
            {}, // state 184
            {}, // state 185
            {}, // state 186
            {}, // state 187
            {}, // state 188
            { // state 189
                {28, 1},
            },
            {}, // state 190
            {}, // state 191
            { // state 192
                {29, 7},
            },
            { // state 193
                {28, 3},
            },
            {}, // state 194
            {}, // state 195
            {}, // state 196
            { // state 197
                {29, 6},
            },
            { // state 198
                {29, 2},
            },
            {}, // state 199
            { // state 200
                {29, 2},
            },
            { // state 201
                {29, 3},
            },
            { // state 202
                {29, 2},
            },
            {}, // state 203
            {}, // state 204
            {}, // state 205
            {}, // state 206
            {}, // state 207
            {}, // state 208
            { // state 209
                {29, 7},
            },
            {}, // state 210
            {}, // state 211
            {}, // state 212
            { // state 213
                {29, 6},
            },
            { // state 214
                {29, 2},
            },
            {}, // state 215
            { // state 216
                {29, 2},
            },
            { // state 217
                {29, 3},
            },
            { // state 218
                {29, 2},
            },
            { // state 219
                {29, 2},
            },
            { // state 220
                {29, 2},
            },
            { // state 221
                {39, 2},
            },
            { // state 222
                {30, 1},
            },
            { // state 223
                {47, 0},
            },
            { // state 224
                {47, 0},
            },
            { // state 225
                {47, 1},
            },
            {}, // state 226
            { // state 227
                {39, 4},
            },
            {}, // state 228
            {}, // state 229
            { // state 230
                {40, 5},
            },
            {}, // state 231
            { // state 232
                {39, 4},
            },
            {}, // state 233
            { // state 234
                {40, 3},
            },
            { // state 235
                {37, 2},
            },
        };
    }

    /** See {@code Parser.reducibleNonTerminalsReduced}. */
    private static final class ReducibleNonTerminalsReduced {
        /** See {@code Parser.reducibleNonTerminalsReduced}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {4, 43, 0},
                {43, 42, 0},
                {46, 42, 0},
            },
            {}, // state 1
            {}, // state 2
            {}, // state 3
            {}, // state 4
            {}, // state 5
            {}, // state 6
            {}, // state 7
            {}, // state 8
            {}, // state 9
            {}, // state 10
            {}, // state 11
            {}, // state 12
            {}, // state 13
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            {}, // state 29
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
            {}, // state 34
            {}, // state 35
            {}, // state 36
            {}, // state 37
            {}, // state 38
            {}, // state 39
            {}, // state 40
            {}, // state 41
            {}, // state 42
            {}, // state 43
            {}, // state 44
            {}, // state 45
            {}, // state 46
            {}, // state 47
            {}, // state 48
            {}, // state 49
            {}, // state 50
            {}, // state 51
            {}, // state 52
            {}, // state 53
            {}, // state 54
            {}, // state 55
            {}, // state 56
            {}, // state 57
            {}, // state 58
            {}, // state 59
            {}, // state 60
            {}, // state 61
            {}, // state 62
            {}, // state 63
            {}, // state 64
            {}, // state 65
            {}, // state 66
            {}, // state 67
            {}, // state 68
            {}, // state 69
            {}, // state 70
            {}, // state 71
            {}, // state 72
            {}, // state 73
            {}, // state 74
            {}, // state 75
            {}, // state 76
            {}, // state 77
            {}, // state 78
            {}, // state 79
            {}, // state 80
            {}, // state 81
            {}, // state 82
            { // state 83
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 44, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 84
            {}, // state 85
            {}, // state 86
            { // state 87
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 37, 1},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 88
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 30, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 89
                {46, 29, 0},
            },
            { // state 90
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 37, 1},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 91
            { // state 92
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 93
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 37, 1},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 94
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 30, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 95
            {}, // state 96
            {}, // state 97
            {}, // state 98
            {}, // state 99
            {}, // state 100
            {}, // state 101
            {}, // state 102
            {}, // state 103
            {}, // state 104
            {}, // state 105
            {}, // state 106
            {}, // state 107
            {}, // state 108
            {}, // state 109
            { // state 110
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 44, 2},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 111
            {}, // state 112
            {}, // state 113
            {}, // state 114
            { // state 115
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {33, 32, 2},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 116
            { // state 117
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {34, 33, 2},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 118
            { // state 119
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {35, 34, 2},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 120
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {35, 34, 2},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 121
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {35, 34, 2},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 122
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {35, 34, 2},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 123
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {35, 34, 2},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 124
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {35, 34, 2},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 125
            { // state 126
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {36, 35, 2},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 127
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {36, 35, 2},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 128
            { // state 129
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 36, 2},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 130
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 36, 2},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 131
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 36, 2},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            { // state 132
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {37, 36, 2},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 133
            {}, // state 134
            {}, // state 135
            {}, // state 136
            {}, // state 137
            {}, // state 138
            {}, // state 139
            {}, // state 140
            {}, // state 141
            {}, // state 142
            { // state 143
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 44, 4},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 144
            { // state 145
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 31, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 146
            {}, // state 147
            { // state 148
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 31, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 149
            {}, // state 150
            {}, // state 151
            {}, // state 152
            { // state 153
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 44, 2},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 154
            {}, // state 155
            {}, // state 156
            {}, // state 157
            { // state 158
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 30, 2},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 159
            {}, // state 160
            {}, // state 161
            {}, // state 162
            {}, // state 163
            { // state 164
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 30, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 165
            {}, // state 166
            {}, // state 167
            {}, // state 168
            {}, // state 169
            {}, // state 170
            {}, // state 171
            {}, // state 172
            { // state 173
                {29, 29, 1},
                {46, 29, 0},
            },
            {}, // state 174
            {}, // state 175
            {}, // state 176
            { // state 177
                {29, 29, 1},
                {46, 29, 0},
            },
            {}, // state 178
            {}, // state 179
            {}, // state 180
            {}, // state 181
            { // state 182
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {39, 39, 3},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 183
            { // state 184
                {46, 29, 0},
            },
            {}, // state 185
            { // state 186
                {46, 29, 0},
            },
            {}, // state 187
            { // state 188
                {29, 28, 0},
                {46, 29, 0},
            },
            {}, // state 189
            {}, // state 190
            { // state 191
                {29, 28, 2},
                {46, 29, 0},
            },
            {}, // state 192
            {}, // state 193
            {}, // state 194
            { // state 195
                {29, 28, 0},
                {46, 29, 0},
            },
            {}, // state 196
            {}, // state 197
            {}, // state 198
            { // state 199
                {29, 29, 2},
                {46, 29, 0},
            },
            {}, // state 200
            {}, // state 201
            {}, // state 202
            { // state 203
                {46, 29, 0},
            },
            {}, // state 204
            { // state 205
                {46, 29, 0},
            },
            {}, // state 206
            { // state 207
                {46, 29, 0},
            },
            {}, // state 208
            {}, // state 209
            {}, // state 210
            { // state 211
                {46, 29, 0},
            },
            {}, // state 212
            {}, // state 213
            {}, // state 214
            { // state 215
                {29, 29, 2},
                {46, 29, 0},
            },
            {}, // state 216
            {}, // state 217
            {}, // state 218
            {}, // state 219
            {}, // state 220
            {}, // state 221
            {}, // state 222
            {}, // state 223
            {}, // state 224
            { // state 225
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 226
            {}, // state 227
            {}, // state 228
            { // state 229
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 40, 4},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 230
            {}, // state 231
            {}, // state 232
            { // state 233
                {0, 43, 0},
                {1, 43, 0},
                {2, 43, 0},
                {3, 43, 0},
                {32, 40, 2},
                {33, 32, 0},
                {34, 33, 0},
                {35, 34, 0},
                {36, 35, 0},
                {37, 36, 0},
                {38, 37, 0},
                {39, 38, 0},
                {4, 43, 0},
                {41, 39, 0},
                {43, 42, 0},
                {46, 39, 0},
                {46, 42, 0},
            },
            {}, // state 234
            {}, // state 235
        };
    }

    /** Parser call back hooks for {@link ToolDefInvokeParser}. */
    public interface Hooks extends ParserHooksBase {
        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInIoTool : @ERRKW;}</p>
         *
         * @param t1 {@code ERRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInIoTool1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInIoTool : @ERRLNKW;}</p>
         *
         * @param t1 {@code ERRLNKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInIoTool2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInIoTool : @OUTKW;}</p>
         *
         * @param t1 {@code OUTKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInIoTool3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInIoTool : @OUTLNKW;}</p>
         *
         * @param t1 {@code OUTLNKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInIoTool4(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInGenericTool : @APPKW;}</p>
         *
         * @param t1 {@code APPKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInGenericTool1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInGenericTool : @EXECKW;}</p>
         *
         * @param t1 {@code EXECKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInGenericTool2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInGenericTool : @TOOLDEFKW;}</p>
         *
         * @param t1 {@code TOOLDEFKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInGenericTool3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @ABSPATHKW;}</p>
         *
         * @param t1 {@code ABSPATHKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @BASENAMEKW;}</p>
         *
         * @param t1 {@code BASENAMEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @CHDIRKW;}</p>
         *
         * @param t1 {@code CHDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @CHFILEEXTKW;}</p>
         *
         * @param t1 {@code CHFILEEXTKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @CURDIRKW;}</p>
         *
         * @param t1 {@code CURDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @DIRNAMEKW;}</p>
         *
         * @param t1 {@code DIRNAMEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @FILEEXTKW;}</p>
         *
         * @param t1 {@code FILEEXTKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool07(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @HASFILEEXTKW;}</p>
         *
         * @param t1 {@code HASFILEEXTKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool08(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @PATHJOINKW;}</p>
         *
         * @param t1 {@code PATHJOINKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool09(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInPathTool : @SCRIPTPATHKW;}</p>
         *
         * @param t1 {@code SCRIPTPATHKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInPathTool10(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @CPDIRKW;}</p>
         *
         * @param t1 {@code CPDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @CPFILEKW;}</p>
         *
         * @param t1 {@code CPFILEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @DIFFKW;}</p>
         *
         * @param t1 {@code DIFFKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @EXISTSKW;}</p>
         *
         * @param t1 {@code EXISTSKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @FILENEWERKW;}</p>
         *
         * @param t1 {@code FILENEWERKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @FILESIZEKW;}</p>
         *
         * @param t1 {@code FILESIZEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @FINDKW;}</p>
         *
         * @param t1 {@code FINDKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool07(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @ISDIRKW;}</p>
         *
         * @param t1 {@code ISDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool08(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @ISFILEKW;}</p>
         *
         * @param t1 {@code ISFILEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool09(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @MKDIRKW;}</p>
         *
         * @param t1 {@code MKDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool10(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @MVDIRKW;}</p>
         *
         * @param t1 {@code MVDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool11(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @MVFILEKW;}</p>
         *
         * @param t1 {@code MVFILEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool12(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @READLINESKW;}</p>
         *
         * @param t1 {@code READLINESKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool13(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @RMDIRKW;}</p>
         *
         * @param t1 {@code RMDIRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool14(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @RMFILEKW;}</p>
         *
         * @param t1 {@code RMFILEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool15(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInFileTool : @WRITEFILEKW;}</p>
         *
         * @param t1 {@code WRITEFILEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInFileTool16(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @ABSKW;}</p>
         *
         * @param t1 {@code ABSKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @CEILKW;}</p>
         *
         * @param t1 {@code CEILKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @CONTAINSKW;}</p>
         *
         * @param t1 {@code CONTAINSKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @DELKW;}</p>
         *
         * @param t1 {@code DELKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @DELIDXKW;}</p>
         *
         * @param t1 {@code DELIDXKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @EMPTYKW;}</p>
         *
         * @param t1 {@code EMPTYKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @ENDSWITHKW;}</p>
         *
         * @param t1 {@code ENDSWITHKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool07(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @ENTRIESKW;}</p>
         *
         * @param t1 {@code ENTRIESKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool08(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @ENUMERATEKW;}</p>
         *
         * @param t1 {@code ENUMERATEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool09(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @FLOORKW;}</p>
         *
         * @param t1 {@code FLOORKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool10(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @FMTKW;}</p>
         *
         * @param t1 {@code FMTKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool11(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @INDEXOFKW;}</p>
         *
         * @param t1 {@code INDEXOFKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool12(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @JOINKW;}</p>
         *
         * @param t1 {@code JOINKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool13(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @KEYSKW;}</p>
         *
         * @param t1 {@code KEYSKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool14(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @LASTINDEXOFKW;}</p>
         *
         * @param t1 {@code LASTINDEXOFKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool15(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @LNKW;}</p>
         *
         * @param t1 {@code LNKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool16(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @LOGKW;}</p>
         *
         * @param t1 {@code LOGKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool17(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @LOWERKW;}</p>
         *
         * @param t1 {@code LOWERKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool18(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @LTRIMKW;}</p>
         *
         * @param t1 {@code LTRIMKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool19(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @MAXKW;}</p>
         *
         * @param t1 {@code MAXKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool20(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @MINKW;}</p>
         *
         * @param t1 {@code MINKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool21(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @POWKW;}</p>
         *
         * @param t1 {@code POWKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool22(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @RANGEKW;}</p>
         *
         * @param t1 {@code RANGEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool23(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @REPLACEKW;}</p>
         *
         * @param t1 {@code REPLACEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool24(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @REVERSEKW;}</p>
         *
         * @param t1 {@code REVERSEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool25(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @ROUNDKW;}</p>
         *
         * @param t1 {@code ROUNDKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool26(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @RTRIMKW;}</p>
         *
         * @param t1 {@code RTRIMKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool27(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @SIZEKW;}</p>
         *
         * @param t1 {@code SIZEKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool28(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @SORTEDKW;}</p>
         *
         * @param t1 {@code SORTEDKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool29(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @SPLITKW;}</p>
         *
         * @param t1 {@code SPLITKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool30(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @SQRTKW;}</p>
         *
         * @param t1 {@code SQRTKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool31(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @STARTSWITHKW;}</p>
         *
         * @param t1 {@code STARTSWITHKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool32(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @STRKW;}</p>
         *
         * @param t1 {@code STRKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool33(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @STRDUPKW;}</p>
         *
         * @param t1 {@code STRDUPKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool34(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @SUBSETKW;}</p>
         *
         * @param t1 {@code SUBSETKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool35(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @TRIMKW;}</p>
         *
         * @param t1 {@code TRIMKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool36(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @UPPERKW;}</p>
         *
         * @param t1 {@code UPPERKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool37(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInDataTool : @VALUESKW;}</p>
         *
         * @param t1 {@code VALUESKW}.
         * @return The parser call back hook result.
         */
        public Token parseBuiltInDataTool38(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Types : Type;}</p>
         *
         * @param t1 {@code Type}.
         * @return The parser call back hook result.
         */
        public List<ToolDefType> parseTypes1(ToolDefType t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Types : Types COMMATK Type;}</p>
         *
         * @param l1 {@code Types}.
         * @param t3 {@code Type}.
         * @return The parser call back hook result.
         */
        public List<ToolDefType> parseTypes2(List<ToolDefType> l1, ToolDefType t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @BOOLKW;}</p>
         *
         * @param t1 {@code BOOLKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @BOOLKW QUESTIONTK;}</p>
         *
         * @param t1 {@code BOOLKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @INTKW;}</p>
         *
         * @param t1 {@code INTKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @INTKW QUESTIONTK;}</p>
         *
         * @param t1 {@code INTKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LONGKW;}</p>
         *
         * @param t1 {@code LONGKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LONGKW QUESTIONTK;}</p>
         *
         * @param t1 {@code LONGKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @DOUBLEKW;}</p>
         *
         * @param t1 {@code DOUBLEKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType07(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @DOUBLEKW QUESTIONTK;}</p>
         *
         * @param t1 {@code DOUBLEKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType08(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @STRINGKW;}</p>
         *
         * @param t1 {@code STRINGKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType09(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @STRINGKW QUESTIONTK;}</p>
         *
         * @param t1 {@code STRINGKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType10(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LISTKW Type;}</p>
         *
         * @param t1 {@code LISTKW}.
         * @param t2 {@code Type}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType11(Token t1, ToolDefType t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LISTKW QUESTIONTK Type;}</p>
         *
         * @param t1 {@code LISTKW}.
         * @param t3 {@code Type}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType12(Token t1, ToolDefType t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @SETKW Type;}</p>
         *
         * @param t1 {@code SETKW}.
         * @param t2 {@code Type}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType13(Token t1, ToolDefType t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @SETKW QUESTIONTK Type;}</p>
         *
         * @param t1 {@code SETKW}.
         * @param t3 {@code Type}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType14(Token t1, ToolDefType t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @MAPKW PAROPENTK Type COLONTK Type PARCLOSETK;}</p>
         *
         * @param t1 {@code MAPKW}.
         * @param t3 {@code Type}.
         * @param t5 {@code Type}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType15(Token t1, ToolDefType t3, ToolDefType t5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @MAPKW QUESTIONTK PAROPENTK Type COLONTK Type PARCLOSETK;}</p>
         *
         * @param t1 {@code MAPKW}.
         * @param t4 {@code Type}.
         * @param t6 {@code Type}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType16(Token t1, ToolDefType t4, ToolDefType t6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @TUPLEKW PAROPENTK Type COMMATK Types PARCLOSETK;}</p>
         *
         * @param t1 {@code TUPLEKW}.
         * @param t3 {@code Type}.
         * @param l5 {@code Types}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType17(Token t1, ToolDefType t3, List<ToolDefType> l5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @TUPLEKW QUESTIONTK PAROPENTK Type COMMATK Types PARCLOSETK;}</p>
         *
         * @param t1 {@code TUPLEKW}.
         * @param t4 {@code Type}.
         * @param l6 {@code Types}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType18(Token t1, ToolDefType t4, List<ToolDefType> l6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @OBJECTKW;}</p>
         *
         * @param t1 {@code OBJECTKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType19(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @OBJECTKW QUESTIONTK;}</p>
         *
         * @param t1 {@code OBJECTKW}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType20(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : Name;}</p>
         *
         * @param t1 {@code Name}.
         * @return The parser call back hook result.
         */
        public ToolDefType parseType21(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expressions : Expression;}</p>
         *
         * @param e1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<Expression> parseExpressions1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expressions : Expressions COMMATK Expression;}</p>
         *
         * @param l1 {@code Expressions}.
         * @param e3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<Expression> parseExpressions2(List<Expression> l1, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptExpression : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public Expression parseOptExpression1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptExpression : Expression;}</p>
         *
         * @param e1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public Expression parseOptExpression2(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : AndExpression;}</p>
         *
         * @param e1 {@code AndExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : Expression @ORKW AndExpression;}</p>
         *
         * @param e1 {@code Expression}.
         * @param t2 {@code ORKW}.
         * @param e3 {@code AndExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseExpression2(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AndExpression : CompareExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseAndExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AndExpression : AndExpression @ANDKW CompareExpression;}</p>
         *
         * @param e1 {@code AndExpression}.
         * @param t2 {@code ANDKW}.
         * @param e3 {@code CompareExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseAndExpression2(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : AddExpression;}</p>
         *
         * @param e1 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @LTTK AddExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @param t2 {@code LTTK}.
         * @param e3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression2(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @LETK AddExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @param t2 {@code LETK}.
         * @param e3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression3(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @EQEQTK AddExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @param t2 {@code EQEQTK}.
         * @param e3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression4(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @NETK AddExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @param t2 {@code NETK}.
         * @param e3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression5(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @GETK AddExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @param t2 {@code GETK}.
         * @param e3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression6(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @GTTK AddExpression;}</p>
         *
         * @param e1 {@code CompareExpression}.
         * @param t2 {@code GTTK}.
         * @param e3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseCompareExpression7(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AddExpression : MulExpression;}</p>
         *
         * @param e1 {@code MulExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseAddExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AddExpression : AddExpression @MINUSTK MulExpression;}</p>
         *
         * @param e1 {@code AddExpression}.
         * @param t2 {@code MINUSTK}.
         * @param e3 {@code MulExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseAddExpression2(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AddExpression : AddExpression @PLUSTK MulExpression;}</p>
         *
         * @param e1 {@code AddExpression}.
         * @param t2 {@code PLUSTK}.
         * @param e3 {@code MulExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseAddExpression3(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : UnaryExpression;}</p>
         *
         * @param e1 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseMulExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @ASTERISKTK UnaryExpression;}</p>
         *
         * @param e1 {@code MulExpression}.
         * @param t2 {@code ASTERISKTK}.
         * @param e3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseMulExpression2(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @SLASHTK UnaryExpression;}</p>
         *
         * @param e1 {@code MulExpression}.
         * @param t2 {@code SLASHTK}.
         * @param e3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseMulExpression3(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @DIVKW UnaryExpression;}</p>
         *
         * @param e1 {@code MulExpression}.
         * @param t2 {@code DIVKW}.
         * @param e3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseMulExpression4(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @MODKW UnaryExpression;}</p>
         *
         * @param e1 {@code MulExpression}.
         * @param t2 {@code MODKW}.
         * @param e3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseMulExpression5(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : ProjExpression;}</p>
         *
         * @param e1 {@code ProjExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseUnaryExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @MINUSTK UnaryExpression;}</p>
         *
         * @param t1 {@code MINUSTK}.
         * @param e2 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseUnaryExpression2(Token t1, Expression e2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @PLUSTK UnaryExpression;}</p>
         *
         * @param t1 {@code PLUSTK}.
         * @param e2 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseUnaryExpression3(Token t1, Expression e2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @NOTKW UnaryExpression;}</p>
         *
         * @param t1 {@code NOTKW}.
         * @param e2 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseUnaryExpression4(Token t1, Expression e2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ProjExpression : ExpressionFactor;}</p>
         *
         * @param e1 {@code ExpressionFactor}.
         * @return The parser call back hook result.
         */
        public Expression parseProjExpression1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ProjExpression : ProjExpression @SQOPENTK Expression SQCLOSETK;}</p>
         *
         * @param e1 {@code ProjExpression}.
         * @param t2 {@code SQOPENTK}.
         * @param e3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public Expression parseProjExpression2(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ProjExpression : ProjExpression @SQOPENTK OptExpression COLONTK OptExpression SQCLOSETK;}</p>
         *
         * @param e1 {@code ProjExpression}.
         * @param t2 {@code SQOPENTK}.
         * @param e3 {@code OptExpression}.
         * @param e5 {@code OptExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseProjExpression3(Expression e1, Token t2, Expression e3, Expression e5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @TRUEKW;}</p>
         *
         * @param t1 {@code TRUEKW}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @FALSEKW;}</p>
         *
         * @param t1 {@code FALSEKW}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @NUMBERTK;}</p>
         *
         * @param t1 {@code NUMBERTK}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @DOUBLETK;}</p>
         *
         * @param t1 {@code DOUBLETK}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @NULLKW;}</p>
         *
         * @param t1 {@code NULLKW}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @STRINGTK;}</p>
         *
         * @param t1 {@code STRINGTK}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @LTTK Type GTTK ExpressionFactor;}</p>
         *
         * @param t1 {@code LTTK}.
         * @param t2 {@code Type}.
         * @param e4 {@code ExpressionFactor}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor07(Token t1, ToolDefType t2, Expression e4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @SQOPENTK SQCLOSETK;}</p>
         *
         * @param t1 {@code SQOPENTK}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor08(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @SQOPENTK Expressions OptComma SQCLOSETK;}</p>
         *
         * @param t1 {@code SQOPENTK}.
         * @param l2 {@code Expressions}.
         * @param t3 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor09(Token t1, List<Expression> l2, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @CUROPENTK CURCLOSETK;}</p>
         *
         * @param t1 {@code CUROPENTK}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor10(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @CUROPENTK Expressions OptComma CURCLOSETK;}</p>
         *
         * @param t1 {@code CUROPENTK}.
         * @param l2 {@code Expressions}.
         * @param t3 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor11(Token t1, List<Expression> l2, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @CUROPENTK MapEntries OptComma CURCLOSETK;}</p>
         *
         * @param t1 {@code CUROPENTK}.
         * @param l2 {@code MapEntries}.
         * @param t3 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor12(Token t1, List<MapEntry> l2, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @PAROPENTK Expression COMMATK Expressions OptComma PARCLOSETK;}</p>
         *
         * @param t1 {@code PAROPENTK}.
         * @param e2 {@code Expression}.
         * @param l4 {@code Expressions}.
         * @param t5 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor13(Token t1, Expression e2, List<Expression> l4, Token t5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : PAROPENTK Expression PARCLOSETK;}</p>
         *
         * @param e2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor14(Expression e2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : ToolInvokeExpression;}</p>
         *
         * @param t1 {@code ToolInvokeExpression}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor15(ToolInvokeExpression t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : Name;}</p>
         *
         * @param t1 {@code Name}.
         * @return The parser call back hook result.
         */
        public Expression parseExpressionFactor16(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MapEntries : Expression @COLONTK Expression;}</p>
         *
         * @param e1 {@code Expression}.
         * @param t2 {@code COLONTK}.
         * @param e3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<MapEntry> parseMapEntries1(Expression e1, Token t2, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MapEntries : MapEntries COMMATK Expression @COLONTK Expression;}</p>
         *
         * @param l1 {@code MapEntries}.
         * @param e3 {@code Expression}.
         * @param t4 {@code COLONTK}.
         * @param e5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<MapEntry> parseMapEntries2(List<MapEntry> l1, Expression e3, Token t4, Expression e5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolInvokeExpression : ToolRef @PAROPENTK ToolArgs OptComma PARCLOSETK;}</p>
         *
         * @param t1 {@code ToolRef}.
         * @param t2 {@code PAROPENTK}.
         * @param l3 {@code ToolArgs}.
         * @param t4 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public ToolInvokeExpression parseToolInvokeExpression1(ToolRef t1, Token t2, List<ToolArgument> l3, Token t4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolInvokeExpression : ToolRef @PAROPENTK PARCLOSETK;}</p>
         *
         * @param t1 {@code ToolRef}.
         * @param t2 {@code PAROPENTK}.
         * @return The parser call back hook result.
         */
        public ToolInvokeExpression parseToolInvokeExpression2(ToolRef t1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolRef : BuiltInTool;}</p>
         *
         * @param t1 {@code BuiltInTool}.
         * @return The parser call back hook result.
         */
        public ToolRef parseToolRef1(ToolRef t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolRef : Name;}</p>
         *
         * @param t1 {@code Name}.
         * @return The parser call back hook result.
         */
        public ToolRef parseToolRef2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInTool : BuiltInIoTool;}</p>
         *
         * @param t1 {@code BuiltInIoTool}.
         * @return The parser call back hook result.
         */
        public ToolRef parseBuiltInTool1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInTool : BuiltInGenericTool;}</p>
         *
         * @param t1 {@code BuiltInGenericTool}.
         * @return The parser call back hook result.
         */
        public ToolRef parseBuiltInTool2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInTool : BuiltInPathTool;}</p>
         *
         * @param t1 {@code BuiltInPathTool}.
         * @return The parser call back hook result.
         */
        public ToolRef parseBuiltInTool3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInTool : BuiltInFileTool;}</p>
         *
         * @param t1 {@code BuiltInFileTool}.
         * @return The parser call back hook result.
         */
        public ToolRef parseBuiltInTool4(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code BuiltInTool : BuiltInDataTool;}</p>
         *
         * @param t1 {@code BuiltInDataTool}.
         * @return The parser call back hook result.
         */
        public ToolRef parseBuiltInTool5(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolArgs : Expression;}</p>
         *
         * @param e1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ToolArgument> parseToolArgs1(Expression e1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolArgs : @IDENTIFIERTK EQTK Expression;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param e3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ToolArgument> parseToolArgs2(Token t1, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolArgs : ToolArgs COMMATK Expression;}</p>
         *
         * @param l1 {@code ToolArgs}.
         * @param e3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ToolArgument> parseToolArgs3(List<ToolArgument> l1, Expression e3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ToolArgs : ToolArgs COMMATK @IDENTIFIERTK EQTK Expression;}</p>
         *
         * @param l1 {@code ToolArgs}.
         * @param t3 {@code IDENTIFIERTK}.
         * @param e5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ToolArgument> parseToolArgs4(List<ToolArgument> l1, Token t3, Expression e5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Name : @IDENTIFIERTK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @return The parser call back hook result.
         */
        public Token parseName1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Name : @RELATIVENAMETK;}</p>
         *
         * @param t1 {@code RELATIVENAMETK}.
         * @return The parser call back hook result.
         */
        public Token parseName2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptComma : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public Token parseOptComma1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptComma : @COMMATK;}</p>
         *
         * @param t1 {@code COMMATK}.
         * @return The parser call back hook result.
         */
        public Token parseOptComma2(Token t1);
    }
}
