//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

include::../_part_attributes.asciidoc[]

[[lang-ref-builtins-file]]
== Built-in file tools

This page describes the built-in I/O tools:

* <<lang-ref-builtins-file-cpfile,cpfile>>
* <<lang-ref-builtins-file-cpdir,cpdir>>
* <<lang-ref-builtins-file-diff,diff>>
* <<lang-ref-builtins-file-exists,exists>>
* <<lang-ref-builtins-file-filenewer,filenewer>>
* <<lang-ref-builtins-file-filesize,filesize>>
* <<lang-ref-builtins-file-find,find>>
* <<lang-ref-builtins-file-isdir,isdir>>
* <<lang-ref-builtins-file-isfile,isfile>>
* <<lang-ref-builtins-file-mkdir,mkdir>>
* <<lang-ref-builtins-file-mvfile,mvfile>>
* <<lang-ref-builtins-file-mvdir,mvdir>>
* <<lang-ref-builtins-file-readlines,readlines>>
* <<lang-ref-builtins-file-rmfile,rmfile>>
* <<lang-ref-builtins-file-rmdir,rmdir>>
* <<lang-ref-builtins-file-writefile,writefile>>

indexterm:[cpfile]

[[lang-ref-builtins-file-cpfile]]
=== cpfile tool

[source, tooldef]
----
tool cpfile(string source, string target, bool overwrite = false)
----

Copies a file from a source location to a target location.

_Parameters_

`source`::
The absolute or relative local file system path of the source file.
May contain both `\` and `/` as path separators.

`target`::
The absolute or relative local file system path of the target file.
May contain both `\` and `/` as path separators.

`overwrite`::
Whether to overwrite the target file if it already exists.

_Runtime errors_

* If the source file does not exist.
* If the source is a directory rather than a file.
* If it can not be determined whether the source path refers to a file or a directory.
* If the target file exists and overwriting is not allowed.
* If the target file exists and overwriting is allowed, but the target refers to a directory rather than a file.
* If the target file exists and overwriting is allowed, but it can not be determined whether the target path refers to a file or a directory.
* If copying the file failed due to an I/O error.

indexterm:[cpdir]

[[lang-ref-builtins-file-cpdir]]
=== cpdir tool

[source, tooldef]
----
tool cpdir(string source, string target)
----

Copies a directory from a source location to a target location.
All files and directories in the source directory are copied recursively.

If the operation fails, part of the operation may have already been performed.

_Parameters_

`source`::
The absolute or relative local file system path of the source directory.
All files and directories in the source directory are copied recursively.
May contain both `\` and `/` as path separators.

`target`::
The absolute or relative local file system path of the target directory.
This is the directory in which the contents of the source directory are copied.
The source directory itself is not copied, only the files and directories contained in the source directory.
May contain both `\` and `/` as path separators.

_Runtime errors_

* If the source directory does not exist.
* If the source is a file rather than a directory.
* If it can not be determined whether the source path refers to a file or a directory.
* If the target directory already exists.
* If the target directory doesn't exist, but one of the ancestors is not a directory.
* If walking the directory (recursively) fails.
* If walking the directory (recursively) encounters a file system cycle (due to symbolic links).
* If a file or (sub-)directory could not be copied due to an I/O error.

indexterm:[diff]

[[lang-ref-builtins-file-diff]]
=== diff tool

[source, tooldef]
----
tool bool diff(string file1, string file2, string output = "-", bool missingAsEmpty = false, bool warnOnDiff = false, bool failOnDiff = false)
----

Computes the differences between two files.

_Parameters_

`file1`::
The absolute or relative local file system path of the first file.
May contain both `\` and `/` as path separators.

`file2`::
The absolute or relative local file system path of the second file.
May contain both `\` and `/` as path separators.

`output`::
Specify whether/where to write a unified diff if the files differ.
Use `+""+` to not write a unified diff, `+"-"+` to write the unified diff to the standard output stream (stdout), or otherwise an absolute or relative local file system path of the file to which to write the unified diff.
May contain both `\` and `/` as path separators.

`missingAsEmpty`::
Treat a missing first/second file as empty (`true`) or as an error (`false`).

`warnOnDiff`::
Emit a warning for differing files (`true`) or not (`false`).
If a warning is emitted to the standard error stream (stderr), the unified diff (if enabled) is printed first.

`failOnDiff`::
Treat differing files as an error (`true`) or not (`false`).
If an error is emitted, the unified diff (if enabled) and warning (if enabled) are printed first.

_Returns_

`true` if the files differ, `false` otherwise.

_Runtime errors_

* If either the first or second file doesn't exist and `missingAsEmpty` is disabled.
* If the first or second file is not a file but a directory.
* If it can not be determined whether the first or second path refers to a file or a directory.
* If an I/O error occurs.
* If the `out` file exists but is a directory rather than a regular file.
* If the `out` file does not exist but cannot be created.
* If the `out` file cannot be opened for writing for any other reason.
* If an I/O error occurs while writing to the `out` file.
* If the `out` file can not be closed.
* If the files differ and `failOnDiff` is enabled.

indexterm:[exists]

[[lang-ref-builtins-file-exists]]
=== exists tool

[source, tooldef]
----
tool bool exists(string path)
----

Does a file or directory with the given path exist?

_Parameters_

`path`::
The absolute or relative local file system path of the file or directory.
May contain both `\` and `/` as path separators.

_Returns_

`true` if the file or directory exists, `false` otherwise.

indexterm:[filenewer]

[[lang-ref-builtins-file-filenewer]]
=== filenewer tool

[source, tooldef]
----
tool bool filenewer(string path, string refpath,       bool allowNonExisting = false, bool sameAsNewer = true)
tool bool filenewer(string path, string... refpaths,   bool allowNonExisting = false, bool sameAsNewer = true)
tool bool filenewer(string path, list string refpaths, bool allowNonExisting = false, bool sameAsNewer = true)
----

Checks whether a file is newer (was modified at a later date/time) than some reference file(s).
Minimum modification time difference that can be detected is 1 millisecond.

_Parameters_

`path`::
The absolute or relative local file system path of the file for which to check whether it is newer than the reference file(s).
May contain both `\` and `/` as path separators.

`refpath`, `refpaths`::
The absolute or relative local file system path of the reference file(s).
May contain both `\` and `/` as path separators.

`allowNonExisting`::
Whether to allow the first file to not exist (`true`) or consider it an error if the first file does not exist (`false`).

`sameAsNewer`::
Whether to treat files with the same last change date as being the same (`false`) or as newer (`true`).

_Returns_

`false` if the first file does not exist (if allowed by enabling `allowNonExisting`), if the first file is older than any the reference files, or if the first file has the same last change date as any of the reference files and `sameAsNewer` is disabled.
`true` if the first file is newer than all of the reference files, if the first file has the same last change date as some the reference files and `sameAsNewer` is enabled and is newer than all of the other reference files, or if the first file has the same last change date as all the reference files and `sameAsNewer` is enabled.

_Runtime errors_

* If the first file does not exist and `allowNonExisting` is disabled.
* If any of the reference files does not exist.
* If any of the files is a directory rather than a file.
* If for any of the paths it can not be determined whether the path refers to a file or a directory.
* If the last change date/time of any of the files can not be determined.

indexterm:[filesize]

[[lang-ref-builtins-file-filesize]]
=== filesize tool

[source, tooldef]
----
tool long filesize(string path, bool missingAsZero = false)
----

Returns the size of the file, in bytes.

_Parameters_

`path`::
The absolute or relative local file system path of the file.
May contain both `\` and `/` as path separators.

`missingAsZero`::
Whether to return 0 if the file does not exist (`true`) or consider it an error if the file does not exist (`false`).

_Returns_

The size of the file in bytes, or `0` if the file is missing and `missingAsZero` is enabled.

_Runtime errors_

* If the file does not exist and `missingAsZero` is disabled.
* If the file is a directory rather than a file.
* If it can not be determined whether the path refers to a file or a directory.
* If the size of the file can not be determined due to an I/O error.

indexterm:[find]

[[lang-ref-builtins-file-find]]
=== find tool

[source, tooldef]
----
tool list string find(string path, string pattern = "*", bool recursive = true, bool files = true, bool dirs = true)
----

Searches a directory for files and/or directories matching a pattern.

_Parameters_

`path`::
The absolute or relative local file system path of the directory in which to search.
The directory itself is never returned.
May contain both `\` and `/` as path separators.

`pattern`::
The pattern to use to match files/directories.
Is a link:https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob[Java NIO glob] pattern, that is matched against single file names or single directory names, and never against paths.
Pattern `+"*"+` matches all files and directories.

`recursive`::
Whether to recursively look in sub-directories.

`files`::
Whether to match files.

`dirs`::
Whether to match directories.

_Returns_

The local file system paths of the matched files and directories, relative against the given root directory from which searching started.

_Runtime errors_

* If the given directory is not found.
* If the given directory is a file rather than a directory.
* If the can not be determined whether the given path refers to a file or a directory.
* If the pattern is invalid.
* If walking the directory (recursively) fails.
* If walking the directory (recursively) encounters a file system cycle (due to symbolic links).
* If the operation fails due to an I/O error.

indexterm:[isdir]

[[lang-ref-builtins-file-isdir]]
=== isdir tool

[source, tooldef]
----
tool bool isdir(string path)
----

Does a directory with the given path exist?

_Parameters_

`path`::
The absolute or relative local file system path of the directory.
May contain both `\` and `/` as path separators.

_Returns_

`true` if the directory exists, `false` if it doesn't exist or is not a directory.

indexterm:[isfile]

[[lang-ref-builtins-file-isfile]]
=== isfile tool

[source, tooldef]
----
tool bool isfile(string path)
----

Does a file with the given path exist?

_Parameters_

`path`::
The absolute or relative local file system path of the file.
May contain both `\` and `/` as path separators.

_Returns_

`true` if the file exists, `false` if it doesn't exist or is not a file.

indexterm:[mkdir]

[[lang-ref-builtins-file-mkdir]]
=== mkdir tool

[source, tooldef]
----
tool mkdir(string path, bool force = false, bool parents = true)
----

Creates the given directory, and optionally its parents as needed.

_Parameters_

`path`::
The absolute or relative local file system path of the directory to create.
May contain both `\` and `/` as path separators.

`force`::
Whether to skip creating the directory if it already exists (`true`) or fail if it already exists (`false`).

`parents`::
Whether to allow creating parents as needed (`true`) or fail if the parent directory does not exist (`false`).

_Runtime errors_

* If the directory already exists and `force` is disabled.
* If creating the directory or any of its parents fails, due to an I/O error.

indexterm:[mvfile]

[[lang-ref-builtins-file-mvfile]]
=== mvfile tool

[source, tooldef]
----
tool mvfile(string source, string target, bool overwrite = false)
----

Moves a file from a source location to a target location.
This can be used to rename a file and/or move it to another directory.

_Parameters_

`source`::
The absolute or relative local file system path of the source file.
May contain both `\` and `/` as path separators.

`target`::
The absolute or relative local file system path of the target file.
May contain both `\` and `/` as path separators.

`overwrite`::
Whether to overwrite the target file if it already exists.

_Runtime errors_

* If the source file does not exist.
* If the source is a directory rather than a file.
* If it can not be determined whether the source path refers to a file or a directory.
* If the target file exist and overwriting is not allowed.
* If the target file exists and overwriting is allowed, but the target refers to a directory rather than a file.
* If the target file exists and overwriting is allowed, but it can not be determined whether the target path refers to a file or a directory.
* If moving the file fails due to an I/O error.

indexterm:[mvdir]

[[lang-ref-builtins-file-mvdir]]
=== mvdir tool

[source, tooldef]
----
tool mvdir(string source, string target)
----

Moves a directory from a source location to a target location.
The directory and all files and directories in it are moved recursively.

The operation is implemented as a copy from source to target, followed by a remove of the source.
If the operation fails, part of the operation may have already been performed.

_Parameters_

`source`::
The absolute or relative local file system path of the source directory.
The directory itself and all files and directories in it are moved recursively.
May contain both `\` and `/` as path separators.

`target`::
The absolute or relative local file system path of the target directory.
This is the directory into which the contents of the source directory are moved.
May contain both `\` and `/` as path separators.

_Runtime errors_

* If the source directory does not exist.
* If the source is a file rather than a directory.
* If it can not be determined whether the source path refers to a file or a directory.
* If the target directory already exists.
* If the target directory doesn't exist but one of the ancestors is not a directory.
* If walking the directory (recursively) fails.
* If walking the directory (recursively) encounters a file system cycle (due to symbolic links).
* If a file or (sub-)directory can not be copied or removed, due to an I/O error.

indexterm:[readlines]

[[lang-ref-builtins-file-readlines]]
=== readlines tool

[source, tooldef]
----
tool list string readlines(string path)
----

Read lines of text from a file.

_Parameters_

`path`::
The absolute or relative local file system path of the file to read.
May contain both `\` and `/` as path separators.

_Returns_

The lines of text from the file.

_Runtime errors_

* If the file does not exist.
* If the path refers to a directory rather than a file.
* If it can not be determined whether the path refers to a file or a directory.
* If for some other reason can not be opened for reading.
* If an I/O error occurs.
* If the file can not be closed.

indexterm:[rmfile]

[[lang-ref-builtins-file-rmfile]]
=== rmfile tool

[source, tooldef]
----
tool bool rmfile(string path, bool force = false)
----

Removes a file.

_Parameters_

`path`::
The absolute or relative local file system path of the file.
May contain both `\` and `/` as path separators.

`force`::
Whether to ignore non-existing files (`true`) or consider it an error (`false`).

_Returns_

`true` if the file was removed, `false` if it could not be removed because it did not exist and force is enabled.

_Runtime errors_

* If the file does not exist and `force` is disabled.
* If the file is a directory rather than a file.
* If it can not be determined whether the path refers to a file or a directory.
* If an I/O error occurs.
* If the file can not be removed for some other reason.

indexterm:[rmdir]

[[lang-ref-builtins-file-rmdir]]
=== rmdir tool

[source, tooldef]
----
tool bool rmdir(string path, bool force = false)
----

Removes a directory, recursively.

_Parameters_

`path`::
The absolute or relative local file system path of the directory.
May contain both `\` and `/` as path separators.

`force`::
Whether to ignore non-existing directories (`true`) or consider it an error (`false`).

_Returns_

`true` if the directory was removed, `false` if it could not be removed because it did not exist and `force` is enabled.

_Runtime errors_

* If the directory does not exist and `force` is disabled.
* If the directory is a file rather than a directory.
* If it can not be determined whether the path refers to a file or a directory.
* If an I/O error occurs.
* If walking the directory (recursively) fails.
* If walking the directory (recursively) encounters a file system cycle (due to symbolic links).
* If the directory or one of its sub-files or sub-directories can not be removed for some other reason.

indexterm:[writefile]

[[lang-ref-builtins-file-writefile]]
=== writefile tool

[source, tooldef]
----
tool writefile(string path, string text,       bool append = false)
tool writefile(string path, list string lines, bool append = false)
----

Writes text to a file.

_Parameters_

`path`::
The absolute or relative local file system path of the file.
May contain both `\` and `/` as path separators.

`text`, `lines`::
The text or lines of text to write to the file.

`append`::
Whether to append the lines text to the file if it already exists (`true`), or overwrite the file if it already exists (`false`).

_Runtime errors_

* If the path exists but is a directory rather than a regular file.
* If the file does not exist, but cannot be created.
* If the file can not be opened for writing for any other reason.
* If writing to the file fails due to an I/O error.
* If closing the file fails.
