//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:chi" import chisim;

// Configuration.
string test_path = ".";
string test_pattern = "*.chi";
list string default_options = ["--seed=135", "--devmode=1"];
map(string:list string) test_options = {};
set string test_skip = {};

// Initialize counts.
int count = 0;
int successes = 0;
int failures = 0;
int skipped = 0;

// Find tests.
list string tests = find(test_path, test_pattern);
for i in range(tests):: tests[i] = replace(pathjoin(test_path, tests[i]), "\\", "/");
for i in reverse(range(tests)):
    if contains(test_skip, tests[i]):
        tests = delidx(tests, i);
        count = count + 1;
        skipped = skipped + 1;
    end
end

// Test all tests.
for test in tests:
    // Get test specific options.
    list string options = default_options;
    list string extra_options;
    if contains(test_options, test):: extra_options = test_options[test];
    options = options + extra_options;

    // Print what we are testing.
    outln("Testing \"%s\" using options \"%s\"...", test, join(extra_options, " "));

    // Get paths.
    string compile_out_exp  = chfileext(test, oldext="chi", newext="compile.out");
    string compile_err_exp  = chfileext(test, oldext="chi", newext="compile.err");
    string compile_out_real = chfileext(test, oldext="chi", newext="compile.out.real");
    string compile_err_real = chfileext(test, oldext="chi", newext="compile.err.real");

    string run_out_exp  = chfileext(test, oldext="chi", newext="run.out");
    string run_err_exp  = chfileext(test, oldext="chi", newext="run.err");
    string run_out_real = chfileext(test, oldext="chi", newext="run.out.real");
    string run_err_real = chfileext(test, oldext="chi", newext="run.err.real");

    // Compile.
    list string compile_options = [test] + options + ["--java-compile=1", "--java-compiler=jdk", "--jar=1"];
    chisim(compile_options, stdout=compile_out_real, stderr=compile_err_real, ignoreNonZeroExitCode=true);

    // Compare stdout/stderr.
    bool compile_stderr_diff = diff(compile_err_exp, compile_err_real, missingAsEmpty=true, warnOnDiff=true);
    bool compile_stdout_diff = diff(compile_out_exp, compile_out_real, missingAsEmpty=true, warnOnDiff=true);
    if not compile_stderr_diff:: rmfile(compile_err_real);
    if not compile_stdout_diff:: rmfile(compile_out_real);

    // Update counts.
    int diff_count = 0;
    if compile_stderr_diff:: diff_count = diff_count + 1;
    if compile_stdout_diff:: diff_count = diff_count + 1;

    // Next phase.
    if diff_count == 0:
        string test2 = chfileext(test, oldext="chi", newext="cchi");

        // Run.
        if exists(run_out_exp) or exists(run_err_exp):
            list string run_options = [test2] + options;
            chisim(run_options, stdout=run_out_real, stderr=run_err_real, ignoreNonZeroExitCode=true);

            // Compare stdout/stderr.
            bool run_stderr_diff = diff(run_err_exp, run_err_real, missingAsEmpty=true, warnOnDiff=true);
            bool run_stdout_diff = diff(run_out_exp, run_out_real, missingAsEmpty=true, warnOnDiff=true);
            if not run_stderr_diff:: rmfile(run_err_real);
            if not run_stdout_diff:: rmfile(run_out_real);

            // Update counts.
            if run_stderr_diff:: diff_count = diff_count + 1;
            if run_stdout_diff:: diff_count = diff_count + 1;
        end

        // Cleanup.
        if exists(test2):: rmfile(test2);
    end

    // Update counts.
    count = count + 1;
    if diff_count == 0:: successes = successes + 1;
    if diff_count > 0:: failures = failures + 1;
end

// Custom cleanup.
if exists("data_file.txt"):: rmfile("data_file.txt");

// Get result message.
string rslt;
if failures == 0: rslt = "SUCCESS"; else rslt = "FAILURE"; end

string msg = fmt("Test %s (%s): %d tests, %d successes, %d failures, %d skipped.",
                 rslt, test_path, count, successes, failures, skipped);

// Output result message.
if failures == 0:
    outln(msg);
else
    errln(msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit failures;
