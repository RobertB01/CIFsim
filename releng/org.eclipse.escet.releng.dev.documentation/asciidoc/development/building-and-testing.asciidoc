/////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the terms
// of the MIT License which is available at https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
/////////////////////////////////////////////////////////////////////////////////

include::_part_attributes.asciidoc[]

indexterm:[build]
indexterm:[Maven]
indexterm:[Tycho]
indexterm:[Jenkins]
indexterm:[test]
indexterm:[JUnit]

[[development-building-and-testing-chapter-index]]
== Building and testing

The Eclipse ESCET software can be built using Maven/Tycho.
The build will build every individual plugin and feature, as well as the update site, product and all documentation.
Manually run it in one of the following ways:

* In an Eclipse-based <<development-dev-env-setup-chapter-index,development environment>>, select menu:Run[Run Configurations...] to open the _Run Configurations_ dialog.
From the list at the left, under _Maven Build_, select the _build_ launch configuration, and click the btn:[Run] button to run the build.
+
Additional launch configurations are available to build documentation projects separately.

* On Windows, in a command prompt, with the root of the Git repository as current directory, enter `.\build.cmd` and press kbd:[Enter].
This requires Maven to be available on your system (to be on your `PATH`).
Make sure to use the same Java and Maven versions as for the Eclipse-based development environment.

* On Linux/macOS, in a shell, with the root of the Git repository as current directory, enter `./build.sh` and press kbd:[Enter].
This requires Maven to be available on your system (to be on your `PATH`).
Make sure to use the same Java and Maven versions as for the Eclipse-based development environment.

Builds are in certain cases also automatically executed on our build server:

* link:https://ci.eclipse.org/escet/[Eclipse ESCET Jenkins server]

If they are not automatically executed, login to Jenkins, open the desired build and select menu:Scan GitLab Project Now[] to force GitLab to scan for new branches, commits, etc.

Run tests in one of the following ways:

* As part of the build, all tests will be performed as well.

* A single `test-all` launch configuration to run all tests is available under the _Launch Group_ section of the _Run Configurations_ dialog.

* Launch configurations to run various subsets of the tests are also available, under the _JUnit Test_ and _JUnit Plug-in Test_ sections of the _Run Configurations_ dialog.

When a tool has been updated, the test outputs may change.
The expected outputs can be updated as follows.

. Run the integration test under the _JUnit Plug-in Test_ section of the _Run Configurations_ dialog (e.g. _test-cif-integration_).

. If an output differs from the expected output, the output is saved with a `.real` postfix.

. Run the _copy all_ script under _JUnit Plug-in Test_ section to replace the expected outputs with the test outputs (e.g., _test-cif-integration-copy-all_).

. Run the integration test again to assure that all expected test outputs have been updated.
