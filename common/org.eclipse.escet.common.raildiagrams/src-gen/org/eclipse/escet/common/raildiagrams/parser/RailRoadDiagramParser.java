//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Disable Eclipse Java formatter for generated code file:
// @formatter:off

package org.eclipse.escet.common.raildiagrams.parser;

import static org.eclipse.escet.common.java.Strings.fmt;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import org.eclipse.escet.common.raildiagrams.railroad.DiagramElement;
import org.eclipse.escet.common.raildiagrams.railroad.RailRule;
import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.ParserHooksBase;
import org.eclipse.escet.setext.runtime.Token;

/**
 * RailRoadDiagramParser.
 *
 * <p>This parser is generated by SeText for main symbol
 * "specification".</p>
 */
@SuppressWarnings("unchecked")
public final class RailRoadDiagramParser extends Parser<List<RailRule>> {
    /** The names of the non-terminals, ordered by their unique ids. */
    private static final String[] NON_TERMINAL_NAMES = {
        "specification",
        "rule",
        "body1",
        "body2",
        "body3",
        "body4",
        "body5",
    };

    /**
     * The entry symbol names for each of the parser states, and {@code null}
     * for the initial state.
     */
    private static final String[] ENTRY_SYMBOL_NAMES = new String[] {
        null,
        "BSLASH_BSLASH",
        "PAROPEN",
        "IDENTIFIER",
        "DQUOTE_STRING",
        "SQUOTE_STRING",
        "BR_STRING",
        "body1",
        "body2",
        "body3",
        "body4",
        "body5",
        "rule",
        "specification",
        "rule",
        "SEMI",
        "SEMI",
        "QUEST",
        "STAR",
        "PLUS",
        "IDENTIFIER",
        "body4",
        "body5",
        "body5",
        "PIPE",
        "BR_STRING",
        "body2",
        "body2",
        "body2",
        "COLON",
        "body1",
        "PARCLOSE",
        "body1",
        "PARCLOSE",
    };

    /** Parser call back hook methods. */
    private final RailRoadDiagramHooks hooks;

    /** Whether parsing has completed (final result has been accepted). */
    private boolean accept;

    /** The parse result, but only if {@code #accept} is {@code true}. */
    private List<RailRule> acceptObject;

    /** The current scanner token to process, if any. */
    private Token token;

    /** Whether parsing has resulted in a reduce action. */
    private boolean reduce;

    /** The state from which to reduce, if {@code #reduce} is {@code true}. */
    private int reduceState;

    /** The non-terminal to reduce, if {@code #reduce} is {@code true}. */
    private int reduceNonTerminal;

    /** Constructor for the {@link RailRoadDiagramParser} class. */
    public RailRoadDiagramParser() {
        super(new RailRoadDiagramScanner());
        entrySymbolNames = ENTRY_SYMBOL_NAMES;
        firstTerminals = FirstTerminals.FIRST_TERMINALS;
        firstTerminalsReduced = FirstTerminalsReduced.FIRST_TERMINALS_REDUCED;
        reducibleNonTerminals = ReducibleNonTerminals.REDUCIBLE_NON_TERMINALS;
        reducibleNonTerminalsReduced = ReducibleNonTerminalsReduced.REDUCIBLE_NON_TERMINALS_REDUCED;
        hooks = ((RailRoadDiagramScanner)scanner).hooks;
    }

    @Override
    public ParserHooksBase getHooks() {
        return hooks;
    }

    @Override
    protected final List<RailRule> parse() throws IOException {
        token = nextToken();
        int state;

        accept = false;

        while (true) {
            // Perform action.
            state = getCurrentState();
            reduce = false;

            switch (state) {
                case 0:
                    action0();
                    break;
                case 1:
                    action1();
                    break;
                case 2:
                    action2();
                    break;
                case 3:
                    action3();
                    break;
                case 4:
                    action4();
                    break;
                case 5:
                    action5();
                    break;
                case 6:
                    action6();
                    break;
                case 7:
                    action7();
                    break;
                case 8:
                    action8();
                    break;
                case 9:
                    action9();
                    break;
                case 10:
                    action10();
                    break;
                case 11:
                    action11();
                    break;
                case 12:
                    action12();
                    break;
                case 13:
                    action13();
                    break;
                case 14:
                    action14();
                    break;
                case 15:
                    action15();
                    break;
                case 16:
                    action16();
                    break;
                case 17:
                    action17();
                    break;
                case 18:
                    action18();
                    break;
                case 19:
                    action19();
                    break;
                case 20:
                    action20();
                    break;
                case 21:
                    action21();
                    break;
                case 22:
                    action22();
                    break;
                case 23:
                    action23();
                    break;
                case 24:
                    action24();
                    break;
                case 25:
                    action25();
                    break;
                case 26:
                    action26();
                    break;
                case 27:
                    action27();
                    break;
                case 28:
                    action28();
                    break;
                case 29:
                    action29();
                    break;
                case 30:
                    action30();
                    break;
                case 31:
                    action31();
                    break;
                case 32:
                    action32();
                    break;
                case 33:
                    action33();
                    break;
                default:
                    String msg = "Unknown parser state: " + state;
                    throw new RuntimeException(msg);
            }

            // Accept action.
            if (accept) {
                return acceptObject;
            }

            // Shift action.
            if (!reduce) {
                continue;
            }

            // Perform goto (as part of a reduce action).
            switch (reduceState) {
                case 0:
                    goto0();
                    break;
                case 1:
                    goto1();
                    break;
                case 2:
                    goto2();
                    break;
                case 3:
                    goto3();
                    break;
                case 4:
                    goto4();
                    break;
                case 5:
                    goto5();
                    break;
                case 6:
                    goto6();
                    break;
                case 7:
                    goto7();
                    break;
                case 8:
                    goto8();
                    break;
                case 9:
                    goto9();
                    break;
                case 10:
                    goto10();
                    break;
                case 11:
                    goto11();
                    break;
                case 12:
                    goto12();
                    break;
                case 13:
                    goto13();
                    break;
                case 14:
                    goto14();
                    break;
                case 15:
                    goto15();
                    break;
                case 16:
                    goto16();
                    break;
                case 17:
                    goto17();
                    break;
                case 18:
                    goto18();
                    break;
                case 19:
                    goto19();
                    break;
                case 20:
                    goto20();
                    break;
                case 21:
                    goto21();
                    break;
                case 22:
                    goto22();
                    break;
                case 23:
                    goto23();
                    break;
                case 24:
                    goto24();
                    break;
                case 25:
                    goto25();
                    break;
                case 26:
                    goto26();
                    break;
                case 27:
                    goto27();
                    break;
                case 28:
                    goto28();
                    break;
                case 29:
                    goto29();
                    break;
                case 30:
                    goto30();
                    break;
                case 31:
                    goto31();
                    break;
                case 32:
                    goto32();
                    break;
                case 33:
                    goto33();
                    break;
                default:
                    String msg = fmt("Unknown reduce state %d.", reduceState);
                    throw new RuntimeException(msg);
            }
        }
    }

    /**
     * Parser action code for parser state 0.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action0() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 9: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 12: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 1.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action1() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : BSLASH_BSLASH;
                doReduce1(token, 6);
                doReduce2();

                Optional<DiagramElement> o = hooks.parsebody54();

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 2.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action2() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 12: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 8: {
                // Shift 31.
                token = doShift(token, 31);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 3.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action3() throws IOException {
        switch (token.id) {
            case 1: {
                // Shift 29.
                token = doShift(token, 29);
                return;
            }

            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : IDENTIFIER;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Optional<DiagramElement> o = hooks.parsebody56((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 4.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action4() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : DQUOTE_STRING;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Optional<DiagramElement> o = hooks.parsebody52((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 5.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action5() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : SQUOTE_STRING;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Optional<DiagramElement> o = hooks.parsebody51((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 6.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action6() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 7.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action7() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 0: {
                // Reduce rule : body1;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                RailRule o = hooks.parserule1((List<DiagramElement>)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 8.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action8() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8: {
                // Reduce body1 : body2;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                List<DiagramElement> o = hooks.parsebody11((DiagramElement)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 9.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action9() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 2: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 3: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 0:
            case 4:
            case 8: {
                // Reduce body2 : body3;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                DiagramElement o = hooks.parsebody21((List<Optional<DiagramElement>>)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 10.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action10() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body3 : body4;
                doReduce1(token, 4);
                Object o1 = doReduce2();

                List<Optional<DiagramElement>> o = hooks.parsebody31((Optional<DiagramElement>)o1);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 11.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action11() throws IOException {
        switch (token.id) {
            case 5: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 0:
            case 2:
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body4 : body5;
                doReduce1(token, 5);
                Object o1 = doReduce2();

                Optional<DiagramElement> o = hooks.parsebody41((Optional<DiagramElement>)o1);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 12.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action12() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 13.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action13() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 9: {
                // Shift 3.
                token = doShift(token, 3);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 12: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 15: {
                // Accept.
                Object rslt = doAccept(token);
                accept = true;
                acceptObject = (List<RailRule>)rslt;
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 14.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action14() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 15.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action15() throws IOException {
        switch (token.id) {
            case 6:
            case 7:
            case 9:
            case 10:
            case 11:
            case 12:
            case 15: {
                // Reduce specification : specification rule SEMI;
                doReduce1(token, 0);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<RailRule> o = hooks.parsespecification2((List<RailRule>)o1, (RailRule)o2);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 16.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action16() throws IOException {
        switch (token.id) {
            case 6:
            case 7:
            case 9:
            case 10:
            case 11:
            case 12:
            case 15: {
                // Reduce specification : rule SEMI;
                doReduce1(token, 0);
                doReduce2();
                Object o1 = doReduce2();

                List<RailRule> o = hooks.parsespecification1((RailRule)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 17.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action17() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body4 : body5 QUEST;
                doReduce1(token, 5);
                doReduce2();
                Object o1 = doReduce2();

                Optional<DiagramElement> o = hooks.parsebody42((Optional<DiagramElement>)o1);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 18.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action18() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 19.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action19() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 20.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action20() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : IDENTIFIER;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                Optional<DiagramElement> o = hooks.parsebody56((Token)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 21.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action21() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body3 : body3 body4;
                doReduce1(token, 4);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<Optional<DiagramElement>> o = hooks.parsebody32((List<Optional<DiagramElement>>)o1, (Optional<DiagramElement>)o2);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 22.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action22() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8: {
                // Reduce body2 : body3 PLUS body5;
                doReduce1(token, 3);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                DiagramElement o = hooks.parsebody23((List<Optional<DiagramElement>>)o1, (Optional<DiagramElement>)o3);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 23.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action23() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8: {
                // Reduce body2 : body3 STAR body5;
                doReduce1(token, 3);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                DiagramElement o = hooks.parsebody22((List<Optional<DiagramElement>>)o1, (Optional<DiagramElement>)o3);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 24.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action24() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 12: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 25.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action25() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 26.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action26() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8: {
                // Reduce body1 : body1 PIPE body2;
                doReduce1(token, 2);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<DiagramElement> o = hooks.parsebody13((List<DiagramElement>)o1, (DiagramElement)o3);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 27.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action27() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8: {
                // Reduce body1 : body1 PIPE BR_STRING body2;
                doReduce1(token, 2);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<DiagramElement> o = hooks.parsebody14((List<DiagramElement>)o1, (Token)o3, (DiagramElement)o4);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 28.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action28() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8: {
                // Reduce body1 : BR_STRING body2;
                doReduce1(token, 2);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<DiagramElement> o = hooks.parsebody12((Token)o1, (DiagramElement)o2);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 29.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action29() throws IOException {
        switch (token.id) {
            case 6: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 10: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 11: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 12: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 9: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 30.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action30() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 0: {
                // Reduce rule : IDENTIFIER COLON body1;
                doReduce1(token, 1);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                RailRule o = hooks.parserule2((Token)o1, (List<DiagramElement>)o3);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 31.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action31() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : PAROPEN PARCLOSE;
                doReduce1(token, 6);
                doReduce2();
                doReduce2();

                Optional<DiagramElement> o = hooks.parsebody55();

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 32.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action32() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 8: {
                // Shift 33.
                token = doShift(token, 33);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 33.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action33() throws IOException {
        switch (token.id) {
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11: {
                // Reduce body5 : PAROPEN body1 PARCLOSE;
                doReduce1(token, 6);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                Optional<DiagramElement> o = hooks.parsebody53((List<DiagramElement>)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /** Parser goto code for parser state 0. */
    private final void goto0() {
        switch (reduceNonTerminal) {
            case 0:
                // specification
                doGoto(13);
                return;

            case 1:
                // rule
                doGoto(12);
                return;

            case 2:
                // body1
                doGoto(7);
                return;

            case 3:
                // body2
                doGoto(8);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 1. */
    private final void goto1() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 2. */
    private final void goto2() {
        switch (reduceNonTerminal) {
            case 2:
                // body1
                doGoto(32);
                return;

            case 3:
                // body2
                doGoto(8);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 3. */
    private final void goto3() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 4. */
    private final void goto4() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 5. */
    private final void goto5() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 6. */
    private final void goto6() {
        switch (reduceNonTerminal) {
            case 3:
                // body2
                doGoto(28);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 7. */
    private final void goto7() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 8. */
    private final void goto8() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 9. */
    private final void goto9() {
        switch (reduceNonTerminal) {
            case 5:
                // body4
                doGoto(21);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 10. */
    private final void goto10() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 11. */
    private final void goto11() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 12. */
    private final void goto12() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 13. */
    private final void goto13() {
        switch (reduceNonTerminal) {
            case 1:
                // rule
                doGoto(14);
                return;

            case 2:
                // body1
                doGoto(7);
                return;

            case 3:
                // body2
                doGoto(8);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 14. */
    private final void goto14() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 15. */
    private final void goto15() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 16. */
    private final void goto16() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 17. */
    private final void goto17() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 18. */
    private final void goto18() {
        switch (reduceNonTerminal) {
            case 6:
                // body5
                doGoto(23);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 19. */
    private final void goto19() {
        switch (reduceNonTerminal) {
            case 6:
                // body5
                doGoto(22);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 20. */
    private final void goto20() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 21. */
    private final void goto21() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 22. */
    private final void goto22() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 23. */
    private final void goto23() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 24. */
    private final void goto24() {
        switch (reduceNonTerminal) {
            case 3:
                // body2
                doGoto(26);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 25. */
    private final void goto25() {
        switch (reduceNonTerminal) {
            case 3:
                // body2
                doGoto(27);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 26. */
    private final void goto26() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 27. */
    private final void goto27() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 28. */
    private final void goto28() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 29. */
    private final void goto29() {
        switch (reduceNonTerminal) {
            case 2:
                // body1
                doGoto(30);
                return;

            case 3:
                // body2
                doGoto(8);
                return;

            case 4:
                // body3
                doGoto(9);
                return;

            case 5:
                // body4
                doGoto(10);
                return;

            case 6:
                // body5
                doGoto(11);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 30. */
    private final void goto30() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 31. */
    private final void goto31() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 32. */
    private final void goto32() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 33. */
    private final void goto33() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    @Override
    protected final String getNonTerminalName(int nonTerminalId) {
        return NON_TERMINAL_NAMES[nonTerminalId];
    }

    /** See {@code Parser.firstTerminals}. */
    private static final class FirstTerminals {
        /** See {@code Parser.firstTerminals}. */
        private static final int[][] FIRST_TERMINALS = new int[][] {
            {6, 7, 9, 10, 11, 12}, // state 0
            {}, // state 1
            {6, 7, 8, 9, 10, 11, 12}, // state 2
            {1}, // state 3
            {}, // state 4
            {}, // state 5
            {6, 7, 9, 10, 11}, // state 6
            {4}, // state 7
            {}, // state 8
            {2, 3, 6, 7, 9, 10, 11}, // state 9
            {}, // state 10
            {5}, // state 11
            {0}, // state 12
            {6, 7, 9, 10, 11, 12, 15}, // state 13
            {0}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {6, 7, 9, 10, 11}, // state 18
            {6, 7, 9, 10, 11}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            {6, 7, 9, 10, 11, 12}, // state 24
            {6, 7, 9, 10, 11}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            {6, 7, 9, 10, 11, 12}, // state 29
            {4}, // state 30
            {}, // state 31
            {4, 8}, // state 32
            {}, // state 33
        };
    }

    /** See {@code Parser.firstTerminalsReduced}. */
    private static final class FirstTerminalsReduced {
        /** See {@code Parser.firstTerminalsReduced}. */
        private static final int[][][] FIRST_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {0, 6, 7, 9, 10, 11, 12, 15},
                {1, 0},
                {2, 4},
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            {}, // state 1
            { // state 2
                {2, 4, 8},
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            {}, // state 3
            {}, // state 4
            {}, // state 5
            { // state 6
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            {}, // state 7
            {}, // state 8
            { // state 9
                {6, 5},
            },
            {}, // state 10
            {}, // state 11
            {}, // state 12
            { // state 13
                {1, 0},
                {2, 4},
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            { // state 24
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            { // state 25
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            {}, // state 26
            {}, // state 27
            {}, // state 28
            { // state 29
                {2, 4},
                {4, 2, 3, 6, 7, 9, 10, 11},
                {6, 5},
            },
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
        };
    }

    /** See {@code Parser.reducibleNonTerminals}. */
    private static final class ReducibleNonTerminals {
        /** See {@code Parser.reducibleNonTerminals}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS = new int[][][] {
            {}, // state 0
            { // state 1
                {6, 1},
            },
            {}, // state 2
            { // state 3
                {6, 1},
            },
            { // state 4
                {6, 1},
            },
            { // state 5
                {6, 1},
            },
            {}, // state 6
            { // state 7
                {1, 1},
            },
            { // state 8
                {2, 1},
            },
            { // state 9
                {3, 1},
            },
            { // state 10
                {4, 1},
            },
            { // state 11
                {5, 1},
            },
            {}, // state 12
            {}, // state 13
            {}, // state 14
            { // state 15
                {0, 3},
            },
            { // state 16
                {0, 2},
            },
            { // state 17
                {5, 2},
            },
            {}, // state 18
            {}, // state 19
            { // state 20
                {6, 1},
            },
            { // state 21
                {4, 2},
            },
            { // state 22
                {3, 3},
            },
            { // state 23
                {3, 3},
            },
            {}, // state 24
            {}, // state 25
            { // state 26
                {2, 3},
            },
            { // state 27
                {2, 4},
            },
            { // state 28
                {2, 2},
            },
            {}, // state 29
            { // state 30
                {1, 3},
            },
            { // state 31
                {6, 2},
            },
            {}, // state 32
            { // state 33
                {6, 3},
            },
        };
    }

    /** See {@code Parser.reducibleNonTerminalsReduced}. */
    private static final class ReducibleNonTerminalsReduced {
        /** See {@code Parser.reducibleNonTerminalsReduced}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {2, 1, 0},
                {3, 2, 0},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 1
            { // state 2
                {3, 2, 0},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 3
            {}, // state 4
            {}, // state 5
            { // state 6
                {3, 2, 1},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 7
            {}, // state 8
            { // state 9
                {5, 4, 1},
                {6, 5, 0},
            },
            {}, // state 10
            {}, // state 11
            {}, // state 12
            { // state 13
                {2, 1, 0},
                {3, 2, 0},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            { // state 18
                {6, 3, 2},
            },
            { // state 19
                {6, 3, 2},
            },
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            { // state 24
                {3, 2, 2},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            { // state 25
                {3, 2, 3},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 26
            {}, // state 27
            {}, // state 28
            { // state 29
                {2, 1, 2},
                {3, 2, 0},
                {4, 3, 0},
                {5, 4, 0},
                {6, 5, 0},
            },
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
        };
    }

    /** Parser call back hooks for {@link RailRoadDiagramParser}. */
    public interface Hooks extends ParserHooksBase {
        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code specification : rule SEMI;}</p>
         *
         * @param r1 {@code rule}.
         * @return The parser call back hook result.
         */
        public List<RailRule> parsespecification1(RailRule r1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code specification : specification rule SEMI;}</p>
         *
         * @param l1 {@code specification}.
         * @param r2 {@code rule}.
         * @return The parser call back hook result.
         */
        public List<RailRule> parsespecification2(List<RailRule> l1, RailRule r2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code rule : body1;}</p>
         *
         * @param l1 {@code body1}.
         * @return The parser call back hook result.
         */
        public RailRule parserule1(List<DiagramElement> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code rule : @IDENTIFIER COLON body1;}</p>
         *
         * @param t1 {@code IDENTIFIER}.
         * @param l3 {@code body1}.
         * @return The parser call back hook result.
         */
        public RailRule parserule2(Token t1, List<DiagramElement> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body1 : body2;}</p>
         *
         * @param d1 {@code body2}.
         * @return The parser call back hook result.
         */
        public List<DiagramElement> parsebody11(DiagramElement d1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body1 : @BR_STRING body2;}</p>
         *
         * @param t1 {@code BR_STRING}.
         * @param d2 {@code body2}.
         * @return The parser call back hook result.
         */
        public List<DiagramElement> parsebody12(Token t1, DiagramElement d2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body1 : body1 PIPE body2;}</p>
         *
         * @param l1 {@code body1}.
         * @param d3 {@code body2}.
         * @return The parser call back hook result.
         */
        public List<DiagramElement> parsebody13(List<DiagramElement> l1, DiagramElement d3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body1 : body1 PIPE @BR_STRING body2;}</p>
         *
         * @param l1 {@code body1}.
         * @param t3 {@code BR_STRING}.
         * @param d4 {@code body2}.
         * @return The parser call back hook result.
         */
        public List<DiagramElement> parsebody14(List<DiagramElement> l1, Token t3, DiagramElement d4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body2 : body3;}</p>
         *
         * @param l1 {@code body3}.
         * @return The parser call back hook result.
         */
        public DiagramElement parsebody21(List<Optional<DiagramElement>> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body2 : body3 STAR body5;}</p>
         *
         * @param l1 {@code body3}.
         * @param o3 {@code body5}.
         * @return The parser call back hook result.
         */
        public DiagramElement parsebody22(List<Optional<DiagramElement>> l1, Optional<DiagramElement> o3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body2 : body3 PLUS body5;}</p>
         *
         * @param l1 {@code body3}.
         * @param o3 {@code body5}.
         * @return The parser call back hook result.
         */
        public DiagramElement parsebody23(List<Optional<DiagramElement>> l1, Optional<DiagramElement> o3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body3 : body4;}</p>
         *
         * @param o1 {@code body4}.
         * @return The parser call back hook result.
         */
        public List<Optional<DiagramElement>> parsebody31(Optional<DiagramElement> o1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body3 : body3 body4;}</p>
         *
         * @param l1 {@code body3}.
         * @param o2 {@code body4}.
         * @return The parser call back hook result.
         */
        public List<Optional<DiagramElement>> parsebody32(List<Optional<DiagramElement>> l1, Optional<DiagramElement> o2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body4 : body5;}</p>
         *
         * @param o1 {@code body5}.
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody41(Optional<DiagramElement> o1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body4 : body5 QUEST;}</p>
         *
         * @param o1 {@code body5}.
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody42(Optional<DiagramElement> o1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body5 : @SQUOTE_STRING;}</p>
         *
         * @param t1 {@code SQUOTE_STRING}.
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody51(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body5 : @DQUOTE_STRING;}</p>
         *
         * @param t1 {@code DQUOTE_STRING}.
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody52(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body5 : PAROPEN body1 PARCLOSE;}</p>
         *
         * @param l2 {@code body1}.
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody53(List<DiagramElement> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body5 : BSLASH_BSLASH;}</p>
         *
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody54();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body5 : PAROPEN PARCLOSE;}</p>
         *
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody55();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code body5 : @IDENTIFIER;}</p>
         *
         * @param t1 {@code IDENTIFIER}.
         * @return The parser call back hook result.
         */
        public Optional<DiagramElement> parsebody56(Token t1);
    }
}
