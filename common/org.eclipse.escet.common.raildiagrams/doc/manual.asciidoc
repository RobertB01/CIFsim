/////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the terms
// of the MIT License which is available at https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
/////////////////////////////////////////////////////////////////////////////////

= Rail diagram generator

Making pretty syntax specifications easy.

For languages, an often used specification of the grammar of the language in a
user manual is some form of (E)BNF rules. However for people not used to
reading them, it may be hard to understand what the rules say.

An alternative is to use https://en.wikipedia.org/wiki/Syntax_diagram[syntax diagrams]
also known as _railroad diagrams_. These diagrams are often easier to understand for
users that do not know (E)BNF.

A disadvantage of the syntax diagrams is that the diagrams have to be created. For a
full language the number of diagrams can grow to over 50 pictures.
To reduce the effort in creating them, tools have been developed by several persons.
The tools vary in required program environment, accepted input, and quality of the output.

We are very fond of the _CTAN rail package_ <<rail>>. It is written in TeX, and
uses a C program to parse its input. We used it for all our languages. It is very good
for creating diagrams in PDF documents, but much less useful in an Eclipse environment
with online help web pages.
Competitors did not seem to fit much better either, so the decision was made to
make a Java program that behaves in much the same way as the _CTAN rail
package_.

[[examples]]
== Examples

Here a number of examples are provided for those that hate reading.
The input of the program is similar to EBNF with an extra feature for repetition.

=== Diagrams and Sequences

[source,raildiagram]
----
include::sequence.rr[]
----

A diagram starts with its name, a colon, the syntax that should be shown (in this
case the sequence `A`, `B`, `C`), and finally, a semicolon as terminator.
This gives the following result.

image::sequence.png[Sequence]

As rail diagrams are read from left to right, following a line without taking
a sharp turn, the resulting image is not a surprise.

=== Choices

The second primitive is choice, where you pick one of the given alternatives.
As with EBNF, this is written with the pipe symbol `|`, like

[source,raildiagram]
----
include::choice.rr[]
----

resulting in

image::choice.png[Choice]

Note that as sequence has higher priority than choice, the `B` and `C`
sequence forms one alternative.
You can use parentheses to break the priority chain, eg

[source,raildiagram]
----
include::choice2.rr[]
----

gives a sequence of choices, as can be seen in

image::choice2.png[Sequence of choice]


=== Repetition

The core repetition primitive is alternating between two nodes, as in

[source,raildiagram]
----
include::alternating.rr[]
----

resulting in

image::alternating.png[Alternating between A and B]

You can make one (or both) of the paths empty, which results in the normal
EBNF repetition semantics. Below, node `A` must occur at least once, while
node `B` may also be skipped.

[source,raildiagram]
----
include::emptyalternating.rr[]
----

giving

image::emptyalternating.png[A+ and B*]

The third repetition is an alternative for the `B` sequence. It avoids the
caveat with repetition due to the right-to-left visiting order of the bottom
path, made more clearly visible in the following example.

The input

[source,raildiagram]
----
include::abcd.rr[]
----

gives

image::abcd.png[ABCD]

as result. It describes EBNF `AB(CDAB)*`, and the tool translates it correctly,
but the bottom path does not read nicely, as you have to read that part from
right to left.

It is advised to avoid this case by changing the diagram. Limit
the second part of the `+` operator to one node, possibly by introducing an
additional non-terminal.


=== Splitting long sequences

For rules that have a long sequence, the width of the diagram grows quickly
beyond the width of the page. The best way to deal with that is to change
the diagram, for example by moving a part of the sequence to a new
non-terminal.

The program however does offer a quick fix around the problem at the cost
of a less readable diagram.
An example is shown below

[source,raildiagram]
----
include::abcdefgh.rr[]
----

which gives

image::abcdefgh.png[ABCDEFGH]

The double backslash breaks the '`line`' and it continues below on the next
line. You cannot break the empty sequence, each row must have at least one
node.


=== Referencing a path in the diagram

When explaining a diagram, it can be useful to refer to a path in the diagram.
The program has a bracketed string for that:

[source,raildiagram]
----
include::refpath.rr[]
----

Now you can say that the `[nest]` path recursively applies the rule, while the
`[exit]` path ends the recursion.

image::refpath.png[Recursion]


=== Terminals and meta-terminals

Until now, all names in the diagrams are considered to be non-terminals. This
is the default behavior. Terminals in the diagram do not have a name, but show
the concrete syntax instead.
There are three ways to write terminals.

[source,raildiagram]
----
include::terminals.rr[]
----

The first and second option are simply writing the literal text inside single or
double quotes. There are no escape sequences for special characters here.
The third option is to use the name of a terminal, in this case `OTHER`.

The `Identifier` alternative in the diagram is a hybrid. It represent all
valid identifiers in the input. The diagram however does not state its exact
syntax as with normal terminals. It is also not exactly a non-terminal.
The program has a third class of tokens for these, known as _meta-terminals_.
It allows the designer to attach a different layout to such tokens.

The `OTHER` and `Identifier` names in the input file need a translation to
displayed text. This translation is specified in a properties
file like

[source, properties]
----
include::terminals.props[]
----

The result is shown below. By default, terminals and meta-terminals are
rendered using rounded boxes. If this behavior is not desired, layout and many
other settings can be overridden in the properties file, see the
<<Customizing output>> Section for details.

image::terminals.png[Terminals]


== Customizing output

The program can take a properties file to translate terminals, non-terminals,
and even non-terminals. The same file can also contain settings to modify
shape, color, fonts, and spacing of almost everything.

[[property-syntax]]
=== Syntax of the properties file

The properties file used by the program is a normal Java properties file. Its
syntax is described at https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html#load-java.io.Reader- .

In short:

- It is a file format that consists of lines of text.
- Empty lines are allowed and are skipped.
- Lines beginning with `#` or `!` are considered to be comment lines and are ignored.
- Data lines contain key/value pairs.

Here, a key of a data line is a sequence of words, separated by a dot, for example,
`terminal.token.Identifier`. The key is followed by an optional but recommended separator character, either `:` or `=`. The remainder of the line is the value part, where leading and trailing white space is removed.

The properties file format uses `\` as continuation character to the next line and also as escape character.

=== Kinds of values

In the tables below, the properties keys recognized by the program are listed along with an example and an expected value.

This table lists the used expected values, and gives some more information about them.

[cols="1,1,3", options="header"]
|===
| Type name
| Example
| Description

| RGB color
| `151 7 230`
| Three integer numbers between `0` and `255` inclusive, separated by space.

| Real
| `0.31`
| Real value, usually with '`pixel`' unit. Note that as the output medium is
limited in handling fractions, best results are usually obtained with integer
values only.

| Font name
| `Serif`
| Name of the font to use. The program currently supports `Dialog`,
`DialogInput`, `Monospaced`, `Serif`, and the `SansSerif` font.

| Font height
| `12`
| Integer number specifying the point size of the font.

| Font style
| `plain`
| Style of the font. The program currently supports `plain`, `bold`, and
`italics` styles.

| Text
| `literal`
| Arbitrary text to display for a token.
|===


=== Global settings

The following settings affect background and the rail line.

[cols="1,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `diagram.background.color`
| RGB color
| `255 255 255`
| Color of the background of the generated image.

| `rail.linewidth`
| Real
| `1.0`
| Width of the rail line.

| `rail.color`
| RGB color
| `0 0 0`
| Color of the rail line.
|===

=== Diagram settings

The diagram settings configure the global layout of an image. At the top is a
header line with the name of the rule, below it are one or more railroad
pictures with some additional rail at both ends.

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

|`rule.padding.top`
| Real
| `10`
| Amount of space above the header line.

|`rule.padding.left`
| Real
| `10`
| Amount of space left of the header line.

|`rule.padding.bottom`
| Real
| `10`
| Amount of space between the last railroad picture and the bottom of the
diagram.

|`rule.padding.right`
| Real
| `10`
| Minimum amount of space right of the header line.

|`rule.diagram.padding.top`
| Real
| `10`
| Amount of space above each railroad picture.

|`rule.diagram.padding.left`
| Real
| `10`
| Amount of space left of each railroad picture.

|`rule.diagram.lead.width`
| Real
| `20`
| Horizontal length of the rail line before the railroad picture.

|`rule.diagram.trail.width`
| Real
| `20`
| Horizontal length of the rail line after the railroad picture.

| `diagram-header.text.color`
| RGB color
| `0 0 0`
| Color of the diagram header text.

| `diagram-header.text.font`
| Font name
| `Serif`
| Font of the diagram header text.

| `diagram-header.text.font.size`
| Font height
| `15`
| Font size in points of the diagram header text.

| `diagram-header.text.font.style`
| Font style
| `bold`
| Style of the diagram header text.
|===

=== Empty node

Each kind of node has a number of settings as well, starting with the simplest
node, `()`.

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

|`empty.width`
| Real
| `10`
| Horizontal length of the empty node.
|===

=== Branch label

The bracketed string `[refname]` node configuration settings are listed below.

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

|`branch-label.padding.left`
| Real
| `5`
| Amount of space at the left of the label text.

|`branch-label.padding.right`
| Real
| `5`
| Amount of space at the right of the label text.

|`branch-label.padding.top`
| Real
| `5`
| Amount of space above the label text.

|`branch-label.padding.bottom`
| Real
| `5`
| Amount of space between the label text and the rail line.

|`branch-label.min-width`
| Real
| `5`
| Minimum horizontal length of the label node.

|`branch-label.text.color`
| RGB color
| `0 0 0`
| Color of the label text.

|`branch-label.text.font`
| Font name
| `Serif`
| Font used for the label text.

|`branch-label.text.font.size`
| Font height
| `12`
| Font size in pt of the label text.

|`branch-label.text.font.style`
| Font style
| `plain`
| Font style of the label text.
|===

=== Name node

A name node is a string of text within a box. The text is often a single
name, and the box may have rounded corners. At the left and right of the box,
a rail line is connected.

First the configuration of the rail lines, followed by the configuration
settings of the box and the text.

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `name.rail.entry.width`
| Real
| `5`
| Horizontal length of the rail line at the left of the box.

| `name.rail.exit.width`
| Real
| `5`
| Horizontal length of the rail line at the right of the box.
|===

There are three configurations for name and box. One for terminals, one for
meta-terminals, and one for non-terminals.
The structure of the settings is the same for all three, their default values
are a little different, in particular in choices of corner radius and font.

==== Terminal text and box properties

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `terminal.name.padding.horizontal`
| Real
| `5`
| Amount of horizontal space between the text and the box around the text.

| `terminal.name.padding.vertical`
| Real
| `5`
| Amount of vertical space between the text and the box around the text.

| `terminal.corner.radius`
| Real
| `12`
| Radius of the corners of the box. `0` means a rectangular box.

| `terminal.box.color`
| RGB color
| `0 0 0`
| Color of the line of the box.

| `terminal.box.linewidth`
| Real
| `1.0`
| Width of the line of the box.

| `terminal.text.color`
| RGB color
| `0 0 0`
| Color of the terminal text.

| `terminal.text.font`
| Font name
| `Monospaced`
| Font used for the terminal text.

| `terminal.text.font.size`
| Font height
| `12`
| Height of the terminal text.

| `terminal.text.font.style`
| Font style
| `plain`
| Style of the terminal text.
|===

==== Meta-terminal text and box properties

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `meta-terminal.name.padding.horizontal`
| Real
| `5`
| Amount of horizontal space between the text and the box around the text.

| `meta-terminal.name.padding.vertical`
| Real
| `5`
| Amount of vertical space between the text and the box around the text.

| `meta-terminal.corner.radius`
| Real
| `12`
| Radius of the corners of the box. `0` means a rectangular box.

| `meta-terminal.box.color`
| RGB color
| `0 0 0`
| Color of the line of the box.

| `meta-terminal.box.linewidth`
| Real
| `1.0`
| Width of the line of the box.

| `meta-terminal.text.color`
| RGB color
| `0 0 0`
| Color of the meta-terminal text.

| `meta-terminal.text.font`
| Font name
| `Serif`
| Font used for the meta-terminal text.

| `meta-terminal.text.font.size`
| Font height
| `12`
| Height of the meta-terminal text.

| `meta-terminal.text.font.style`
| Font style
| `plain`
| Style of the meta-terminal text.
|===

==== Non-terminal text and box properties

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `nonterminal.name.padding.horizontal`
| Real
| `5`
| Amount of horizontal space between the text and the box around the text.

| `nonterminal.name.padding.vertical`
| Real
| `5`
| Amount of vertical space between the text and the box around the text.

| `nonterminal.corner.radius`
| Real
| `0`
| Radius of the corners of the box. `0` means a rectangular box.

| `nonterminal.box.color`
| RGB color
| `0 0 0`
| Color of the line of the box.

| `nonterminal.box.linewidth`
| Real
| `1.0`
| Width of the line of the box.

| `nonterminal.text.color`
| RGB color
| `0 0 0`
| Color of the non-terminal text.

| `nonterminal.text.font`
| Font name
| `Serif`
| Font used for the non-terminal text.

| `nonterminal.text.font.size`
| Font height
| `12`
| Height of the non-terminal text.

| `nonterminal.text.font.style`
| Font style
| `italic`
| Style of the non-terminal text.
|===

==== Token text translations

In the diagram input files, token names may be used, but terminals often
contain other symbols. The translation between the token name and the text it
should display can also be configured.

There are three groups of settings. Different settings within a group only
differ in the name of the token that they translate. Such a name is listed
here as `<token-name>`.

[cols="2,1,4", options="header"]
|===
| Property name
| Value type
| Description

| `terminal.token.<token-name>`
| Text
| The literal text to display in the diagram for terminal token `<token-name>`.

| `meta-terminal.<token-name>`
| Text
| The literal text to display in the diagram for meta-terminal token `<token-name>`.

| `nonterminal.token.<token-name>`
| Text
| The literal text to display in the diagram for non-terminal token `<token-name>`.
|===

All tokens must have a different name. Both terminals and meta-terminals token
lists are assumed to be complete.
The non-terminal list is fully optional, and the default choice if a token
name cannot be found. All missing entries use the name as their text.

Note that the property file reader applies some interpretation to the text as
well so what you enter in the file may not be what you get.
Please see <<property-syntax>> for details.


=== Sequence

A sequence connects one or more child diagram nodes in one or more rows such
that they are all visited in sequential order.

Its configuration settings cover the elements around the child nodes.
`
[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `sequence.padding.first-row.prefix`
| Real
| `0`
| Amount of space before the first child at the first row.

| `sequence.padding.other-row.prefix`
| Real
| `5`
| Amount of space left of the left connecting vertical line to a next row.

| `sequence.padding.row.suffix`
| Real
| `5`
| If there is more than one row, the minimal amount of space between the right
vertical line connecting a next row, and the vertical line up to the exit.

| `sequence.padding.interrow`
| Real
| `8`
| Minimal amount of space between the bottom of a row, and the connecting
horizontal line to the next row beneath it. Also, the minimal amount of space
between the same horizontal line and the top of the next row.

| `sequence.arc-radius`
| Real
| `10`
| Radius of the arcs connecting horizontal lines with vertical lines.
|===

=== Choice

The choice node expresses a choice between one of the child diagram nodes.
Its configurable properties are

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `choice.arc-radius`
| Real
| `10`
| Radius of the arcs connecting horizontal lines with vertical lines.

| `choice.padding.vertical`
| Real
| `5`
| Minimal amount of vertical space between two child diagrams.
|===

Note that the space between the first and second child is not only influenced
by the `choice.padding.vertical` setting, but also influenced by
the `choice.arc-radius`, as two arcs have to fit vertically as well.

=== Repetition

The repetition node `A + B` expresses an alternating execution sequence
`A(BA)*`. The `A` child node is referred to as _forward_, as its execution
runs normally from left to right in the diagram, while the `B` child is
referred to as _backward_ as its execution normally runs from right to left.
The repetition is also known as _loop_ due to the circular shape of the node.

Its configuration settings are

[cols="2,1,1,3", options="header"]
|===
| Property name
| Value type
| Default value
| Description

| `loop.arc-radius`
| Real
| `10`
| Radius of the arcs connecting horizontal lines with vertical lines.

| `loop.padding.vertical`
| Real
| `5`
| Amount of vertical space between the forward and backward node.

| `loop.padding.left`
| Real
| `5`
| Amount of space left of the left vertical line.

| `loop.padding.right`
| Real
| `5`
| Amount of space right of the right vertical line.
|===

The `loop.padding.left` and `loop.padding.right` become important when a
diagram contains a sequence of repetitions. If you set the left and right
padding to `0`, the following may happen

[source,raildiagram]
----
include::sequence_loops.rr[]
----
results in

image::sequence_loops.png[Sequence of loops]

Other nodes all have some space at either end, making it less apparent in
those cases.


== Grammar

The toplevel grammar rule of the application is `Specification`. It is a
sequence of rules, each terminated by a semi colon. One specification creates
one output file.

image::spec.png[Specification]

A `Rule` is a possibly named railroad.

image::rule.png[Rule]

A `Railroad` is one or more choice alternatives.

image:diagram.png[Railroad]

The `BracketedString` like `[a]` can be used to denote specific points in the diagram
allowing you to refer to such points from the explanatory text.

An `Alternative` has a `sequence` of one or more factors. By appending the `[loop]`
part, the sequence can be repeated. The `+` requires at least one sequence,
the `*` also allows `0` repetitions, resulting in an empty sequence.
The second `Factor` defines the syntax on the way back to the start. Note that
parentheses are required in the second `Factor` if is it more than one node.

image::alternative.png[Alternative]

Note that together with `|` above and the empty sequence `()` below, you can
write all loops using the `+` infix operator. The <<examples>> Section explains
this as well.

In an alternative, `Factor` is a single token

image::factor.png[Factor]

The `[literal1]` and `[literal2]` choices show the text of the string. Surrounding
quotes are dropped. There are two forms of literals to simplify using single
or double quote literals in the diagrams.
The `sub-diagram]` choice allows nesting of sequence, choice, and repetition, enabling
construction of more complicated diagrams.
The `[epsilon]` choice is the empty sequence.
The `[sub-rule]` choice enables giving the name of another diagram to process.

Finally, the `[line-break]` choice can be used to split a long sequence of
factors into multiple rows. In general, its use should be avoided as it often
leads to less pretty diagrams. Instead, try to re-organize rules or diagrams.


[bibliography]
== References

- [[[rail]]] Luc Rooijakkers (inactive author) & Klaus Georg Barthelmann (maintainer).
  Comprehensive TeX Archive Network (CTAN), *rail* – Syntax specification in EBNF.
  https://www.ctan.org/pkg/rail
