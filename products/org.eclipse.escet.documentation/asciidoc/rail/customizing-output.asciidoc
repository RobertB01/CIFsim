/////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the terms
// of the MIT License which is available at https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
/////////////////////////////////////////////////////////////////////////////////

include::_part_attributes.asciidoc[]
include::_local_attributes.asciidoc[]

[[rail-customizing-output]]
== Customizing output

The program can take a properties file to translate terminals
and non-terminals. The same file can also contain settings to modify
shape, color, fonts, and spacing of almost everything.

[[rail-property-syntax]]
=== Syntax of the properties file

The properties file used by the program is a normal Java properties file. Its
syntax is described in the
link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Properties.html#load(java.io.Reader)[Java 11 API Specification].

In short:

- It is a file format that consists of lines of text.
- Empty lines are allowed and are skipped.
- Lines beginning with `#` or `!` are considered to be comment lines and are ignored.
- Data lines contain key/value pairs.

Here, a key of a data line is a sequence of words, separated by a dot, for example,
`terminal.token.Identifier`. The key is followed by an optional but recommended separator character, either `:` or `=`. The remainder of the line is the value part, where leading and trailing white space is removed.

The properties file format uses `\` as continuation character to the next line and also as escape character.

=== Kinds of values

In the tables below, the properties keys recognized by the program are listed along with an example and an expected value.

This table lists the used expected values, and gives some more information about them.

[cols="1,1,3", options="header"]
|===
| Type name
| Examples
| Description

| RGB color
| `151 7 230`
| Three integer numbers between `0` and `255` inclusive, separated by spaces.

| Real
| `0.31` +
`10`
| Real value, usually with '`pixel`' unit. Note that as the output medium is
limited in handling fractions, best results are usually obtained with integer
values only.

| Font name
| `Serif`
| Name of the font to use. The program currently supports the `Dialog`,
`DialogInput`, `Monospaced`, `Serif`, and `SansSerif` fonts.

| Font height
| `12`
| Integer number specifying the point size of the font.

| Font style
| `plain`
| Style of the font. The program currently supports `plain`, `bold`, and
`italics` styles.

| Text
| `literal`
| Arbitrary text to display for a token.
|===


=== Global settings

The following settings affect background and the rail line.

[cols="1,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `diagram.background.color`
| RGB color
| Color of the background of the generated image.

| `rail.linewidth`
| Real
| Width of the rail line.

| `rail.color`
| RGB color
| Color of the rail line.
|===

=== Diagram settings

The diagram settings configure the global layout of an image. At the top is a
header line with the name of the rule, below it are one or more railroad
pictures with some additional rail at both ends.

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

|`rule.padding.top`
| Real
| Amount of space above the header line.

|`rule.padding.left`
| Real
| Amount of space left of the header line.

|`rule.padding.bottom`
| Real
| Amount of space between the last railroad picture and the bottom of the
diagram.

|`rule.padding.right`
| Real
| Minimum amount of space right of the header line.

|`rule.diagram.padding.top`
| Real
| Amount of space above each railroad picture.

|`rule.diagram.padding.left`
| Real
| Amount of space left of each railroad picture.

|`rule.diagram.lead.width`
| Real
| Horizontal length of the rail line before the railroad picture.

|`rule.diagram.trail.width`
| Real
| Horizontal length of the rail line after the railroad picture.

| `diagram-header.text.color`
| RGB color
| Color of the diagram header text.

| `diagram-header.text.font`
| Font name
| Font of the diagram header text.

| `diagram-header.text.font.size`
| Font height
| Font size in points of the diagram header text.

| `diagram-header.text.font.style`
| Font style
| Style of the diagram header text.
|===

=== Empty node

Each kind of node has a number of settings as well, starting with the simplest
node, `()`.

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

|`empty.width`
| Real
| Horizontal length of the empty node.
|===

=== Branch label

The bracketed string `[refname]` node configuration settings are listed below.

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

|`branch-label.padding.left`
| Real
| Amount of space at the left of the label text.

|`branch-label.padding.right`
| Real
| Amount of space at the right of the label text.

|`branch-label.padding.top`
| Real
| Amount of space above the label text.

|`branch-label.padding.bottom`
| Real
| Amount of space between the label text and the rail line.

|`branch-label.min-width`
| Real
| Minimum horizontal length of the label node.

|`branch-label.text.color`
| RGB color
| Color of the label text.

|`branch-label.text.font`
| Font name
| Font used for the label text.

|`branch-label.text.font.size`
| Font height
| Font size in pt of the label text.

|`branch-label.text.font.style`
| Font style
| Font style of the label text.
|===

=== Name node

A name node is a string of text within a box. The text is often a single
name, and the box may have rounded corners. At the left and right of the box,
a rail line is connected.

First the configuration of the rail lines, followed by the configuration
settings of the box and the text.

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `name.rail.entry.width`
| Real
| Horizontal length of the rail line at the left of the box.

| `name.rail.exit.width`
| Real
| Horizontal length of the rail line at the right of the box.
|===

There are three configurations for name and box. One for terminals, one for
meta-terminals, and one for non-terminals.
The structure of the settings is the same for all three, their default values
are a little different, in particular in choices of corner radius and font.

==== Terminal text and box properties

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `terminal.name.padding.horizontal`
| Real
| Amount of horizontal space between the text and the box around the text.

| `terminal.name.padding.vertical`
| Real
| Amount of vertical space between the text and the box around the text.

| `terminal.corner.radius`
| Real
| Radius of the corners of the box. `0` means a rectangular box.

| `terminal.box.color`
| RGB color
| Color of the line of the box.

| `terminal.box.linewidth`
| Real
| Width of the line of the box.

| `terminal.text.color`
| RGB color
| Color of the terminal text.

| `terminal.text.font`
| Font name
| Font used for the terminal text.

| `terminal.text.font.size`
| Font height
| Height of the terminal text.

| `terminal.text.font.style`
| Font style
| Style of the terminal text.
|===

==== Meta-terminal text and box properties

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `meta-terminal.name.padding.horizontal`
| Real
| Amount of horizontal space between the text and the box around the text.

| `meta-terminal.name.padding.vertical`
| Real
| Amount of vertical space between the text and the box around the text.

| `meta-terminal.corner.radius`
| Real
| Radius of the corners of the box. `0` means a rectangular box.

| `meta-terminal.box.color`
| RGB color
| Color of the line of the box.

| `meta-terminal.box.linewidth`
| Real
| Width of the line of the box.

| `meta-terminal.text.color`
| RGB color
| Color of the meta-terminal text.

| `meta-terminal.text.font`
| Font name
| Font used for the meta-terminal text.

| `meta-terminal.text.font.size`
| Font height
| Height of the meta-terminal text.

| `meta-terminal.text.font.style`
| Font style
| Style of the meta-terminal text.
|===

==== Non-terminal text and box properties

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `nonterminal.name.padding.horizontal`
| Real
| Amount of horizontal space between the text and the box around the text.

| `nonterminal.name.padding.vertical`
| Real
| Amount of vertical space between the text and the box around the text.

| `nonterminal.corner.radius`
| Real
| Radius of the corners of the box. `0` means a rectangular box.

| `nonterminal.box.color`
| RGB color
| Color of the line of the box.

| `nonterminal.box.linewidth`
| Real
| Width of the line of the box.

| `nonterminal.text.color`
| RGB color
| Color of the non-terminal text.

| `nonterminal.text.font`
| Font name
| Font used for the non-terminal text.

| `nonterminal.text.font.size`
| Font height
| Height of the non-terminal text.

| `nonterminal.text.font.style`
| Font style
| Style of the non-terminal text.
|===

==== Token text translations

In the diagram input files, token names may be used, but terminals often
contain other symbols. The translation between the token name and the text it
should display can also be configured.

There are three groups of settings. Different settings within a group only
differ in the name of the token that they translate. Such a name is listed
here as `<token-name>`.

[cols="2,1,4", options="header"]
|===
| Property name
| Value type
| Description

| `terminal.token.<token-name>`
| Text
| The literal text to display in the diagram for terminal token `<token-name>`.

| `meta-terminal.<token-name>`
| Text
| The literal text to display in the diagram for meta-terminal token `<token-name>`.

| `nonterminal.token.<token-name>`
| Text
| The literal text to display in the diagram for non-terminal token `<token-name>`.
|===

All tokens must have a different name. Both terminals and meta-terminals token
lists are assumed to be complete.
The non-terminal list is fully optional, and the default choice if a token
name cannot be found. All missing entries use the token name as their text.

Note that the property file reader applies some interpretation to the text as
well so what you enter in the file may not be what you get.
Please check the <<rail-property-syntax, property file syntax>> section for details.


=== Sequence

A sequence connects one or more child diagram nodes in one or more rows such
that they are all visited in sequential order.

Its configuration settings cover the elements around the child nodes.

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `sequence.padding.first-row.prefix`
| Real
| Amount of space before the first child at the first row.

| `sequence.padding.other-row.prefix`
| Real
| Amount of space left of the left connecting vertical line to a next row.

| `sequence.padding.row.suffix`
| Real
| If there is more than one row, the minimal amount of space between the right
vertical line connecting a next row, and the vertical line up to the exit.

| `sequence.padding.interrow`
| Real
| Minimal amount of space between the bottom of a row, and the connecting
horizontal line to the next row beneath it. Also, the minimal amount of space
between the same horizontal line and the top of the next row.

| `sequence.arc-radius`
| Real
| Radius of the arcs connecting horizontal lines with vertical lines.
|===

=== Choice

The choice node expresses a choice between one of the child diagram nodes.

Its configurable properties are:

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `choice.arc-radius`
| Real
| Radius of the arcs connecting horizontal lines with vertical lines.

| `choice.padding.vertical`
| Real
| Minimal amount of vertical space between two child diagrams.
|===

Note that the space between the first and second child is not only influenced
by the `choice.padding.vertical` setting, but also influenced by
the `choice.arc-radius`, as two arcs have to fit vertically as well.

=== Repetition

The repetition node `A + B` expresses an alternating execution sequence
`A(BA)*`. The `A` child node is referred to as _forward_, as its execution
runs normally from left to right in the diagram, while the `B` child is
referred to as _backward_ as its execution normally runs from right to left.
The repetition is also known as _loop_ due to the circular shape of the node.

Its configuration settings are:

[cols="2,1,3", options="header"]
|===
| Property name
| Value type
| Description

| `loop.arc-radius`
| Real
| Radius of the arcs connecting horizontal lines with vertical lines.

| `loop.padding.vertical`
| Real
| Amount of vertical space between the nodes of the forward and backward sequences.

| `loop.padding.left`
| Real
| Amount of space left of the left vertical line.

| `loop.padding.right`
| Real
| Amount of space right of the right vertical line.
|===

The `loop.padding.left` and `loop.padding.right` become important when a
diagram contains a sequence of repetitions. If you set the left and right
padding to `0`, the following may happen:

[source,raildiagram]
----
include::{incdir-rail}/sequence_loops.rr[]
----

This results in:

image::{rail-imgsdir}/sequence_loops.png[Sequence of loops]

Other nodes all have some space at either end, making it less apparent in
those cases.

=== Default property values

The default values for the various properties are as follows:

[source,properties]
----
include::{incdir-rail}/../../../../common/org.eclipse.escet.common.raildiagrams/src/org/eclipse/escet/common/raildiagrams/config/default.properties[]
----
