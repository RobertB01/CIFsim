<!DOCTYPE html>
<html>
    <title>${prefix}_tests | Eclipse ESCET</title>
    <head>
        <link rel="stylesheet" href="${prefix}_escet_theme.css">
        <style>

            body {
                text-align: center;
            }

            .flex-container {
                display: flex;
                flex-flow: column;
                height: 100%;
            }

            .flex-container .content {
                flex: 1 1 auto;
                resize: vertical;
                overflow: auto;
            }
            .flex-container .content .btnsDiv {
                margin-bottom: 15px;
            }

            .flex-container .logPane {
                flex: 1 1 auto;
                border-top: 2px solid #DDD;
                min-height: 20px;
                height: 300px;
                background: #FAFAFA;
            }
            .flex-container .logPane .divShowHideBtn {
                height: 25px;
                padding-top: 5px;
                text-align: right;
                border-bottom: 1px solid #DDD;
            }
            .flex-container .logPane .divShowHideBtn a {
                display: block;
                float: right;
                margin: -4px 7px 0px 0px;
            }
            .flex-container .logPane .divTxtAreaBackground {
                height: calc(100% - 80px);
                background: #FFF;
            }
            .flex-container .logPane .divTxtArea {
                margin: 0px 20px;
                height: 100%;
            }
            .flex-container .logPane .divTxtArea textarea {
                resize: none;
                border: 0px;
                height: 100%;
                width: 100%;
                margin: 0px;
                padding: 0px;
            }
            .flex-container .logPane .divLogInputBackground {
                background: #FFF;
                margin: 0px auto;
                border-top: 1px solid #DDD;
            }
            .flex-container .logPane .divLogInput {
                margin: 0px 0px 0px 20px;
                background: #FFF;
            }
            .flex-container .logPane .divLogInput span{
                position: absolute;
                left: 5px;
            }
            .flex-container .logPane .divLogInput .logInput {
                border: 0px;
                background: white;
                margin: 0px;
                padding: 0px;
                width: 100%;
            }
            .flex-container .logPane .divLogPaneFooter {
                background: #FAFAFA;
                border-top: 1px solid #DDD;
            }

        </style>
        <script src="${prefix}_utils.js"></script>
        <script type="text/javascript">

            function runTests() {

                // Numbers

                var xInt = 1;
                var yInt = 1;

                var xDouble = 1.0;
                var yDouble = 1.0;

                clearLog();
                log("Running tests: ");

                log("absInt(x) : " + ${prefix}Utils.absInt(xInt));
                log("absDouble(x) : " + ${prefix}Utils.absDouble(xDouble));
                log("acos(x) : " + ${prefix}Utils.acos(xDouble));
                log("asin(x) : " + ${prefix}Utils.asin(xDouble));
                log("atan(x) : " + ${prefix}Utils.atan(xDouble));
                log("addInt(x, y) : " + ${prefix}Utils.addInt(xInt, yInt));
                log("addReal(x, y) : " + ${prefix}Utils.addReal(xDouble, yDouble));
                log("cbrt(x) : " + ${prefix}Utils.cbrt(xDouble));
                log("ceil(x) : " + ${prefix}Utils.ceil(xDouble));
                var valueDouble = 1.0;
                var name = "valueDouble";
                log("checkDouble(value, name) : " + (${prefix}Utils.checkDouble(valueDouble, name) == undefined ? "OK" : "Error"));
                log("cos(x) : " + ${prefix}Utils.cos(xDouble));
                log("div(x, y) : " + ${prefix}Utils.div(xInt, yInt));
                log("divide(x, y) : " + ${prefix}Utils.divide(xDouble, yDouble));
                log("exp(x) : " + ${prefix}Utils.exp(xDouble));
                log("floor(x) : " + ${prefix}Utils.floor(xDouble));
                log("intToReal(x) : " + ${prefix}Utils.intToReal(xInt));
                log("ln(x): " + ${prefix}Utils.ln(xDouble));
                log("log(x) : " + ${prefix}Utils.log(xDouble));
                log("maxInt(x, y) : " + ${prefix}Utils.maxInt(xInt, yInt));
                log("maxDouble(x, y) : " + ${prefix}Utils.maxDouble(xDouble, yDouble));
                log("minInt(x, y) : " + ${prefix}Utils.minInt(xInt, yInt));
                log("minDouble(x, y) : " + ${prefix}Utils.minDouble(xDouble, yDouble));
                log("mod(x, y) : " + ${prefix}Utils.mod(xInt, yInt));
                log("multiplyInt(x, y) : " + ${prefix}Utils.multiplyInt(xInt, yInt));
                log("multiplyDouble(x, y) : " + ${prefix}Utils.multiplyDouble(xDouble, yDouble));
                log("negateInt(x) : " + ${prefix}Utils.negateInt(xInt));
                log("negateDouble(x) : " + ${prefix}Utils.negateDouble(xDouble));
                log("powInt(x, y) : " + ${prefix}Utils.powInt(xInt, yInt));
                log("powReal(x, y) : " + ${prefix}Utils.powReal(xDouble, yDouble));
                log("round(x) : " + ${prefix}Utils.round(xDouble));
                var vDouble = 1.0;
                var inminDouble = 0.0;
                var inmaxDouble = 2.0;
                var outminDouble = 0.0;
                var outmaxDouble = 2.0;
                log("scale(v, inmin, inmax, outmin, outmax) : " + ${prefix}Utils.scale(vDouble, inminDouble, inmaxDouble, outminDouble, outmaxDouble));
                log("signInt(x) : " + ${prefix}Utils.signInt(xInt));
                log("signDouble(x) : " + ${prefix}Utils.signDouble(xDouble));
                log("sin(x) : " + ${prefix}Utils.sin(xDouble));
                log("sqrt(x) : " + ${prefix}Utils.sqrt(xDouble));
                log("subtractInt(x, y) : " + ${prefix}Utils.subtractInt(xInt, yInt));
                log("subtractDouble(x, y) : " + ${prefix}Utils.subtractDouble(xDouble, yDouble));
                log("tan(x) : " + ${prefix}Utils.tan(xDouble));

                // Strings

                var format = "One %s Three";
                var args = ["Two"];
                log("fmt(format, args) : " + ${prefix}Utils.fmt(format, args));
                var xString = "One";
                var yString = "Two";
                log("addString(x, y) : " + ${prefix}Utils.addString(xString, yString));
                var s = "string";
                log("escape(s) : " + ${prefix}Utils.escape(s));
                log("sizeString(x) : " + ${prefix}Utils.sizeString(xString));

                log("intToStr(x) : " + ${prefix}Utils.intToStr(xInt));
                log("realToStr(x) : " + ${prefix}Utils.realToStr(xDouble));
                var xBool = false;
                log("boolToStr(x) : " + ${prefix}Utils.boolToStr(xBool));
                log("valueToStr(value) : " + ${prefix}Utils.valueToStr(valueDouble));

                var xBooleanString = "false";
                log("strToBool(x) : " + ${prefix}Utils.strToBool(xBooleanString));
                var xIntString = "1";
                log("strToInt(x) : " + ${prefix}Utils.strToInt(xIntString));
                var xDoubleString = "1.0";
                log("strToReal(x) : " + ${prefix}Utils.strToReal(xDoubleString));

                var str = "string";
                log("project(str, origIdx) : " + ${prefix}Utils.project(str, origIdx));

                var msg = "rangeErrInt(name, value, type) : ";
                try{
                    ${prefix}Utils.rangeErrInt("name", "value", "type");
                    msg += "Failed";
                } catch (ex) {
                    msg += ex;
                }
                log(msg);

                // Lists

                var lst = ["One", "Two", "Three"];
                var xList = ["One", "Two", "Three"];
                var origIdx = 0;
                var newValue = "Zero";

                log("copy(lst) : " + ${prefix}Utils.copy(lst));
                log("empty(x) : " + ${prefix}Utils.empty(xList));
                var newlst = [];
                var elems = ["One", "Two", "Three"];
                log("makelist(lst, elems) : " + ${prefix}Utils.makelist(newlst, elems));
                log("modify(lst, origIdx, newValue) : " + ${prefix}Utils.modify(lst, origIdx, newValue));
                log("project(lst, origIdx) : " + ${prefix}Utils.project(lst, origIdx));
                log("sizeList(x) : " + ${prefix}Utils.sizeList(xList));

                // Objects

                var obj1 = [];
                var obj2 = [];
                log("equalObjs(obj1, obj2) : " + ${prefix}Utils.equalObjs(obj1, obj2));
            }

            function log(message) {
                console.log(message);
                var elem = document.getElementById("logOutput");
                elem.value += message + '\r\n';
                elem.scrollTop = elem.scrollHeight;
            }

            function reset() {
                clearLog();
            }

            function clearLog() {
                document.getElementById("logOutput").value = "";
            }

            function showHide(btn) {
                var elem = document.getElementById("logPane");
                if(elem.style.height != "31px") {
                    btn.textContent = "Show";
                    elem.style.height = "31px";
                    elem.style.flex = "none";
                    var elem = document.getElementById("content");
                    elem.style.resize = "none";
                    var elem = document.getElementById("divTxtAreaBackground");
                    elem.style.display = "none";
                    var elem = document.getElementById("divLogInputBackground");
                    elem.style.display = "none";
                    var elem = document.getElementById("divLogPaneFooter");
                    elem.style.display = "none";
                } else {
                    btn.textContent = "Hide";
                    elem.style.height = "";
                    elem.style.flex = "1 1 auto";
                    var elem = document.getElementById("content");
                    elem.style.resize = "vertical";
                    var elem = document.getElementById("divTxtAreaBackground");
                    elem.style.display = "block";
                    var elem = document.getElementById("divLogInputBackground");
                    elem.style.display = "block";
                    var elem = document.getElementById("divLogPaneFooter");
                    elem.style.display = "block";
                }
            }

            function inputCommand() {
                if(event.keyCode == 13) {
                    var elem = document.getElementById("logInput");
                    if(!elem.value.includes("=") && !elem.value.includes(")")) {
                        eval(elem.value + "()");
                    } else {
                        eval(elem.value);
                    }
                    elem.value = "";
                }
            }

        </script>
    </head>
    <body>
        <div class="flex-container">
            <div class="content" id="content">
                <div>
                    <h1>${prefix}_tests</h1>
                    <!-- SVG element goes here -->
                </div>
                <div class="btnsDiv">
                    <input value="Run tests" type="button" onClick="runTests()" />
                    <input value="Reset" type="button" onClick="reset()" />
                </div>
            </div>
            <div class="logPane" id="logPane">
                <div class="divShowHideBtn">
                    <a href="#" onclick="showHide(this); return false;">Hide</a>
                </div>
                <div class="divTxtAreaBackground" id="divTxtAreaBackground">
                    <div class="divTxtArea">
                        <textarea disabled id="logOutput"></textarea>
                    </div>
                <div>
                <div class="divLogInputBackground" id="divLogInputBackground">
                    <div class="divLogInput">
                        <span>></span>
                        <input type="text" class="logInput" id="logInput" onkeydown="inputCommand()"></input>               
                    </div>
                </div>
                <div class="divLogPaneFooter" id="divLogPaneFooter"></div>
            </div>
        </div>
    </body>
</html>
