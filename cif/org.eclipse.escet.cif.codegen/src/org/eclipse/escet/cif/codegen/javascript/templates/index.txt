<!DOCTYPE html>
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>${prefix} | Eclipse ESCET</title>
        <link rel="stylesheet" href="${prefix}_escet_theme.css">
        <style type="text/css">
            body {
                text-align: center;
            }

            #flex-container {
                display: flex;
                flex-flow: column;
                height: 100%;
            }

            #content {
                flex: 1 1 auto;
                overflow: auto;
            }

            #log-pane {
                border-top: 2px solid #ddd;
                min-height: 20px;
                background: #fafafa;
            }
            #log-pane .div-show-hide-btn {
                height: 42px;
                padding-top: 5px;
                text-align: right;
                width: 100%;
                border-bottom: 1px solid #ddd;
            }

            #log-pane .div-show-hide-btn span {
                margin-right: 10px;
            }
            #log-pane #div-txt-area-background {
                height: calc(100% - 57px);
                background: #fff;
            }
            #log-pane .div-txt-area {
                margin: 0px 20px;
                height: 100%;
            }
            #log-pane .div-txt-area textarea {
                resize: none;
                border: 0;
                height: 100%;
                width: 100%;
                margin: 0;
                padding: 0;
            }
            #log-pane #div-log-pane-footer {
                background: #fafafa;
                border-top: 1px solid #ddd;
            }

            .collapsed #log-pane {
                height: 48px;
                flex: none;
            }
            .expanded #log-pane {
                height: 40%;
                flex: 1 1 auto;
            }
            .collapsed #content {
                resize: none;
            }
            .expanded #content {
                resize: vertical;
            }

            .collapsed #div-txt-area-background,
            .collapsed #div-log-pane-footer {
                display: none;
            }
            .expanded #div-txt-area-background,
            .expanded #div-log-pane-footer {
                display: visible;
            }

            #run-frequency {
                width: 250px;
            }

            svg {
                background: white;
                margin-bottom: 8px;
            }

            .svg-hidden {
                visibility: hidden;
                display: none;
            }

            .svg-visible {
                visibility: visible;
                display: block;
            }

            /* Defaults for SVG text elements, for same size and style as used by the CIF simulator. */
            .text {
                font-style: normal;
                font-variant: normal;
                font-weight: normal;
                font-stretch: normal;
                font-size: 11.8014px;
                font-family: "Arial";
            }

${javascript-svg-in-css}
        </style>
        <script src="${prefix}_utils.js"></script>
        <script type="text/javascript">
            var ${prefix};

            function onLoad() {
                ${prefix} = new ${prefix}_class();
                reset();
                start();
            }

            function toggleStartStop() {
                if (${prefix}.playing) {
                    stop();
                } else {
                    start();
                }
            }

            function start() {
                if (!${prefix}.playing) {
                    log('start');
                    var btn = document.getElementById('start-stop-toggle');
                    btn.value = 'Stop';
                    ${prefix}.start();
                }
            }

            function stop() {
                if (${prefix}.playing){
                    log('stop');
                    var btn = document.getElementById('start-stop-toggle');
                    btn.value = 'Start';
                    ${prefix}.stop();
                }
            }

            function reset() {
                stop();
                ${prefix}.reset();
                clearLog();
            }

            function updateFrequency() {
                // Update frequency.
                var range = document.getElementById('run-frequency');
                ${prefix}.frequency = range.value;

                // Update frequency UI.
                document.getElementById('run-frequency-output').value = range.value;
            }

            function log(message) {
                console.log(message);
                var elem = document.getElementById('log-output');
                elem.value += message + '\r\n';
                elem.scrollTop = elem.scrollHeight;
            }

            function clearLog() {
                document.getElementById('log-output').value = '';
            }

            function showHide(btn) {
                var elem = document.getElementById('flex-container');
                if (elem.classList.contains('expanded')) {
                    elem.classList.remove('expanded');
                    elem.classList.add('collapsed');
                    btn.value = 'Show';
                } else {
                    elem.classList.remove('collapsed');
                    elem.classList.add('expanded');
                    btn.value = 'Hide';
                }
            }

            function toggleSVG(elemId) {
                var elem = document.getElementById(elemId);
                if (elem.classList.contains('svg-visible')) {
                    elem.classList.remove('svg-visible');
                    elem.classList.add('svg-hidden');
                } else {
                    elem.classList.remove('svg-hidden');
                    elem.classList.add('svg-visible');
                }
            }

            function downloadLog(btn) {
                var modelName = document.getElementById('model-name').innerHTML;
                var content = document.getElementById('log-output').value;

                var blob = new Blob([content], { type: 'plain/text' });
                var fileURL = URL.createObjectURL(blob);

                btn.setAttribute('href', fileURL);
                btn.setAttribute('download', modelName + '.' + new Date().toISOString() + '.log.txt');
            }

            /** Tuples. */
${javascript-tuples-code}

            /** ${prefix}_class code generated from a CIF specification. */
            class ${prefix}_class {
                /** ${prefix}Enum declaration. It contains the single merged enum from the CIF model. */
                ${prefix}Enum = Object.freeze({
${javascript-enum-lits-code}
                })

                /** Should execution timing information be provided? */
                doInfoExec = true;

                /** Should executed event information be provided? */
                doInfoEvent = true;

                /** Should print output be provided? */
                doInfoPrintOutput = true;

                /** Whether this is the first time the code is (to be) executed. */
                firstExec;

                /** The names of all the events, except for event 'tau'. */
                EVENT_NAMES = [
${javascript-event-name-code}
                ];
${javascript-const-decls}

                /** Variable 'time', tracks elapsed time for a session. */
                time;

                /**
                 * The frequency in times per second, that the code should
                 * be executed (if positive), or execute as fast as possible, that is
                 * as many times per second as possible (if negative or zero).
                 */
                frequency = 20;

                /**
                 * Whether the next execution is the first execution of the session.
                 * Used to initialize time-related variables for starting, pausing,
                 * resuming or resetting each session.
                 */
                first;

                /**
                 * Whether the simulation is currently running, and should process
                 * user input, or is paused.
                 */
                playing;

                /** The start time of the current session. */
                startMilli;

                /**
                 * The targeted end time of the current/next cycle, to ensure
                 * that the duration of the cycle matches with the configured
                 * frequency.
                 */
                targetMilli;

${javascript-state-decls}
${javascript-state-input}

                /** SVG output elements. */
${javascript-svg-out-declarations}

                /** SVG event allowed variables. */
${javascript-event-allowed-declarations}

                /** SVG input event handlers. */
${javascript-svg-in-event-handlers-code}

                /** Starts the simulation. */
                start() {
                    if (!this.playing) {
                        this.playing = true;
                        this.exec();
                    }
                }

                /** Stops the simulation. */
                stop() {
                    if (this.playing) {
                        this.playing = false;
                    }
                }

                /** Resets the object to its initial state. */
                reset() {
                    this.stop();
                    this.firstExec = true;
                    this.time = 0.0;
                    this.first = true;
                    this.timePaused = null;
                    this.initState();
                    this.initUI();
                    this.updateUI();
                }

                /**
                 * Execute the code once. Inputs are read, transitions are executed until
                 * none are possible, outputs are written, etc.
                 *
                 * @param newTime The time in seconds, since the start of the first
                 *      execution.
                 * @throws ${prefix}Exception In case of a runtime error caused by code
                 *      generated from the CIF model.
                 */
                execOnce(newTime) {
                    // Pre execution notification.
                    this.preExec();

                    // Update values of input variables.
                    this.updateInputs();

                    // Initialize the state.
                    if (this.firstExec) {
                        this.initState();
                    }

                    // Calculate time delta.
                    var delta = newTime - this.time;

                    // Update values of continuous variables.
                    if (!this.firstExec) {
${javascript-cont-upd-code}
                    }

                    // Update time.
                    this.time = newTime;

                    // Apply print declarations.
                    if (this.firstExec) {
                        // For 'initial' transition.
                        if (this.doInfoPrintOutput) this.printOutput(-3, true);
                        if (this.doInfoPrintOutput) this.printOutput(-3, false);

                    } else {
                        // For 'post' of time transition.
                        if (this.doInfoPrintOutput) this.printOutput(-2, false);
                    }

                    // Execute events as long as they are possible.
                    while (true) {
${javascript-event-calls-code}
                        break;
                    }

                    // Apply print declarations for 'pre' of time transition.
                    if (this.doInfoPrintOutput) this.printOutput(-2, true);

                    // Post execution notification.
                    this.postExec();

                    // Done.
                    this.firstExec = false;
                }

                /**
                 * Calls {@link #execWhile}, which repeatedly {@link #execOnce executes the code}.
                 *
                 * @throws ${prefix}Exception In case of a runtime error caused by code
                 *      generated from the CIF model.
                 */
                exec() {
                    this.execWhile(1);
                }

                /**
                 * Repeatedly {@link #execOnce executes the code}.
                 *
                 * @param delay The delay before executing, in milliseconds.
                 *
                 * @throws ${prefix}Exception In case of a runtime error caused by code
                 *      generated from the CIF model.
                 */
                execWhile(delay) {
                    setTimeout(
                        function () {
                            // Pre execution timing.
                            var now = Date.now();
                            var preMilli = now;

                            // On first execution, initialize variables for timing.
                            if (${prefix}.first) {
                                ${prefix}.first = false;
                                ${prefix}.startMilli = now;
                                ${prefix}.targetMilli = ${prefix}.startMilli;
                                preMilli = ${prefix}.startMilli;
                            }

                            // Handle pausing/playing.
                            if (!${prefix}.playing) {
                                ${prefix}.timePaused = now;
                                return;
                            }

                            if (${prefix}.timePaused) {
                                ${prefix}.startMilli += (now - ${prefix}.timePaused);
                                ${prefix}.targetMilli += (now - ${prefix}.timePaused);
                                ${prefix}.timePaused = null;
                            }

                            // Get cycle time and current 'time'.
                            var frequency = ${prefix}.frequency;
                            var cycleMilli = (frequency <= 0) ? -1 : 1e3 / frequency;
                            var timeMilli = preMilli - ${prefix}.startMilli;

                            // Execute once.
                            ${prefix}.execOnce(timeMilli / 1e3);

                            // Post execution timing.
                            var postMilli = Date.now();
                            var duration = postMilli - preMilli;
                            if (${prefix}.doInfoExec) {
                                ${prefix}.infoExec(duration, cycleMilli);
                            }

                            // Ensure frequency.
                            var remainderMilli = 0;
                            if (frequency > 0) {
                                ${prefix}.targetMilli += cycleMilli;
                                remainderMilli = ${prefix}.targetMilli - postMilli;
                            }

                            // Execute again.
                            ${prefix}.execWhile(remainderMilli > 0 ? remainderMilli : 0);
                        },
                    delay);
                }
${javascript-event-methods-code}

                /** Initializes the state. */
                initState() {
                    // SVG input event allowed/clicked variables.
${javascript-event-allowed-init-code}

                    // CIF model state variables.
${javascript-state-init}
                }

                /**
                 * Initializes the user interface, either when loading the page
                 * or when resetting the simulation.
                 */
                initUI() {
                    // Update frequency UI.
                    var range = document.getElementById('run-frequency');
                    range.value = ${prefix}.frequency;
                    document.getElementById('run-frequency-output').value = range.value;

                    // Prepare SVG output.
${javascript-svg-out-assignments-code}

                    // Prepare SVG input.
${javascript-svg-in-interact-code}
                }

                /**
                 * Updates the user interface based on the latest state of
                 * the model. Is called at the end of each cycle.
                 */
                updateUI() {
                    // Apply CIF/SVG output mappings.
${javascript-svg-out-apply-code}
                }

                /**
                 * Updates the values of the input variables. Other variables from the
                 * state may not be accessed or modified.
                 */
                updateInputs() {
                    // Nothing is done here by default.
                }

                /**
                 * Informs about the duration of a single execution.
                 *
                 * @param duration The duration of the execution, in milliseconds.
                 * @param cycleTime The desired maximum duration of the execution, in
                 *      milliseconds, or '-1' if not available.
                 */
                infoExec(duration, cycleTime) {
                    // Nothing is done here by default.
                }

                /**
                 * Informs that an event will be or has been executed.
                 *
                 * @param idx The 0-based index of the event, or '-1' for 'tau'.
                 * @param pre Whether the event will be executed ('true') or has
                 *      been executed ('false').
                 */
                infoEvent(idx, pre) {
                    if (pre) {
                        log(${prefix}Utils.fmt("Transition: event %d", this.getEventName(idx)));
                    }
                }

                /**
                 * Informs that the code is about to be executed. For the
                 * {@link #firstExec} the state has not yet been initialized, except for
                 * {@link #time}.
                 */
                preExec() {
                    // Nothing is done here by default.
                }

                /** Informs that the code was just executed. */
                postExec() {
                    this.updateUI();
                }

                /**
                 * Returns the name of an event.
                 *
                 * @param idx The 0-based index of the event, or '-1' for 'tau'.
                 * @return The name of the event.
                 */
                getEventName(idx) {
                    if (idx == -1) {
                        return 'tau';
                    }
                    return this.EVENT_NAMES[idx];
                }

${javascript-alg-var-code}
${javascript-deriv-code}
${javascript-funcs-code}

                /**
                 * Print output for all relevant print declarations.
                 *
                 * @param idx The 0-based event index of the transition, or '-1' for
                 *      'tau' transitions, '-2' for time transitions, or '-3'
                 *      for the 'initial' transition.
                 * @param pre Whether to print output for the pre/source state of the
                 *      transition ('true') or for the post/target state of the
                 *      transition ('false').
                 */
                printOutput(idx, pre) {
${javascript-print-code}
                }

                /**
                 * Informs that new print output is available.
                 *
                 * @param text The text being printed.
                 */
                infoPrintOutput(text) {
                    log(text);
                }
            }
        </script>
    </head>
    <body onload="onLoad()">
        <div class="expanded" id="flex-container">
            <div id="content">
                <h1 id="model-name">${prefix}</h1>
                ${javascript-svg-content}
            </div>
            <div id="log-pane">
                <div class="div-show-hide-btn">
                    <span>
${javascript-svg-toggles}
                        <input id="run-frequency" type="range" min="1" max="120"
                                list="run-frequency-markers" oninput="updateFrequency(); return false;"/>
                        <output id="run-frequency-output" for="run-frequency"></output>
                        <label for="run-frequency"> Hz</label>
                        <datalist id="run-frequency-markers">
                            <option value="30"/>
                            <option value="60"/>
                            <option value="90"/>
                            <option value="120"/>
                        </datalist>
                        <input id="start-stop-toggle" value="Stop" type="button"
                                onclick="toggleStartStop(); return false;"/>
                        <input value="Reset" type="button" onclick="reset(); return false;"/>
                        <a href="#" onclick="downloadLog(this); return false;" title="Download log">
                            <input value="Download log" type="button"/>
                        </a>
                        <input value="Hide" type="button" onclick="showHide(this); return false;"/>
                    </span>
                </div>
                <div id="div-txt-area-background">
                    <div class="div-txt-area">
                        <textarea disabled id="log-output"></textarea>
                    </div>
                <div>
                <div id="div-log-pane-footer"></div>
            </div>
        </div>
    </body>
</html>
