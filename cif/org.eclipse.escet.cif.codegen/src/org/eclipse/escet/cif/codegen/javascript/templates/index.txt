<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>${prefix} | Eclipse ESCET</title>
        <link rel="stylesheet" href="${prefix}_escet_theme.css">
        <style>
            body {
                text-align: center;
            }

            #flex-container {
                display: flex;
                flex-flow: column;
                height: 100%;
            }

            #content {
                flex: 1 1 auto;
                overflow: auto;
            }
            #content .btns-div {
                margin-bottom: 15px;
            }

            #log-pane {
                border-top: 2px solid #ddd;
                min-height: 20px;
                background: #fafafa;
            }
            #log-pane .div-show-hide-btn {
                height: 25px;
                padding-top: 5px;
                text-align: right;
                border-bottom: 1px solid #ddd;
            }
            #log-pane .div-show-hide-btn a {
                display: block;
                float: right;
                margin: -4px 7px 0px 0px;
            }
            #log-pane #div-txt-area-background {
                height: calc(100% - 60px);
                background: #fff;
            }
            #log-pane .div-txt-area {
                margin: 0px 20px;
                height: 100%;
            }
            #log-pane .div-txt-area textarea {
                resize: none;
                border: 0;
                height: 100%;
                width: 100%;
                margin: 0;
                padding: 0;
            }
            #log-pane #div-log-pane-footer {
                background: #fafafa;
                border-top: 1px solid #ddd;
            }

            .collapsed #log-pane {
                height: 31px;
                flex: none;
            }
            .expanded #log-pane {
                height: 40%;
                flex: 1 1 auto;
            }
            .collapsed #content {
                resize: none;
            }
            .expanded #content {
                resize: vertical;
            }

            .collapsed #div-txt-area-background,
            .collapsed #div-log-pane-footer {
                display: none;
            }
            .expanded #div-txt-area-background,
            .expanded #div-log-pane-footer {
                display: visible;
            }
        </style>
        <script src="${prefix}_utils.js"></script>
        <script type="text/javascript">
            var ${prefix};

            function onLoad() {
                ${prefix} = new ${prefix}_class();
            }

            function log(message) {
                console.log(message);
                var elem = document.getElementById("log-output");
                elem.value += message + '\r\n';
                elem.scrollTop = elem.scrollHeight;
            }

            function reset() {
                clearLog();
            }

            function clearLog() {
                document.getElementById("log-output").value = "";
            }

            function showHide(btn) {
                var elem = document.getElementById("flex-container");
                if (elem.classList.contains("expanded")) {
                    btn.textContent = "Show";
                    elem.classList.remove('expanded');
                    elem.classList.add('collapsed');
                } else {
                    btn.textContent = "Hide";
                    elem.classList.remove('collapsed');
                    elem.classList.add('expanded');
                }
            }

${javascript-tuples-code}

            /** ${prefix}_class code generated from a CIF specification. */
            class ${prefix}_class {
                ${prefix}Enum = Object.freeze({
${javascript-enum-lits-code}
                })

                /** Should execution timing information be provided? */
                doInfoExec = true;

                /** Should executed event information be provided? */
                doInfoEvent = false;

                /** Should print output be provided? */
                doInfoPrintOutput = true;

                /** Whether this is the first time the code is (to be) executed. */
                firstExec;

                /** The names of all the events, except for event 'tau'. */
                EVENT_NAMES = [
${javascript-event-name-code}
                ];
${javascript-const-decls}

                /** Variable 'time', tracks elapsed time for a session. */
                time;

                /**
                 * The frequency in times per second, that the code should
                 * be executed (if positive), or execute as fast as possible, that is
                 * as many times per second as possible (if negative or zero).
                 */
                frequency = 20;

                /**
                 * Used to initialise time-related variables for starting, pausing,
                 * resuming or resetting each session.
                 */
                first;

                /** Used to track the starting time of the current session. */
                startMilli;

                /**
                 * Used to ensure that the timing of each cycle in a session
                 * matches the given frequency.
                 */
                targetMilli;

${javascript-state-decls}
${javascript-state-input}

                /** Constructor for the {@link ${prefix}_class} class. */
                constructor() {
                    this.reset();
                }

                /** Resets the object to its intitial state. */
                reset() {
                    this.firstExec = true;
                    this.time = 0.0;
                    this.first = true;
                    this.initState();
                }

                /**
                 * Execute the code once. Inputs are read, transitions are executed until
                 * none are possible, outputs are written, etc.
                 *
                 * @param newTime The time in seconds, since the start of the first
                 *      execution.
                 * @throws ${prefix}Exception In case of a runtime error caused by code
                 *      generated from the CIF model.
                 */
                execOnce(newTime) {
                    // Pre execution notification.
                    this.preExec();

                    // Update values of input variables.
                    this.updateInputs();

                    // Initialize the state.
                    if (this.firstExec) {
                        this.initState();
                    }

                    // Calculate time delta.
                    var delta = newTime - this.time;

                    // Update values of continuous variables.
                    if (!this.firstExec) {
${javascript-cont-upd-code}
                    }

                    // Update time.
                    this.time = newTime;

                    // Apply print declarations.
                    if (this.firstExec) {
                        // For 'initial' transition.
                        if (this.doInfoPrintOutput) this.printOutput(-3, true);
                        if (this.doInfoPrintOutput) this.printOutput(-3, false);

                    } else {
                        // For 'post' of time transition.
                        if (this.doInfoPrintOutput) this.printOutput(-2, false);
                    }

                    // Execute events as long as they are possible.
                    while (true) {
${javascript-event-calls-code}
                        break;
                    }

                    // Apply print declarations for 'pre' of time transition.
                    if (this.doInfoPrintOutput) this.printOutput(-2, true);

                    // Post execution notification.
                    this.postExec();

                    // Done.
                    this.firstExec = false;
                }

                /**
                 * Calls {@link #execWhile}, which repeatedly {@link #execOnce executes the code}.
                 *
                 * @throws ${prefix}Exception In case of a runtime error caused by code
                 *      generated from the CIF model.
                 */
                exec() {
                    this.execWhile(1);
                }

                /**
                 * Repeatedly {@link #execOnce executes the code}.
                 *
                 * @param delay The delay before executing, in milliseconds.
                 *
                 * @throws ${prefix}Exception In case of a runtime error caused by code
                 *      generated from the CIF model.
                 */
                execWhile(delay) {
                    setTimeout(
                        function () {
                            // Pre execution timing.
                            var now = Date.now();
                            var preMilli = now;
                            // On first execution, initialise variables for timing.
                            if (${prefix}.first) {
                                ${prefix}.first = false;
                                ${prefix}.startMilli = now;
                                ${prefix}.targetMilli = ${prefix}.startMilli;
                                preMilli = ${prefix}.startMilli;
                            }
                            var frequency = ${prefix}.frequency;
                            var cycleMilli = (frequency <= 0) ? -1 : 1e3 / frequency;
                            var timeMilli = preMilli - ${prefix}.startMilli;

                            // Execute once.
                            ${prefix}.execOnce(timeMilli / 1e3);

                            // Post execution timing.
                            var postMilli = Date.now();
                            var duration = postMilli - preMilli;
                            if (${prefix}.doInfoExec) {
                                ${prefix}.infoExec(duration, cycleMilli);
                            }

                            // Ensure frequency.
                            var remainderMilli = 0;
                            if (frequency > 0) {
                                ${prefix}.targetMilli += cycleMilli;
                                remainderMilli = ${prefix}.targetMilli - postMilli;
                            }
                            // Execute again.
                            ${prefix}.execWhile(remainderMilli > 0 ? remainderMilli : 0);
                        },
                    delay);
                }
${javascript-event-methods-code}

                /** Initializes the state. */
                initState() {
${javascript-state-init}
                }

                /**
                 * Updates the values of the input variables. Other variables from the
                 * state may not be accessed or modified.
                 */
                updateInputs() { }

                /**
                 * Informs about the duration of a single execution.
                 *
                 * @param duration The duration of the execution, in milliseconds.
                 * @param cycleTime The desired maximum duration of the execution, in
                 *      milliseconds, or '-1' if not available.
                 */
                infoExec(duration, cycleTime) { }

                /**
                 * Informs that an event will be or has been executed.
                 *
                 * @param idx The 0-based index of the event, or '-1' for 'tau'.
                 * @param pre Whether the event will be executed ('true') or has
                 *      been executed ('false').
                 */
                infoEvent(idx, pre) { }

                /**
                 * Informs that the code is about to be executed. For the
                 * {@link #firstExec} the state has not yet been initialized, except for
                 * {@link #time}.
                 */
                preExec() { }

                /** Informs that the code was just executed. */
                postExec() { }

                /**
                 * Returns the name of an event.
                 *
                 * @param idx The 0-based index of the event, or '-1' for 'tau'.
                 * @return The name of the event.
                 */
                getEventName(idx) {
                    if (idx == -1) {
                        return "tau";
                    }
                    return this.EVENT_NAMES[idx];
                }

${javascript-alg-var-code}
${javascript-deriv-code}
${javascript-funcs-code}

                /**
                 * Print output for all relevant print declarations.
                 *
                 * @param idx The 0-based event index of the transition, or '-1' for
                 *      'tau' transitions, '-2' for time transitions, or '-3'
                 *      for the 'initial' transition.
                 * @param pre Whether to print output for the pre/source state of the
                 *      transition ('true') or for the post/target state of the
                 *      transition ('false').
                 */
                printOutput(idx, pre) {
${javascript-print-code}
                }

                /**
                 * Informs that new print output is available.
                 *
                 * @param text The text being printed.
                 */
                infoPrintOutput(text) {
                    log(text);
                }
            }
        </script>
    </head>
    <body onload="onLoad()">
        <div class="expanded" id="flex-container">
            <div id="content">
                <div>
                    <h1>${prefix}</h1>
                    <!-- SVG element goes here. -->
                </div>
                <div class="btns-div">
                    <input value="Reset" type="button" onClick="reset()">
                </div>
            </div>
            <div id="log-pane">
                <div class="div-show-hide-btn">
                    <a href="#" onclick="showHide(this); return false;">Hide</a>
                </div>
                <div id="div-txt-area-background">
                    <div class="div-txt-area">
                        <textarea disabled id="log-output"></textarea>
                    </div>
                <div>
                <div id="div-log-pane-footer"></div>
            </div>
        </div>
    </body>
</html>
