//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Import the result of synthesis.
import "generated/fifo.synthesized.cif";

// Specify the SVG image to use for visualization.
svgfile "fifo.svg";

// Monitor whether any products have entered and exited the system.
// Also monitor the last product that has entered the system.
// The plant already monitors the last product that exited the system.
automaton monitors:
  disc bool anyInput = false;
  disc bool anyOutput = false;
  disc ProductId lastEnterId = 0;

  location:
    initial;
    edge c_enter do  anyInput := true, lastEnterId := IO.nextId;
    edge c_exit  do anyOutput := true;
end

// Map the state of the plant to properties of elements of the SVG image.
svgout id "max-nr-of-prods"   text value <string>MAX_NR_OF_PRODS;
svgout id "last-entered-prod" text value if monitors.anyInput: <string>monitors.lastEnterId else "n/a" end;
svgout id "last-exited-prod"  text value if monitors.anyOutput: <string>IO.lastExitId else "n/a" end;

svgout id "io"       attr "fill" value if IO.Idle:   "#eee" else "#aaeeff" end;
svgout id "disp"     attr "fill" value if DISP.Idle: "#eee" else "#aaeeff" end;
svgout id "op1"      attr "fill" value if OP1.Idle:  "#eee" else "#aaeeff" end;
svgout id "op2"      attr "fill" value if OP2.Idle:  "#eee" else "#aaeeff" end;
svgout id "chk"      attr "fill" value if CHK.Idle:  "#eee" else "#aaeeff" end;
svgout id "done"     attr "fill" value if DONE.Idle: "#eee" else "#aaeeff" end;

svgout id "io-cur"   attr "fill" value if IO.Idle:   "#eee" else "#aaeeff" end;
svgout id "disp-cur" attr "fill" value if DISP.Idle: "#eee" else "#aaeeff" end;
svgout id "op1-cur"  attr "fill" value if OP1.Idle:  "#eee" else "#aaeeff" end;
svgout id "op2-cur"  attr "fill" value if OP2.Idle:  "#eee" else "#aaeeff" end;
svgout id "chk-cur"  attr "fill" value if CHK.Idle:  "#eee" else "#aaeeff" end;
svgout id "done-cur" attr "fill" value if DONE.Idle: "#eee" else "#aaeeff" end;

svgout id "io-cur-txt"   text value if IO.Idle:   "-" else <string>IO.curId   end;
svgout id "disp-cur-txt" text value if DISP.Idle: "-" else <string>DISP.curId end;
svgout id "op1-cur-txt"  text value if OP1.Idle:  "-" else <string>OP1.curId  end;
svgout id "op2-cur-txt"  text value if OP2.Idle:  "-" else <string>OP2.curId  end;
svgout id "chk-cur-txt"  text value if CHK.Idle:  "-" else <string>CHK.curId  end;
svgout id "done-cur-txt" text value if DONE.Idle: "-" else <string>DONE.curId end;

svgout id "chk-rslt"    attr "visibility" value if CHK.Idle:      "hidden"  else "visible" end;
svgout id "chk-unknown" attr "visibility" value if CHK.Busy:      "visible" else "hidden"  end;
svgout id "chk-ok"      attr "visibility" value if CHK.Success:   "visible" else "hidden"  end;
svgout id "chk-nok"     attr "visibility" value if CHK.NeedsRedo: "visible" else "hidden"  end;

svgout id "chk-rslt" attr "fill" value switch CHK:
                                         case Idle:      "#eee"
                                         case Busy:      "#aaeeff"
                                         case Success:   "#c0ffc0"
                                         case NeedsRedo: "#ffc0c0"
                                       end;
