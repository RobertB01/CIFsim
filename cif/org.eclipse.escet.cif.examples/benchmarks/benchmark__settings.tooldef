//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Configure the configuration to use for benchmarking, used by 'benchmark__base.tooldef'.

// Helper function that returns all combinations of elements from the first sub-list, with elements from the second
// sub-list, with elements from the third sub-list, etc. For example, for [["a", "b", "c"], ["d"], ["e", "f"]] it
// returns [["a", "d", "e"], ["a", "d", "f"], ["b", "d", "e"], ["b", "d", "f"], ["c", "d", "e"], ["c", "d", "f"]].
tool list string combine(list list string to_combine):
    list string combinations = [""];
    for alternatives in to_combine:
        list string new_combinations = [];
        for combination in combinations:
            for alternative in alternatives:
                string new_combination = combination + alternative;
                new_combinations = new_combinations + [new_combination];
            end
        end
        combinations = new_combinations;
    end
    return combinations;
end

// Returns the configurations to use for benchmarking. For each configuration, synthesis is performed. The results
// allow evaluation of the effect of the different configurations on synthesis performance.
tool list string get_benchmark_configurations():
    // By default, a single default configuration is used.
    return [""];

    // Below are some examples of how different configurations can be configured.

    // Example 1: multiple configurations, all explicitly given.
    //
    // return [
    //   "--var-order=model",
    //   "--var-order=sorted",
    //   "--var-order=random:1",
    //   "--var-order=random:2",
    // ];

    // Example 2: multiple configurations, some explicitly given, others generated.
    //
    // list configurations = [
    //   "--var-order=model",
    //   "--var-order=sorted",
    // ];
    // for i in range(1, 10):
    //   configurations = configurations + [fmt("--var-order=random:%d", i)];
    // end
    // return configurations;

    // Example 3: combinations of different options.
    //
    // return combine([
    //   ["--var-order=model", "--var-order=sorted", "--var-order=random:1"],
    //   [" --dcsh-order=on", " --dcsh-order=off"],
    // ]);
    //
    // Uses all combinations of model, sorted and random variable orders with the DCSH ordering algorithm being on or
    // off, resulting in 3 * 2 = 6 configurations. Note that the elements of the 2nd list start with a space, which
    // ensures that when elements from the first list are combined with elements from the second list, the different
    // synthesis options are properly separated by a space.

    // Example 4: combinations within the value of a single option.
    //
    // return combine([
    //   ["--adv-var-order=\""],
    //   ["model", "sorted"],
    //   [" -> dcsh -> force -> slidwin", " -> force -> slidwin"],
    //   ["\""],
    // ]);
    //
    // Combines model and sorted initial variable orders with variable ordering algorithms, either using DCSH as
    // algorithm, or not. This produces 2 * 2 = 4 configurations. The combinations all use the '--adv-var-order' option.
    // The value of that option is surrounded by double quotes to ensure it is properly parsed, despite spaces being
    // used within the option value.
end

// Returns the subset of configurations to use for benchmarking. By default, all configurations are used, but this can
// be restricted. This may be useful, for instance to execute parts of the benchmarking for sub-ranges in parallel, or
// to rerun benchmarking for certain configurations that failed.
tool list int get_benchmark_configurations_subset():
    // By default, the full range of configurations is used.
    int count = size(get_benchmark_configurations());
    return range(1, count);

    // Below are some examples of how different subsets of configurations can be configured.

    // Example 1: Use an explicitly specified sub-range.
    //
    // return range(5, 8);

    // Example 2: Use explicitly specified configurations.
    //
    // return [3, 4, 8, 9, 23];

    // Example 3: Use multiple sub-ranges of approximately-equal size, which together span the entire range of
    // configurations.
    //
    // int count = size(get_benchmark_configurations());
    // int sub = 4; // We want 4 sub-ranges. Constraint: 1 <= sub <= count.
    // int nr = 2; // We want to use sub-range 2 out of 4. Constraint: 1 <= nr <= sub.
    // int sub_size = count div sub; // Minimum size of each sub-range.
    // int need_extra = count mod sub; // Number of sub-ranges that need an extra element.
    // int i = 1; // 1-based start index of the current sub-range.
    // for cur_sub in range(1, sub):
    //   int cur_size = sub_size;
    //   if cur_sub <= need_extra:: cur_size = cur_size + 1;
    //   if cur_sub == nr:: return range(i, i + cur_size - 1);
    //   i = i + cur_size;
    // end
end
