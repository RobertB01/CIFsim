//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2017, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Model for a Body Comfort System (BCS) product line:
//  - This file models the behavior of the various components of the BCS, and couples it to the feature model.
//  - This file is combined with a 'Feature' definition, in `BCS_static.cif' or 'BCS_dynamic.cif'.

// *** ECU HMI ***

// HMI LED Exterior Mirror.

plant LED_EM_top:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_EM_left:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_EM_bottom:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_EM_right:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_EM_top.c_off needs FLEDMir.present;
plant LED_EM_top.c_on needs FLEDMir.present;
plant LED_EM_left.c_off needs FLEDMir.present;
plant LED_EM_left.c_on needs FLEDMir.present;
plant LED_EM_bottom.c_off needs FLEDMir.present;
plant LED_EM_bottom.c_on needs FLEDMir.present;
plant LED_EM_right.c_off needs FLEDMir.present;
plant LED_EM_right.c_on needs FLEDMir.present;

requirement LED_EM_top.c_on needs positionEM.EM_top or positionEM.EM_top_left or positionEM.EM_top_right;
requirement LED_EM_top.c_off needs positionEM.EM_hor_pending or positionEM.EM_hor_left or positionEM.EM_hor_right;

requirement LED_EM_left.c_on needs positionEM.EM_hor_left or positionEM.EM_top_left or positionEM.EM_bottom_left;
requirement LED_EM_left.c_off needs positionEM.EM_hor_pending or positionEM.EM_bottom or positionEM.EM_top;

requirement LED_EM_bottom.c_on needs positionEM.EM_bottom or positionEM.EM_bottom_left or positionEM.EM_bottom_right;
requirement LED_EM_bottom.c_off needs positionEM.EM_hor_pending or positionEM.EM_hor_left or positionEM.EM_hor_right;

requirement LED_EM_right.c_on needs positionEM.EM_hor_right or positionEM.EM_top_right or positionEM.EM_bottom_right;
requirement LED_EM_right.c_off needs positionEM.EM_hor_pending or positionEM.EM_bottom or positionEM.EM_top;

// LED Finger Protection.

plant LED_PW_FP:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_PW_FP.c_on needs FLEDFP.present;
plant LED_PW_FP.c_off needs FLEDFP.present;

requirement LED_PW_up.c_on needs fingerPW.On;
requirement LED_PW_up.c_off needs fingerPW.Off;

// LED Power Window.

plant LED_PW_up:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_PW_dn:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_PW_up.c_on needs FLEDPW.present;
plant LED_PW_up.c_off needs FLEDPW.present;
plant LED_PW_dn.c_on needs FLEDPW.present;
plant LED_PW_dn.c_off needs FLEDPW.present;

requirement LED_PW_up.c_on needs motorPW.Up;
requirement LED_PW_up.c_off needs motorPW.Idle;
requirement LED_PW_dn.c_on needs motorPW.Down;
requirement LED_PW_dn.c_off needs motorPW.Idle;

// LED Exterior Mirror Heating.

plant LED_EM_heating:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_EM_heating.c_on needs FLEDHeat.present;
plant LED_EM_heating.c_off needs FLEDHeat.present;

requirement LED_EM_heating.c_on needs EM_heating.On;
requirement LED_EM_heating.c_off needs EM_heating.Off;

// LED Central Locking.

plant LED_CLS:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_CLS.c_on needs FLEDCLS.present;
plant LED_CLS.c_off needs FLEDCLS.present;

requirement LED_CLS.c_on needs CLS.Locked;
requirement LED_CLS.c_off needs CLS.Unlocked;

// LED Alarm System.

plant LED_AS_active:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_AS_alarm:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_AS_alarm_det:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_AS_IM:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant LED_AS_active.c_on needs FLEDAlarm.present;
plant LED_AS_active.c_off needs FLEDAlarm.present;
plant LED_AS_alarm.c_on needs FLEDAlarm.present;
plant LED_AS_alarm.c_off needs FLEDAlarm.present;
plant LED_AS_alarm_det.c_on needs FLEDAlarm.present;
plant LED_AS_alarm_det.c_off needs FLEDAlarm.present;
plant LED_AS_IM.c_on needs FLEDAlarm.present;
plant LED_AS_IM.c_off needs FLEDAlarm.present;

requirement LED_AS_active.c_on needs AlarmSystem.Activated;
requirement LED_AS_active.c_off needs AlarmSystem.Deactivated;

requirement LED_AS_alarm.c_on needs AlarmSystem.On;
requirement LED_AS_alarm.c_off needs AlarmSystem.Activated;

requirement LED_AS_alarm_det.c_on needs AlarmSystem.Alarm_detected;
requirement LED_AS_alarm_det.c_off needs AlarmSystem.On;

requirement LED_AS_IM.c_on needs InteriorMonitoring.On;
requirement LED_AS_IM.c_off needs InteriorMonitoring.Off;

// *** ECU Door system ***

// Power Window.

plant buttonPW:
  uncontrollable u_up, u_down, u_released;

  location Idle:
    initial; marked;
    edge u_up goto Up;
    edge u_down goto Down;

  location Down:
    edge u_released goto Idle;
    edge u_up goto Up;

  location Up:
    edge u_released goto Idle;
    edge u_down goto Down;
end

plant sensorPW:
  uncontrollable u_up, u_down, u_inBetween;

  location InBetween:
    edge u_up goto Up;
    edge u_down goto Down;

  location Up:
    initial; marked;
    edge u_inBetween goto InBetween;

  location Down:
    edge u_inBetween goto InBetween;
end

plant fingerPW:
  uncontrollable u_fingerDetected;
  controllable c_fingerReleased;

  location Off:
    initial; marked;
    edge u_fingerDetected goto On;

  location On:
    edge c_fingerReleased goto Off;
end

plant motorPW:
  controllable c_up, c_down, c_off_dn, c_off_up;

  location Idle:
    initial; marked;
    edge c_up goto Up;
    edge c_down goto Down;

  location Up:
    edge c_up;
    edge c_off_up goto Idle;
    edge CLS.c_lock goto Up_CLS;

  location Up_CLS:
    edge CLS.c_unlock goto Up;

  location Down:
    edge c_off_dn goto Idle;
    edge c_down;
    edge CLS.c_lock goto Down_CLS;

  location Down_CLS:
    edge CLS.c_unlock goto Down;
end

plant buttonPW.u_up needs FPowerW.present;
plant buttonPW.u_down needs FPowerW.present;
plant buttonPW.u_released needs FPowerW.present;
plant sensorPW.u_up needs FPowerW.present;
plant sensorPW.u_down needs FPowerW.present;
plant sensorPW.u_inBetween needs FPowerW.present;
plant fingerPW.u_fingerDetected needs FFingerP.present;

plant fingerPW.c_fingerReleased needs FFingerP.present;
plant motorPW.c_up needs FPowerW.present;
plant motorPW.c_down needs FPowerW.present;
plant motorPW.c_off_dn needs FPowerW.present;
plant motorPW.c_off_up needs FPowerW.present;

requirement motorPW.c_up needs buttonPW.Up or RCK_PW.Up;
requirement motorPW.c_up needs fingerPW.Off;
requirement motorPW.c_up needs not sensorPW.Up;

requirement motorPW.c_down needs buttonPW.Down  or RCK_PW.Down;
requirement motorPW.c_down needs fingerPW.Off;
requirement motorPW.c_down needs not sensorPW.Down;

requirement motorPW.c_off_dn needs fingerPW.On or (FManPW.present => buttonPW.Idle) or sensorPW.Down or (FAutoPW.present => (buttonPW.Up or RCK_PW.Up));

requirement motorPW.c_off_up needs fingerPW.On or (FManPW.present => buttonPW.Idle) or sensorPW.Up or (FAutoPW.present => (buttonPW.Down or RCK_PW.Down));

requirement fingerPW.c_fingerReleased needs buttonPW.Down;

// Exterior Mirror.

plant buttonEM:
  uncontrollable u_up, u_down, u_left, u_right, u_released;

  location Idle:
    marked; initial;
    edge u_up goto Up;
    edge u_down goto Down;
    edge u_left goto Left;
    edge u_right goto Right;

  location Up:
    edge u_released goto Idle;

  location Down:
    edge u_released goto Idle;

  location Left:
    edge u_released goto Idle;

  location Right:
    edge u_released goto Idle;
end

plant positionEM:
  uncontrollable u_pos_top, u_pos_down, u_pos_left, u_pos_right;
  uncontrollable u_rel_top, u_rel_down, u_rel_left, u_rel_right;

  location EM_hor_pending:
    initial; marked;
    edge u_pos_top goto EM_top;
    edge u_pos_down goto EM_bottom;
    edge u_pos_left goto EM_hor_left;
    edge u_pos_right goto EM_hor_right;

  location EM_top:
    edge u_pos_left goto EM_top_left;
    edge u_pos_right goto EM_top_right;
    edge u_rel_top goto EM_hor_pending;

  location EM_top_left:
    edge u_rel_top goto EM_hor_left;
    edge u_rel_left goto EM_top;

  location EM_top_right:
    edge u_rel_top goto EM_hor_right;
    edge u_rel_right goto EM_top;

  location EM_bottom:
    edge u_rel_down goto EM_hor_pending;
    edge u_pos_left goto EM_bottom_left;
    edge u_pos_right goto EM_bottom_right;

  location EM_bottom_left:
    edge u_rel_down goto EM_hor_left;
    edge u_rel_left goto EM_bottom;

  location EM_bottom_right:
    edge u_rel_down goto EM_hor_right;
    edge u_rel_right goto EM_bottom;

  location EM_hor_left:
    edge u_rel_left goto EM_hor_pending;

  location EM_hor_right:
    edge u_rel_right goto EM_hor_pending;
end

plant motorEM:
  controllable c_left, c_right, c_up, c_down, c_off;

  location Idle:
    initial; marked;
    edge c_left goto Left;
    edge c_right goto Right;
    edge c_up goto Up;
    edge c_down goto Down;

  location Left:
    edge c_off goto Idle;

  location Right:
    edge c_off goto Idle;

  location Up:
    edge c_off goto Idle;

  location Down:
    edge c_off goto Idle;
end

plant buttonEM.u_up needs FMir.present;
plant buttonEM.u_down needs FMir.present;
plant buttonEM.u_left needs FMir.present;
plant buttonEM.u_right needs FMir.present;
plant positionEM.u_pos_top needs FMir.present;
plant positionEM.u_pos_down needs FMir.present;
plant positionEM.u_pos_left needs FMir.present;
plant positionEM.u_pos_right needs FMir.present;
plant positionEM.u_rel_top needs FMir.present;
plant positionEM.u_rel_down needs FMir.present;
plant positionEM.u_rel_left needs FMir.present;
plant positionEM.u_rel_right needs FMir.present;

plant motorEM.c_up needs FMir.present;
plant motorEM.c_down needs FMir.present;
plant motorEM.c_left needs FMir.present;
plant motorEM.c_right needs FMir.present;
plant motorEM.c_off needs FMir.present;

requirement motorEM.c_left needs not(positionEM.EM_hor_left or positionEM.EM_top_left or positionEM.EM_bottom_left);
requirement motorEM.c_right needs not(positionEM.EM_hor_right or positionEM.EM_top_right or positionEM.EM_bottom_right);
requirement motorEM.c_up needs not(positionEM.EM_top or positionEM.EM_top_right or positionEM.EM_top_left);
requirement motorEM.c_down needs not(positionEM.EM_bottom or positionEM.EM_bottom_right or positionEM.EM_bottom_left);

requirement motorEM.c_left needs buttonEM.Left or RCK_EM.Left;
requirement motorEM.c_right needs buttonEM.Right or RCK_EM.Right;
requirement motorEM.c_up needs buttonEM.Up or RCK_EM.Up;
requirement motorEM.c_down needs buttonEM.Down or RCK_EM.Down;
requirement motorEM.c_off needs buttonEM.Idle or RCK_EM.Idle;

// Electric Mirror Heating.

plant EM_temp_time:
  uncontrollable u_lowtemp, u_done;

  location Heating_off:
    initial; marked;
    edge u_lowtemp goto Heating_on; // Temperature too low.

  location Heating_on:
    edge u_done goto Heating_off; // Time elapsed.
end

plant EM_heating:
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
end

plant EM_temp_time.u_lowtemp needs FMirHeat.present;
plant EM_temp_time.u_done needs FMirHeat.present;

plant EM_heating.c_on needs FMirHeat.present;
plant EM_heating.c_off needs FMirHeat.present;

requirement EM_heating.c_on needs EM_temp_time.Heating_on;
requirement EM_heating.c_off needs EM_temp_time.Heating_off;

// ECU Alarm System.

plant AlarmSystem:
  controllable c_on, c_off,c_deactivated, c_activated, c_IM_detected;
  uncontrollable u_detected, u_time_elapsed;

  location Deactivated:
    edge c_activated goto Activated;

  location Activated:
    initial; marked;
    edge c_on goto On;
    edge c_deactivated goto Deactivated;

  location On:
    edge c_off goto Activated;
    edge u_detected goto Alarm_detected;
    edge c_IM_detected goto Alarm_detected;

  location Alarm_detected:
    edge c_off goto Activated;
    edge u_time_elapsed goto On;
end

plant InteriorMonitoring:
  uncontrollable u_detected, u_clear;
  controllable c_on, c_off;

  location Off:
    initial; marked;
    edge c_on goto On;

  location On:
    edge c_off goto Off;
    edge u_detected goto Detected;

  location Detected:
    edge u_clear goto On;
    edge c_off goto Off;
end

plant AlarmSystem.u_detected needs FAlarm.present;
plant AlarmSystem.u_time_elapsed needs FAlarm.present;
plant InteriorMonitoring.u_detected needs FInterMon.present;
plant InteriorMonitoring.u_clear needs FInterMon.present;

plant AlarmSystem.c_on needs FAlarm.present;
plant AlarmSystem.c_off needs FAlarm.present;
plant AlarmSystem.c_deactivated needs FAlarm.present;
plant AlarmSystem.c_IM_detected needs FInterMon.present;
plant InteriorMonitoring.c_on needs FInterMon.present;
plant InteriorMonitoring.c_off needs FInterMon.present;

requirement AlarmSystem.c_on needs Key_lock.Locked or RCK_CLS.Locked;
requirement AlarmSystem.c_off needs Key_lock.Unlocked or RCK_CLS.Unlocked;
requirement AlarmSystem.c_deactivated needs Key_lock.Unlocked or RCK_CLS.Unlocked;

requirement AlarmSystem.c_IM_detected needs InteriorMonitoring.Detected;
requirement InteriorMonitoring.c_off needs Key_lock.Unlocked or RCK_CLS.Unlocked;

// ECU Central Locking System (CLS).

plant Key_lock:
  uncontrollable u_lock, u_unlock;

  location Unlocked:
    initial; marked;
    edge u_lock goto Locked;

  location Locked:
    edge u_unlock goto Unlocked;
end

plant CLS:
  controllable c_lock, c_unlock;

  location Unlocked:
    initial; marked;
    edge c_lock goto Locked;

  location Locked:
    initial; marked;
    edge c_unlock goto Unlocked;
end

plant Auto_lock:
  uncontrollable u_drive_lock, u_door_open_unlock;

  location Unlocked:
    initial; marked;
    edge u_drive_lock goto Locked; // When car starts driving.

  location Locked:
    initial; marked;
    edge u_door_open_unlock goto Unlocked;
end

plant Key_lock.u_lock needs FCLS.present;
plant Key_lock.u_unlock needs FCLS.present;
plant Auto_lock.u_drive_lock needs FAutoL.present;
plant Auto_lock.u_door_open_unlock needs FAutoL.present;

plant CLS.c_lock needs FCLS.present;
plant CLS.c_unlock needs FCLS.present;

requirement CLS.c_lock needs Key_lock.Locked or RCK_CLS.Locked or Auto_lock.Locked;
requirement CLS.c_unlock needs Key_lock.Unlocked or RCK_CLS.Unlocked;

// *** RCK ***

plant RCK_CLS:
  uncontrollable u_lock, u_unlock;

  location Unlocked:
    initial; marked;
    edge u_lock goto Locked;

  location Locked:
    initial; marked;
    edge u_unlock goto Unlocked;
end

plant Safety_fcn:
  uncontrollable u_time_elapsed_lock, u_door_open;
  controllable c_locked, c_unlock;

  location Idle:
    initial; marked;
    edge c_unlock goto Unlocked_RCK;

  location Unlocked_RCK:
    marked;
    edge u_time_elapsed_lock goto AutoLocking; // When timeout.
    edge u_door_open goto Idle; // When no timeout.

  location AutoLocking:
    edge CLS.c_lock goto Idle;
end

plant RCK_PW:
  uncontrollable u_up, u_down, u_released;

  location Idle:
    initial; marked;
    edge u_up goto Up;
    edge u_down goto Down;

  location Up:
    edge u_released goto Idle;

  location Down:
    edge u_released goto Idle;
end

plant RCK_EM:
  uncontrollable u_up, u_down, u_left, u_right, u_released;

  location Idle:
    marked; initial;
    edge u_up goto Up;
    edge u_down goto Down;
    edge u_left goto Left;
    edge u_right goto Right;

  location Up:
    edge u_released goto Idle;

  location Down:
    edge u_released goto Idle;

  location Left:
    edge u_released goto Idle;

  location Right:
    edge u_released goto Idle;
end

plant Safety_fcn.u_time_elapsed_lock needs FSafe.present;
plant Safety_fcn.u_door_open needs FSafe.present;
plant RCK_CLS.u_lock needs FCLS.present;
plant RCK_CLS.u_unlock needs FCLS.present;
plant RCK_PW.u_up needs FCtrAutoPW.present;
plant RCK_PW.u_down needs FCtrAutoPW.present;
plant RCK_PW.u_released needs FCtrAutoPW.present;
plant RCK_EM.u_up needs FAdjMir.present;
plant RCK_EM.u_down needs FAdjMir.present;
plant RCK_EM.u_left needs FAdjMir.present;
plant RCK_EM.u_right needs FAdjMir.present;
plant RCK_EM.u_released needs FAdjMir.present;

plant Safety_fcn.c_unlock needs FSafe.present;
plant Safety_fcn.c_locked needs FSafe.present;

requirement Safety_fcn.c_unlock needs RCK_CLS.Unlocked;
