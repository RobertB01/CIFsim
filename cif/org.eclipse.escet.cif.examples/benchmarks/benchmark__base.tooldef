//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Base functionality for executing benchmarks. Used by the other benchmarking scripts in this directory.

from "lib:cif" import *;
from "benchmark__settings.tooldef" import *;
import java.lang.System.currentTimeMillis;

// Formats a number to a fixed length.
tool string fmt_nr(int nr, int max_nr):
    int len = size(str(max_nr));
    return fmt("%0" + str(len) + "d", nr);
end

// Executes benchmarking of a given model in a given folder.
tool benchmark(string benchmark_name, string folder, string model_file_name):
    // Logging.
    outln("=============================================");
    outln("=== CIF data-based synthesis benchmarking ===");
    outln("=============================================");
    outln();
    outln("NOTE: synthesis takes longer when benchmarking due to the collection of platform-independent performance metrics.");
    outln();
    outln("Benchmark: %s (%s/%s)", benchmark_name, folder, model_file_name);
    outln();

    // Get and check configurations.
    list string configurations = get_benchmark_configurations();
    int config_count = size(configurations);
    if config_count == 0:
        outln("Nothing to do (no configurations)...");
        return;
    end

    // Get and check configurations subset.
    list int config_subset = sorted(get_benchmark_configurations_subset());
    if empty(config_subset):
        outln("Nothing to do (empty configurations subset)...");
        return;
    end
    set int config_subset_set;
    for config_nr in config_subset:
        if config_nr < 1 or config_nr > config_count:
            errln("ERROR: Invalid configuration number %d in configurations subset (it is outside of range [1..%d]).",
                  config_nr, config_count);
            exit 1;
        end
        config_subset_set = config_subset_set or {config_nr};
    end
    if size(config_subset_set) != size(config_subset):
        errln("ERROR: Invalid configurations subset (it contains a duplicate).");
        exit 1;
    end

    // Print configurations.
    outln("Configurations to benchmark (%d selected from full range [1..%d]):", size(config_subset), config_count);
    for nr in range(1, config_count):
        if not contains(config_subset, nr):: continue;
        int i = nr - 1;
        string config_txt = configurations[i];
        if empty(trim(config_txt)):: config_txt = "(default)";
        string formatted_nr = fmt_nr(nr, config_count);
        outln("  %s/%d: %s", formatted_nr, config_count, config_txt);
    end
    outln();

    // Create output folder, if it does not yet exist.
    string output_folder = "_generated";
    mkdir(output_folder, force=true);

    // Perform synthesis for each configuration.
    outln("Performing synthesis:");
    for nr in range(1, config_count):
        // Skip if not in subset.
        if not contains(config_subset, nr):: continue;

        // Logging.
        int i = nr - 1;
        string config = configurations[i];
        string config_txt = config;
        if empty(trim(config_txt)):: config_txt = "(default)";
        string formatted_nr = fmt_nr(nr, config_count);
        outln("  %s/%d: %s", formatted_nr, config_count, config_txt);

        // Determine file names.
        string config_file = fmt("%s/%s.%s.config",      output_folder, benchmark_name, formatted_nr);
        string time_file   = fmt("%s/%s.%s.time",        output_folder, benchmark_name, formatted_nr);
        string result_file = fmt("%s/%s.%s.ctrlsys.cif", output_folder, benchmark_name, formatted_nr);
        string stdout_file = fmt("%s/%s.%s.out",         output_folder, benchmark_name, formatted_nr);
        string stderr_file = fmt("%s/%s.%s.err",         output_folder, benchmark_name, formatted_nr);

        // Write used configuration to a file.
        writefile(config_file, [benchmark_name, str(nr), config]);

        // Perform synthesis, measuring the performance.
        long time_pre = currentTimeMillis();
        cifdatasynth(fmt("%s/%s", folder, model_file_name), "--event-warn=no", "-o " + result_file,
                     "--stats=ctrl-sys-states,bdd-perf-max-nodes,bdd-perf-cache -t nodes", config,
                     stdout=stdout_file, stderr=stderr_file, ignoreNonZeroExitCode=true);
        long time_post = currentTimeMillis();
        long duration = time_post - time_pre;

        // Write time duration to a file (measured in milliseconds).
        writefile(time_file, str(duration));

        // Print errors from synthesis.
        if isfile(stderr_file):
            for line in readlines(stderr_file):
                errln(line);
            end
        end
    end

    // Done.
    outln();
    outln("Done!");
end
