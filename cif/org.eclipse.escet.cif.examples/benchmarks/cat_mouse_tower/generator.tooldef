//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Generator for Cat and Mouse Tower models.

// v = 1 for original version, 2 for modified version
// n = number of levels
// k = number of cats and mice (k cats and k mice)
tool generate(int v, int n, int k):
    // Sanity checking.
    if not contains({1, 2}, v):
        errln("ERROR: Invalid version: %d.", v);
        exit 1;
    end
    if n < 1:
        errln("ERROR: Invalid number of levels: %d.", n);
        exit 1;
    end
    if k < 1:
        errln("ERROR: Invalid number of cats and mice: %d.", k);
        exit 1;
    end

    // Initialize lines.
    list string lines;

    // Add license header.
    for line in readlines(scriptpath()):
        if startswith(line, "//") or empty(line):
            lines = lines + [line];
        else
            break;
        end
    end

    // Add used settings.
    lines = lines + ["// Generated by Eclipse ESCET using the following settings:"];
    if v == 1:
        lines = lines + ["//  - Version:                 v = 1 (original)"];
    elif v == 2 :
        lines = lines + ["//  - Version:                 v = 2 (modified)"];
    end
    lines = lines + [
        fmt("//  - Number of levels:        n = %d", n),
        fmt("//  - Number of cats and mice: k = %d", k),
        "",
    ];

    // Add model explanation.
    if v == 1:
        lines = lines + [
            "// Cat and mouse tower (original version):",
            "//  - A tower has a 'n' levels, with 5 rooms at each level.",
            "//  - 'k' cats start in room 1 at level 1, and 'k' mice in room 5 of level 'n'.",
            "//  - Cats and mice may move between connected rooms, either at the same level or to the level above or below.",
            "//  - Requirements ensure that a cat and a mouse are never in the same room at the same time.",
            "//  - Most moves can be prevented by the supervisor, but not all of them.",
            "",
        ];
    elif v == 2:
        lines = lines + [
            "// Cat and mouse tower (modified version):",
            "//  - A tower has a 'n' levels, with 5 rooms at each level.",
            "//  - Initially all rooms are empty.",
            "//  - Cats and mice may enter and leave the tower, cats via room 1 at level 1, and mice via room 5 at level 'n'.",
            "//  - At most 'k' cats may be in each room, and similarly at most 'k' mice may be in each room.",
            "//  - Cats and mice may move between connected rooms, either at the same level or to the level above or below.",
            "//  - Requirements ensure that a cat and a mouse are never in the same room at the same time.",
            "//  - Most moves can be prevented by the supervisor, but not all of them.",
            "",
        ];
    end

    // Add events for moves at each level.
    for i in range(1, n):
        lines = lines + [
            // xiA_iB = move, with: x is 'c' or 'm', level i, source room number A and target room number B.
            // c = cat, m = mouse.
            fmt("// Events for moves between rooms at level %d.", i),
            fmt("controllable cat_L%1$dR1_to_L%1$dR3, cat_L%1$dR2_to_L%1$dR1, cat_L%1$dR3_to_L%1$dR2, cat_L%1$dR3_to_L%1$dR4, cat_L%1$dR4_to_L%1$dR5, cat_L%1$dR5_to_L%1$dR3;", i),
            fmt("uncontrollable cat_L%1$dR2_to_L%1$dR4, cat_L%1$dR4_to_L%1$dR2;", i),
            fmt("controllable mouse_L%1$dR1_to_L%1$dR2, mouse_L%1$dR2_to_L%1$dR3, mouse_L%1$dR3_to_L%1$dR1, mouse_L%1$dR3_to_L%1$dR5, mouse_L%1$dR4_to_L%1$dR3, mouse_L%1$dR5_to_L%1$dR4;", i),
            "",
        ];
    end

    // Add events for moves between levels.
    lines = lines + ["// Events for moves between levels."];
    for i in range(1, n - 1):
        int j = ((i - 1) mod 5) + 1;
        lines = lines + [
            fmt("controllable cat_L%1$dR%3$d_to_L%2$dR%3$d, cat_L%2$dR%3$d_to_L%1$dR%3$d, mouse_L%1$dR%3$d_to_L%2$dR%3$d, mouse_L%2$dR%3$d_to_L%1$dR%3$d;", i, i + 1, j),
        ];
    end

    // Version 2: add events for cats/mice entering/leaving.
    if v == 2:
        lines = lines + [
            "",
            "// Events for entering and leaving the tower.",
            "uncontrollable cat_enter;",
            "uncontrollable cat_leave;",
            "uncontrollable mouse_enter;",
            "uncontrollable mouse_leave;",
        ];
    end

    // Add cat in room automata.
    for i in range(1, n):
        for j in range(1, 5):
            // Cats at level i in room j.
            lines = lines + [
                "",
                fmt("// Cats at level %d, in room %d.", i, j),
                fmt("plant automaton Level%d_Room%d_Cats:", i, j),
            ];
            for l in range(0, k):
                // Location for counting the number of cats present.
                lines = lines + [fmt("  location cnt_%d:", l)];

                // For version 1, initially, first room at first level contains all cats, and all other rooms are empty.
                // For version 2, initially, all rooms are empty.
                bool initial = (v == 1 and  i == 1 and j == 1  and l == k) or
                               (v == 1 and (i != 1 or  j != 1) and l == 0) or
                               (v == 2 and                         l == 0);
                if initial:: lines = lines + ["    initial; marked;"];

                // Edges for entering the room, for moves at the same level.
                if l < k and j == 1:: lines = lines + [fmt("    edge cat_L%1$dR2_to_L%1$dR1 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 2:: lines = lines + [fmt("    edge cat_L%1$dR3_to_L%1$dR2 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 2:: lines = lines + [fmt("    edge cat_L%1$dR4_to_L%1$dR2 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 3:: lines = lines + [fmt("    edge cat_L%1$dR1_to_L%1$dR3 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 3:: lines = lines + [fmt("    edge cat_L%1$dR5_to_L%1$dR3 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 4:: lines = lines + [fmt("    edge cat_L%1$dR2_to_L%1$dR4 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 4:: lines = lines + [fmt("    edge cat_L%1$dR3_to_L%1$dR4 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 5:: lines = lines + [fmt("    edge cat_L%1$dR4_to_L%1$dR5 goto cnt_%2$d;", i, l + 1)];

                // Edges for entering the room, for moves between levels.
                int j_above = ((i - 1) mod 5) + 1;
                int j_below = ((i - 2) mod 5) + 1;
                if l < k and i < n and j == j_above:: lines = lines + [fmt("    edge cat_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i + 1, i, j, l + 1)];
                if l < k and i > 1 and j == j_below:: lines = lines + [fmt("    edge cat_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i - 1, i, j, l + 1)];

                // Version 2: edges for entering the tower.
                if v == 2 and l < k and i == 1 and j == 1:: lines = lines + [fmt("    edge cat_enter goto cnt_%d;", l + 1)];

                // Edges for leaving the room, for moves at the same level.
                if l > 0 and j == 1:: lines = lines + [fmt("    edge cat_L%1$dR1_to_L%1$dR3 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 2:: lines = lines + [fmt("    edge cat_L%1$dR2_to_L%1$dR1 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 2:: lines = lines + [fmt("    edge cat_L%1$dR2_to_L%1$dR4 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 3:: lines = lines + [fmt("    edge cat_L%1$dR3_to_L%1$dR2 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 3:: lines = lines + [fmt("    edge cat_L%1$dR3_to_L%1$dR4 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 4:: lines = lines + [fmt("    edge cat_L%1$dR4_to_L%1$dR2 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 4:: lines = lines + [fmt("    edge cat_L%1$dR4_to_L%1$dR5 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 5:: lines = lines + [fmt("    edge cat_L%1$dR5_to_L%1$dR3 goto cnt_%2$d;", i, l - 1)];

                // Edges for leaving the room, for moves between levels.
                if l > 0 and i < n and j == j_above:: lines = lines + [fmt("    edge cat_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i, i + 1, j, l - 1)];
                if l > 0 and i > 1 and j == j_below:: lines = lines + [fmt("    edge cat_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i, i - 1, j, l - 1)];

                // Version 2: edges for leaving the tower.
                if v == 2 and l > 0 and i == 1 and j == 1:: lines = lines + [fmt("    edge cat_leave goto cnt_%d;", l - 1)];
            end
            lines = lines + ["end"];
        end
    end

    // Add mouse in room automata.
    for i in range(1, n):
        for j in range(1, 5):
            // Mice at level i in room j.
            lines = lines + [
                "",
                fmt("// Mice at level %d, in room %d.", i, j),
                fmt("plant automaton Level%d_Room%d_Mice:", i, j),
            ];
            for l in range(0, k):
                // Location for counting the number of mice present.
                lines = lines + [fmt("  location cnt_%d:", l)];

                // For version 1, initially, 5th room at n-th level contains all mice, and all other rooms are empty.
                // For version 2, initially, all rooms are empty.
                bool initial = (v == 1 and  i == n and j == 5  and l == k) or
                               (v == 1 and (i != n or  j != 5) and l == 0) or
                               (v == 2 and                         l == 0);
                if initial:: lines = lines + ["    initial; marked;"];

                // Edges for entering the room, for moves at the same level.
                if l < k and j == 1:: lines = lines + [fmt("    edge mouse_L%1$dR3_to_L%1$dR1 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 2:: lines = lines + [fmt("    edge mouse_L%1$dR1_to_L%1$dR2 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 3:: lines = lines + [fmt("    edge mouse_L%1$dR2_to_L%1$dR3 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 3:: lines = lines + [fmt("    edge mouse_L%1$dR4_to_L%1$dR3 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 4:: lines = lines + [fmt("    edge mouse_L%1$dR5_to_L%1$dR4 goto cnt_%2$d;", i, l + 1)];
                if l < k and j == 5:: lines = lines + [fmt("    edge mouse_L%1$dR3_to_L%1$dR5 goto cnt_%2$d;", i, l + 1)];

                // Edges for entering the room, for moves between levels.
                int j_above = ((i - 1) mod 5) + 1;
                int j_below = ((i - 2) mod 5) + 1;
                if l < k and i < n and j == j_above:: lines = lines + [fmt("    edge mouse_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i + 1, i, j, l + 1)];
                if l < k and i > 1 and j == j_below:: lines = lines + [fmt("    edge mouse_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i - 1, i, j, l + 1)];

                // Version 2: edges for entering the tower.
                if v == 2 and l < k and i == n and j == 5:: lines = lines + [fmt("    edge mouse_enter goto cnt_%d;", l + 1)];

                // Edges for leaving the room, for moves at the same level.
                if l > 0 and j == 1:: lines = lines + [fmt("    edge mouse_L%1$dR1_to_L%1$dR2 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 2:: lines = lines + [fmt("    edge mouse_L%1$dR2_to_L%1$dR3 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 3:: lines = lines + [fmt("    edge mouse_L%1$dR3_to_L%1$dR1 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 3:: lines = lines + [fmt("    edge mouse_L%1$dR3_to_L%1$dR5 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 4:: lines = lines + [fmt("    edge mouse_L%1$dR4_to_L%1$dR3 goto cnt_%2$d;", i, l - 1)];
                if l > 0 and j == 5:: lines = lines + [fmt("    edge mouse_L%1$dR5_to_L%1$dR4 goto cnt_%2$d;", i, l - 1)];

                // Edges for leaving the room, for moves between levels.
                if l > 0 and i < n and j == j_above:: lines = lines + [fmt("    edge mouse_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i, i + 1, j, l - 1)];
                if l > 0 and i > 1 and j == j_below:: lines = lines + [fmt("    edge mouse_L%1$dR%3$d_to_L%2$dR%3$d goto cnt_%4$d;", i, i - 1, j, l - 1)];

                // Version 2: edges for leaving the tower.
                if v == 2 and l > 0 and i == n and j == 5:: lines = lines + [fmt("    edge mouse_leave goto cnt_%d;", l - 1)];
            end
            lines = lines + ["end"];
        end
    end

    // Add requirements: a cat and a mouse must never be in the same room at the same time.
    lines = lines + [
        "",
        "// Requirements: a cat and a mouse must never be in the same room at the same time.",
    ];
    for i in range(1, n):
        for j in range(1, 5):
            lines = lines + [fmt("requirement invariant Level%1$d_Room%2$d_Cats.cnt_0 or Level%1$d_Room%2$d_Mice.cnt_0;", i, j)];
        end
    end

    // Write generated model to file.
    string filename = fmt("cat_mouse_tower_v%d_n%d_k%d.cif", v, n, k);
    writefile(filename, lines);
end
