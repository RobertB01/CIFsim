//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

= Partial specifications construction

Splitting a specification into a collection of partial specifications.

Multi-level synthesis is a way to split a single original specification in multiple partial specifications, such that behavior of the supervisor synthesized from the original specification is the same as the combined behavior of all synthesized supervisors one for each partial specifications.
Each supervisor created from a partial specification covers a part of the system behavior.
With some exchange of data with neighboring supervisors, together they cover all behavior of the system.
The advantage of creating several partial supervisors, instead of one supervisor for the entire system, lies in a reduced effort to compute the supervisors.
One large supervisor is harder to compute than several smaller supervisors, especially for larger systems.

Splitting the original specification in parts starts in the CIF to DMM transformation where plant groups and requirement groups are established.
We will refer to the latter groups as _DMM groups_ to avoid confusion with groups in the CIF language.
All CIF elements in a DMM group are considered so closely connected with each other that splitting should not never be attempted.
Now, one way to split the original specification is to see each DMM group as representing a partial specification.
That may however result in having too many partial specifications.
Also, two DMM groups may share a lot of data between them, which makes them tightly connected to each other.
It often is sub-optimal to split the original specification between such tightly connected DMM groups.
In other words, it may be desirable to reduce the number of partial specifications, and/or reduce the amount of shared data between such partial specifications.
The answer for that desire is to apply clustering on DMM groups.

By clustering the DMM groups, sets of DMM groups are formed.
Generally speaking, clustering creates sets of tightly connected DMM groups, while avoiding putting less connected DMM groups in the same set.
Each set is considered to represent a partial specification.
After clustering, generally the number of partial specifications is reduced, and tight connections between partial specifications are avoided.

== Constructing a partial CIF specification

Above, sets of DMM groups were formed, where each set represents a partial specification.
Each set must first be converted to a proper partial CIF specification, and then a supervisor needs to be synthesized for each of those specifications separately.
Converting a set of DMM groups to a valid CIF specification is however more easily said than done.

A DMM group is a highly abstracted way to indicate a part of a CIF specification.
It contains automata, invariants, and discrete and input variables.
It does for example not contain used types, constants, or algebraic variables.
Also, the expressed relations in a DMM group are about usage and not so much about point of definition.
In particular, if an automaton in a DMM group defines for example an event or an input variable but it does not use them, the event or input variable are not part of the DMM group, even though the automaton itself (that is, its predicates, locations and edges) is part of the DMM group.
In other words, DMM group boundaries match often but not always with group boundaries in CIF specifications.

Another point not yet discussed is that all partial synthesized specifications combined should behave the same as the original specification.
This means that each partial specification needs to be able to interact with (some of the) other partial specifications, and co-ordinate behavior.
In particular, they need to agree on the state of the shared parts of the system.

The solution here is to add additional input variables to each partial specification.
Each new input variable represents some state in another partial specification.
When combining all partial specifications afterwards, the added input variables can be replaced by their real CIF equivalents from another partial specification, and interaction can occur.

This leads to the following approach in constructing a proper partial CIF specification.
For each set of DMM groups do:

* Create a new (empty) CIF specification.
This specification becomes the proper partial specification for that set.
* Copy CIF elements of the DMM groups in the set from the original specification to the new specification, since these CIF elements are definitely needed.
For invariants, that is the invariant itself.
For automata, copy the locations with their edges, and their explicit alphabet and monitor declarations.
* Repeatedly copy minimal parts (one variable, one type declaration, one event, and so on) that are missing in the new specification.
A part is missing if the part has not been copied, and it is needed by other already copied parts in the partial specification.
Alternatively, sometimes, a missing part can be replaced by a different part, for example replacing a discrete variable or a location of a different set by an input variable.

Once nothing is missing anymore, the partial specification is complete, and the next set can be converted.

=== Copying CIF elements

[NOTE]
====
The following assumes knowledge about how CIF elements are encoded in a tree of objects.
For details, please consult the CIF meta-model documentation in the `docs/cif_ecore_doc.pdf` document in the `org.eclipse.escet.cif.metamodel` project.
====

At implementation level, a CIF specification is a containment tree of Ecore objects, with cross-references from one branch to another branch in the tree.
Copying a part of the specification is always done over the tree's containment hierarchy, from some point in the tree to the leaves.
Such points are for example a type declaration, a type or an event.
The basic idea behind partial specifications is to copy just enough (small) parts of the original tree.

Cross-references originating from a copied part however still point at objects in the original tree.
The objects that these references point at are not included in the copy.
To get a valid copy, the pointed-at objects must be resolved, and also become a part of the copied tree hierarchy.
There are several ways to do that:

* One possibility is that the pointed at object has been copied already in the past.
In that case, just redirecting the cross-reference is sufficient.
This is expressed as "`pointing at existing`" in the tables below.
* If the pointed-at object has not been copied and it is allowed to copy it, that can be done now and get added that to the copied tree.
That is expressed as "`is also copied`" in the tables below.
* If the pointed-at object has not been copied and it should not be added to the copied tree, then a new tree must be created as replacement.
This is expressed as "`conversion to an `InputVariable``" in the tables below, since the replacement is always an `InputVariable` object.
* Cross-references to fields of tuple types do not have a fixed cross-reference destination, so it's hard to decide where to start making a copy of the tree.
This is handled by waiting until all other cross-references have been resolved, since at that point it is certain that the fields have been copied as well, and they can thus be resolved by redirecting to a previously copied part of the copied tree.
This is expressed as "`possibly after resolving all other non-containing references`" in the tables below.
* The final case is that some kinds of cross-references will never occur, since the program supports only a subset of the CIF language.
This is expressed as "`never happens due to pre-condition`" in the tables below.

.`automata` package
[cols="4,3,9"]
|===
| Class | Reference to | Handled by

| `Edge` | `Location` | Pointing at existing `Location`.
|===

.`cif` package
[cols="4,3,9"]
|===
| Class | Reference to | Handled by

| `Equation` | `Declaration` | Never happens due to pre-condition.
|===

.`expressions` package
[cols="4,3,9"]
|===
| Class | Reference to | Handled by

| `AlgVariableExpression` | `AlgVariable` | `AlgVariable` is also copied.
| `CompInstWrapExpression` | `ComponentInst` | Never happens due to pre-condition.
| `ComponentExpression` | `Component` | Never happens due to pre-condition.
| `CompParamExpression` | `ComponentParameter` | Never happens due to pre-condition.
| `CompParamWrapExpression` | `ComponentParameter` | Never happens due to pre-condition.
| `ConstantExpression` | `Constant` | `Constant` is also copied.
| `ContVariableExpression` | `ContVariable` | Never happens due to pre-condition.
| `DiscVariableExpression` | `DiscVariable` | `DiscVariable` is also copied if its containing class in the partial specification is an `Automaton`, else a conversion to an `InputVariable` with the same domain is done.
| `EnumLiteralExpression` | `EnumLiteral` | Containing `EnumDecl` is also copied.
| `EventExpression` | `Event` | `Event` is also copied.
| `FieldExpression` | `Field` | Pointing at existing `Field`, possibly after resolving all other non-containing references.
| `FunctionExpression` | `Function` | Never happens due to pre-condition.
| `InputVariableExpression` | `InputVariable` | `InputVariable` is also copied.
| `LocationExpression` | `Location` | Pointing at existing `Location`, else conversion to boolean `InputVariable`.
|===

.`types` package
[cols="4,3,9"]
|===
| Class | Reference to | Handled by

| `CompInstWrapType` | `ComponentInst` | Never happens due to pre-condition.
| `ComponentDefType` | `ComponentDef` | Never happens due to pre-condition.
| `ComponentType` | `Component` | Never happens due to pre-condition.
| `CompParamWrapType` | `ComponentParameter` | Never happens due to pre-condition.
| `EnumType` | `EnumDecl` | `EnumDecl` is also copied.
| `TypeRef` | `TypeDecl` | `TypeDecl` is also copied.
|===

Finally, a few details about (lack of) possible consequences of replacing a cross-reference:

* In case of a `DiscVariableExpression` or `LocationExpression` the code may replace the non-contained reference by an `InputVariable` object.
In that case the `DiscVariableExpression` or `LocationExpression` object must also be replaced by an `InputVariableExpression`.
If this is done, the type of the previous expression object is moved to the new `InputVariableExpression` object.
That type was already copied and scanned, and is already or will be resolved for dangling references without additional effort.
* As both `DiscVariableExpression` and `LocationExpression` have no other content that could trigger further additional copying, the replacement by an `InputVariableExpression` will not cause adding of unused additional parts.
