//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

include::../_part_attributes.asciidoc[]

indexterm:[engineering, synthesis-based]
indexterm:[correct-by-construction]

[[sbe-approaches-synthesis-based]]
== Synthesis-based engineering

Synthesis-based engineering is a form of <<sbe-approaches-model-based,model-based engineering>>.
It uses supervisory controller synthesis (or simply supervisor synthesis) to automatically synthesize a correct-by-construction controller model.

=== Synthesis-based engineering process

The following figure shows a simplified development process for synthesis-based engineering of supervisory controllers:

image:{sbe-imgsdir}/approaches/process_synthesis_based.png[]

As with general model-based engineering, at the center is a controller model with a mathematical foundation.
From the controller model, the control software can still be manually implemented or automatically generated.

However, with synthesis-based engineering, the controller model is not manually modeled from design documents.
Instead, it is automatically generated from models of the uncontrolled system (plant model) and control requirements (requirements model).

Verification to ensure that the controller (model) satisfies the requirements used for synthesis is then superfluous, as the synthesized controller model is correct-by-construction.
Verification may still be needed for additional requirements that are not yet supported by synthesis, such as stronger liveness requirements and timed requirements.

Validation that the controller model behaves as intended is still needed, because even though synthesis guarantees that the synthesized controller correctly adheres to the specified requirements, the specified requirements may not be the desired requirements.
For instance, the requirements could be incomplete, too restrictive, or contain other mistakes, resulting in the system being controlled by the controller exhibiting behavior that is not desired or not showing behavior that is desired.

[[sbe-approaches-synthesis-based-input-plant-req]]
=== Input: plant and requirements models

indexterm:[plant]
indexterm:[requirement]
indexterm:[system, uncontrolled]

Supervisor synthesis requires two types of models as input.
The first type of model is called a _plant_ model, after the concept of https://en.wikipedia.org/wiki/Plant_(control_theory)[plant] from https://en.wikipedia.org/wiki/Control_theory[control theory].
Plant models describe capabilities or behavior of a physical system 'as is', without any integrated control.
They represent the possible behavior of the uncontrolled system.
The second type of model is called a _requirements_ model.
Requirements models describe the requirements that the controller must adhere to.
They model restrictions upon the behavior of the plants, to ensure that only the desired behavior remains.

A plant model can for instance specify which sensors and actuators are present in the system.
It may also specify their interdependencies.
For instance, a sensor that indicates that a gate is open and a sensor that indicates it is closed, can under normal circumstances not be enabled at the same time.
A plant model is often modeled as a state machine.
The following figure shows as an example a the combined plant model for the two gate sensors:

image:{sbe-imgsdir}/approaches/plant_gate_sensors.png[]

Initially it is closed.
As the gate is opened, the gate closed sensor goes off, and the gate is somewhere in between.
Then it can be closed again, making the gate closed sensor go on.
But the gate can also keep going further open, until it is fully opened, and the gate open sensor goes on.
There is can be closed again, making the gate open sensor go off.
The plant model clearly states that it is not possible for the gate to be open and closed at the same time, as the plant model can only be in one state at a time.

indexterm:[event]
indexterm:[event, controllable]
indexterm:[event, uncontrollable]

[[sbe-approaches-synthesis-based-events]]
Actions, such a sensor going on or off, or an actuator being turned on or off, are called _events_.
Supervisor synthesis distinguishes two types of events, _controllable_ and _uncontrollable_ events.
Controllable events can be controlled by the supervisory controller.
Actuators are typically modelled as controllable events, such that the supervisory controller decides when to actuate them.
Uncontrollable events operate autonomously, from the perspective of the supervisory controller.
A controller can not prevent such events from occurring in the system.
For instance, a user may push a button and the corresponding sensor will indicate whether the button is pushed or not.
The events to indicate changes in the status of the sensor will happen.
The supervisor can not prevent this.
Another example of uncontrollable events is limit sensors of movements.
When a movement is completed, its limit sensor will be activated, leading to an uncontrollable event being fired.

Plant models at the relatively low abstraction level of sensors and actuators are quite common.
However, modeling and controlling (sub-)systems at a higher abstraction level is possible as well.
See for more information the section on <<sbe-supervisory-controllers,supervisory controllers>>.

indexterm:[requirement, functional]
indexterm:[requirement, safety]

[[sbe-approaches-synthesis-based-requirements]]
A requirements model captures requirements.
It may specify functional requirements, safety requirements, etc.
For instance, the motor to open a gate may only be activated once the barrier to stop traffic is fully closed.
Control requirements can also be specified as state machines, but often the use of a logical formula is more intuitive.
Combining them is also possible.
Well-formulated logical formulas are easy to understand, even for people without a mathematical background.
As an example, consider a requirement in three forms: natural language, mathematical formula, and modeled in CIF:

indexterm:[requirement, natural language]
indexterm:[requirement, mathematical formula]
indexterm:[requirement, cif]

* Natural language: "The actuator to open the gate may only be activated if the barrier is fully closed."
* Mathematical formula: gate_open_actuator.c_on => barrier_sensors.closed
* Modeled in CIF as a <<lang-tut-data-chapter-stat-evt-excl-invariants,state/event exclusion>> <<lang-tut-extensions-synthesis-invkind,requirement>>:
+
[source, cif]
----
requirement gate_open_actuator.c_on needs barrier_sensors.closed;
----

indexterm:[synthesis]
indexterm:[controller, synthesis]
indexterm:[controller, supervisor]
indexterm:[supervisor]
indexterm:[supervisor, synthesis]

[[sbe-approaches-synthesis-synthesis]]
=== Supervisory controller synthesis

Supervisory controller synthesis generates from the plant and requirements models a controller model, a model of the control logic, named a _supervisor_ or supervisory controller.
The synthesized supervisor is correct-by-construction, i.e., it satisfy all the requirements in every situation.

indexterm:[control, conditions]
indexterm:[system, controlled]

[[sbe-approaches-synthesis-controlled-system]]
The supervisor may be represented as another state machine, but it may for instance also be a list of conditions under which actuators may be activated or deactivated.
The synthesized supervisor as a state machine, or the plant model together with the supervisor in the form of extra synthesized control conditions, forms the _controlled system_.

[[sbe-approaches-synthesis-based-properties]]
The controlled system is guaranteed to satisfy the following properties:

indexterm:[safe]

* **Safe:** It satisfies all specified requirements in all situations that the specified uncontrolled system can be in.

indexterm:[controllable]

* **Controllable:** It only limits controllable events of the plant, e.g., it may prevent enabling or disabling an actuator, but can't prevent a sensor from going on or off.

indexterm:[non-blocking]
indexterm:[liveness]

[[sbe-approaches-synthesis-based-non-blocking]]
* **Non-blocking:** It doesn't block, i.e., a <<sbe-in-practice-steps-marking,marked>> <<lang-tut-basics-chapter-synchronizing-events-statespace,state>> can always be reached from every reachable state, thus ensuring a form of link:https://en.wikipedia.org/wiki/Liveness[liveness].

indexterm:[permissive, maximally]
indexterm:[restrictive, minimally]

[[sbe-approaches-synthesis-based-maximally-permissive]]
* **Maximally permissive:** It does not impose more restrictions than strictly necessary to enforce the previous properties, i.e., it is maximally permissive.
In other words, the controlled system permits all safe, controllable, and non-blocking behaviors, i.e., it is minimally restrictive.

indexterm:[supervisor]
indexterm:[controller]

In practice the terms _supervisor_ and _controller_ are often used interchangeably.
Formally however, they can be different.
A _supervisor_ is maximally permissive and may still allow multiple (safe) choices, for instance between enabling multiple different actuators, or between enabling one actuator and disabling another one.
A _controller_ is considered to explicitly choose specific controllable events rather than allowing multiple ones.

[[sbe-approaches-synthesis-based-benefits]]
=== Benefits of synthesis-based engineering

Synthesis-based engineering has all the benefits of <<sbe-approaches-model-based-benefits,model-based engineering>>.
Additionally, it has the following benefits:

indexterm:[design, computer-aided]
indexterm:[controller, reliability]

Computer-aided design for improved quality at reduced effort and cost::
Computer-aided design and automation shorten the development cycle and reduce human errors.
This improves the quality and reliability of controllers, and reduces effort and costs.
+
indexterm:[requirement, conflicting]
+
More concretely, supervisor synthesis provides computer-aided design assistance.
It can for instance automatically detect conflicting requirements.
It will also detect that a certain activator may never be enabled in a certain state, because under certain specific conditions this may _later_ lead to an unavoidable unsafe state.
For complex systems, this kind of situations are often difficult to foresee for human beings.
It is therefore difficult to correctly manually model them in a controller model.

indexterm:[correct-by-construction]

Focus on the _what_ rather than the _how_::
With synthesis-based engineering the controller model is automatically synthesized.
From it, the implementation is automatically produced through code generation.
Verification is (to a large degree) not needed as the implementation is correct-by-construction.
The focus therefore shifts to requirements design and validation.
Engineers can thus focus on '_what_ should the controller do' (its requirements), rather than on '_how_ must the controller achieve this' (the controller design and implementation).
+
An example is specifying a First-In-First-Out (FIFO) requirement.
While specifying it may be quite easy, realizing the requirement in a controller model may be complex due to the various situations that may arise in the system.
Supervisory controller synthesis can evaluate all possible combinations of conditions and synthesize a controller that is mathematically correct for all of them.
This kind of design automation is even more useful when multiple, complex and related requirements need to be considered.
The synthesized supervisor is correct-by-construction for all requirements in all situations, preventing human errors.

Verification exposes problems, synthesis solves them::
Synthesis-based engineering goes far beyond <<sbe-approaches-verification-based,verification-based engineering>>.
Formal verification exposes problems.
It tells you that the controller model is not correct and in which situations, and you need to iteratively adapt it yourself.
Each time formal verification produces a counter example to indicate a requirement violation, the controller model needs to be manually adapted.
Contrary, supervisor synthesis provides solutions.
It automatically synthesizes a controller model that satisfies all the requirements.
Synthesis produces in one go a supervisor with all the additional conditions that must be enforced to ensure all requirements are satisfied.
This makes verification of the controller model against the requirements from which the supervisor was synthesized superfluous, as the synthesized controller model is already correct-by-construction.

indexterm:[design, freedom]
indexterm:[permissive, maximally]
indexterm:[restrictive, minimally]
indexterm:[supervisor]
indexterm:[controller]

Maintain maximum design space freedom::
Maximal permissiveness ensures that maximum design space freedom is maintained.
When manually designing a controller, an engineer may favor simple control conditions that severely limit the design space.
As synthesis produces maximally-permissive supervisors, it imposes minimal restrictions, while still satisfying all requirements.
This leaves design space freedom to e.g. choose performance-optimal solution among safe alternatives.
A performance-optimal _controller_ may for instance be derived from a _supervisor_ model that allows multiple (safe) choices.

indexterm:[design, modular]
indexterm:[engineering, incremental]

Supports a comprehensive modular design and efficient incremental engineering::
Each part of the plant and each requirement can be specified separately.
This way it is easy to adapt specific plants or requirements, or add new ones.
Modular specifications thus allow for efficient incremental engineering, as after each change a simple re-synthesis is enough to obtain a new correct-by-construction controller.

Supports reuse and standardization::
The separately specified plants and requirements can even be put in libraries with reusable standardized building blocks.
This allows engineers to easily build up new specifications from existing proven building blocks, combining them in different ways.
Ultimately this leads to more uniformity and improves efficiency.

indexterm:[requirement, traceability]
indexterm:[specification, modular]

Intuitive specifications with fine-grained requirement traceability::
Each plant and requirement can be specified separately, and has a clear purpose.
This provides a good overview of the control requirements, and allows for fine-grained requirement traceability.
This unlike the controller model itself.
There, one requirement can have an effect on various parts (states) of the controller.
It can thus be spread out over the controller model, and mixed with other requirements.
Clear modular specifications avoid hiding undesired and unneeded behavior in a large/complex controller.

See the <<sbe-example,synthesis-based engineering example>> section for a concrete example that shows the power of synthesis.

Even though synthesis-based engineering has many benefits, companies should not underestimate how significantly different it is from <<sbe-approaches-traditional,traditional engineering>> or even from lesser-automated forms of <<sbe-approaches-model-based,model-based engineering>>, such as <<sbe-approaches-verification-based,verification-based engineering>>.
They should <<sbe-challenges,consider and manage the challenges>> particular to this engineering approach.

=== Terminology

The following terminology is often used when discussing synthesis-based engineering of supervisory controllers, in additional to <<sbe-approaches-model-based-terminology,model-based engineering terminology>>:

indexterm:[event, controllable]

Controllable event::
An event that is controlled (enabled or disabled) by the controller.
Events to actuate (turn on or off) an actuator are often controllable events.

indexterm:[system, controlled]

Controlled system::
The _uncontrolled system_ together with a _supervisor_ or _controller that controls it.
This may be represented as a single state machine, or as a combination of the _plant_ model with the _supervisor_ or _controller_ model.

indexterm:[controller]

Controller::
A controller model that explicitly chooses specific controllable events, rather than allowing multiple ones as a _supervisor_ may do.
When this distinction is not relevant, _supervisor_ and _controller_ are often used interchangeably.

indexterm:[method, correct-by-construction]

Correct-by-construction formal method::
A formal method that guarantees that the result of the method satisfies all requirements.

indexterm:[event]

Event::
An action representing something that can happen in the system.
For instance, there may be low-level actions for sensors going on or off, and actuators being turned on or off.
There may also be higher level actions, such as a command to move an object from one location to another, a command to turn an entire subsystem on or off, or an event through which a subsystem indicates that an error has occurred.

indexterm:[engineering, synthesis-based]

Synthesis-based engineering::
A form of <<sbe-approaches-model-based,model-based engineering>> that uses supervisory controller synthesis (or simply supervisor synthesis) to automatically synthesize a correct-by-construction controller model.

indexterm:[supervisor]

Supervisor::
A maximally permissive controller model that may still allow multiple (safe) choices.
Unlike a _controller_, it may for instance allow a choice between enabling multiple different actuators, or between enabling one actuator and disabling another one.
When this distinction is not relevant, _supervisor_ and _controller_ are often used interchangeably.

indexterm:[supervisor, synthesis]
indexterm:[synthesis, supervisor]

Supervisor synthesis::
A correct-by-construction formal method that automatically synthesizes a _supervisor_.
It involves the automatic generation, or synthesis, of a correct-by-construction controller model from a simple model of the to-be-controlled system and a model of the control requirements.
This is also called controller synthesis or supervisory controller synthesis.
Supervisor synthesis makes verification of the resulting supervisor model against the requirements from which it was synthesized superfluous.
Validation of the resulting system being controlled by the controller (model) is still needed to ensure the specified requirements are indeed the desired requirements.

indexterm:[event, uncontrollable]

Uncontrollable event::
An event that operates autonomously, from the perspective of the controller.
Such events are not controlled by the controller, which can thus not prevent them from occurring.
For instance, events of a sensor could indicate that a button was pushed or released.
And events of a movement limit sensor could indicate that a movement has reached the end position, or that the moving object is no longer at that position.

indexterm:[system, uncontrolled]
indexterm:[plant]

Uncontrolled system / plant::
The uncontrolled system is the system 'as is', without any control.
It is also called a https://en.wikipedia.org/wiki/Plant_(control_theory)[plant] in https://en.wikipedia.org/wiki/Control_theory[control theory].
For instance, at a low abstraction level, this could be the individual actuators and sensors of a system.
At a higher abstraction level, it could be a collection of controllers for subsystems.
