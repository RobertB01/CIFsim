//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

include::../_part_attributes.asciidoc[]

[[tools-cifsim-chapter-debug-gen-code]]
== Debugging generated code

indexterm:[CIF simulator,debug generated code]
indexterm:[debug,generated code]

WARNING: This page is primarily intended for the developers of the CIF simulator, and not its end users.

The CIF simulator generates highly optimized code for the specification, to speed up the simulation.
By enabling the _Debug the generated code (by writing it to disk)_ <<tools-cifsim-output-chapter-debug,option>> (_Output_ category), the generated code can be written to disk, for further debugging.

=== Output directory

If the simulation is performed from within Eclipse, and a project named `org.eclipse.escet.cif.simulator.debug` exists, is not closed, and has a `src` directory, the generated code will be written to that `src` directory.
Otherwise, the generated code will be written to the directory containing the input specification file.

Regardless, the code is also always written to a `cifcode` sub-directory.
If this sub-directory does not yet exist, it is created.
If it already exists, all relevant existing files, such as `.java` files, are removed from the sub-directory first, before the newly generated code is written.

=== Written files

This results in several files being written to the `cifcode` directory.
One of these files is `DebugSimulator.java`, this file contains the simulation options that were used and always shows the option dialog.

The `org.eclipse.escet.cif.simulator.debug` project contains a launch file (`debug-cif-simulator-generated-code.launch`) that can be used to reproduce the simulation implemented by the generated code.

By default, it is configured to run the `DebugSimulator.java` file contained within the `src` directory of the `org.eclipse.escet.cif.simulator.debug` project.
If a different output directory is used, this configuration can be changed as follows.
Right click `debug-cif-simulator-generated-code.launch` and select menu:Debug As[Debug Configurations...].
Then, select `debug-cif-simulator-generated-code` under _Junit Plug-in Test_.
On the _Test_ tab, the _Project_ and the _Test class_ can be changed accordingly.

The working directory for the simulation performed via `DebugSimulator.java` is the same working directory as the original simulation.
This allows additional files, such as configuration files, to be found.

For debugging, the location of the compiled classes (`--debug-code` option) is needed.
It is configured as `../../target/classes` relative to the `cifcode` directory.
If the code is written in the `org.eclipse.escet.cif.simulator.debug` project, this should resolve to `target/classes` of that project.

=== How to use

To use this feature, follow these steps:

* Start an Eclipse ESCET development environment.

* Make sure your workspace is automatically rebuilt, by enabling the menu:Build Automatically[] option in the menu:Project[] menu.

* Start a sub-Eclipse application, by clicking menu:Run[Run Configurations...] or menu:Run[Debug Configratuions], and selecting _product-escet_ and clicking btn:[Run].

* In the sub-Eclipse that opens, make sure the CIF specification (the `.cif` file) that you like to simulate is available in the workspace.

* In the sub-Eclipse, import the `org.eclipse.escet.cif.simulator.debug` source project.

* Simulate the CIF specification, and make sure you enable the _Debug the generated code (by writing it to disk)_ option.

* Continue simulation, if desired.

* Once the simulation has terminated, switch back to the main Eclipse.

* Refresh the `org.eclipse.escet.cif.simulator.debug` project.

* Set breakpoints in the generated Java code, or in the simulator code, as desired.

* Right click `debug-cif-simulator-generated-code.launch` in the `org.eclipse.escet.cif.simulator.debug` project, and choose menu:Debug as[debug-cif-simulator-generated-code.launch].

* Debug the simulation, with the generated code, as you would any Java program.

indexterm:[CIF simulator,starting with generated code]

=== Starting the simulator with generated code

The launch configuration that is used, uses the _Load debug code_ option (_Simulator_ category).
Using this option, the classpath (directory) where the already generated code is located, is specified.
By specifying it, the simulator knows from where to load it.

Simulations not started from this launch configuration, generally don't use this option.
They load the input specification, validate it, generate fresh code, and compile the code in-memory, or use <<tools-cifsim-repeated-sim-compile-once,compiled code files>>.

Simulations using the generated code ignore all options related to <<tools-cifsim-chapter-repeated-simulation,repeated simulations>>.
That is, the _Load debug code_ option takes priority over the _Compile only_ option (_Compiler_ category), and simulating with <<tools-cifsim-repeated-sim-compile-once,compiled code files>>.

A warning is printed to the console if the generated code was generated with a different version of the simulator than the one used to simulate it.
Ignoring the warning may lead to unexpected simulation results, or even simulator crashes.
