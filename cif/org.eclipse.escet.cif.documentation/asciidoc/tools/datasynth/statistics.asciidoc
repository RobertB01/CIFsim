//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

indexterm:[data-based supervisory controller synthesis,statistics]

[[tools-datasynth-stats]]
== Statistics

The data-based synthesis tool supports printing various kinds of statistics.
By default, no statistics are printed.
Statistics can be enabled using the _Statistics_ option (see the <<tools-datasynth-options,options section>>).
The following statistics are available:

* _BDD garbage collection_ [`bdd-gc-collect`]
+
Prints BDD garbage collection information before and after each garbage collection.
+
The BDD library that is used maintains an internal node table.
Whenever new nodes no longer fit in the node table, a garbage collection is started by the BDD library, to clean out all nodes that are no longer needed.
See also the BDD library initial node table size option (see the <<tools-datasynth-options,options section>>).
+
BDD garbage collection information is printed to the console before and after each garbage collection.
The printed information includes the size of the node table, the number of free nodes, timing information, etc.

* _BDD node table resize_ [`bdd-gc-resize`]
+
Prints BDD node table resize information each time a BDD node table resize is performed.
+
The BDD library that is used maintains an internal node table.
Whenever new nodes no longer fit in the node table, a garbage collection is started by the BDD library, to clean out all nodes that are no longer needed.
If only very limited space could be reclaimed by garbage collection, the size of the node table is increased.
See also the BDD library initial node table size option (see the <<tools-datasynth-options,options section>>).
+
BDD node table resize information is printed to the console each time the node table is resized.
The printed information includes the old and new sizes of the node table.

* _BDD cache_ [`bdd-perf-cache`]
+
Prints metrics related to the BDD cache.
+
The BDD library that is used implements a cache to speed up the calculations.
For more information, see the <<tools-datasynth-op-cache, section about BDD operation caches>>.
+
The information is printed to the console, after execution, just before termination of the tool.
The table below shows all metrics printed and their meaning.
+
[cols="20,50",options="header"]
|===
| Metric
| Description

| Node creation requests
| The number of times a node creation is requested.
This includes the trivial cases where the cache is not checked, e.g. when both child nodes are the same.

| Node creation chain accesses
| The number of times a node creation is requested, and a next node in the cache needs to be checked.
This excludes the trivial cases where the cache is not checked.

| Node creation cache hits
| The number of times a node creation is requested, and the node is already in the cache.
This excludes the trivial cases where the cache is not checked.

| Node creation cache misses
| The number of times a node creation is requested, and the node is not already in the cache.
This excludes the trivial cases where the cache is not checked.

| Operation count
| The number of times a BDD operation is performed on a node or a pair of nodes.
This includes the trivial cases where the cache is not checked, e.g. for `x and x`, `x and true`, `false and x`, etc.

| Operation cache hits
| The number of times a BDD operation is performed on a node or a pair of nodes, and the result is already in the cache.
This excludes the trivial cases where the cache is not checked.

| Operation cache misses
| The number of times a BDD operation is performed on a node or a pair of nodes, and the result is not already in the cache.
This excludes the trivial cases where the cache is not checked.
|===

* _Continuous BDD performance statistics_ [`bdd-perf-cont`]
+
Prints continuously collected platform and machine independent BDD performance related metrics.
+
This statistic continuously collects the platform and machine independent BDD performance metrics described in the table below.
These metrics are discussed in more detail in <<thuijsman19>>.
+
The information is printed to a CSV file that can be configured using the _Continuous performance statistics file_ <<tools-datasynth-options,option>>.
The file is written after execution, just before termination of the tool.
+
Note that collecting these metrics makes synthesis take longer than without collecting it.
+
[cols="20,50",options="header"]
|===
| Metric
| Description

| Operations
| The number of BDD operations performed on BDD nodes so far during synthesis, for which the cache is checked and the result is not already in the cache.
The number of operations performed on BDD nodes is a platform and machine independent measure of the amount of time needed to perform BDD operations, due to BDD operations being implemented recursively on their node trees.

| Used BBD nodes
| The number of BDD nodes currently in use to represent all BDDs.
The size of a BDD, expressed as the number of nodes used, is a platform and machine independent measure of the amount of memory needed to store it.
|===

* _Maximum used BDD nodes_ [`bdd-perf-max-nodes`]
+
Prints the maximum number of BDD nodes used during synthesis.
+
The size of a BDD, expressed as the number of nodes used, is a platform and machine independent measure of the amount of memory needed to store it.
This metric is discussed in more detail in <<thuijsman19>>.
+
This metric is printed to the console, after execution, just before termination of the tool.
It prints the maximum number of BDD nodes used during synthesis.
+
Note that collecting this metric makes synthesis take longer than without collecting it.

* _Timing_ [`timing`]
+
Print information for timing of various parts of the tool.
+
Timing is only collected for parts of the tool that were actually executed.
Timing is represented as a tree.
The root of the tree represents the total time of the synthesis tool.
For some parts of the tool, timing is also collected for sub-parts.
+
Timing information is printed to the console, after execution, just before termination of the tool.
Durations are all printed in milliseconds, to make it easier to compare timing for various parts.
+
When measuring performance, always perform multiple measurements, and take the average.
Also, use a warm-up phase, to avoid skewed results.

In the option dialog, each of the different kinds of statistics can be enabled and disabled individually, using a checkbox.

From the command line, using the `--stats` option, the names of the different kinds of statistics, as indicated above between square brackets, should be used, separated by commas.
For instance, use `--stats=bdd-gc-collect,bdd-gc-resize` to enable both BDD garbage collection statistics and BDD node table resize statistics, but keep all other statistics disabled.

Specifying a statistics kind twice leads to a warning being printed to the console.

// Don't explain add/remove from default, as default is no statistics.
