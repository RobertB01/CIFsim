//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

include::../_part_attributes.asciidoc[]

[[lang-tut-values-chapter-sets]]
== Sets

indexterm:[set]
indexterm:[type,set]
indexterm:[set,type]
indexterm:[value,set]
indexterm:[set,value]
A set is an unordered collection of values (called _elements_) of a same type.
Each element value either exists in a set, or it does not exist in a set.
Each element value is unique, as duplicate elements are silently discarded.
Consider the following:

[source, cif]
----
disc set int x1 = {3, 7, 8};
disc set int x2 = {8, 3, 7};        // Order irrelevant (same as 'x1').
disc set int x3 = {8, 3, 7, 3};     // Duplicates ignored (same as 'x2').
disc set int x4 = {};               // Empty set.
----

indexterm:[literal,set]
indexterm:[set,literal]
Variable `x1` has a set of integers as its value.
In this case, its initial value is a literal set with three integer elements.
As sets are unordered collections of elements, `{3, 7, 8}` is the same set as `{8, 3, 7}`, and thus variables `x1` and `x2` have the same initial values.
Since elements in a set are unique, set `{8, 3, 7}` is equal to the set `{8, 3, 7, 3}`, and thus variables `x2` and `x3` have the same initial values.
For readability, elements in a set are normally written in increasing order, for example `{3, 7, 8}`.
Variable `x4` has an empty set as initial value, which is also the default initial value for sets.

indexterm:[set,union]
The _union_ of two sets results in a set that contains the combined elements of both sets.
You can think of the resulting set containing the elements that are in the one set `or` in the other set (or in both of them).
Since sets never contain duplicates, common elements are present only once in the resulting set:

[source, cif]
----
{1, 2, 3} or {2, 3, 4}          // {1, 2, 3, 4}
{1, 2, 3} or {2, 3, 4}          // {1, 2, 4, 3}
----

Since sets are unordered, both answers are possible, and represent the same set.
Since the order is irrelevant, there are 24 different ways to represent that same set.
In the remainder of this lesson, we'll use increasing order, for readability.

indexterm:[set,intersection]
The _intersection_ of two sets results in a set that contains the elements that are present in both sets.
You can think of the resulting set containing the elements that are in the one set `and` in the other set.
In other words, the result contains the elements common to both sets:

[source, cif]
----
{1, 2, 3} and {2, 3, 4}         // {2, 3}
{1, 2} and {3, 4}               // {} (no elements in common)
----

indexterm:[set,difference]
The _difference_ of two sets results in a set that contains the elements of the first set that are not present in the second set.
You can think of the resulting set containing the elements of the first set, with the elements of the second set subtracted or removed from it:

[source, cif]
----
{1, 2, 3} - {2, 3, 4}           // {1}
{1, 2, 3} - {4, 5}              // {1, 2, 3}
{1, 2, 3} - {1, 2, 3, 4}        // {}
----

Several other standard operators and functions are available to work with sets, including the following:

[source, cif]
----
{1, 8, 3} = {1, 3, 8}       // true (equality, ignores order of elements)

6 in {1, 8, 3}              // false (element test)
1 in {1, 8, 3}              // true

{1, 3} sub {1, 3}           // true (subset check)
{1, 3} sub {1, 3, 5}        // true
{1, 3} sub {1, 4}           // false
{1, 3} sub {1, 4, 5}        // false

empty({1, 2})               // false (empty test)
size({1, 5, 3, 3})          // 3 (count elements, duplicates ignored)
----

// TODO: link to future future ref manual
