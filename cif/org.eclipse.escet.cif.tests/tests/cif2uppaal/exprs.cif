//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

event e;

automaton a:
  disc bool bt = true;
  disc bool bf = false;
  disc bool b1;
  disc bool b2;
  disc bool b3;
  disc bool b4;
  disc int[-40..40] i1;
  disc int[-40..40] i2;
  disc int[-40..40] i3;
  disc int[-40..40] i4;
  disc int[5..8] i5 = 5;
  disc int[5..8] i6 = 6;
  disc int[5..8] i7 = 7;
  disc int[5..8] i8 = 8;

  location loc1:
    initial;
    marked;
    edge e do b1 := bf <=> bf,                       // true
              b2 := bf <=> bt,                       // false
              b3 := bt <=> bf,                       // false
              b4 := bt <=> bt goto loc2;             // true

  location loc2:
    edge e do b1 := bf => bf,                        // true
              b2 := bf => bt,                        // true
              b3 := bt => bf,                        // false
              b4 := bt => bt goto loc3;              // true

  location loc3:
    edge e do b1 := bf and bf,                       // false
              b2 := bf and bt,                       // false
              b3 := bt and bf,                       // false
              b4 := bt and bt goto loc4;             // true

  location loc4:
    edge e do b1 := bf or bf,                        // false
              b2 := bf or bt,                        // true
              b3 := bt or bf,                        // true
              b4 := bt or bt goto loc5;              // true

  location loc5:
    edge e do i1 :=  i7 +  i5,                       //  12
              i2 :=  i7 + -i5,                       //   2
              i3 := -i7 +  i5,                       //  -2
              i4 := -i7 + -i5 goto loc6;             // -12

  location loc6:
    edge e do i1 :=  i7 -  i5,                       //   2
              i2 :=  i7 - -i5,                       //  12
              i3 := -i7 -  i5,                       // -12
              i4 := -i7 - -i5 goto loc7;             //  -2

  location loc7:
    edge e do i1 :=  i7 *  i5,                       //  35
              i2 :=  i7 * -i5,                       // -35
              i3 := -i7 *  i5,                       // -35
              i4 := -i7 * -i5 goto loc8;             //  35

  location loc8:
    edge e do i1 :=  i7 div  i5,                     //  1
              i2 :=  i7 div -i5,                     // -1
              i3 := -i7 div  i5,                     // -1
              i4 := -i7 div -i5 goto loc9;           //  1

  location loc9:
    edge e do i1 :=  i7 mod  i5,                     //  2
              i2 :=  i7 mod -i5,                     //  2
              i3 := -i7 mod  i5,                     // -2
              i4 := -i7 mod -i5 goto loc10;          // -2

  location loc10:
    edge e do b1 := i7  = i5,                        // false
              b2 := i7  = i7,                        // true
              b3 := i7 != i5,                        // true
              b4 := i7 != i7 goto loc11;             // false

  location loc11:
    edge e do b1 := i6 < i5,                         // false
              b2 := i6 < i6,                         // false
              b3 := i6 < i7,                         // true
              b4 := i6 < i8 goto loc12;              // true

  location loc12:
    edge e do b1 := i6 <= i5,                        // false
              b2 := i6 <= i6,                        // true
              b3 := i6 <= i7,                        // true
              b4 := i6 <= i8 goto loc13;             // true

  location loc13:
    edge e do b1 := i6 > i5,                         // true
              b2 := i6 > i6,                         // false
              b3 := i6 > i7,                         // false
              b4 := i6 > i8 goto loc14;              // false

  location loc14:
    edge e do b1 := i6 >= i5,                        // true
              b2 := i6 >= i6,                        // true
              b3 := i6 >= i7,                        // false
              b4 := i6 >= i8 goto loc15;             // false

  location loc15:
    edge e do b1 := not bt,                          // false
              b2 := not bf,                          // true
              i3 := -i5,                             // -5
              i4 := -+-+i5 goto loc16;               //  5

  location loc16:
    edge e do i1 := <int[39..39]>39 goto loc17;      // 39 (ignore cast)

  location loc17;
end
