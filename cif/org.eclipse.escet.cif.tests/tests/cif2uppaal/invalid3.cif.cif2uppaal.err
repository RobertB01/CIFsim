WARNING: File "cif2uppaal/invalid3.cif": Semantic warning at line 36, column 20: The switch expression has only one case, which is deprecated.
WARNING: File "cif2uppaal/invalid3.cif": Semantic warning at line 37, column 20: The switch expression has only one case, which is deprecated.
ERROR: CIF to UPPAAL transformation failed due to unsatisfied preconditions:

  -------------------------------------------
  (1/33) A 'time' variable reference is used.
  -------------------------------------------
   * In location "p.l":
     - edge u do r := time;
                      ^

  ------------------------------------
  (2/33) A dictionary literal is used.
  ------------------------------------
   * In discrete variable "p.dbb":
     - disc dict(bool:bool) dbb = {true: false};
                                  ^
   * In location "p.l":
     - edge u do dbb := {true: true};
                        ^

  ---------------------------------
  (3/33) A dictionary type is used.
  ---------------------------------
   * In discrete variable "p.dbb":
     - disc dict(bool:bool) dbb = {true: false};
            ^                     ^
   * In location "p.l":
     - edge u do dbb := {true: true};
                 ^      ^

  -----------------------------------
  (4/33) A distribution type is used.
  -----------------------------------
   * In discrete variable "p.db":
     - disc dist bool db = constant(true);
            ^              ^       ^
   * In location "p.l":
     - edge u do (b, db) := sample db;
                 ^   ^      ^      ^

  -------------------------------
  (5/33) A function call is used.
  -------------------------------
   * In discrete variable "p.db":
     - disc dist bool db = constant(true);
                                   ^

  -------------------------------
  (6/33) A function type is used.
  -------------------------------
   * In discrete variable "p.db":
     - disc dist bool db = constant(true);
                           ^
   * In discrete variable "p.fbb":
     - disc func bool(bool) fbb = f;
            ^                     ^
   * In location "p.l":
     - edge u do fbb := f;
                 ^      ^

  ------------------------------
  (7/33) A list literal is used.
  ------------------------------
   * In discrete variable "p.lb":
     - disc list bool lb = [true];
                           ^

  ---------------------------
  (8/33) A list type is used.
  ---------------------------
   * In location "p.l":
     - edge u do lb := lb[:];
                 ^     ^ ^
   * In discrete variable "p.lb":
     - disc list bool lb = [true];
            ^              ^

  ---------------------------------------
  (9/33) A projection expression is used.
  ---------------------------------------
   * In location "p.l":
     - edge u do tbb[a] := true;
                    ^

  --------------------------------------
  (10/33) A real number literal is used.
  --------------------------------------
   * In location "p.l":
     - edge u do r := <real>1.0;
                            ^
   * In discrete variable "p.r":
     - disc real r = 1.2;
                     ^

  ----------------------------
  (11/33) A real type is used.
  ----------------------------
   * In location "p.l":
     - edge u do r := <real>1;
                 ^     ^
     - edge u do r := <real>1.0;
                 ^     ^    ^
     - edge u do r := time;
                 ^    ^
     - edge u do r := r + r;
                 ^    ^ ^ ^
     - edge u do r := r - r;
                 ^    ^ ^ ^
     - edge u do r := r * r;
                 ^    ^ ^ ^
     - edge u do r := r / r;
                 ^    ^ ^ ^
   * In discrete variable "p.r":
     - disc real r = 1.2;
            ^        ^

  ------------------------------
  (12/33) A set literal is used.
  ------------------------------
   * In location "p.l":
     - edge u do sb := {true} or {false};
                       ^         ^
     - edge u do sb := {true} and {false};
                       ^          ^
   * In discrete variable "p.sb":
     - disc set bool sb = {true};
                          ^

  ---------------------------
  (13/33) A set type is used.
  ---------------------------
   * In location "p.l":
     - edge u do sb := {true} or {false};
                 ^     ^      ^  ^
     - edge u do sb := {true} and {false};
                 ^     ^      ^   ^
     - edge u do b := true in sb;
                              ^
     - edge u do b := sb sub sb;
                      ^      ^
   * In discrete variable "p.sb":
     - disc set bool sb = {true};
            ^             ^

  -----------------------------------
  (14/33) A slice expression is used.
  -----------------------------------
   * In location "p.l":
     - edge u do lb := lb[:];
                         ^

  ---------------------------------
  (15/33) A string literal is used.
  ---------------------------------
   * In location "p.l":
     - edge u do str := "a";
                        ^
   * In discrete variable "p.str":
     - disc string str = "a";
                         ^

  ------------------------------
  (16/33) A string type is used.
  ------------------------------
   * In location "p.l":
     - edge u do str := "a";
                 ^      ^
   * In discrete variable "p.str":
     - disc string str = "a";
            ^            ^

  ------------------------------------
  (17/33) A switch expression is used.
  ------------------------------------
   * In location "p.l":
     - edge u do i := switch 1: else 2 end;
                      ^
     - edge u do i := switch p: case l: 3 end;
                      ^

  --------------------------------
  (18/33) A tuple literal is used.
  --------------------------------
   * In location "p.l":
     - edge u do (b, db) := sample db;
                 ^
   * In discrete variable "p.tbb":
     - disc tuple(bool a; bool b) tbb = (true, false);
                                        ^

  -----------------------------
  (19/33) A tuple type is used.
  -----------------------------
   * In location "p.l":
     - edge u do tbb[a] := true;
                 ^
     - edge u do (b, db) := sample db;
                 ^          ^
   * In discrete variable "p.tbb":
     - disc tuple(bool a; bool b) tbb = (true, false);
            ^                           ^

  ------------------------------------------------
  (20/33) A type-changing cast expression is used.
  ------------------------------------------------
   * In location "p.l":
     - edge u do r := <real>1;
                      ^

  ------------------------------------------------------------
  (21/33) Binary operator "*" is used on a real typed operand.
  ------------------------------------------------------------
   * In location "p.l":
     - edge u do r := r * r;
                        ^

  ------------------------------------------------------------
  (22/33) Binary operator "+" is used on a real typed operand.
  ------------------------------------------------------------
   * In location "p.l":
     - edge u do r := r + r;
                        ^

  ------------------------------------------------------------
  (23/33) Binary operator "-" is used on a real typed operand.
  ------------------------------------------------------------
   * In location "p.l":
     - edge u do r := r - r;
                        ^

  ------------------------------------
  (24/33) Binary operator "/" is used.
  ------------------------------------
   * In location "p.l":
     - edge u do r := r / r;
                        ^

  -------------------------------------------------------------
  (25/33) Binary operator "and" is used on a set typed operand.
  -------------------------------------------------------------
   * In location "p.l":
     - edge u do sb := {true} and {false};
                              ^

  -------------------------------------
  (26/33) Binary operator "in" is used.
  -------------------------------------
   * In location "p.l":
     - edge u do b := true in sb;
                           ^

  ------------------------------------------------------------
  (27/33) Binary operator "or" is used on a set typed operand.
  ------------------------------------------------------------
   * In location "p.l":
     - edge u do sb := {true} or {false};
                              ^

  --------------------------------------
  (28/33) Binary operator "sub" is used.
  --------------------------------------
   * In location "p.l":
     - edge u do b := sb sub sb;
                         ^

  -----------------------------------------------------------------------------------
  (29/33) Discrete variable has an initial value that cannot be evaluated statically.
  -----------------------------------------------------------------------------------
   * In discrete variable "p.db":
     - disc dist bool db = constant(true);
                                   ^

  ------------------------------------
  (30/33) Edge has a multi-assignment.
  ------------------------------------
   * In location "p.l":
     - edge u do (b, db) := sample db;
                         ^

  -----------------------------------------------
  (31/33) Edge has a partial variable assignment.
  -----------------------------------------------
   * In location "p.l":
     - edge u do tbb[a] := true;
                        ^

  --------------------------------------------
  (32/33) Function is a user-defined function.
  --------------------------------------------
   * In the top-level scope of the specification:
     - func bool f(bool p):
                 ^

  ----------------------------------------
  (33/33) Unary operator "sample" is used.
  ----------------------------------------
   * In location "p.l":
     - edge u do (b, db) := sample db;
                            ^
