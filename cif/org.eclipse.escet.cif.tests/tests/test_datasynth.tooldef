//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:cif" import cifdatasynth, cifmerge, cifexplorer;

// Configuration.
string test_path = "datasynth";
string test_pattern = "*.cif";
list string default_options = [
    "--devmode=1",
    "-m debug",
    "-r model",
    "--bdd-dbg-maxnodes=20",
    "--bdd-dbg-maxpaths=20",
    "--bdd-simplify=guards-plants,initial-unctrl",
    "--forward-reach=on",
    "--edge-granularity=per-edge",
    "--stats=ctrl-sys-states",
];

string opt_algos_on      = "--dcsh-order=on  --force-order=on  --sliding-window-order=on";
string opt_algos_off     = "--dcsh-order=off --force-order=off --sliding-window-order=off";
string var_order_default = "--dcsh-order=on  --force-order=on  --sliding-window-order=on  --var-order=sorted";
string opt_simplify_all  = "--bdd-simplify=guards-plants,guards-req-auts,guards-se-excl-plant-invs,guards-se-excl-req-invs,guards-state-plant-invs,guards-state-req-invs,guards-ctrl-beh,initial-unctrl,initial-state-plant-invs";

map(string:list string) test_options = {
    "datasynth/bdd_dbg_maxnodes.cif":                                    ["--bdd-dbg-maxnodes=2"],
    "datasynth/bdd_dbg_maxpaths.cif":                                    ["--bdd-dbg-maxpaths=2"],
    "datasynth/bdd_out_cnf.cif":                                         ["-t cnf"],
    "datasynth/bdd_out_dnf.cif":                                         ["-t dnf"],
    "datasynth/bdd_out_nodes.cif":                                       ["-t nodes -p n"],
    "datasynth/bdd_out_normal.cif":                                      ["-t normal"],
    "datasynth/chaining_fixed.cif":                                      ["--exploration-strategy=chaining-fixed"],
    "datasynth/chaining_fixed_forward.cif":                              ["--exploration-strategy=chaining-fixed --forward-reach=on"],
    "datasynth/chaining_workset_forward.cif":                            ["--exploration-strategy=chaining-workset --edge-granularity=per-event --forward-reach=on"],
    "datasynth/chaining_workset_with_edge_order_duplicate_events.cif":   ["--exploration-strategy=chaining-workset --edge-granularity=per-event --edge-order-duplicate-events=allowed"],
    "datasynth/chaining_workset_with_per_edge_edge_granularity.cif":     ["--exploration-strategy=chaining-workset --edge-granularity=per-edge"],
    "datasynth/dining_philosophers4.cif":                                [opt_simplify_all],
    "datasynth/edge_granularity_errors01_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors01_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors02_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors02_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors03_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors03_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors04_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors04_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors05_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors05_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors06_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors06_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors07_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors07_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors08_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors08_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors09_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors09_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors10_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors10_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors11_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors11_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors12_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors12_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_errors13_per_edge.cif":                  ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_errors13_per_event.cif":                 ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates1_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates1_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates2_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates2_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates3_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates3_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates4_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates4_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates5_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates5_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates6_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates6_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates7_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates7_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_guards_updates8_per_edge.cif":           ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_guards_updates8_per_event.cif":          ["--edge-granularity=per-event"],
    "datasynth/edge_granularity_simple_per_edge.cif":                    ["--edge-granularity=per-edge "],
    "datasynth/edge_granularity_simple_per_event.cif":                   ["--edge-granularity=per-event"],
    "datasynth/edge_order_both_custom_basic.cif":                        ["--backward-edge-order=C,p.event,D,p.z,p.a,p.X,p.Y,p.c --forward-edge-order=C,p.event,D,p.z,p.a,p.X,p.Y,p.c"],
    "datasynth/edge_order_both_custom_dupl_no.cif":                      ["--stats=ctrl-sys-states,bdd-perf-cache,bdd-perf-max-nodes --backward-edge-order=Counter.dec,Actuator.off,Counter.inc,Actuator.on --forward-edge-order=Counter.dec,Actuator.off,Counter.inc,Actuator.on"],
    "datasynth/edge_order_both_custom_dupl_yes.cif":                     ["--stats=ctrl-sys-states,bdd-perf-cache,bdd-perf-max-nodes --backward-edge-order=Counter.dec,Counter.dec,Counter.dec,Counter.dec,Counter.dec,Actuator.off,Counter.inc,Counter.inc,Counter.inc,Counter.inc,Counter.inc,Actuator.on --forward-edge-order=Counter.dec,Counter.dec,Counter.dec,Counter.dec,Counter.dec,Actuator.off,Counter.inc,Counter.inc,Counter.inc,Counter.inc,Counter.inc,Actuator.on --edge-order-duplicate-events=allowed"],
    "datasynth/edge_order_both_dupl_match1.cif":                         ["--backward-edge-order=p.c,*          --forward-edge-order=p.c,*"],
    "datasynth/edge_order_both_dupl_match2.cif":                         ["--backward-edge-order=p.event,*      --forward-edge-order=p.event,*"],
    "datasynth/edge_order_both_missing.cif":                             ["--backward-edge-order=q.*            --forward-edge-order=q.*"],
    "datasynth/edge_order_both_model.cif":                               ["--backward-edge-order=model          --forward-edge-order=model"],
    "datasynth/edge_order_both_no_match.cif":                            ["--backward-edge-order=*3             --forward-edge-order=*3"],
    "datasynth/edge_order_both_random_invalid_seed.cif":                 ["--backward-edge-order=random:x       --forward-edge-order=random:x"],
    "datasynth/edge_order_both_random.cif":                              ["--backward-edge-order=random:88      --forward-edge-order=random:88"],
    "datasynth/edge_order_both_reverse_model.cif":                       ["--backward-edge-order=reverse-model  --forward-edge-order=reverse-model"],
    "datasynth/edge_order_both_reverse_sorted.cif":                      ["--backward-edge-order=reverse-sorted --forward-edge-order=reverse-sorted"],
    "datasynth/edge_order_both_sorted.cif":                              ["--backward-edge-order=sorted         --forward-edge-order=sorted"],
    "datasynth/edge_order_forward_random_off.cif":                       ["--forward-edge-order=random:88 --forward-reach=off"],
    "datasynth/edge_order_forward_random_on.cif":                        ["--forward-edge-order=random:88 --forward-reach=on"],
    "datasynth/edge_order_old_option_unsupported.cif":                   ["-e random"],
    "datasynth/edge_order_single_backward_random.cif":                   ["--backward-edge-order=random:88"],
    "datasynth/edge_order_single_forward_random.cif":                    ["--forward-edge-order=random:88"],
    "datasynth/event_warnings.cif":                                      ["--forward-reach=on"],
    "datasynth/fixed_point_order_nonblock_ctrl_reach.cif":               ["--forward-reach=on --fixed-point-order=nonblock-ctrl-reach"],
    "datasynth/fixed_point_order_nonblock_reach_ctrl.cif":               ["--forward-reach=on --fixed-point-order=nonblock-reach-ctrl"],
    "datasynth/fixed_point_order_ctrl_nonblock_reach.cif":               ["--forward-reach=on --fixed-point-order=ctrl-nonblock-reach"],
    "datasynth/fixed_point_order_ctrl_reach_nonblock.cif":               ["--forward-reach=on --fixed-point-order=ctrl-reach-nonblock"],
    "datasynth/fixed_point_order_reach_nonblock_ctrl.cif":               ["--forward-reach=on --fixed-point-order=reach-nonblock-ctrl"],
    "datasynth/fixed_point_order_reach_ctrl_nonblock.cif":               ["--forward-reach=on --fixed-point-order=reach-ctrl-nonblock"],
    "datasynth/forward_reach_off.cif":                                   ["--forward-reach=off --bdd-simplify="],
    "datasynth/forward_reach_on.cif":                                    ["--forward-reach=on  --bdd-simplify="],
    "datasynth/inv_state_evt_exclusion_plant_simple.cif":                ["--event-warn=false"],
    "datasynth/namespace.cif":                                           ["-n a.b.c"],
    "datasynth/namespace_conflict.cif":                                  ["-n g.h.c.n"],
    "datasynth/namespace_invalid.cif":                                   ["-n a.b."],
    "datasynth/namespace_non_empty.cif":                                 ["-n g.h"],
    "datasynth/reachability1_workset_off.cif":                           ["--edge-granularity=per-event"],
    "datasynth/reachability1_workset_on.cif":                            ["--exploration-strategy=chaining-workset --edge-granularity=per-event"],
    "datasynth/reachability2_workset_off.cif":                           ["--edge-granularity=per-event"],
    "datasynth/reachability2_workset_on.cif":                            ["--exploration-strategy=chaining-workset  --edge-granularity=per-event"],
    "datasynth/simplify_ctrl_beh_off.cif":                               ["--bdd-simplify="],
    "datasynth/simplify_ctrl_beh_on.cif":                                ["--bdd-simplify=guards-ctrl-beh"],
    "datasynth/simplify_initial_plant_inv_off.cif":                      ["--bdd-simplify="],
    "datasynth/simplify_initial_plant_inv_on.cif":                       ["--bdd-simplify=initial-state-plant-invs"],
    "datasynth/simplify_initial_unctrl_off.cif":                         ["--bdd-simplify="],
    "datasynth/simplify_initial_unctrl_on.cif":                          ["--bdd-simplify=initial-unctrl"],
    "datasynth/simplify_plants_off.cif":                                 ["--bdd-simplify="],
    "datasynth/simplify_plants_on.cif":                                  ["--bdd-simplify=guards-plants"],
    "datasynth/simplify_propagation_all.cif":                            ["--bdd-simplify=guards-plants,guards-req-auts,guards-se-excl-req-invs,guards-state-req-invs,guards-ctrl-beh,initial-unctrl"],
    "datasynth/simplify_propagation_none.cif":                           ["--bdd-simplify="],
    "datasynth/simplify_range_invs_off.cif":                             ["--bdd-simplify="],
    "datasynth/simplify_range_invs_on.cif":                              ["--bdd-simplify=guards-state-req-invs"],
    "datasynth/simplify_req_auts_off.cif":                               ["--bdd-simplify="],
    "datasynth/simplify_req_auts_on.cif":                                ["--bdd-simplify=guards-req-auts"],
    "datasynth/simplify_se_excl_plant_invs_off.cif":                     ["--bdd-simplify="],
    "datasynth/simplify_se_excl_plant_invs_on.cif":                      ["--bdd-simplify=guards-se-excl-plant-invs"],
    "datasynth/simplify_se_excl_req_invs_off.cif":                       ["--bdd-simplify="],
    "datasynth/simplify_se_excl_req_invs_on.cif":                        ["--bdd-simplify=guards-se-excl-req-invs"],
    "datasynth/simplify_state_plant_invs_off.cif":                       ["--bdd-simplify="],
    "datasynth/simplify_state_plant_invs_on.cif":                        ["--bdd-simplify=guards-state-plant-invs"],
    "datasynth/simplify_state_req_invs_off.cif":                         ["--bdd-simplify="],
    "datasynth/simplify_state_req_invs_on.cif":                          ["--bdd-simplify=guards-state-req-invs"],
    "datasynth/state_plant_invs_ctrl.cif":                               [opt_simplify_all],
    "datasynth/state_plant_invs_init.cif":                               ["--forward-reach=on"],
    "datasynth/state_plant_invs_req_aut.cif":                            ["--forward-reach=on"],
    "datasynth/state_plant_invs_simple.cif":                             ["--forward-reach=on"],
    "datasynth/state_plant_invs_unctrl.cif":                             [opt_simplify_all],
    "datasynth/state_req_inv_all_ctrl_beh.cif":                          ["--state-req-invs=all-ctrl-beh"],
    "datasynth/state_req_inv_per_edge.cif":                              ["--state-req-invs=per-edge"],
    "datasynth/stats.cif":                                               ["--stats=ctrl-sys-states,bdd-perf-cache,bdd-perf-cont,bdd-perf-max-nodes"],
    "datasynth/stats_none.cif":                                          ["--stats="],
    "datasynth/traffic_lights_req_state_inv_all_ctrl_beh.cif":           ["--state-req-invs=all-ctrl-beh"],
    "datasynth/traffic_lights_req_state_inv_per_edge.cif":               ["--state-req-invs=per-edge"],
    "datasynth/supname_custom.cif":                                      ["-s g"],
    "datasynth/supname_invalid.cif":                                     ["-s b@"],
    "datasynth/var_order_adv_dcsh_from_paper.cif":                       ["--adv-var-order=sorted->dcsh(metric=wes,relations=linearized)->force(metric=total-span,relations=legacy)->slidwin(metric=total-span,relations=legacy) " + var_order_default],
    "datasynth/var_order_adv_parse_err.cif":                             ["--adv-var-order=model-> " + var_order_default],
    "datasynth/var_order_adv_basic_mix.cif":                             ["--adv-var-order=random(seed=1)"],
    "datasynth/var_order_adv_tcheck_err.cif":                            ["--adv-var-order=model(a=1) " + var_order_default],
    "datasynth/var_order_custom_algos_off.cif":                          ["-r *c*;*3,*1;*2 " + opt_algos_off + " " + opt_simplify_all],
    "datasynth/var_order_custom_algos_on.cif":                           ["-r *c*;*3,*1;*2 " + opt_algos_on + " " + opt_simplify_all],
    "datasynth/var_order_custom_dupl_match.cif":                         ["-r p.x;*"],
    "datasynth/var_order_custom_missing.cif":                            ["-r q"],
    "datasynth/var_order_custom_no_match.cif":                           ["-r *3"],
    "datasynth/var_order_hyper_edge_legacy.cif":                         ["--hyper-edge-algo=legacy"],
    "datasynth/var_order_hyper_edge_linearized.cif":                     ["--hyper-edge-algo=linearized"],
    "datasynth/var_order_model_algos_off.cif":                           ["-r model " + opt_algos_off + " " + opt_simplify_all],
    "datasynth/var_order_model_algos_on.cif":                            ["-r model " + opt_algos_on + " " + opt_simplify_all],
    "datasynth/var_order_random_algo_dcsh_on.cif":                       ["-r random:88 " + opt_algos_off + " --dcsh-order=on " + opt_simplify_all],
    "datasynth/var_order_random_algo_force_on.cif":                      ["-r random:88 " + opt_algos_off + " --force-order=on " + opt_simplify_all],
    "datasynth/var_order_random_algo_slidwin_on.cif":                    ["-r random:88 " + opt_algos_off + " --sliding-window-order=on " + opt_simplify_all],
    "datasynth/var_order_random_algos_off.cif":                          ["-r random:88 " + opt_algos_off + " " + opt_simplify_all],
    "datasynth/var_order_random_algos_on.cif":                           ["-r random:88 " + opt_algos_on + " " + opt_simplify_all],
    "datasynth/var_order_random_invalid_seed.cif":                       ["-r random:x"],
    "datasynth/var_order_reverse_model_algos_off.cif":                   ["-r reverse-model " + opt_algos_off + " " + opt_simplify_all],
    "datasynth/var_order_reverse_model_algos_on.cif":                    ["-r reverse-model " + opt_algos_on + " " + opt_simplify_all],
    "datasynth/var_order_reverse_sorted_algos_off.cif":                  ["-r reverse-sorted " + opt_algos_off + " " + opt_simplify_all],
    "datasynth/var_order_reverse_sorted_algos_on.cif":                   ["-r reverse-sorted " + opt_algos_on + " " + opt_simplify_all],
    "datasynth/var_order_sorted_algos_off.cif":                          ["-r sorted " + opt_algos_off + " " + opt_simplify_all],
    "datasynth/var_order_sorted_algos_on.cif":                           ["-r sorted " + opt_algos_on + " " + opt_simplify_all],
};
set string test_skip = {};

// Initialize counts.
int synth_count = 0;
int synth_successes = 0;
int synth_failures = 0;
int synth_skipped = 0;

int merge_count = 0;
int merge_successes = 0;
int merge_failures = 0;

int space_count = 0;
int space_successes = 0;
int space_failures = 0;
int space_skipped = 0;

int nr_count = 0;
int nr_successes = 0;
int nr_failures = 0;

// Find tests.
list string tests = find(test_path, test_pattern);
for i in range(tests):: tests[i] = replace(pathjoin(test_path, tests[i]), "\\", "/");
for i in reverse(range(tests)):
    if contains(tests[i], ".ctrlsys.cif") or
       contains(tests[i], ".ctrlsys.extra.cif") or
       contains(tests[i], ".ctrlsys.merged.cif") or
       contains(tests[i], ".statespace.cif") or
       contains(tests[i], ".real.cif"):
        tests = delidx(tests, i);
        continue;
    end
    if contains(test_skip, tests[i]):
        tests = delidx(tests, i);
        synth_count = synth_count + 1;
        space_count = space_count + 1;
        synth_skipped = synth_skipped + 1;
        space_skipped = space_skipped + 1;
    end
end

// Test all tests.
for test in tests:
    // ====================
    // Data-based synthesis
    // ====================

    // Get test specific options.
    list string options = default_options;
    list string extra_options;
    if contains(test_options, test):: extra_options = test_options[test];
    options = options + extra_options;

    // Print what we are testing.
    outln("Testing \"%s\" (datasynth) using options \"%s\"...", test, join(extra_options, " "));

    // Get paths.
    string test1_out_exp    = chfileext(test, newext="out");
    string test1_err_exp    = chfileext(test, newext="err");
    string test1_out_real   = chfileext(test, newext="out.real");
    string test1_err_real   = chfileext(test, newext="err.real");
    string test1_stats_exp  = chfileext(test, newext="stats.txt");
    string test1_stats_real = chfileext(test, newext="stats.txt.real");

    string rslt1_exp  = chfileext(test, oldext="cif", newext="ctrlsys.cif");
    string rslt1_real = chfileext(test, oldext="cif", newext="ctrlsys.real.cif");

    // Execute.
    list string options1 = options + ["-o", rslt1_real, "--statsfile-contperf=" + test1_stats_real];
    int exit_code1 = cifdatasynth([test] + options1, stdout=test1_out_real, stderr=test1_err_real, ignoreNonZeroExitCode=true);

    // Compare output.
    bool stderr1_diff = diff(test1_err_exp, test1_err_real, missingAsEmpty=true, warnOnDiff=true);
    bool stdout1_diff = diff(test1_out_exp, test1_out_real, missingAsEmpty=true, warnOnDiff=true);
    bool stats1_diff  = diff(test1_stats_exp, test1_stats_real, missingAsEmpty=true, warnOnDiff=true);
    bool rslt1_diff   = diff(rslt1_exp, rslt1_real, missingAsEmpty=true, warnOnDiff=true);
    if not stderr1_diff:: rmfile(test1_err_real);
    if not stats1_diff::  rmfile(test1_stats_real, true);
    // don't remove test1_out_real here, as we need it to get the number of states...
    // don't remove rslt1_real here, as we need to generate a state space from it...

    // Update counts.
    int synth_diff_count = 0;
    if stderr1_diff:: synth_diff_count = synth_diff_count + 1;
    if stdout1_diff:: synth_diff_count = synth_diff_count + 1;
    if stats1_diff::  synth_diff_count = synth_diff_count + 1;
    if rslt1_diff::   synth_diff_count = synth_diff_count + 1;

    synth_count = synth_count + 1;
    if synth_diff_count == 0:: synth_successes = synth_successes + 1;
    if synth_diff_count > 0:: synth_failures = synth_failures + 1;

    // ===============================================================
    // Merge extra model, for controlled system state space generation
    // ===============================================================

    // Get paths.
    string test2 = rslt1_real;
    string test2_extra    = chfileext(test, oldext="cif", newext="ctrlsys.extra.cif");
    string test2_out_exp  = chfileext(test, oldext="cif", newext="ctrlsys.merged.out");
    string test2_err_exp  = chfileext(test, oldext="cif", newext="ctrlsys.merged.err");
    string test2_out_real = chfileext(test, oldext="cif", newext="ctrlsys.merged.out.real");
    string test2_err_real = chfileext(test, oldext="cif", newext="ctrlsys.merged.err.real");

    string rslt2_exp  = chfileext(test, oldext="cif", newext="ctrlsys.merged.cif");
    string rslt2_real = chfileext(test, oldext="cif", newext="ctrlsys.merged.real.cif");

    bool rslt2_diff = false;
    bool did_merge = false;
    bool do_state_explore = exit_code1 == 0 or isfile(rslt1_exp) or isfile(rslt1_real);
    if do_state_explore and isfile(test2_extra):
        // Print what we are testing.
        outln("Testing \"%s\" (ctrl system merging)...", test);

        // Execute.
        list string options2 = ["--devmode=1", "-o", rslt2_real];
        cifmerge([test2, test2_extra] + options2, stdout=test2_out_real, stderr=test2_err_real, ignoreNonZeroExitCode=true);

        // Compare output.
        bool stderr2_diff = diff(test2_err_exp, test2_err_real, missingAsEmpty=true, warnOnDiff=true);
        bool stdout2_diff = diff(test2_out_exp, test2_out_real, missingAsEmpty=true, warnOnDiff=true);
             rslt2_diff   = diff(rslt2_exp, rslt2_real, missingAsEmpty=true, warnOnDiff=true);
        if not stderr2_diff:: rmfile(test2_err_real);
        if not stdout2_diff:: rmfile(test2_out_real);
        // don't remove rslt2_real here, as we need to generate a state space from it...

        // Update counts.
        int merge_diff_count = 0;
        if stderr2_diff:: merge_diff_count = merge_diff_count + 1;
        if stdout2_diff:: merge_diff_count = merge_diff_count + 1;
        if rslt2_diff::   merge_diff_count = merge_diff_count + 1;

        merge_count = merge_count + 1;
        if merge_diff_count == 0:: merge_successes = merge_successes + 1;
        if merge_diff_count > 0:: merge_failures = merge_failures + 1;

        // Did do a merge.
        did_merge = true;
    end

    // ========================================
    // Controlled system state space generation
    // ========================================

    // Get paths.
    string test3 = rslt1_real;
    if did_merge:: test3 = rslt2_real;
    string test3_out_exp  = chfileext(test, oldext="cif", newext="statespace.out");
    string test3_err_exp  = chfileext(test, oldext="cif", newext="statespace.err");
    string test3_out_real = chfileext(test, oldext="cif", newext="statespace.out.real");
    string test3_err_real = chfileext(test, oldext="cif", newext="statespace.err.real");

    string rslt3_exp  = chfileext(test, oldext="cif", newext="statespace.cif");
    string rslt3_real = chfileext(test, oldext="cif", newext="statespace.real.cif");

    if do_state_explore:
        // Print what we are testing.
        outln("Testing \"%s\" (ctrl system state space)...", test);

        // Execute.
        list string options3 = ["--devmode=1", "-z1", "-s0", "-c1", "-e0", "-p off", "-o", rslt3_real];
        cifexplorer([test3] + options3, stdout=test3_out_real, stderr=test3_err_real, ignoreNonZeroExitCode=true);

        // Compare output.
        bool stderr3_diff = diff(test3_err_exp, test3_err_real, missingAsEmpty=true, warnOnDiff=true);
        bool stdout3_diff = diff(test3_out_exp, test3_out_real, missingAsEmpty=true, warnOnDiff=true);
        bool rslt3_diff   = diff(rslt3_exp, rslt3_real, missingAsEmpty=true, warnOnDiff=true);
        if not stderr3_diff:: rmfile(test3_err_real);
        if not stdout3_diff:: rmfile(test3_out_real);
        // don't remove rslt3_real here, as we need it to get the number of states...

        // Update counts.
        int space_diff_count = 0;
        if stderr3_diff:: space_diff_count = space_diff_count + 1;
        if stdout3_diff:: space_diff_count = space_diff_count + 1;
        if rslt3_diff::   space_diff_count = space_diff_count + 1;

        space_count = space_count + 1;
        if space_diff_count == 0:: space_successes = space_successes + 1;
        if space_diff_count > 0:: space_failures = space_failures + 1;

        // Print what we are testing.
        outln("Testing \"%s\" (state space size compare)...", test);

        // Get number of states in controlled system, from statistics output.
        bool synth_states_exact = false;
        long synth_states_nr = -1;
        if isfile(test1_out_real):
            // Get debug output lines.
            list string lines = readlines(test1_out_real);

            // Find number of states, and exactness.
            for line in lines:
                // Find line with useful information.
                string pre_exact  = "Controlled system: exactly";
                string pre_atmost = "Controlled system: at most";
                bool line_exact  = startswith(line, pre_exact);
                bool line_atmost = startswith(line, pre_atmost);
                if not line_exact and not line_atmost:: continue;

                // Extract information.
                line = line[size(pre_exact):];
                line = trim(line);
                if endswith(line, "states."):: line = line[:-size("states.")];
                if endswith(line, "state.")::  line = line[:-size("state.")];
                line = trim(line);
                line = replace(line, ",", "");
                line = replace(line, ".", "");

                synth_states_exact = line_exact;
                synth_states_nr = <long>line;
                break;
            end
        end

        // Get number of states in controlled system, from state space.
        bool space_states_exact = false;
        long space_states_nr = -1;
        if isfile(rslt3_real):
            // Get debug output lines.
            list string lines = readlines(rslt3_real);

            // Find number of states, and exactness.
            for line in lines:
                // Find line with useful information.
                string pre = "  location loc";
                bool match = startswith(line, pre);
                if not match:: continue;

                // Update information. Overwrite previous one if already has
                // information, to ensure information for last location is
                // kept.
                line = line[size(pre):];
                line = trim(line);
                if endswith(line, ":"):: line = line[:-1];
                line = trim(line);

                space_states_exact = true;
                space_states_nr = <long>line;
            end
        end

        // Check controlled system state space counts.
        bool nr_match;
        if synth_states_exact and space_states_exact:
            nr_match = (synth_states_nr == space_states_nr);

        elif not synth_states_exact and space_states_exact:
            nr_match = (synth_states_nr >= space_states_nr);

        else
            nr_match = false;
        end

        if not nr_match:
            string synth_exact_txt;
            string space_exact_txt;
            if synth_states_exact: synth_exact_txt = "exactly"; else synth_exact_txt = "at most"; end
            if space_states_exact: space_exact_txt = "exactly"; else space_exact_txt = "at most"; end
            errln("WARNING: Controlled system state space size mismatch:");
            errln(" - Synthesis output: %s %s states (%s)", synth_exact_txt, synth_states_nr, test1_out_real);
            errln(" - State space:      %s %s states (%s)", space_exact_txt, space_states_nr, rslt3_real);
        end

        nr_count = nr_count + 1;
        if     nr_match:: nr_successes = nr_successes + 1;
        if not nr_match:: nr_failures  = nr_failures  + 1;

        // Remove result from synthesis.
        if not rslt3_diff:: if exists(rslt3_real):: rmfile(rslt3_real);
    end

    // Remove result from synthesis.
    if not stdout1_diff:: rmfile(test1_out_real);
    if not rslt1_diff::   if exists(rslt1_real):: rmfile(rslt1_real);
    if not rslt2_diff::   if exists(rslt2_real):: rmfile(rslt2_real);
end

// Get result message.
string synth_rslt;
string merge_rslt;
string space_rslt;
string nr_rslt;
if synth_failures == 0: synth_rslt = "SUCCESS"; else synth_rslt = "FAILURE"; end
if merge_failures == 0: merge_rslt = "SUCCESS"; else merge_rslt = "FAILURE"; end
if space_failures == 0: space_rslt = "SUCCESS"; else space_rslt = "FAILURE"; end
if nr_failures    == 0: nr_rslt    = "SUCCESS"; else nr_rslt    = "FAILURE"; end

string synth_msg = fmt("Test %s (%s, actual synthesis):         %d tests, %d successes, %d failures, %d skipped.",
                       synth_rslt, test_path, synth_count, synth_successes, synth_failures, synth_skipped);
string merge_msg = fmt("Test %s (%s, ctrl system merging):      %d tests, %d successes, %d failures.",
                       merge_rslt, test_path, merge_count, merge_successes, merge_failures);
string space_msg = fmt("Test %s (%s, ctrl system state space):  %d tests, %d successes, %d failures, %d skipped.",
                       space_rslt, test_path, space_count, space_successes, space_failures, space_skipped);
string nr_msg    = fmt("Test %s (%s, state space size compare): %d tests, %d successes, %d failures.",
                       nr_rslt, test_path, nr_count, nr_successes, nr_failures);

// Output result message.
if synth_failures == 0:
    outln(synth_msg);
else
    errln(synth_msg);
end

if merge_failures == 0:
    outln(merge_msg);
else
    errln(merge_msg);
end

if space_failures == 0:
    outln(space_msg);
else
    errln(space_msg);
end

if nr_failures == 0:
    outln(nr_msg);
else
    errln(nr_msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit synth_failures + merge_failures + space_failures + nr_failures;
