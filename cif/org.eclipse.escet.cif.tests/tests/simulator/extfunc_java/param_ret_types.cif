//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2020 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

func bool                               f_b(        bool                               x): "java:testpkg.TestParamRetTypes.p_b|java_code/bin";
//func bool                               f_B(        bool                               x): "java:testpkg.TestParamRetTypes.p_B|java_code/bin";
func int                                f_i(        int                                x): "java:testpkg.TestParamRetTypes.p_i|java_code/bin";
//func int                                f_I(        int                                x): "java:testpkg.TestParamRetTypes.p_I|java_code/bin";
func real                               f_d(        real                               x): "java:testpkg.TestParamRetTypes.p_d|java_code/bin";
//func real                               f_D(        real                               x): "java:testpkg.TestParamRetTypes.p_D|java_code/bin";
func string                             f_G(        string                             x): "java:testpkg.TestParamRetTypes.p_G|java_code/bin";
func list bool                          f_LB(       list bool                          x): "java:testpkg.TestParamRetTypes.p_LB|java_code/bin";
func list int                           f_LI(       list int                           x): "java:testpkg.TestParamRetTypes.p_LI|java_code/bin";
func list real                          f_LD(       list real                          x): "java:testpkg.TestParamRetTypes.p_LD|java_code/bin";
func list string                        f_LG(       list string                        x): "java:testpkg.TestParamRetTypes.p_LG|java_code/bin";
func list list int                      f_LLI(      list list int                      x): "java:testpkg.TestParamRetTypes.p_LLI|java_code/bin";
func set int                            f_SI(       set int                            x): "java:testpkg.TestParamRetTypes.p_SI|java_code/bin";
func set set int                        f_SSI(      set set int                        x): "java:testpkg.TestParamRetTypes.p_SSI|java_code/bin";
func dict(int:bool)                     f_MIB(      dict(int:bool)                     x): "java:testpkg.TestParamRetTypes.p_MIB|java_code/bin";
func dict(list int:set bool)            f_MLISB(    dict(list int:set bool)            x): "java:testpkg.TestParamRetTypes.p_MLISB|java_code/bin";
func tuple(int a;bool b)                f_TIBX(     tuple(int a;bool b)                x): "java:testpkg.TestParamRetTypes.p_TIBX|java_code/bin";
func tuple(list int a;tuple(int c,d) b) f_TLITIIXX( tuple(list int a;tuple(int c,d) b) x): "java:testpkg.TestParamRetTypes.p_TLITIIXX|java_code/bin";

plant p:
  disc list bool x_lb = [f_b(true)];//, f_B(false)];
  disc list int x_li = [f_i(1)]; //, f_I(2)];
  disc list real x_ld = [f_d(3.0)];//, f_D(4.0)];

  disc string g = f_G("abc");
  disc list bool lb = f_LB([true, false]);
  disc list int li = f_LI([5, 6]);
  disc list real ld = f_LD([7.0, 8.0]);
  disc list string lg = f_LG(["def", "ghi"]);
  disc list list int lli = f_LLI([[9], [10, 11]]);
  disc set int si = f_SI({12, 13});
  disc set set int ssi = f_SSI({{}, {14}});
  disc dict(int:bool) mib = f_MIB({15:true, 16:false});
  disc dict(list int:set bool) mlisb = f_MLISB({[17]:{true, false}});
  disc tuple(int a;bool b) tibx = f_TIBX((18, false));
  disc tuple(list int a;tuple(int c,d) b) tlitiixx = f_TLITIIXX(([19],(20, 21)));

  initial size(x_lb) + size(x_li) + size(x_ld) > 0;
  initial size(g) > 0;
  initial lb[0], li[0] >= 0, ld[0] >= 0, lg[0] != "a";
  initial lli[0][0] > 0, size(si) > 0, size(ssi) > 0, size(mib) > 0;
  initial size(mlisb) > 0, tibx[a] > 0, tlitiixx[a][0] > 0;

  location:
    initial;
    urgent;
end
