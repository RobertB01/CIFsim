//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Hybrid fluid model with 3 buffers and 2 servers.

const real MAX_RATE = 1.0;

automaton def S(alg real pred_fh, succ_eh):
  alg real rate = min(MAX_RATE, min(pred_fh, succ_eh)) * p;
  disc int p = 1; // 0 when broken, 1 when producing
  disc dist real d_up = uniform(0.1, 15.0);
  disc dist real d_down = uniform(0.1, 3.0);
  cont t der -1.0;

  location Start:
    initial;
    edge do (t, d_up) := sample d_up goto Up;

  location Up:
    edge when t <= 0 do (t, d_down) := sample d_down, p := 0 goto Down;

  location Down:
    edge when t <= 0 do (t, d_up) := sample d_up, p := 1 goto Up;
end

const real H = 5.0; // buffer height

group def B(alg real pred_rate, succ_rate):
  cont fh = H / 2 der pred_rate - succ_rate; // filled height
  alg real eh = H - fh;                      // empty height
end

alg real start_rate = min(MAX_RATE, b1.eh);

b1: B(start_rate, s1.rate);

s1: S(b1.fh, b2.eh);
b2: B(s1.rate, s2.rate);

s2: S(b2.fh, b3.eh);
b3: B(s2.rate, exit_rate);

alg real exit_rate = min(MAX_RATE, b3.fh);
cont exit_volume = 0.0 der exit_rate;
