const real E = 2.718281828459045;
const real PI = 3.141592653589793;
const tuple(int a; bool b; real c) ctibr = (123, false, 234.0);
type ft1 = func real();
type ft2 = func real(real);
func real f():
  return 1.0;
end
event real comm_multi;
event int[0..0] comm_single;
plant automaton p1:
  location X:
    initial;
  location Y:
    initial;
end
automaton p2:
  type T = EE;
  enum EE = ABC;
  event e;
  const int[1..1] c = 1;
  alg int[1..1] a1 = 1;
  alg real aa;
  alg bool a2 = p1.X;
  input real input_var1;
  input int[9..9] input_var2;
  disc bool b;
  disc int[0..10] i;
  disc int[1..1] j;
  disc int k;
  disc real r;
  disc string g;
  disc list int li;
  disc set int si;
  disc tuple(int a; bool b; real c) tibr;
  disc tuple(list int a; set real b) tlisr;
  disc tuple(int e; list int l) tili;
  disc dict(int:real) dir;
  disc func real() fr0;
  disc func int(real) fi1r;
  disc func ft1() ffr;
  disc ft2 frr;
  disc func ft2() ffrr;
  disc T z;
  disc bool tb;
  disc int ti;
  disc int[3..5] ti_3_5;
  disc int[99..99] ti_99_99;
  disc int min_int = -2147483647 - 1;
  disc real tr;
  disc string tg;
  disc list int[1..1] tl;
  disc list[0] int[2..2] tl0;
  disc list[1] int[3..3] tl1;
  disc list[2] int[4..4] tl2;
  disc list[1] int[5..5] tl11;
  disc list[2] int[6..6] tl22;
  disc list[3..5] int[7..7] tl35;
  disc set int[1..1] ts;
  disc tuple(int[1..1] a; int[2..2] b) ttii;
  disc dict(int[3..3]:int[4..4]) tdii;
  disc EE te;
  disc func int[1..1]() tf_i;
  disc dist bool tdb;
  disc dist bool d01 = bernoulli(1.0);
  disc dist real d02 = beta(1.0, 2.0);
  disc dist int d03 = binomial(1.0, 2);
  disc dist bool d04 = constant(true);
  disc dist int d05 = constant(1);
  disc dist real d06 = constant(1.23);
  disc dist real d07 = erlang(1, 2.0);
  disc dist real d08 = exponential(1.0);
  disc dist real d09 = gamma(1.0, 2.0);
  disc dist int d10 = geometric(1.0);
  disc dist real d11 = lognormal(1.0, 2.0);
  disc dist real d12 = normal(1.0, 2.0);
  disc dist int d13 = poisson(1.0);
  disc dist real d14 = random();
  disc dist real d15 = triangle(1.0, 2.0, 3.0);
  disc dist int d16 = uniform(1, 2);
  disc dist real d17 = uniform(1.0, 2.0);
  disc dist real d18 = weibull(1.0, 2.0);
  cont cont_var der 1.0;
  invariant k > 0;
  equation aa = 1.0;
  location X:
    initial;
    edge e;
    edge do tb := tb;
    edge do ti := ti;
    edge do ti_3_5 := ti_3_5;
    edge do ti_99_99 := 99;
    edge do min_int := min_int;
    edge do tr := tr;
    edge do tg := tg;
    edge do tl := tl;
    edge do tl0 := <list[0] int[2..2]>[];
    edge do tl1 := [3];
    edge do tl2 := [4, 4];
    edge do tl11 := [5];
    edge do tl22 := [6, 6];
    edge do tl35 := tl35;
    edge do ts := ts;
    edge do ttii := (1, 2);
    edge do tdii := tdii;
    edge do te := ABC;
    edge do tf_i := tf_i;
    edge do tdb := tdb;
    edge do b := true;
    edge do j := 1;
    edge do k := -1;
    edge do r := 1.0;
    edge do r := -1.0;
    edge do r := -1e5;
    edge do r := -1e+5;
    edge do r := -1E-05;
    edge do r := -1.0e3;
    edge do r := -12.34e-9;
    edge do g := "a\nb\tc\\d\"e";
    edge do li := <list[0] int>[];
    edge do li := [1];
    edge do li := [1, 2];
    edge do si := <set int>{};
    edge do si := {1};
    edge do si := {1, 2};
    edge do si := {2, 2, 2};
    edge do si := {2, 1, 4, 3, 4};
    edge do tibr := (1, true, 1.0);
    edge do tlisr := ([1], {-1.0});
    edge do dir := <dict(int:real)>{};
    edge do dir := {1: 5.0};
    edge do dir := {1: 5.0, 2: 6.0};
    edge do dir := {3: 5.0, 1: 6.0, 2: 6.0, 4: 5.0};
    edge do b := true;
    edge do b := true;
    edge do i := 2;
    edge do i := 2 + i;
    edge do b := p1.X;
    edge do b := i = 2;
    edge do i := 5 + abs(i);
    edge do i := 6;
    edge do i := 1;
    edge do if true: i := 1 else i := 2 end;
    edge do i := 1;
    edge do if p1.X: i := 1 elif true: i := 2 elif false: i := 3 else i := 4 end;
    edge do i := if p1.X: 1 elif true: 2 elif false: 3 else 4 end;
    edge do b := false;
    edge do i := 2;
    edge do i := 3;
    edge do i := 6;
    edge do r := 1.23;
    edge do r := switch p1.X: else 2.34 end;
    edge do r := switch true: case p1.X: 3.45 else 4.56 end;
    edge do b := switch 1: case 1: p1.X else false end;
    edge do b := switch 2: case 2: true else p1.X end;
    edge do r := switch p1: case X: 5.67 else 6.78 end;
    edge do r := switch p1: case X: 7.89 case Y: 8.91 end;
    edge do g := "a";
    edge do g := "b";
    edge do r := time;
    edge do r := 1.0;
    edge do g := "1";
    edge do g := "1.234e-8";
    edge do g := "true";
    edge do k := 132;
    edge do r := 1.234e-8;
    edge do b := true;
    edge do g := <string>p1;
    edge do g := "X";
    edge do g := "X";
    edge do g := "*";
    edge do li := [1, 2];
    edge do b := false;
    edge do b := true;
    edge do k := -1;
    edge do i := 1;
    edge do r := -5.0;
    edge do r := 5.0;
    edge do i := 1;
    edge do r := 1.0;
    edge do r := -1.2;
    edge do b := (sample d01)[0];
    edge do r := (sample d02)[0];
    edge do k := (sample d03)[0];
    edge do b := (sample d04)[0];
    edge do k := (sample d05)[0];
    edge do r := (sample d06)[0];
    edge do r := (sample d07)[0];
    edge do r := (sample d08)[0];
    edge do r := (sample d09)[0];
    edge do k := (sample d10)[0];
    edge do r := (sample d11)[0];
    edge do r := (sample d12)[0];
    edge do k := (sample d13)[0];
    edge do r := (sample d14)[0];
    edge do r := (sample d15)[0];
    edge do k := (sample d16)[0];
    edge do r := (sample d17)[0];
    edge do r := (sample d18)[0];
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do si := {2, 3};
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := true;
    edge do si := {1, 2, 3, 4};
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do k := 3;
    edge do r := 3.0;
    edge do r := 3.0;
    edge do r := 3.0;
    edge do li := [1, 2, 3, 4];
    edge do g := "abcdef";
    edge do dir := {1: 6.0, 2: 5.0, 3: 7.0};
    edge do k := 4;
    edge do r := 4.0;
    edge do r := 4.0;
    edge do r := 4.0;
    edge do si := {1};
    edge do dir := {2: 5.0};
    edge do dir := {2: 5.0};
    edge do dir := {2: 5.0};
    edge do k := 6;
    edge do r := 6.0;
    edge do r := 6.0;
    edge do r := 6.0;
    edge do r := 4.0;
    edge do r := 4.0;
    edge do r := 4.0;
    edge do r := 4.0;
    edge do k := 1;
    edge do k := -1;
    edge do k := -1;
    edge do k := 1;
    edge do k := 3;
    edge do k := 3;
    edge do k := -3;
    edge do k := -3;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := p1.X;
    edge do b := p1.X;
    edge do b := false;
    edge do b := false;
    edge do b := true;
    edge do b := true;
    edge do b := p1.X;
    edge do b := p1.X;
    edge do b := p1.X;
    edge do b := true;
    edge do b := true;
    edge do b := not p1.X;
    edge do b := p1.X;
    edge do b := p1.X;
    edge do b := not p1.X;
    edge do b := not p1.X;
    edge do b := not p1.X;
    edge do b := p1.X;
    edge do b := not p1.X;
    edge do b := p1.X;
    edge do b := not p1.X;
    edge do b := p1.X and not b;
    edge do b := i >= k;
    edge do b := i > k;
    edge do b := i != k;
    edge do b := i = k;
    edge do b := i <= k;
    edge do b := i < k;
    edge do b := i < k;
    edge do k := 1;
    edge do k := 2;
    edge do k := 3;
    edge do k := 3;
    edge do k := 2;
    edge do k := 1;
    edge do k := 1;
    edge do k := 2;
    edge do k := 3;
    edge do k := 4;
    edge do k := 5;
    edge do k := 2;
    edge do k := 4;
    edge do g := "a";
    edge do g := "b";
    edge do g := "c";
    edge do g := "c";
    edge do g := "b";
    edge do g := "a";
    edge do k := 9;
    edge do b := true;
    edge do g := "x";
    edge do tibr := (8, false, 123.0);
    edge do k := 123;
    edge do b := false;
    edge do r := 234.0;
    edge do li := [1, 2, 3];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [1];
    edge do li := [1, 2];
    edge do li := [1, 2, 3];
    edge do li := [1, 2, 3];
    edge do li := [1, 2];
    edge do li := [1];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [1, 2, 3];
    edge do li := [2, 3];
    edge do li := [3];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [3];
    edge do li := [2, 3];
    edge do li := [1, 2, 3];
    edge do li := [1, 2, 3];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [1];
    edge do li := [1, 2];
    edge do li := [1, 2, 3];
    edge do li := [1, 2, 3];
    edge do li := [1, 2];
    edge do li := [1];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [2];
    edge do li := [2, 3];
    edge do li := [2, 3];
    edge do li := [2];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [3];
    edge do li := [3];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [3];
    edge do li := [3];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [2];
    edge do li := [2, 3];
    edge do li := [2, 3];
    edge do li := [2];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [1];
    edge do li := [1, 2];
    edge do li := [1, 2, 3];
    edge do li := [1, 2, 3];
    edge do li := [1, 2];
    edge do li := [1];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do li := [1];
    edge do li := [1, 2];
    edge do li := [1, 2, 3];
    edge do li := [1, 2, 3];
    edge do li := [1, 2];
    edge do li := [1];
    edge do li := <list[0] int[1..3]>[];
    edge do li := <list[0] int[1..3]>[];
    edge do g := "ghi";
    edge do g := "";
    edge do g := "g";
    edge do g := "gh";
    edge do g := "ghi";
    edge do g := "ghi";
    edge do g := "gh";
    edge do g := "g";
    edge do g := "";
    edge do g := "";
    edge do g := "ghi";
    edge do g := "hi";
    edge do g := "i";
    edge do g := "";
    edge do g := "";
    edge do g := "i";
    edge do g := "hi";
    edge do g := "ghi";
    edge do g := "ghi";
    edge do g := "";
    edge do g := "g";
    edge do g := "gh";
    edge do g := "ghi";
    edge do g := "ghi";
    edge do g := "gh";
    edge do g := "g";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "h";
    edge do g := "hi";
    edge do g := "hi";
    edge do g := "h";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "i";
    edge do g := "i";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "i";
    edge do g := "i";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "h";
    edge do g := "hi";
    edge do g := "hi";
    edge do g := "h";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "g";
    edge do g := "gh";
    edge do g := "ghi";
    edge do g := "ghi";
    edge do g := "gh";
    edge do g := "g";
    edge do g := "";
    edge do g := "";
    edge do g := "";
    edge do g := "g";
    edge do g := "gh";
    edge do g := "ghi";
    edge do g := "ghi";
    edge do g := "gh";
    edge do g := "g";
    edge do g := "";
    edge do g := "";
    edge do fr0 := fr0;
    edge do fi1r := fi1r;
    edge do fr0 := ffr();
    edge do r := ffr()();
    edge do k := fi1r(1.0);
    edge do frr := ffrr();
    edge do r := ffrr()(1.0);
    edge do r := 0.479425538604203;
    edge do r := 0.5210953054937474;
    edge do r := 0.8775825618903728;
    edge do r := 1.1276259652063807;
    edge do r := 0.5463024898437905;
    edge do r := 0.46211715726000974;
    edge do r := 0.5235987755982989;
    edge do r := 0.48121182505960347;
    edge do r := 1.0471975511965979;
    edge do r := 1.8115262724608532;
    edge do r := 0.4636476090008061;
    edge do r := 0.5493061443340549;
    edge do k := 2;
    edge do k := 1;
    edge do k := 0;
    edge do k := 1;
    edge do k := 2;
    edge do r := 2.0;
    edge do r := 1.0;
    edge do r := 0.0;
    edge do r := 1.0;
    edge do r := 2.0;
    edge do r := 3.0;
    edge do k := -1;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 1;
    edge do k := 1;
    edge do k := 1;
    edge do k := 1;
    edge do k := 1;
    edge do li := [2, 3];
    edge do li := [1, 3];
    edge do li := [1, 2];
    edge do li := [1, 2];
    edge do li := [1, 3];
    edge do li := [2, 3];
    edge do b := true;
    edge do b := true;
    edge do b := true;
    edge do b := false;
    edge do b := false;
    edge do b := false;
    edge do r := 2.718281828459045;
    edge do k := -1;
    edge do k := -1;
    edge do k := -1;
    edge do k := -1;
    edge do k := -1;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 1;
    edge do g := "a\tb1c2.340000d";
    edge do g := "a%b%c";
    edge do g := "a1b2.3c1d2.34e";
    edge do g := "a3.45 3.45z";
    edge do g := "a3.450000e+00z";
    edge do g := "a3.450000E+00z";
    edge do g := "a3.450000z";
    edge do g := "a3.45000z";
    edge do g := "a3.45000z";
    edge do g := "a3.0e9 3e+09z";
    edge do g := "a3.0e9 3E+09z";
    edge do g := "ax [\"y\"]z";
    edge do g := "a  x_    [\"Y\"]z";
    edge do g := "aABCz";
    edge do r := 1.0;
    edge do r := 3.0;
    edge do i := 2;
    edge do r := 2.0;
    edge do r := 2.0;
    edge do r := 2.0;
    edge do i := 1;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do tili := (1, [2, 3]);
    edge do tili := (2, [3]);
    edge do tili := (3, <list[0] int[1..3]>[]);
    edge do i := 1;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do i := 1;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do k := 256;
    edge do r := 256.0;
    edge do r := 256.0;
    edge do r := 256.0;
    edge do r := 3.0;
    edge do k := 1;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do k := 1;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do r := 1.0;
    edge do k := -1;
    edge do k := -1;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 0;
    edge do k := 1;
    edge do k := 1;
    edge do k := 1;
    edge do r := 0.30000000000000004;
    edge do r := 5.300000000000001;
    edge do r := 9.5;
    edge do r := -1.0;
    edge do k := -1;
    edge do k := -1;
    edge do k := 0;
    edge do k := 1;
    edge do k := 1;
    edge do k := -1;
    edge do k := -1;
    edge do k := 0;
    edge do k := 1;
    edge do k := 1;
    edge do k := 0;
    edge do k := 1;
    edge do k := 2;
    edge do k := 4;
    edge do k := 0;
    edge do k := 1;
    edge do k := 2;
    edge do k := 0;
    edge do k := 1;
    edge do k := 2;
    edge do k := 1;
    edge do k := 0;
    edge do k := 1;
    edge do k := 2;
    edge do r := 0.0;
    edge do r := 1.0;
    edge do r := 2.0;
    edge do r := 3.0;
    edge do r := 4.0;
    edge do i := 1;
    edge do b := a2;
    edge do i := 1;
    edge do b := true;
    edge do b := p1.X;
    edge do i := i;
    edge do i := 1;
    edge do z := ABC;
    edge do fr0 := f;
    edge do k := 123;
    edge do r := cont_var;
    edge do r := input_var1;
    edge do i := 9;
    edge do r := 1.0;
    edge tau;
    edge when false;
    edge when false;
    edge when false;
    edge when p1.X;
    edge when false;
    edge tau;
    edge tau;
end
group ff:
  func real f1(real p):
    real p2;
    p2 := p;
    return p + p2;
  end
  func real f2(real p):
    list int l;
    int[4..4] c = 4;
    int[5..5] v;
    l[4] := 23;
    l[5] := 23;
    v := 5;
    l[4], v := 4, 5;
    l[5], v := 5, 5;
    return p;
  end
  invariant f1(1.0) > f2(1.0);
end
plant automaton pp:
  disc list int l;
  const int[4..4] c = 4;
  disc int[5..5] v;
  location:
    initial;
    edge do l[4] := 23;
    edge do l[5] := 23;
    edge do v := 5;
    edge do (l[4], v) := (4, 5);
    edge do (l[5], v) := (5, 5);
end
automaton q:
  disc bool v1;
  disc bool v2;
  location:
    initial;
    edge do v2 := true;
    edge do v2 := false;
end
plant automaton init1:
  disc bool b;
  disc bool c = false;
  initial false;
  location:
    initial;
end
automaton init2:
  type x = bool;
  enum E = L1, L2;
  disc bool b1;
  disc bool b2 = false;
  disc int i1a;
  disc int i2a = 0;
  disc int[-5..-3] i1b;
  disc int[-5..-3] i2b = -3;
  disc int[3..5] i1c;
  disc int[3..5] i2c = 3;
  disc x x1;
  disc x x2 = false;
  disc E e1;
  disc E e2 = L1;
  disc real r1;
  disc real r2 = 0.0;
  disc string g1;
  disc string g2 = "";
  disc list int l1;
  disc list int l2 = <list[0] int>[];
  disc set int s1;
  disc set int s2 = <set int>{};
  disc func int() f1;
  disc func int() f2 = f1;
  disc dict(int:bool) d1;
  disc dict(int:bool) d2 = <dict(int:bool)>{};
  disc tuple(int a; int b) t1;
  disc tuple(int a; int b) t2 = (0, 0);
  disc dist bool z1b;
  disc dist bool z2b = z1b;
  disc dist int z1i;
  disc dist int z2i = z1i;
  disc dist real z1r;
  disc dist real z2r = z1r;
  invariant e2 = L1 or e2 = L2;
  invariant b2 or x2 or i2a + i2b + i2c + r2 + t2[0] + f2() > 0;
  invariant size(g2) + size(l2) + size(s2) + size(d2) > 0;
  invariant (sample z2b)[0] or (sample z2i)[0] + (sample z2r)[0] > 0;
  location:
    initial;
end
automaton init3:
  disc bool b;
  location l1:
    initial;
    edge tau goto l2;
  location l2;
end
automaton init4:
  disc bool b1 in any;
  disc bool b2;
  disc bool combi_and = false;
  disc bool combi_or = b1;
  invariant combi_and or combi_or;
  location:
    initial;
end
automaton init5:
  disc bool a1 = true;
  alg bool b1 = c1;
  disc bool c1 = true;
  disc bool a2 = false;
  alg bool b2;
  disc bool c2 = false;
  const real d0c = 1.23;
  disc real d0 = 1.23;
  cont d = 1.23 der d;
  invariant a1 or a2;
  equation b2 = c2;
  location:
    initial;
end
plant automaton init6:
  disc real d1 = 0.0;
  disc real d2 = 0.0;
  location:
    initial;
end
plant automaton snd:
  location:
    initial;
    edge comm_multi!1.23;
    edge comm_single!0;
end
plant automaton rcv:
  disc real x;
  disc int y;
  location:
    initial;
    edge comm_multi? do x := ?;
    edge comm_single? do y := 0;
end
automaton p3:
  location X:
    initial;
    marked;
end
automaton p4:
  initial false;
  marked false;
  invariant false;
  location X:
    invariant false;
  location Y:
    initial;
    edge when Y goto X;
end
automaton p5:
  initial false;
  marked false;
  invariant false;
  location X:
    invariant false;
  location Y:
    initial;
    edge when Y goto X;
end
automaton p6:
  initial false;
  marked false;
  invariant false;
  location X:
    invariant false;
  location Y:
    initial;
    edge when Y goto X;
end
automaton p7:
  initial p1.X;
  marked p1.X;
  invariant p1.X;
  location X:
    initial p1.X;
    marked p1.X;
    invariant p1.X;
end
group p8:
  const int[5..5] i = 5;
end
automaton p9:
  alg real x1 = 1.0;
  alg bool x2 = true;
  alg real x3 = switch p6: case X: 3.0 case Y: 5.0 end;
  location abc:
    initial;
end
plant automaton p10:
  invariant p1.X;
  plant invariant p1.X;
  requirement invariant p4.X;
  requirement invariant p1.X;
  supervisor invariant p4.X;
  supervisor invariant p4.Y;
  location:
    initial;
    invariant p1.X;
    plant invariant p1.X;
    requirement invariant p4.X;
    requirement invariant p1.X;
    supervisor invariant p4.X;
    supervisor invariant p4.Y;
end
plant automaton p11:
  invariant p1.X;
  plant invariant false;
  requirement invariant p4.X;
  requirement invariant p1.X;
  supervisor invariant p4.X;
  supervisor invariant p4.Y;
  location:
    initial;
    invariant p1.X;
    plant invariant false;
    requirement invariant p4.X;
    requirement invariant p1.X;
    supervisor invariant p4.X;
    supervisor invariant p4.Y;
end
automaton p12:
  invariant false;
  plant invariant false;
  requirement invariant false;
  supervisor invariant false;
  location:
    initial;
    invariant false;
    plant invariant false;
    requirement invariant false;
    supervisor invariant false;
end
group type_hints:
  alg bool x = [<list[0] bool>[]] = [[p1.X]];
end
group p13:
  event e1;
  event e2;
  event e3;
  event e4;
  invariant e1 needs p1.X;
  plant invariant e2 needs p4.X;
  requirement invariant e3 needs p5.X;
  supervisor invariant e4 needs p6.X;
  invariant p1.X disables e1;
  plant invariant p4.X disables e2;
  requirement invariant p5.X disables e3;
  supervisor invariant p6.X disables e4;
end
group p14:
  event e1;
  event e2;
  event e3;
  event e4;
end
group p15:
  event e1;
  event e2;
  event e3;
  event e4;
  invariant e1 needs false;
  plant invariant e2 needs false;
  requirement invariant e3 needs not p5.X;
  requirement invariant p5.X disables e3;
  supervisor invariant e4 needs false;
end
group p16:
  event e1;
  event e2;
  event e3;
  event e4;
  invariant true disables e1;
  plant invariant true disables e2;
  requirement invariant e3 needs p5.X;
  requirement invariant not p5.X disables e3;
  supervisor invariant true disables e4;
end
initial false;
marked false;
invariant false;
