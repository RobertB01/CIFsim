//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:cif" import cifmerge, cif2cif;

// Configuration.
string test_path = "merger";
string test_pattern = "*.cif";
list string default_options = ["--devmode=1"];
map(string:list string) test_options = {};
set string test_skip = {};

// Initialize counts.
int run_count = 0;
int run_successes = 0;
int run_failures = 0;
int run_skipped = 0;

int check_count = 0;
int check_successes = 0;
int check_failures = 0;

// Find tests.
list string tests1 = find(test_path, test_pattern, recursive=false);
for i in range(tests1):: tests1[i] = replace(pathjoin(test_path, tests1[i]), "\\", "/");
for i in reverse(range(tests1)):
    if contains(tests1[i], ".merged.cif"):
        tests1 = delidx(tests1, i);
        continue;
    end
    if contains(test_skip, tests1[i]):
        tests1 = delidx(tests1, i);
        run_count = run_count + 1;
        run_skipped = run_skipped + 1;
    end
end

// Per test, input files, output file base.
set tuple(list string, string) tests2;
for test in tests1:
    string prefix;
    if endswith(test, ".in1.cif"):: prefix = test[:-size(".in1.cif")];
    if endswith(test, ".in2.cif"):: prefix = test[:-size(".in2.cif")];
    if endswith(test, ".in3.cif"):: prefix = test[:-size(".in3.cif")];

    if prefix == "merger/rel_paths":
        tests2 = tests2 or {(["merger/rel_paths.in1.cif",
                              "merger/subdir1/rel_paths.in2.cif",
                              "empty.txt"],
                             "merger/subdir2/rel_paths")};
    else
        list string inputs;
        if exists(prefix + ".in1.cif"):: inputs = inputs + [prefix + ".in1.cif"];
        if exists(prefix + ".in2.cif"):: inputs = inputs + [prefix + ".in2.cif"];
        if exists(prefix + ".in3.cif"):: inputs = inputs + [prefix + ".in3.cif"];
        tests2 = tests2 or {(inputs, prefix)};
    end
end

// Test all tests.
for test_inputs, test in tests2:
    // ====
    // Run.
    // ====

    // Get test specific options.
    list string options = default_options;
    list string extra_options;
    if contains(test_options, test):: extra_options = test_options[test];
    options = options + extra_options;

    // Print what we are testing.
    outln("Testing \"%s\" (run) using options \"%s\"...", test, join(extra_options, " "));

    // Get paths.
    string test1_out_exp  = chfileext(test, "cif", "run.out");
    string test1_err_exp  = chfileext(test, "cif", "run.err");
    string test1_out_real = chfileext(test, "cif", "run.out.real");
    string test1_err_real = chfileext(test, "cif", "run.err.real");
    string rslt1_exp      = chfileext(test, "cif", "merged.cif");
    string rslt1_real     = chfileext(test, "cif", "merged.cif.real");

    // Execute.
    list string options1 = options + test_inputs + ["-o", rslt1_real];
    int exit_code1 = cifmerge(options1, stdout=test1_out_real, stderr=test1_err_real, ignoreNonZeroExitCode=true);

    // Compare output.
    bool stderr1_diff = diff(test1_err_exp, test1_err_real, missingAsEmpty=true, warnOnDiff=true);
    bool stdout1_diff = diff(test1_out_exp, test1_out_real, missingAsEmpty=true, warnOnDiff=true);
    bool rslt1_diff  = diff(rslt1_exp, rslt1_real, missingAsEmpty=true, warnOnDiff=true);
    if not stderr1_diff:: rmfile(test1_err_real);
    if not stdout1_diff:: rmfile(test1_out_real);
    // Don't remove 'rslt1_real' here, as we need to check it still.

    // Update counts.
    int run_diff_count = 0;
    if stderr1_diff:: run_diff_count = run_diff_count + 1;
    if stdout1_diff:: run_diff_count = run_diff_count + 1;
    if rslt1_diff::   run_diff_count = run_diff_count + 1;

    run_count = run_count + 1;
    if run_diff_count == 0:: run_successes = run_successes + 1;
    if run_diff_count > 0:: run_failures = run_failures + 1;

    // =========================
    // Check produced CIF model.
    // =========================

    // Get paths.
    string test2          = rslt1_real;
    string file2_out_real = chfileext(test, "cif", "check.out.real.cif");

    // Do check, if applicable.
    if exit_code1 == 0 or isfile(rslt1_exp) or isfile(rslt1_real):
        // Print what we are testing.
        outln("Testing \"%s\" (check)...", test);

        // Execute.
        list string options2 = ["--devmode=1", "--output-mode=error", "-o", file2_out_real];
        int exit_code2 = cif2cif([test2] + options2, ignoreNonZeroExitCode=true);

        // Check output.
        bool exit_code2_ok = (exit_code2 == 0);
        bool file2_written = isfile(file2_out_real) and filesize(file2_out_real) > 0;
        bool check_ok = exit_code2_ok and file2_written;

        // Cleanup.
        if check_ok and exists(file2_out_real):: rmfile(file2_out_real);

        // Update counts.
        check_count = check_count + 1;
        if     check_ok:: check_successes = check_successes + 1;
        if not check_ok:: check_failures  = check_failures  + 1;
    end

    // ========
    // Cleanup.
    // ========

    if not rslt1_diff:: if exists(rslt1_real):: rmfile(rslt1_real);
end

// Get result messages.
string run_rslt;
string check_rslt;
if run_failures   == 0: run_rslt   = "SUCCESS"; else run_rslt   = "FAILURE"; end
if check_failures == 0: check_rslt = "SUCCESS"; else check_rslt = "FAILURE"; end

string run_msg   = fmt("Test %s (%s, run):   %d tests, %d successes, %d failures, %d skipped.",
                       run_rslt, test_path, run_count, run_successes, run_failures, run_skipped);
string check_msg = fmt("Test %s (%s, check): %d tests, %d successes, %d failures.",
                       check_rslt, test_path, check_count, check_successes, check_failures);

// Output result messages.
if run_failures == 0:
    outln(run_msg);
else
    errln(run_msg);
end

if check_failures == 0:
    outln(check_msg);
else
    errln(check_msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit run_failures + check_failures;
