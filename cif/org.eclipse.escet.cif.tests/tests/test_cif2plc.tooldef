//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:cif" import cif2plc;

// Configuration.
string test_path = "cif2plc";
string test_pattern = "*.cif";
list string default_options = ["--devmode=1 --warn-rename=yes"];
map(string:list string) test_options = {
    "cif2plc/button_lamp.cif":                 ["-j MyProj -c MyConfig -r MyResource -n MyTask -i 7 -p 123"],
    "cif2plc/constants_elim.cif":              ["--simplify-values=yes"],
    "cif2plc/constants_keep.cif":              ["--simplify-values=no"],
    "cif2plc/convert_enums_ints.cif":          ["--convert-enums=ints"],
    "cif2plc/convert_enums_consts.cif":        ["--convert-enums=consts"],
    "cif2plc/elim_enums.cif":                  ["--elim-enums=true"],
    "cif2plc/formal_finvoke_all_all.cif":      ["--formal-finvoke-arg=all --formal-finvoke-func=all"],
    "cif2plc/formal_finvoke_all_std.cif":      ["--formal-finvoke-arg=all --formal-finvoke-func=std"],
    "cif2plc/formal_finvoke_all_others.cif":   ["--formal-finvoke-arg=all --formal-finvoke-func=others"],
    "cif2plc/formal_finvoke_multi_all.cif":    ["--formal-finvoke-arg=multi --formal-finvoke-func=all"],
    "cif2plc/formal_finvoke_multi_std.cif":    ["--formal-finvoke-arg=multi --formal-finvoke-func=std"],
    "cif2plc/formal_finvoke_multi_others.cif": ["--formal-finvoke-arg=multi --formal-finvoke-func=others"],
    "cif2plc/formal_finvoke_none_all.cif":     ["--formal-finvoke-arg=none --formal-finvoke-func=all"],
    "cif2plc/formal_finvoke_none_std.cif":     ["--formal-finvoke-arg=none --formal-finvoke-func=std"],
    "cif2plc/formal_finvoke_none_others.cif":  ["--formal-finvoke-arg=none --formal-finvoke-func=others"],
    "cif2plc/option_max_iter_inf.cif":         ["-x inf"],
    "cif2plc/options.cif":                     ["-i off -b 32 -x 101"],
};
set string test_skip = {};

// Initialize counts.
int count = 0;
int successes = 0;
int failures = 0;
int skipped = 0;

// Find tests.
list string tests = find(test_path, test_pattern);
for i in range(tests):: tests[i] = replace(pathjoin(test_path, tests[i]), "\\", "/");
for i in reverse(range(tests)):
    if contains(test_skip, tests[i]):
        tests = delidx(tests, i);
        count = count + 1;
        skipped = skipped + 1;
    end
end

// Test all tests.
for test in tests:
    for target in ["plcopen", "iec"]:
        // Get test specific options.
        list string options = default_options;
        list string extra_options;
        if contains(test_options, test):: extra_options = test_options[test];
        options = options + extra_options;

        // Print what we are testing.
        outln("Testing \"%s\" (%s) using options \"%s\"...", test, target, join(extra_options, " "));

        // Get paths.
        string test_out_exp  = chfileext(test, newext=target + ".out");
        string test_err_exp  = chfileext(test, newext=target + ".err");
        string test_out_real = chfileext(test, newext=target + ".out.real");
        string test_err_real = chfileext(test, newext=target + ".err.real");

        string plcopen_exp  = chfileext(test, oldext="cif", newext="plcopen.xml");
        string plcopen_real = chfileext(test, oldext="cif", newext="plcopen.xml.real");

        string iec_dir_exp  = chfileext(test, oldext="cif") + "_" + target;
        string iec_dir_real = chfileext(test, oldext="cif") + "_" + target + "_real";

        // Execute.
        if target == "plcopen":
            options = options + ["-t", "plc-open-xml", "-o", plcopen_real];
        elif target == "iec":
            options = options + ["-t", "iec-61131-3", "-o", iec_dir_real];
        end

        cif2plc([test] + options, stdout=test_out_real, stderr=test_err_real, ignoreNonZeroExitCode=true);

        // Compare output.
        bool stderr_diff  = diff(test_err_exp, test_err_real, missingAsEmpty=true, warnOnDiff=true);
        bool stdout_diff  = diff(test_out_exp, test_out_real, missingAsEmpty=true, warnOnDiff=true);
        if not stderr_diff::  rmfile(test_err_real);
        if not stdout_diff::  rmfile(test_out_real);

        // Compare PLCOpen XML specific output.
        bool plcopen_diff = false;
        if target == "plcopen":
            plcopen_diff = diff(plcopen_exp, plcopen_real, missingAsEmpty=true, warnOnDiff=true);
            if not plcopen_diff:: if exists(plcopen_real):: rmfile(plcopen_real);
        end

        // Compare IEC 61131-3 specific output.
        int iec_diff_count = 0;
        if target == "iec":
            list string filenames_exp;
            if isdir(iec_dir_exp):
                filenames_exp = find(iec_dir_exp, recursive=true, files=true, dirs=false);
            end
            list string filenames_real;
            if isdir(iec_dir_real):
                filenames_real = find(iec_dir_real, recursive=true, files=true, dirs=false);
            end
            set string filenames;
            for filename in filenames_exp + filenames_real:: filenames = filenames or {filename};

            for filename in filenames:
                string filename_exp = replace(pathjoin(iec_dir_exp, filename), "\\", "/");
                string filename_real = replace(pathjoin(iec_dir_real, filename), "\\", "/");
                bool iec_diff = diff(filename_exp, filename_real, missingAsEmpty=true, warnOnDiff=true);
                if not iec_diff and exists(filename_real):: rmfile(filename_real);
                if iec_diff:: iec_diff_count = iec_diff_count + 1;
            end
            if isdir(iec_dir_real) and empty(find(iec_dir_real)):: rmdir(iec_dir_real);
        end

        // Update counts.
        int diff_count = 0;
        if stderr_diff::  diff_count = diff_count + 1;
        if stdout_diff::  diff_count = diff_count + 1;
        if plcopen_diff:: diff_count = diff_count + 1;
        diff_count = diff_count + iec_diff_count;

        count = count + 1;
        if diff_count == 0:: successes = successes + 1;
        if diff_count > 0:: failures = failures + 1;
    end
end

// Get result message.
string rslt;
if failures == 0: rslt = "SUCCESS"; else rslt = "FAILURE"; end

string msg = fmt("Test %s (%s): %d tests, %d successes, %d failures, %d skipped.",
                 rslt, test_path, count, successes, failures, skipped);

// Output result message.
if failures == 0:
    outln(msg);
else
    errln(msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit failures;
