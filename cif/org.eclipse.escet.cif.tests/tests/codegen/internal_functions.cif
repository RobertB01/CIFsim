//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2020 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Simple function.

func int inc(int x):
  return x + 1;
end

// Recursive function.

func int factorial(int x):
  return if x = 0: 1 else x * factorial(x - 1) end;
end

// Mutually recursive functions.

func int rec1(int x):
  return if x = 0: 1 else rec2(x - 1) end;
end

func int rec2(int x):
  return if x = 0: 2 else rec1(x - 1) end;
end

// Multiple return types.

func int, real multi_return():
  return 1, 1.0;
end

// Parameters.

func int f0():
  return 1;
end

func int f1(int x):
  return x;
end

func int f2(int x, y):
  return x + y;
end

func real f3(int x, y; real z):
  return x + y + z;
end

// Local variables, ordering.

func int locals(int x):
  int a = 5;
  int b = c + x;
  int c = a;

  return b;
end

// Function manipulating an array.

func list[4] int rot1(list[4] int x):
  int tmp = x[0];

  x[0] := x[3];
  x[1] := x[2];
  x[2] := x[1];
  x[3] := tmp;
  return x;
end

func list[4] int rot2(list[4] int x):
  list[4] int rslt;

  rslt[0] := x[3];
  rslt[1] := x[2];
  rslt[2] := x[1];
  rslt[3] := x[0];
  return x;
end

// Assignments, packing, unpacking, partial variable assignment, etc.

func int fa(int x):
  list[3] int y = [x, x, x];
  int a = x, b = x + 1;
  tuple(int g, h) t;

  y[0], y[1] := 1, 2;
  y := [y[0] + 1, y[1], y[2]];
  a, b := b, a;
  t := (a + b, b - a);
  a, b := t;

  x := a + b + y[0];

  return x;
end

// If/elif/else.

func int fi(int x):
  if x = 1:
    x := x + 1;
  end

  if x = 1:
    x := x + 1;
  elif x = 2:
    x := x + 2;
  end

  if x = 2:
    x := x + 1;
  elif x = 3:
    x := x + 2;
  elif x = 4:
    x := x + 3;
  end

  if x = 2:
    x := x + 1;
  elif x = 3:
    x := x + 2;
  else
    x := x + 4;
  end

  if x = 6:
    x := x + 1;
  else
    x := x + 2;
  end

  if x > 4:
    if x < 6:
      x := x - 1;
    else
      x := x - 2;
    end
  end

  return x;
end

// While/break/continue.

func int fw():
  int x;

  while x > 0:
    while x < 10:
      if x mod 2 = 1:
        continue;
      end
      if x = 8:
        break;
      end
    end
  end

  return x;
end

// Unreachable statements.
func int fu1():
  if true:
    return 1;
  end
  return 0; // Never reached.
end

func int fu2():
  return 1;
  return 0; // Never reached.
end

func int fu3():
  while true:
    return 1;
  end
  return 0; // Never reached.
end

// Assignment, range check.

func int fr():
  list[3] int[0..3] x = [1, 2, 3];
  list[3] int[2..4] y = [2, 3, 4];

  x := y;           // Check elements of array, int upper bound check.
  x := [-1, 3, 5];  // Check elements of array, int lower/upper bound check.

  return 1;
end

// Use the functions.

automaton aut:
  disc int         v00 = 5;
  disc int         v01 = inc(v00);
  disc int         v02 = factorial(5);
  disc int         v03 = rec1(7);
  disc int         v04 = rec2(7);
  disc int         v05 = multi_return()[0] + floor(multi_return()[1]);
  disc int         v06 = f0();
  disc int         v07 = f1(1);
  disc int         v08 = f2(1, 2);
  disc real        v09 = f3(1, 2, 3.0);
  disc int         v10 = locals(1);
  disc list[4] int v11 = rot1([1, 2, 3, 4]);
  disc list[4] int v12 = rot2([1, 2, 3, 4]);
  disc int         v13 = fa(1);
  disc int         v14 = fi(1);
  disc int         v15 = fw();
  disc int         v16 = fu1();
  disc int         v17 = fu2();
  disc int         v18 = fu3();
  disc int         v19 = fr();

  disc int       combi = v00 + v01 + v02 + v03 + v04 + v05 + v06 + v07 + v08 +
                         floor(v09) + v10 + v11[0] + v12[0] + v13 + v14 + v15 +
                         v16 + v17 + v18 + v19;

  print combi;

  location:
    initial;
end
