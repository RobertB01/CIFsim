//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

@@doc("First doc\nwith multiple lines.")
@@doc("Second doc line 1.", "Second doc line 2.")

input bool i1;

@doc("single line doc")
input bool i2;

@doc("doc with multiple\nlines " + "of\n text")
input bool i3;

@doc(fmt("%s", "some doc"))
input bool i4;

@doc("First doc.")
@doc("Second doc line 1.", "Second doc line 2.")
input bool i5;

controllable e;

@doc("discvarsAut") // Annotations on automata are ignored.
automaton discvars:
  disc bool d1;

  @doc("single line doc")
  disc bool d2;

  @doc("doc with multiple\nlines " + "of\n text")
  disc bool d3;

  @doc(fmt("%s", "some doc"))
  disc bool d4;

  @doc("First doc.")
  @doc("Second doc line 1.", "Second doc line 2.")
  disc bool d5;

  location:
    initial;
    edge e when d1 or d2 or d3 or d4 or d5;
end

automaton contvars:
  cont c1 der 1;

  @doc("single line doc")
  cont c2 der 2;

  @doc("doc with multiple\nlines " + "of\n text")
  cont c3 der 3;

  @doc(fmt("%s", "some doc"))
  cont c4 der 4;

  @doc("First doc.")
  @doc("Second doc line 1.", "Second doc line 2.")
  cont c5 der 5;

  location:
    initial;
    edge e when c1 > 0 or c2 > 0 or c3 > 0 or c4 > 0 or c5 > 0;
end

@doc("algVarsGroup") // Annotations on groups are ignored.
group algvars:
  alg int a1 = 1;

  @doc("single line doc")
  alg int a2 = 2;

  @doc("doc with multiple\nlines " + "of\n text")
  alg int a3 = 3;

  @doc(fmt("%s", "some doc"))
  alg int a4 = 4;

  @doc("First doc.")
  @doc("Second doc line 1.", "Second doc line 2.")
  alg int a5 = 5;
end

group constants:
  const int c1 = 1;

  @doc("single line doc")
  const int c2 = 2;

  @doc("doc with multiple\nlines " + "of\n text")
  const int c3 = 3;

  @doc(fmt("%s", "some doc"))
  const int c4 = 4;

  @doc("First doc.")
  @doc("Second doc line 1.", "Second doc line 2.")
  const int c5 = 5;
end

automaton events:
  controllable e1;

  @doc("single line doc")
  controllable e2;

  @doc("doc with multiple\nlines " + "of\n text")
  controllable e3;

  @doc(fmt("%s", "some doc"))
  controllable e4;

  @doc("First doc.")
  @doc("Second doc line 1.", "Second doc line 2.")
  controllable e5;

  location:
    initial;
    edge e1, e2, e3, e4, e5;
end

group enumsAndLits:
  @doc("enum") // Annotations on enumerations are lost, due to enumerations being merged into a single enumeration.
  enum E =
    l1,

    @doc("single line doc")
    l2,

    @doc("doc with multiple\nlines " + "of\n text")
    l3,

    @doc(fmt("%s", "some doc"))
    l4,

    @doc("First doc.")
    @doc("Second doc line 1.", "Second doc line 2.")
    l5;
end

group funcs:
  func bool func1(bool p):
    bool v1 = p;
    bool v2 = v1;
    return v2;
  end

  @doc("single line doc")
  func bool func2(
    @doc("single line doc")
    bool p
  ):
    @doc("single line doc")
    bool v1 = p;

    @doc("single line doc")
    bool v2 = v1;

    return v2;
  end

  @doc("doc with multiple\nlines " + "of\n text")
  func bool func3(
    @doc("doc with multiple\nlines " + "of\n text")
    bool p
  ):
    @doc("doc with multiple\nlines " + "of\n text")
    bool v1 = p;

    @doc("doc with multiple\nlines " + "of\n text")
    bool v2 = v1;

    return v2;
  end

  @doc(fmt("%s", "some doc"))
  func bool func4(
    @doc(fmt("%s", "some doc"))
    bool p
  ):
    @doc(fmt("%s", "some doc"))
    bool v1 = p;

    @doc(fmt("%s", "some doc"))
    bool v2 = v1;

    return v2;
  end

  @doc("First doc.")
  @doc("Second doc line 1.", "Second doc line 2.")
  func bool func5(
    @doc("First doc.")
    @doc("Second doc line 1.", "Second doc line 2.")
    bool p
  ):
    @doc("First doc.")
    @doc("Second doc line 1.", "Second doc line 2.")
    bool v1 = p;

    @doc("First doc.")
    @doc("Second doc line 1.", "Second doc line 2.")
    bool v2 = v1;

    return v2;
  end
end

group preconditions:
  // Set type, set literal, set subtraction, and size of set are all disallowed by preconditions.
  // But they are allowed for 'doc' annotations.
  @doc(fmt("%s", {1, 2} - {2, size({1})}))
  input bool i;
end
