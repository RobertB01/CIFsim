PROGRAM MAIN
VAR
    inp: LREAL;
    c: LREAL;
    preset_c: TIME;
    aut_r: LREAL;
    aut_b: BOOL;
    aut_i: DINT;
    aut_tii: TupleStruct;
    aut_i2: DINT;
    aut_i3: DINT;
    aut: aut_location;
    firstRun: BOOL := TRUE;
END_VAR
VAR_TEMP
    curValue: LREAL;
    current_aut: aut_location;
    current_aut_b: BOOL;
    current_aut_i: DINT;
    current_aut_r: LREAL;
    current_aut_tii: TupleStruct;
    edge_aut_1: DINT;
    eventEnabled: BOOL;
    ifResult: BOOL;
    isProgress: BOOL;
    litStruct: TupleStruct;
    timeOut: BOOL;
END_VAR

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    c := 0.0;
    (* Reset timer of "c". *)
    preset_c := c;
    ton_c(IN := FALSE, PT := preset_c);
    ton_c(IN := TRUE, PT := preset_c);
    aut_r := 0.0;
    aut_b := FALSE;
    aut_i := 0;
    litStruct.field1 := 0;
    litStruct.field2 := 0;
    aut_tii := litStruct;
    aut_i2 := 1;
    aut_i3 := 1;
    aut := aut_l1;
ELSE
    (* Update remaining time of "c". *)
    ton_c(IN := TRUE, PT := preset_c, Q => timeOut, ET => curValue);
    c := SEL(timeOut, preset_c - curValue, 0.0);
END_IF;

(* --- Process all events. ------------------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform event "aut.e".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Testing edges of automaton "aut" to synchronize at event "aut.e".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     *   - Location "l1":
     *      - 1st edge in the location
     *      - 2nd edge in the location
     *      - 3rd edge in the location
     *      - 4th edge in the location
     *      - 5th edge in the location
     *      - 6th edge in the location
     *      - 7th edge in the location
     *      - 8th edge in the location
     *      - 9th edge in the location
     *      - 10th edge in the location
     *      - 11th edge in the location
     *      - 12th edge in the location
     *      - 13th edge in the location
     *      - 14th edge in the location
     *      - 15th edge in the location
     *      - 16th edge in the location
     *      - 17th edge in the location
     *      - 18th edge in the location
     *      - 19th edge in the location
     *      - 20th edge in the location
     *      - 21st edge in the location
     *      - 22nd edge in the location
     *      - 23rd edge in the location
     *      - 24th edge in the location
     *      - 25th edge in the location
     *      - 26th edge in the location
     *      - 27th edge in the location
     *      - 28th edge in the location
     *      - 29th edge in the location
     *      - 30th edge in the location
     *      - 31st edge in the location
     *      - 32nd edge in the location
     *      - 33rd edge in the location
     *      - 34th edge in the location
     *      - 35th edge in the location
     ***********)
    IF aut = aut_l1 THEN
        edge_aut_1 := 1;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 2;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 3;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 4;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 5;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 6;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 7;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 8;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 9;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 10;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 11;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 12;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 13;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 14;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 15;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 16;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 17;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 18;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 19;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 20;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 21;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 22;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 23;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 24;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 25;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 26;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 27;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 28;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 29;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 30;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 31;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 32;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 33;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 34;
    ELSIF aut = aut_l1 THEN
        edge_aut_1 := 35;
    ELSE
        (* The automaton has no edge with a true guard, skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.e" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_aut := aut;
        current_aut_b := aut_b;
        current_aut_i := aut_i;
        current_aut_r := aut_r;
        current_aut_tii := aut_tii;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "aut". *)
        IF edge_aut_1 = 1 THEN
            aut_r := inp;
        ELSIF edge_aut_1 = 2 THEN
            aut_r := inp + -1.0;
            aut := aut_l2;
        ELSIF edge_aut_1 = 3 THEN
            aut_r := DINT_TO_LREAL(current_aut_i);
        ELSIF edge_aut_1 = 4 THEN
            aut_b := NOT current_aut_b;
        ELSIF edge_aut_1 = 5 THEN
            aut_b := current_aut_b OR NOT current_aut_b;
        ELSIF edge_aut_1 = 6 THEN
            aut_r := DINT_TO_LREAL(current_aut_i) / DINT_TO_LREAL(current_aut_i);
        ELSIF edge_aut_1 = 7 THEN
            IF current_aut_b THEN
                ifResult := current_aut_b;
            ELSE
                ifResult := current_aut_b;
            END_IF;
            aut_b := ifResult;
        ELSIF edge_aut_1 = 8 THEN
            aut_i := current_aut_tii.field1;
        ELSIF edge_aut_1 = 9 THEN
            aut_r := ABS(current_aut_r);
        ELSIF edge_aut_1 = 10 THEN
            aut_r := current_aut_r ** (1.0 / 3.0);
        ELSIF edge_aut_1 = 11 THEN
            aut_r := EXP(current_aut_r);
        ELSIF edge_aut_1 = 12 THEN
            aut_r := LN(current_aut_r);
        ELSIF edge_aut_1 = 13 THEN
            aut_r := LOG(current_aut_r);
        ELSIF edge_aut_1 = 14 THEN
            aut_i := MIN(current_aut_i, current_aut_i);
        ELSIF edge_aut_1 = 15 THEN
            aut_r := MIN(DINT_TO_LREAL(current_aut_i), current_aut_r);
        ELSIF edge_aut_1 = 16 THEN
            aut_r := MIN(current_aut_r, DINT_TO_LREAL(current_aut_i));
        ELSIF edge_aut_1 = 17 THEN
            aut_r := MIN(current_aut_r, current_aut_r);
        ELSIF edge_aut_1 = 18 THEN
            aut_i := MAX(current_aut_i, current_aut_i);
        ELSIF edge_aut_1 = 19 THEN
            aut_r := MAX(DINT_TO_LREAL(current_aut_i), current_aut_r);
        ELSIF edge_aut_1 = 20 THEN
            aut_r := MAX(current_aut_r, DINT_TO_LREAL(current_aut_i));
        ELSIF edge_aut_1 = 21 THEN
            aut_r := MAX(current_aut_r, current_aut_r);
        ELSIF edge_aut_1 = 22 THEN
            aut_i := LREAL_TO_DINT(DINT_TO_LREAL(aut_i2) ** aut_i3);
        ELSIF edge_aut_1 = 23 THEN
            aut_r := DINT_TO_LREAL(current_aut_i) ** current_aut_i;
        ELSIF edge_aut_1 = 24 THEN
            aut_r := DINT_TO_LREAL(current_aut_i) ** current_aut_r;
        ELSIF edge_aut_1 = 25 THEN
            aut_r := current_aut_r ** current_aut_i;
        ELSIF edge_aut_1 = 26 THEN
            aut_r := current_aut_r ** current_aut_r;
        ELSIF edge_aut_1 = 27 THEN
            aut_r := SQRT(current_aut_r);
        ELSIF edge_aut_1 = 28 THEN
            aut_r := ASIN(current_aut_r);
        ELSIF edge_aut_1 = 29 THEN
            aut_r := ACOS(current_aut_r);
        ELSIF edge_aut_1 = 30 THEN
            aut_r := ATAN(current_aut_r);
        ELSIF edge_aut_1 = 31 THEN
            aut_r := SIN(current_aut_r);
        ELSIF edge_aut_1 = 32 THEN
            aut_r := COS(current_aut_r);
        ELSIF edge_aut_1 = 33 THEN
            aut_r := TAN(current_aut_r);
        ELSIF edge_aut_1 = 34 THEN
            litStruct.field1 := current_aut_i;
            litStruct.field2 := current_aut_i + 1;
            aut_tii := litStruct;
        ELSIF edge_aut_1 = 35 THEN
            aut_r := current_aut_r * 2.0;
            aut_i := current_aut_i + 1;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform event "aut.f".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Testing edges of automaton "aut" to synchronize at event "aut.f".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     *   - Location "l1":
     *      - 36th edge in the location
     *      - 37th edge in the location
     ***********)
    IF aut = aut_l1 AND (aut_b OR aut_b) THEN
        edge_aut_1 := 1;
    ELSIF aut = aut_l1 AND aut_b THEN
        edge_aut_1 := 2;
    ELSE
        (* The automaton has no edge with a true guard, skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.f" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* There are no assignments to perform for automata that must always synchronize. *)
        (* Automaton "aut" has no assignments to perform. *)
    END_IF;
END_WHILE;
END_PROGRAM
