ORGANIZATION_BLOCK MAIN
{ S7_Optimized_Access := 'true' }
    VAR_TEMP
        curValue: LREAL;
        current_aut: DINT;
        current_aut_b: BOOL;
        current_aut_i: DINT;
        current_aut_r: LREAL;
        current_aut_tii: TupleStruct;
        eventEnabled: BOOL;
        ifResult: BOOL;
        isProgress: BOOL;
        litStruct: TupleStruct;
        syncAutEdge: DINT;
        syncAutEdge__1: DINT;
        timeOut: BOOL;
    END_VAR

BEGIN
    (* --- Initialize state or update continuous variables. -------------------- *)
    IF firstRun THEN
        firstRun := FALSE;

        (* Initialize the state variables. *)
        "DB".c := 0.0;
        (* Reset timer of "c". *)
        "DB".preset_c := "DB".c;
        ton_c(IN := FALSE, PT := "DB".preset_c);
        ton_c(IN := TRUE, PT := "DB".preset_c);
        "DB".aut_r := 0.0;
        "DB".aut_b := FALSE;
        "DB".aut_i := 0;
        litStruct.field1 := 0;
        litStruct.field2 := 0;
        "DB".aut_tii := litStruct;
        "DB".aut_i2 := 1;
        "DB".aut_i3 := 1;
        "DB".aut := 0;
    ELSE
        (* Update remaining time of "c". *)
        ton_c(IN := TRUE, PT := "DB".preset_c, Q => timeOut, ET => curValue);
        "DB".c := SEL(timeOut, "DB".preset_c - curValue, 0.0);
    END_IF;

    (* --- Process all events. ------------------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (* Try to perform event "aut.e". *)
        eventEnabled := TRUE;
        IF "DB".aut = 0 THEN
            syncAutEdge := 1;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 2;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 3;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 4;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 5;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 6;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 7;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 8;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 9;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 10;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 11;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 12;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 13;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 14;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 15;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 16;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 17;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 18;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 19;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 20;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 21;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 22;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 23;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 24;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 25;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 26;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 27;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 28;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 29;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 30;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 31;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 32;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 33;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 34;
        ELSIF "DB".aut = 0 THEN
            syncAutEdge := 35;
        ELSE
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            isProgress := TRUE;
            current_aut := "DB".aut;
            current_aut_b := "DB".aut_b;
            current_aut_i := "DB".aut_i;
            current_aut_r := "DB".aut_r;
            current_aut_tii := "DB".aut_tii;
            IF syncAutEdge = 1 THEN
                "DB".aut_r := "DB".inp;
            ELSIF syncAutEdge = 2 THEN
                "DB".aut_r := "DB".inp + -1.0;
                "DB".aut := 1;
            ELSIF syncAutEdge = 3 THEN
                "DB".aut_r := DINT_TO_LREAL(current_aut_i);
            ELSIF syncAutEdge = 4 THEN
                "DB".aut_b := NOT current_aut_b;
            ELSIF syncAutEdge = 5 THEN
                "DB".aut_b := current_aut_b OR NOT current_aut_b;
            ELSIF syncAutEdge = 6 THEN
                "DB".aut_r := DINT_TO_LREAL(current_aut_i) / DINT_TO_LREAL(current_aut_i);
            ELSIF syncAutEdge = 7 THEN
                IF current_aut_b THEN
                    ifResult := current_aut_b;
                ELSE
                    ifResult := current_aut_b;
                END_IF;
                "DB".aut_b := ifResult;
            ELSIF syncAutEdge = 8 THEN
                "DB".aut_i := current_aut_tii.field1;
            ELSIF syncAutEdge = 9 THEN
                "DB".aut_r := ABS(current_aut_r);
            ELSIF syncAutEdge = 10 THEN
                "DB".aut_r := current_aut_r ** (1.0 / 3.0);
            ELSIF syncAutEdge = 11 THEN
                "DB".aut_r := EXP(current_aut_r);
            ELSIF syncAutEdge = 12 THEN
                "DB".aut_r := LN(current_aut_r);
            ELSIF syncAutEdge = 13 THEN
                "DB".aut_r := LN(current_aut_r) / LN(10.0);
            ELSIF syncAutEdge = 14 THEN
                "DB".aut_i := MIN(current_aut_i, current_aut_i);
            ELSIF syncAutEdge = 15 THEN
                "DB".aut_r := MIN(DINT_TO_LREAL(current_aut_i), current_aut_r);
            ELSIF syncAutEdge = 16 THEN
                "DB".aut_r := MIN(current_aut_r, DINT_TO_LREAL(current_aut_i));
            ELSIF syncAutEdge = 17 THEN
                "DB".aut_r := MIN(current_aut_r, current_aut_r);
            ELSIF syncAutEdge = 18 THEN
                "DB".aut_i := MAX(current_aut_i, current_aut_i);
            ELSIF syncAutEdge = 19 THEN
                "DB".aut_r := MAX(DINT_TO_LREAL(current_aut_i), current_aut_r);
            ELSIF syncAutEdge = 20 THEN
                "DB".aut_r := MAX(current_aut_r, DINT_TO_LREAL(current_aut_i));
            ELSIF syncAutEdge = 21 THEN
                "DB".aut_r := MAX(current_aut_r, current_aut_r);
            ELSIF syncAutEdge = 22 THEN
                "DB".aut_i := LREAL_TO_DINT(DINT_TO_LREAL("DB".aut_i2) ** "DB".aut_i3);
            ELSIF syncAutEdge = 23 THEN
                "DB".aut_r := DINT_TO_LREAL(current_aut_i) ** current_aut_i;
            ELSIF syncAutEdge = 24 THEN
                "DB".aut_r := DINT_TO_LREAL(current_aut_i) ** current_aut_r;
            ELSIF syncAutEdge = 25 THEN
                "DB".aut_r := current_aut_r ** current_aut_i;
            ELSIF syncAutEdge = 26 THEN
                "DB".aut_r := current_aut_r ** current_aut_r;
            ELSIF syncAutEdge = 27 THEN
                "DB".aut_r := SQRT(current_aut_r);
            ELSIF syncAutEdge = 28 THEN
                "DB".aut_r := ASIN(current_aut_r);
            ELSIF syncAutEdge = 29 THEN
                "DB".aut_r := ACOS(current_aut_r);
            ELSIF syncAutEdge = 30 THEN
                "DB".aut_r := ATAN(current_aut_r);
            ELSIF syncAutEdge = 31 THEN
                "DB".aut_r := SIN(current_aut_r);
            ELSIF syncAutEdge = 32 THEN
                "DB".aut_r := COS(current_aut_r);
            ELSIF syncAutEdge = 33 THEN
                "DB".aut_r := TAN(current_aut_r);
            ELSIF syncAutEdge = 34 THEN
                litStruct.field1 := current_aut_i;
                litStruct.field2 := current_aut_i + 1;
                "DB".aut_tii := litStruct;
            ELSIF syncAutEdge = 35 THEN
                "DB".aut_r := current_aut_r * 2.0;
                "DB".aut_i := current_aut_i + 1;
            END_IF;
        END_IF;

        (* Try to perform event "aut.f". *)
        eventEnabled := TRUE;
        IF "DB".aut = 0 AND ("DB".aut_b OR "DB".aut_b) THEN
            syncAutEdge__1 := 1;
        ELSIF "DB".aut = 0 AND "DB".aut_b THEN
            syncAutEdge__1 := 2;
        ELSE
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            isProgress := TRUE;
        END_IF;
    END_WHILE;
END_ORGANIZATION_BLOCK
