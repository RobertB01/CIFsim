FUNCTION tryEvent_button_release: BOOL
{ S7_Optimized_Access := 'false' }
    VAR_IN_OUT
        isProgress: BOOL;
    END_VAR
    VAR_TEMP
        current_hw_button: BOOL;
        current_sup: BYTE;
        edge_hw_button: BOOL;
        edge_sup: BYTE;
        eventEnabled: BOOL;
        dummyVar1: DINT;
        dummyVar2: DINT;
        dummyVar3: DINT;
        dummyVar4: DINT;
        dummyVar5: DINT;
    END_VAR

BEGIN
    (*************************************************************
     * Try to perform uncontrollable event "button.release".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_button" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "button.release".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s2":
     *   - 2nd edge in the location
     * - Location "s3":
     *   - 2nd edge in the location
     * - Location "s6":
     *   - 2nd edge in the location
     * - Location "s8":
     *   - 2nd edge in the location
     * - Location "s10":
     *   - 1st edge in the location
     ***********)
    IF "DB".sup = sup_s2 THEN
        edge_sup := 0;
    ELSIF "DB".sup = sup_s3 THEN
        edge_sup := 1;
    ELSIF "DB".sup = sup_s6 THEN
        edge_sup := 2;
    ELSIF "DB".sup = sup_s8 THEN
        edge_sup := 3;
    ELSIF "DB".sup = sup_s10 THEN
        edge_sup := 4;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_button" to synchronize for event "button.release".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Pushed":
         *   - 1st edge in the location
         ***********)
        IF "DB".hw_button = hw_button_Pushed AND (NOT "DB".hw_button_bit) THEN
            edge_hw_button := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "button.release" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_button := "DB".hw_button;
        current_sup := "DB".sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 2nd edge in location "sup.s2". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s4;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 2nd edge in location "sup.s3". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s5;
        ELSIF edge_sup = 2 THEN
            (* Perform assignments of the 2nd edge in location "sup.s6". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s7;
        ELSIF edge_sup = 3 THEN
            (* Perform assignments of the 2nd edge in location "sup.s8". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s9;
        ELSIF edge_sup = 4 THEN
            (* Perform assignments of the 1st edge in location "sup.s10". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s1;
        END_IF;
        (* Perform assignments of automaton "hw_button". *)
        IF edge_hw_button = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_button.Pushed". *)
            (* Perform update of current location of automaton "hw_button". *)
            "DB".hw_button := hw_button_Released;
        END_IF;
    END_IF;
    tryEvent_button_release := isProgress;
    RETURN;
END_FUNCTION
