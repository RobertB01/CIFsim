FUNCTION tryEvent_lamp_off: BOOL
{ S7_Optimized_Access := 'false' }
    VAR_IN_OUT
        isProgress: BOOL;
    END_VAR
    VAR_TEMP
        current_hw_lamp: BOOL;
        current_sup: BYTE;
        edge_hw_lamp: BOOL;
        edge_sup: BYTE;
        eventEnabled: BOOL;
        dummyVar1: DINT;
        dummyVar2: DINT;
        dummyVar3: DINT;
        dummyVar4: DINT;
        dummyVar5: DINT;
    END_VAR

BEGIN
    (*************************************************************
     * Try to perform controllable event "lamp.off".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_lamp" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "lamp.off".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s8":
     *   - 1st edge in the location
     * - Location "s9":
     *   - 1st edge in the location
     ***********)
    IF "DB".sup = sup_s8 THEN
        edge_sup := 0;
    ELSIF "DB".sup = sup_s9 THEN
        edge_sup := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_lamp" to synchronize for event "lamp.off".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "On":
         *   - 1st edge in the location
         ***********)
        IF "DB".hw_lamp = hw_lamp_On THEN
            edge_hw_lamp := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.off" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_lamp := "DB".hw_lamp;
        current_sup := "DB".sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s8". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s10;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s9". *)
            (* Perform update of current location of automaton "sup". *)
            "DB".sup := sup_s1;
        END_IF;
        (* Perform assignments of automaton "hw_lamp". *)
        IF edge_hw_lamp = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_lamp.On". *)
            (* Perform update of current location of automaton "hw_lamp". *)
            "DB".hw_lamp := hw_lamp_Off;
        END_IF;
    END_IF;
    tryEvent_lamp_off := isProgress;
    RETURN;
END_FUNCTION
