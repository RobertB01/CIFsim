ORGANIZATION_BLOCK MAIN
{ S7_Optimized_Access := 'false' }
    VAR_TEMP
        current_p_x: DINT;
        current_p_x_1: DINT;
        edge_p_1: DINT;
        eventEnabled: BOOL;
        isProgress: BOOL;
    END_VAR

BEGIN
    (* Header text file for:
     *  -> (-*-) CIF PLC code generator.
     *)

    (* --- Initialize state. --------------------------------------------------- *)
    IF "DB".firstRun THEN
        "DB".firstRun := FALSE;

        (* Initialize the state variables. *)
        (* Initializing discrete variable "p.x". *)
        "DB".p_x := 5;
    END_IF;

    (* --- Process uncontrollable events. -------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (*************************************************************
         * Try to perform uncontrollable event "u".
         *
         * - Automaton "p" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Testing edge of automaton "p" to synchronize for event "u".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location:
         *   - 2nd edge in the location
         ***********)
        IF TRUE THEN
            edge_p_1 := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "u" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_p_x := "DB".p_x;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "p". *)
            IF edge_p_1 = 1 THEN
                (* Perform assignments of the 2nd edge of automaton "p". *)
                (* Perform update of discrete variable "p.x". *)
                "DB".p_x := 11 - current_p_x;
            END_IF;
        END_IF;
    END_WHILE;

    (* --- Process controllable events. ---------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (*************************************************************
         * Try to perform controllable event "e".
         *
         * - Automaton "p" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Testing edge of automaton "p" to synchronize for event "e".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location:
         *   - 1st edge in the location
         ***********)
        IF TRUE THEN
            edge_p_1 := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "e" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_p_x_1 := "DB".p_x;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "p". *)
            IF edge_p_1 = 1 THEN
                (* Perform assignments of the 1st edge of automaton "p". *)
                (* Perform update of discrete variable "p.x". *)
                "DB".p_x := 7;
            END_IF;
        END_IF;
    END_WHILE;
END_ORGANIZATION_BLOCK
