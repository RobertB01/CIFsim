PROGRAM MAIN
VAR
    timer_t: REAL;
    preset_timer_t: TIME;
    timer_1: DINT;
    sup: DINT;
    hw_button_bit: BOOL;
    hw_button_bot: DINT;
    hw_button_bat: REAL;
    hw_button_r: REAL;
    hw_button: DINT;
    hw_lamp_bit: BOOL;
    hw_lamp: DINT;
    firstRun: BOOL := TRUE;
END_VAR
VAR_TEMP
    curValue: TIME;
    current_hw_button: DINT;
    current_hw_button_1: DINT;
    current_hw_button_r: REAL;
    current_hw_lamp: DINT;
    current_hw_lamp_1: DINT;
    current_hw_lamp_bit: BOOL;
    current_hw_lamp_bit_1: BOOL;
    current_sup: DINT;
    current_sup_1: DINT;
    current_sup_2: DINT;
    current_sup_3: DINT;
    current_sup_4: DINT;
    current_sup_5: DINT;
    current_timer: DINT;
    current_timer_1: DINT;
    current_timer_t: REAL;
    edge_hw_button: BOOL;
    edge_hw_lamp: BOOL;
    edge_sup: DINT;
    edge_timer: BOOL;
    eventEnabled: BOOL;
    isProgress: BOOL;
    timeOut: BOOL;
END_VAR

(* Header text file for:
 *  -> (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * Automaton "hw_button":
 * - Current location of automaton "hw_button".
 * - Input variable "hw_button.bat".
 * - Input variable "hw_button.bit".
 * - Input variable "hw_button.bot".
 * - Discrete variable "hw_button.r".
 *
 * - PLC edge selection variable "edge_hw_button".
 *
 * - Uncontrollable event "button.push".
 * - Uncontrollable event "button.release".
 *
 * - No use of controllable events.
 *
 * Automaton "hw_lamp":
 * - Current location of automaton "hw_lamp".
 * - Discrete variable "hw_lamp.bit".
 *
 * - PLC edge selection variable "edge_hw_lamp".
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "lamp.off".
 * - Controllable event "lamp.on".
 *
 * Automaton "sup":
 * - Current location of automaton "sup".
 *
 * - PLC edge selection variable "edge_sup".
 *
 * - Uncontrollable event "button.push".
 * - Uncontrollable event "button.release".
 * - Uncontrollable event "timer.timeout".
 *
 * - Controllable event "lamp.off".
 * - Controllable event "lamp.on".
 * - Controllable event "timer.start".
 *
 * Automaton "timer":
 * - Current location of automaton "timer".
 * - Continuous variable "timer.t".
 *
 * - PLC edge selection variable "edge_timer".
 *
 * - Uncontrollable event "timer.timeout".
 *
 * - Controllable event "timer.start".
 *
 *------------------------------------------------------ *)

(* --- Read PLC inputs. ---------------------------------------------------- *)
(* Read PLC input and write it to input variable "hw_button.bit". *)
hw_button_bit := in_hw_button_bit;
(* Read PLC input and write it to input variable "hw_button.bot". *)
hw_button_bot := in_hw_button_bot;
(* Read PLC input and write it to input variable "hw_button.bat". *)
hw_button_bat := in_hw_button_bat;

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    (* Initialize continuous variable "timer.t". *)
    timer_t := 0.0;
    (* Reset timer of "timer_t". *)
    preset_timer_t := DINT_TO_TIME(REAL_TO_DINT(timer_t * 1000.0));
    ton_timer_t(IN := FALSE, PT := preset_timer_t);
    ton_timer_t(IN := TRUE, PT := preset_timer_t);
    (* Initialize current location of automaton "timer". *)
    timer_1 := 0;
    (* Initialize current location of automaton "sup". *)
    sup := 0;
    (* Initialize discrete variable "hw_button.r". *)
    hw_button_r := 0.0;
    (* Initialize current location of automaton "hw_button". *)
    hw_button := 0;
    (* Initialize discrete variable "hw_lamp.bit". *)
    hw_lamp_bit := FALSE;
    (* Initialize current location of automaton "hw_lamp". *)
    hw_lamp := 0;
ELSE
    (* Update remaining time of continuous variable "timer.t". *)
    ton_timer_t(IN := TRUE, PT := preset_timer_t, Q => timeOut, ET => curValue);
    timer_t := SEL_REAL(timeOut, MAX(DINT_TO_REAL(TIME_TO_DINT(preset_timer_t - curValue)) / 1000.0, 0.0), 0.0);
END_IF;

(* --- Process uncontrollable events. -------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform uncontrollable event "timer.timeout".
     *
     * - Automaton "timer" must always synchronize.
     * - Automaton "sup" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "timer" to synchronize for event "timer.timeout".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location "Running":
     *   - 1st edge in the location
     ***********)
    IF timer_1 = 1 AND timer_t <= 0.0 THEN
        edge_timer := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edges of automaton "sup" to synchronize for event "timer.timeout".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s6":
         *   - 1st edge in the location
         * - Location "s7":
         *   - 1st edge in the location
         ***********)
        IF sup = 5 THEN
            edge_sup := 0;
        ELSIF sup = 6 THEN
            edge_sup := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "timer.timeout" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_sup := sup;
        current_timer := timer_1;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "timer". *)
        IF edge_timer = 0 THEN
            (* Perform assignments of the 1st edge in location "timer.Running". *)
            (* Perform update of current location of automaton "timer". *)
            timer_1 := 0;
        END_IF;
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s6". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 7;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s7". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 8;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform uncontrollable event "button.push".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_button" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "button.push".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s1":
     *   - 1st edge in the location
     * - Location "s4":
     *   - 2nd edge in the location
     * - Location "s5":
     *   - 2nd edge in the location
     * - Location "s7":
     *   - 2nd edge in the location
     * - Location "s9":
     *   - 2nd edge in the location
     ***********)
    IF sup = 0 THEN
        edge_sup := 0;
    ELSIF sup = 3 THEN
        edge_sup := 1;
    ELSIF sup = 4 THEN
        edge_sup := 2;
    ELSIF sup = 6 THEN
        edge_sup := 3;
    ELSIF sup = 8 THEN
        edge_sup := 4;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_button" to synchronize for event "button.push".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Released":
         *   - 1st edge in the location
         ***********)
        IF hw_button = 0 AND hw_button_bit THEN
            edge_hw_button := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "button.push" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_button := hw_button;
        current_hw_button_r := hw_button_r;
        current_sup_1 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s1". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 1;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 2nd edge in location "sup.s4". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 1;
        ELSIF edge_sup = 2 THEN
            (* Perform assignments of the 2nd edge in location "sup.s5". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 2;
        ELSIF edge_sup = 3 THEN
            (* Perform assignments of the 2nd edge in location "sup.s7". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 5;
        ELSIF edge_sup = 4 THEN
            (* Perform assignments of the 2nd edge in location "sup.s9". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 7;
        END_IF;
        (* Perform assignments of automaton "hw_button". *)
        IF edge_hw_button = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_button.Released". *)
            (* Perform update of discrete variable "hw_button.r". *)
            hw_button_r := hw_button_bat + DINT_TO_REAL(hw_button_bot);
            (* Perform update of current location of automaton "hw_button". *)
            hw_button := 1;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform uncontrollable event "button.release".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_button" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "button.release".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s2":
     *   - 2nd edge in the location
     * - Location "s3":
     *   - 2nd edge in the location
     * - Location "s6":
     *   - 2nd edge in the location
     * - Location "s8":
     *   - 2nd edge in the location
     * - Location "s10":
     *   - 1st edge in the location
     ***********)
    IF sup = 1 THEN
        edge_sup := 0;
    ELSIF sup = 2 THEN
        edge_sup := 1;
    ELSIF sup = 5 THEN
        edge_sup := 2;
    ELSIF sup = 7 THEN
        edge_sup := 3;
    ELSIF sup = 9 THEN
        edge_sup := 4;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_button" to synchronize for event "button.release".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Pushed":
         *   - 1st edge in the location
         ***********)
        IF hw_button = 1 AND (NOT hw_button_bit) THEN
            edge_hw_button := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "button.release" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_button_1 := hw_button;
        current_sup_2 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 2nd edge in location "sup.s2". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 3;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 2nd edge in location "sup.s3". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 4;
        ELSIF edge_sup = 2 THEN
            (* Perform assignments of the 2nd edge in location "sup.s6". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 6;
        ELSIF edge_sup = 3 THEN
            (* Perform assignments of the 2nd edge in location "sup.s8". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 8;
        ELSIF edge_sup = 4 THEN
            (* Perform assignments of the 1st edge in location "sup.s10". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 0;
        END_IF;
        (* Perform assignments of automaton "hw_button". *)
        IF edge_hw_button = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_button.Pushed". *)
            (* Perform update of current location of automaton "hw_button". *)
            hw_button := 0;
        END_IF;
    END_IF;
END_WHILE;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "timer.start".
     *
     * - Automaton "timer" must always synchronize.
     * - Automaton "sup" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "timer" to synchronize for event "timer.start".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location "Idle":
     *   - 1st edge in the location
     ***********)
    IF timer_1 = 0 THEN
        edge_timer := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edges of automaton "sup" to synchronize for event "timer.start".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s3":
         *   - 1st edge in the location
         * - Location "s5":
         *   - 1st edge in the location
         ***********)
        IF sup = 2 THEN
            edge_sup := 0;
        ELSIF sup = 4 THEN
            edge_sup := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "timer.start" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_sup_3 := sup;
        current_timer_1 := timer_1;
        current_timer_t := timer_t;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "timer". *)
        IF edge_timer = 0 THEN
            (* Perform assignments of the 1st edge in location "timer.Idle". *)
            (* Perform update of continuous variable "timer.t". *)
            timer_t := 3.0;
            (* Reset timer of "timer_t". *)
            preset_timer_t := DINT_TO_TIME(REAL_TO_DINT(timer_t * 1000.0));
            ton_timer_t(IN := FALSE, PT := preset_timer_t);
            ton_timer_t(IN := TRUE, PT := preset_timer_t);
            (* Perform update of current location of automaton "timer". *)
            timer_1 := 1;
        END_IF;
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s3". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 5;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s5". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 6;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "lamp.on".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_lamp" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "lamp.on".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s2":
     *   - 1st edge in the location
     * - Location "s4":
     *   - 1st edge in the location
     ***********)
    IF sup = 1 THEN
        edge_sup := 0;
    ELSIF sup = 3 THEN
        edge_sup := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_lamp" to synchronize for event "lamp.on".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Off":
         *   - 1st edge in the location
         ***********)
        IF hw_lamp = 0 THEN
            edge_hw_lamp := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.on" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_lamp := hw_lamp;
        current_hw_lamp_bit := hw_lamp_bit;
        current_sup_4 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s2". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 2;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s4". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 4;
        END_IF;
        (* Perform assignments of automaton "hw_lamp". *)
        IF edge_hw_lamp = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_lamp.Off". *)
            (* Perform update of discrete variable "hw_lamp.bit". *)
            hw_lamp_bit := TRUE;
            (* Perform update of current location of automaton "hw_lamp". *)
            hw_lamp := 1;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "lamp.off".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_lamp" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "lamp.off".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s8":
     *   - 1st edge in the location
     * - Location "s9":
     *   - 1st edge in the location
     ***********)
    IF sup = 7 THEN
        edge_sup := 0;
    ELSIF sup = 8 THEN
        edge_sup := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_lamp" to synchronize for event "lamp.off".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "On":
         *   - 1st edge in the location
         ***********)
        IF hw_lamp = 1 THEN
            edge_hw_lamp := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.off" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_lamp_1 := hw_lamp;
        current_hw_lamp_bit_1 := hw_lamp_bit;
        current_sup_5 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s8". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 9;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s9". *)
            (* Perform update of current location of automaton "sup". *)
            sup := 0;
        END_IF;
        (* Perform assignments of automaton "hw_lamp". *)
        IF edge_hw_lamp = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_lamp.On". *)
            (* Perform update of discrete variable "hw_lamp.bit". *)
            hw_lamp_bit := FALSE;
            (* Perform update of current location of automaton "hw_lamp". *)
            hw_lamp := 0;
        END_IF;
    END_IF;
END_WHILE;

(* --- Write PLC outputs. -------------------------------------------------- *)
(* Write discrete variable "hw_lamp.bit" to PLC output. *)
out_hw_lamp_bit := hw_lamp_bit;
END_PROGRAM
