PROGRAM MAIN
VAR
    p_x: DINT;
    p_t: LREAL;
    preset_p_t: TIME;
    firstRun: BOOL := TRUE;
END_VAR
VAR_TEMP
    curValue: LREAL;
    current_p_t: LREAL;
    edge_p_1: DINT;
    eventEnabled: BOOL;
    isProgress: BOOL;
    timeOut: BOOL;
END_VAR

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    p_x := 5;
    p_t := 0.0;
    (* Reset timer of "p_t". *)
    preset_p_t := p_t;
    ton_p_t(IN := FALSE, PT := preset_p_t);
    ton_p_t(IN := TRUE, PT := preset_p_t);
ELSE
    (* Update remaining time of "p_t". *)
    ton_p_t(IN := TRUE, PT := preset_p_t, Q => timeOut, ET => curValue);
    p_t := SEL(timeOut, preset_p_t - curValue, 0.0);
END_IF;

(* --- Process all events. ------------------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform event "e".
     *
     * - Automaton "p" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Testing edge of automaton "p" to synchronize for event "e".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 1st edge in the location
     ***********)
    IF p_t <= 1.0 AND p_x = 5 THEN
        edge_p_1 := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "e" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_p_t := p_t;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "p". *)
        IF edge_p_1 = 1 THEN
            (* Perform assignments of the 1st edge of automaton "p". *)
            p_t := 7.0;
            (* Reset timer of "p_t". *)
            preset_p_t := p_t;
            ton_p_t(IN := FALSE, PT := preset_p_t);
            ton_p_t(IN := TRUE, PT := preset_p_t);
        END_IF;
    END_IF;
END_WHILE;
END_PROGRAM
