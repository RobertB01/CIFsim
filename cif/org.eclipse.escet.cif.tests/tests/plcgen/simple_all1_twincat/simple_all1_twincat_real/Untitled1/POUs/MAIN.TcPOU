<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<TcPlcObject ProductVersion="3.1.0.18" Version="1.1.0.1">
  <POU Name="MAIN">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
    g_inp: DINT;
    p_b: BOOL;
    p_x: DINT;
    p_y: LREAL;
    p_ve: g_E;
    p_v1: DINT;
    p_v2: TupleStruct;
    p_v3: TupleStruct_1;
    p_tv: TupleStruct_2;
    p_j: DINT;
    p_r: LREAL;
    p_t: LREAL;
    preset_p_t: TIME;
    p: p_location;
    firstRun: BOOL := TRUE;
END_VAR
VAR_TEMP
    curValue: LREAL;
    current_p: p_location;
    current_p_b: BOOL;
    current_p_j: DINT;
    current_p_r: LREAL;
    current_p_tv: TupleStruct_2;
    current_p_v3: TupleStruct_1;
    current_p_ve: g_E;
    current_p_x: DINT;
    edge_p_1: DINT;
    eventEnabled: BOOL;
    isProgress: BOOL;
    litStruct: TupleStruct;
    litStruct_1: TupleStruct_1;
    litStruct_2: TupleStruct_2;
    rightValue: TupleStruct_2;
    timeOut: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    p_b := TRUE;
    p_x := 0;
    p_y := 1.23;
    p_ve := g_LIT1;
    p_v1 := 0;
    litStruct.field1 := 0.0;
    litStruct.field2 := 0.0;
    p_v2 := litStruct;
    litStruct.field1 := 0.0;
    litStruct.field2 := 0.0;
    litStruct_1.field1 := litStruct;
    litStruct_1.field2 := 0.0;
    p_v3 := litStruct_1;
    litStruct_2.field1 := 0;
    litStruct_2.field2 := 0;
    p_tv := litStruct_2;
    p_j := 0;
    p_r := 1000000.0;
    p_t := 0.0;
    (* Reset timer of "p_t". *)
    preset_p_t := p_t;
    ton_p_t(IN := FALSE, PT := preset_p_t);
    ton_p_t(IN := TRUE, PT := preset_p_t);
    p := p_l1;
ELSE
    (* Update remaining time of "p_t". *)
    ton_p_t(IN := TRUE, PT := preset_p_t, Q => timeOut, ET => curValue);
    p_t := SEL(timeOut, preset_p_t - curValue, 0.0);
END_IF;

(* --- Process all events. ------------------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform event "p.evt".
     *
     * - Automaton "p" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Testing edges of automaton "p" to synchronize for event "p.evt".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "l1":
     *   - 1st edge in the location
     * - Location "l6":
     *   - 1st edge in the location
     * - Location "l7":
     *   - 1st edge in the location
     * - Location "l8":
     *   - 1st edge in the location
     * - Location "l9":
     *   - 1st edge in the location
     * - Location "l10":
     *   - 1st edge in the location
     * - Location "l11":
     *   - 1st edge in the location
     * - Location "l12":
     *   - 1st edge in the location
     * - Location "l13":
     *   - 1st edge in the location
     * - Location "l14":
     *   - 1st edge in the location
     * - Location "l15":
     *   - 1st edge in the location
     ***********)
    IF p = p_l1 THEN
        edge_p_1 := 1;
    ELSIF p = p_l6 THEN
        edge_p_1 := 2;
    ELSIF p = p_l7 THEN
        edge_p_1 := 3;
    ELSIF p = p_l8 THEN
        edge_p_1 := 4;
    ELSIF p = p_l9 THEN
        edge_p_1 := 5;
    ELSIF p = p_l10 THEN
        edge_p_1 := 6;
    ELSIF p = p_l11 THEN
        edge_p_1 := 7;
    ELSIF p = p_l12 THEN
        edge_p_1 := 8;
    ELSIF p = p_l13 THEN
        edge_p_1 := 9;
    ELSIF p = p_l14 THEN
        edge_p_1 := 10;
    ELSIF p = p_l15 THEN
        edge_p_1 := 11;
    ELSE
        (* The automaton has no edge with a true guard. Skip code to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "p.evt" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_p := p;
        current_p_b := p_b;
        current_p_j := p_j;
        current_p_r := p_r;
        current_p_tv := p_tv;
        current_p_v3 := p_v3;
        current_p_ve := p_ve;
        current_p_x := p_x;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "p". *)
        IF edge_p_1 = 1 THEN
            litStruct_2.field1 := 1;
            litStruct_2.field2 := 2;
            p_tv := litStruct_2;
            p := p_l6;
        ELSIF edge_p_1 = 2 THEN
            p_x := 3;
            p_j := 4;
            p := p_l7;
        ELSIF edge_p_1 = 3 THEN
            rightValue := current_p_tv;
            p_x := rightValue.field1;
            p_j := rightValue.field2;
            p := p_l8;
        ELSIF edge_p_1 = 4 THEN
            p_tv.field1 := 5;
            p := p_l9;
        ELSIF edge_p_1 = 5 THEN
            p_tv.field2 := 6;
            p_j := 7;
            p := p_l10;
        ELSIF edge_p_1 = 6 THEN
            p_v3.field1.field2 := 7.8;
            p := p_l11;
        ELSIF edge_p_1 = 7 THEN
            litStruct.field1 := 1.2;
            litStruct.field2 := 3.4;
            litStruct_1.field1 := litStruct;
            litStruct_1.field2 := 5.6;
            p_v3 := litStruct_1;
            p := p_l12;
        ELSIF edge_p_1 = 8 THEN
            p_j := current_p_j + 1;
            p := p_l13;
        ELSIF edge_p_1 = 9 THEN
            p_b := FALSE;
            p := p_l14;
        ELSIF edge_p_1 = 10 THEN
            IF NOT current_p_b THEN
                p_ve := g_LIT2;
            END_IF;
            p := p_l15;
        ELSIF edge_p_1 = 11 THEN
            p_r := DINT_TO_LREAL(g_inp) + 10.0;
            p := p_l16;
        END_IF;
    END_IF;
END_WHILE;]]></ST>
    </Implementation>
    <ObjectProperties/>
  </POU>
</TcPlcObject>
