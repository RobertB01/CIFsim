<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T00:00:00Z" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="p_x">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="p_t">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="preset_p_t">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="firstRun">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="loopsKilled">
              <type>
                <INT/>
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="loopCount">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="curValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="current_p_t">
              <type>
                <REAL/>
              </type>
            </variable>
            <variable name="edge_p_1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="eventEnabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="isProgress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="timeOut">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Header text file for:
 *  -&gt; (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * ----
 * Automaton "p":
 *
 * - Continuous variable "p.t".
 * - Discrete variable "p.x".
 *
 * - PLC edge selection variable "edge_p".
 *
 * - Uncontrollable event "e".
 *
 * - No use of controllable events.
 *------------------------------------------------------ *)

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;
    loopsKilled := 0;

    (* Initialize the state variables. *)
    (* Initialize discrete variable "p.x". *)
    p_x := 5;
    (* Initialize continuous variable "p.t". *)
    p_t := 0.0;
    (* Reset timer of "p_t". *)
    preset_p_t := LINT_TO_TIME(REAL_TO_LINT(p_t * 1000.0));
    ton_p_t(IN := FALSE, PT := preset_p_t);
    ton_p_t(IN := TRUE, PT := preset_p_t);
ELSE
    (* Update remaining time of continuous variable "p.t". *)
    ton_p_t(IN := TRUE, PT := preset_p_t, Q =&gt; timeOut, ET =&gt; curValue);
    p_t := SEL_REAL(timeOut, MAX(LINT_TO_REAL(TIME_TO_LINT(preset_p_t - curValue)) / 1000.0, 0.0), 0.0);
END_IF;

(* --- Process uncontrollable events. -------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
(* Track the number of iterations and abort if there are too many. *)
loopCount := 0;
WHILE isProgress AND loopCount &lt; 101 DO
    loopCount := loopCount + 1;
    isProgress := FALSE;

    (*************************************************************
     * Try to perform uncontrollable event "e".
     *
     * - Automaton "p" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "p" to synchronize for event "e".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 1st edge in the location
     ***********)
    IF p_t &lt;= 1.0 AND p_x = 5 THEN
        edge_p_1 := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "e" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_p_t := p_t;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "p". *)
        IF edge_p_1 = 1 THEN
            (* Perform assignments of the 1st edge of automaton "p". *)
            (* Perform update of continuous variable "p.t". *)
            p_t := 7.0;
            (* Reset timer of "p_t". *)
            preset_p_t := LINT_TO_TIME(REAL_TO_LINT(p_t * 1000.0));
            ton_p_t(IN := FALSE, PT := preset_p_t);
            ton_p_t(IN := TRUE, PT := preset_p_t);
        END_IF;
    END_IF;
END_WHILE;
(* Register the first 9999 aborted loops. *)
IF loopCount &gt;= 101 THEN
    loopsKilled := MIN(loopsKilled + 1, 9999);
END_IF;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Untitled1">
        <resource name="Untitled1">
          <task interval="PT0.000S" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"/>
              </documentation>
            </pouInstance>
          </task>
          <globalVars constant="false" name="TIMERS">
            <variable name="ton_p_t">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
