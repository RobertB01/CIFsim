<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T00:00:00Z" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes/>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="Good_x">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="firstRun">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
          </localVars>
          <tempVars>
            <variable name="channelValue">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="current_Good_x">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="current_Good_x_1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="edge_Good">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="eventEnabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="isProgress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="receiverAut">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="senderAut">
              <type>
                <DINT/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Header text file for:
 *  -&gt; (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * Automaton "Block":
 * - No variables in this component.
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "noMonitor".
 * - Controllable event "noSync".
 *
 * Automaton "Good":
 * - Discrete variable "Good.x".
 *
 * - PLC edge selection variable "edge_Good".
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "noMonitor".
 * - Controllable event "noSync".
 *
 * Automaton "UseChannel":
 * - No variables in this component.
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "channel".
 *
 *------------------------------------------------------ *)

(* --- Initialize state. --------------------------------------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    (* Initialize discrete variable "Good.x". *)
    Good_x := 0;
END_IF;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "noSync".
     *
     * - Automaton "Good" must always synchronize.
     * - Automaton "Block" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "Good" to synchronize for event "noSync".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location "G":
     *   - 1st edge in the location
     ***********)
    IF TRUE THEN
        edge_Good := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edges of automaton "Block" to synchronize for event "noSync".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         *   - No edges found. Event "noSync" will never occur!
         ***********)
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "noSync" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_Good_x := Good_x;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "Good". *)
        IF edge_Good = 0 THEN
            (* Perform assignments of the 1st edge in location "Good.G". *)
            (* Perform update of discrete variable "Good.x". *)
            Good_x := (current_Good_x + 1) MOD 6;
        END_IF;
        (* Automaton "Block" has no assignments to perform. *)
    END_IF;

    (*************************************************************
     * Try to perform controllable event "noMonitor".
     *
     * - Automaton "Good" must always synchronize.
     *
     * - Automaton "Block" may synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "Good" to synchronize for event "noMonitor".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location "G":
     *   - 2nd edge in the location
     ***********)
    IF TRUE THEN
        edge_Good := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "noMonitor" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_Good_x_1 := Good_x;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "Good". *)
        IF edge_Good = 0 THEN
            (* Perform assignments of the 2nd edge in location "Good.G". *)
            (* Perform update of discrete variable "Good.x". *)
            Good_x := (current_Good_x_1 + 5) MOD 6;
        END_IF;
        (*******************************
         * Perform the assignments of each optionally synchronizing automaton.
         *******************************)
        (* There are no assignments to perform for automata that may synchronize. *)
        (* Automaton "Block" has no assignments to perform. *)
    END_IF;

    (*************************************************************
     * Try to perform controllable event "channel".
     *
     * - An automaton that must send a value is missing, so the event cannot occur.
     *
     * - An automaton that must receive a value is missing, so the event cannot occur.
     *
     * - Automaton "UseChannel" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Try to find a sender automaton that provides a value.
     *******************************)
    senderAut := 0;
    IF senderAut = 0 THEN
        (* Failed to find an automaton that provides a value. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (*******************************
     * Try to find a receiver automaton that accepts a value.
     *******************************)
    IF eventEnabled THEN
        receiverAut := 0;
        IF receiverAut = 0 THEN
            (* Failed to find an automaton that accepts a value. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    IF eventEnabled THEN
        (***********
         * Test edges of automaton "UseChannel" to synchronize for event "channel".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         *   - No edges found. Event "channel" will never occur!
         ***********)
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "channel" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (*******************************
         * Store the provided value and perform assignments of the selected providing automaton.
         *******************************)
        (*******************************
         * Deliver the provided value and perform assignments of the selected accepting automaton.
         *******************************)
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* There are no assignments to perform for automata that must always synchronize. *)
        (* Automaton "UseChannel" has no assignments to perform. *)
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Untitled1">
        <resource name="Untitled1">
          <task interval="PT0.010S" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"/>
              </documentation>
            </pouInstance>
          </task>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
