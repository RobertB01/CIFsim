<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T00:00:00Z" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="Color">
        <baseType>
          <enum>
            <values>
              <value name="red"/>
              <value name="yellow"/>
              <value name="blue"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="TupleStruct">
        <baseType>
          <struct>
            <variable name="field1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="field2">
              <type>
                <DINT/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="i">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="bol">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="col">
              <type>
                <derived name="Color"/>
              </type>
            </variable>
            <variable name="aut_y">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="firstRun">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
          </localVars>
          <tempVars>
            <variable name="current_aut_y">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="current_aut_y_1">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="edge_aut">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="eventEnabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="isProgress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="litStruct">
              <type>
                <derived name="TupleStruct"/>
              </type>
            </variable>
            <variable name="litStruct_1">
              <type>
                <derived name="TupleStruct"/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Header text file for:
 *  -&gt; (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * Specification (top-level group):
 * - Input variable "bol".
 * - Input variable "col".
 * - Input variable "i".
 *
 * Automaton "aut":
 * - Discrete variable "aut.y".
 *
 * - PLC edge selection variable "edge_aut".
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "aut.e".
 * - Controllable event "aut.f".
 * - Controllable event "aut.g".
 *
 *------------------------------------------------------ *)

(* --- Initialize state. --------------------------------------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    (* Initialize discrete variable "aut.y". *)
    aut_y := 0.0;
END_IF;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "aut.e".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "aut" to synchronize for event "aut.e".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 1st edge in the location
     ***********)
    IF DINT_TO_LREAL(i) + c &gt; DINT_TO_LREAL(3) THEN
        edge_aut := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.e" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_aut_y := aut_y;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "aut". *)
        IF edge_aut = 0 THEN
            (* Perform assignments of the 1st edge of automaton "aut". *)
            (* Perform update of discrete variable "aut.y". *)
            aut_y := (DINT_TO_LREAL(xx) + p) - pp;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "aut.f".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "aut" to synchronize for event "aut.f".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 2nd edge in the location
     ***********)
    litStruct_1.field1 := 0;
    litStruct_1.field2 := 0;
    IF bol = holds OR i = litStruct_1.field1 THEN
        edge_aut := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.f" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_aut_y_1 := aut_y;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "aut". *)
        IF edge_aut = 0 THEN
            (* Perform assignments of the 2nd edge of automaton "aut". *)
            (* Perform update of discrete variable "aut.y". *)
            aut_y := 0.0 + DINT_TO_LREAL(x) + DINT_TO_LREAL(z);
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "aut.g".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "aut" to synchronize for event "aut.g".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 3rd edge in the location
     ***********)
    IF col &lt;&gt; danger THEN
        edge_aut := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.g" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* There are no assignments to perform for automata that must always synchronize. *)
        (* Automaton "aut" has no assignments to perform. *)
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Untitled1">
        <resource name="Untitled1">
          <task interval="PT0.010S" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"/>
              </documentation>
            </pouInstance>
          </task>
          <globalVars constant="true" name="CONSTANTS">
            <variable name="a">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="4"/>
              </initialValue>
            </variable>
            <variable name="b">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="2"/>
              </initialValue>
            </variable>
            <variable name="c">
              <type>
                <LREAL/>
              </type>
              <initialValue>
                <simpleValue value="3.0"/>
              </initialValue>
            </variable>
            <variable name="d">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="1"/>
              </initialValue>
            </variable>
            <variable name="holds">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="danger">
              <type>
                <derived name="Color"/>
              </type>
              <initialValue>
                <simpleValue value="red"/>
              </initialValue>
            </variable>
            <variable name="x">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-1234"/>
              </initialValue>
            </variable>
            <variable name="z">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="4321"/>
              </initialValue>
            </variable>
            <variable name="xx">
              <type>
                <DINT/>
              </type>
              <initialValue>
                <simpleValue value="-2147483648"/>
              </initialValue>
            </variable>
            <variable name="p">
              <type>
                <LREAL/>
              </type>
              <initialValue>
                <simpleValue value="123.0"/>
              </initialValue>
            </variable>
            <variable name="pp">
              <type>
                <LREAL/>
              </type>
              <initialValue>
                <simpleValue value="-0.00123"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
