<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T00:00:00Z" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="MyProj">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="timer_location">
        <baseType>
          <enum>
            <values>
              <value name="timer_Idle"/>
              <value name="timer_Running"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="sup_location">
        <baseType>
          <enum>
            <values>
              <value name="sup_s1"/>
              <value name="sup_s2"/>
              <value name="sup_s3"/>
              <value name="sup_s4"/>
              <value name="sup_s5"/>
              <value name="sup_s6"/>
              <value name="sup_s7"/>
              <value name="sup_s8"/>
              <value name="sup_s9"/>
              <value name="sup_s10"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="hw_button_location">
        <baseType>
          <enum>
            <values>
              <value name="hw_button_Released"/>
              <value name="hw_button_Pushed"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="hw_lamp_location">
        <baseType>
          <enum>
            <values>
              <value name="hw_lamp_Off"/>
              <value name="hw_lamp_On"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="timer_1">
              <type>
                <derived name="timer_location"/>
              </type>
            </variable>
            <variable name="sup">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="hw_button_r">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="hw_button">
              <type>
                <derived name="hw_button_location"/>
              </type>
            </variable>
            <variable name="hw_lamp">
              <type>
                <derived name="hw_lamp_location"/>
              </type>
            </variable>
            <variable name="hw_button_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="hw_button_bot">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="hw_button_bat">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="timer_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="preset_timer_t">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="firstRun">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
          </localVars>
          <tempVars>
            <variable name="curValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="current_hw_button">
              <type>
                <derived name="hw_button_location"/>
              </type>
            </variable>
            <variable name="current_hw_button_1">
              <type>
                <derived name="hw_button_location"/>
              </type>
            </variable>
            <variable name="current_hw_button_r">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="current_hw_lamp">
              <type>
                <derived name="hw_lamp_location"/>
              </type>
            </variable>
            <variable name="current_hw_lamp_1">
              <type>
                <derived name="hw_lamp_location"/>
              </type>
            </variable>
            <variable name="current_sup">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_1">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_2">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_3">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_4">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_5">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_timer">
              <type>
                <derived name="timer_location"/>
              </type>
            </variable>
            <variable name="current_timer_1">
              <type>
                <derived name="timer_location"/>
              </type>
            </variable>
            <variable name="current_timer_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="edge_hw_button">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="edge_hw_lamp">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="edge_sup">
              <type>
                <BYTE/>
              </type>
            </variable>
            <variable name="edge_timer">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="eventEnabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="isProgress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="timeOut">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Header text file for:
 *  -&gt; (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * ----
 * Automaton "hw_button":
 *
 * - Current location of automaton "hw_button".
 * - Input variable "hw_button.bat".
 * - Input variable "hw_button.bit".
 * - Input variable "hw_button.bot".
 * - Discrete variable "hw_button.r".
 *
 * - PLC edge selection variable "edge_hw_button".
 *
 * - Uncontrollable event "button.push".
 * - Uncontrollable event "button.release".
 *
 * - No use of controllable events.
 *
 * ----
 * Automaton "hw_lamp":
 *
 * - Current location of automaton "hw_lamp".
 *
 * - PLC edge selection variable "edge_hw_lamp".
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "lamp.off".
 * - Controllable event "lamp.on".
 *
 * ----
 * Automaton "sup":
 *
 * - Current location of automaton "sup".
 *
 * - PLC edge selection variable "edge_sup".
 *
 * - Uncontrollable event "button.push".
 * - Uncontrollable event "button.release".
 * - Uncontrollable event "timer.timeout".
 *
 * - Controllable event "lamp.off".
 * - Controllable event "lamp.on".
 * - Controllable event "timer.start".
 *
 * ----
 * Automaton "timer":
 *
 * - Current location of automaton "timer".
 * - Continuous variable "timer.t".
 *
 * - PLC edge selection variable "edge_timer".
 *
 * - Uncontrollable event "timer.timeout".
 *
 * - Controllable event "timer.start".
 *------------------------------------------------------ *)

(* --- Read PLC inputs. ---------------------------------------------------- *)
(* Read PLC input and write it to input variable "hw_button.bit". *)
hw_button_bit := in_hw_button_bit;
(* Read PLC input and write it to input variable "hw_button.bot". *)
hw_button_bot := in_hw_button_bot;
(* Read PLC input and write it to input variable "hw_button.bat". *)
hw_button_bat := REAL_TO_LREAL(in_hw_button_bat);

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    (* Initialize current location of automaton "timer". *)
    timer_1 := timer_Idle;
    (* Initialize current location of automaton "sup". *)
    sup := sup_s1;
    (* Initialize discrete variable "hw_button.r". *)
    hw_button_r := 0.0;
    (* Initialize current location of automaton "hw_button". *)
    hw_button := hw_button_Released;
    (* Initialize current location of automaton "hw_lamp". *)
    hw_lamp := hw_lamp_Off;
    (* Initialize continuous variable "timer.t". *)
    timer_t := 0.0;
    (* Reset timer of "timer_t". *)
    preset_timer_t := LINT_TO_TIME(LREAL_TO_LINT(timer_t * 1000.0));
    ton_timer_t(IN := FALSE, PT := preset_timer_t);
    ton_timer_t(IN := TRUE, PT := preset_timer_t);
ELSE
    (* Update remaining time of continuous variable "timer.t". *)
    ton_timer_t(IN := TRUE, PT := preset_timer_t, Q =&gt; timeOut, ET =&gt; curValue);
    timer_t := SEL_LREAL(timeOut, MAX(LINT_TO_LREAL(TIME_TO_LINT(preset_timer_t - curValue)) / 1000.0, 0.0), 0.0);
END_IF;

(* --- Process uncontrollable events. -------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform uncontrollable event "timer.timeout".
     *
     * - Automaton "timer" must always synchronize.
     * - Automaton "sup" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "timer" to synchronize for event "timer.timeout".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location "Running":
     *   - 1st edge in the location
     ***********)
    IF timer_1 = timer_Running AND timer_t &lt;= 0.0 THEN
        edge_timer := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edges of automaton "sup" to synchronize for event "timer.timeout".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s6":
         *   - 1st edge in the location
         * - Location "s7":
         *   - 1st edge in the location
         ***********)
        IF sup = sup_s6 THEN
            edge_sup := 0;
        ELSIF sup = sup_s7 THEN
            edge_sup := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "timer.timeout" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_sup := sup;
        current_timer := timer_1;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "timer". *)
        IF edge_timer = 0 THEN
            (* Perform assignments of the 1st edge in location "timer.Running". *)
            (* Perform update of current location of automaton "timer". *)
            timer_1 := timer_Idle;
        END_IF;
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s6". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s8;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s7". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s9;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform uncontrollable event "button.push".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_button" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "button.push".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s1":
     *   - 1st edge in the location
     * - Location "s4":
     *   - 2nd edge in the location
     * - Location "s5":
     *   - 2nd edge in the location
     * - Location "s7":
     *   - 2nd edge in the location
     * - Location "s9":
     *   - 2nd edge in the location
     ***********)
    IF sup = sup_s1 THEN
        edge_sup := 0;
    ELSIF sup = sup_s4 THEN
        edge_sup := 1;
    ELSIF sup = sup_s5 THEN
        edge_sup := 2;
    ELSIF sup = sup_s7 THEN
        edge_sup := 3;
    ELSIF sup = sup_s9 THEN
        edge_sup := 4;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_button" to synchronize for event "button.push".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Released":
         *   - 1st edge in the location
         ***********)
        IF hw_button = hw_button_Released AND hw_button_bit THEN
            edge_hw_button := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "button.push" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_button := hw_button;
        current_hw_button_r := hw_button_r;
        current_sup_1 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s1". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s2;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 2nd edge in location "sup.s4". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s2;
        ELSIF edge_sup = 2 THEN
            (* Perform assignments of the 2nd edge in location "sup.s5". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s3;
        ELSIF edge_sup = 3 THEN
            (* Perform assignments of the 2nd edge in location "sup.s7". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s6;
        ELSIF edge_sup = 4 THEN
            (* Perform assignments of the 2nd edge in location "sup.s9". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s8;
        END_IF;
        (* Perform assignments of automaton "hw_button". *)
        IF edge_hw_button = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_button.Released". *)
            (* Perform update of discrete variable "hw_button.r". *)
            hw_button_r := hw_button_bat + DINT_TO_LREAL(hw_button_bot);
            (* Perform update of current location of automaton "hw_button". *)
            hw_button := hw_button_Pushed;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform uncontrollable event "button.release".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_button" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "button.release".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s2":
     *   - 2nd edge in the location
     * - Location "s3":
     *   - 2nd edge in the location
     * - Location "s6":
     *   - 2nd edge in the location
     * - Location "s8":
     *   - 2nd edge in the location
     * - Location "s10":
     *   - 1st edge in the location
     ***********)
    IF sup = sup_s2 THEN
        edge_sup := 0;
    ELSIF sup = sup_s3 THEN
        edge_sup := 1;
    ELSIF sup = sup_s6 THEN
        edge_sup := 2;
    ELSIF sup = sup_s8 THEN
        edge_sup := 3;
    ELSIF sup = sup_s10 THEN
        edge_sup := 4;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_button" to synchronize for event "button.release".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Pushed":
         *   - 1st edge in the location
         ***********)
        IF hw_button = hw_button_Pushed AND (NOT hw_button_bit) THEN
            edge_hw_button := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "button.release" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_button_1 := hw_button;
        current_sup_2 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 2nd edge in location "sup.s2". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s4;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 2nd edge in location "sup.s3". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s5;
        ELSIF edge_sup = 2 THEN
            (* Perform assignments of the 2nd edge in location "sup.s6". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s7;
        ELSIF edge_sup = 3 THEN
            (* Perform assignments of the 2nd edge in location "sup.s8". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s9;
        ELSIF edge_sup = 4 THEN
            (* Perform assignments of the 1st edge in location "sup.s10". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s1;
        END_IF;
        (* Perform assignments of automaton "hw_button". *)
        IF edge_hw_button = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_button.Pushed". *)
            (* Perform update of current location of automaton "hw_button". *)
            hw_button := hw_button_Released;
        END_IF;
    END_IF;
END_WHILE;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "timer.start".
     *
     * - Automaton "timer" must always synchronize.
     * - Automaton "sup" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "timer" to synchronize for event "timer.start".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location "Idle":
     *   - 1st edge in the location
     ***********)
    IF timer_1 = timer_Idle THEN
        edge_timer := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edges of automaton "sup" to synchronize for event "timer.start".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s3":
         *   - 1st edge in the location
         * - Location "s5":
         *   - 1st edge in the location
         ***********)
        IF sup = sup_s3 THEN
            edge_sup := 0;
        ELSIF sup = sup_s5 THEN
            edge_sup := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "timer.start" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_sup_3 := sup;
        current_timer_1 := timer_1;
        current_timer_t := timer_t;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "timer". *)
        IF edge_timer = 0 THEN
            (* Perform assignments of the 1st edge in location "timer.Idle". *)
            (* Perform update of continuous variable "timer.t". *)
            timer_t := 3.0;
            (* Reset timer of "timer_t". *)
            preset_timer_t := LINT_TO_TIME(LREAL_TO_LINT(timer_t * 1000.0));
            ton_timer_t(IN := FALSE, PT := preset_timer_t);
            ton_timer_t(IN := TRUE, PT := preset_timer_t);
            (* Perform update of current location of automaton "timer". *)
            timer_1 := timer_Running;
        END_IF;
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s3". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s6;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s5". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s7;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "lamp.on".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_lamp" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "lamp.on".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s2":
     *   - 1st edge in the location
     * - Location "s4":
     *   - 1st edge in the location
     ***********)
    IF sup = sup_s2 THEN
        edge_sup := 0;
    ELSIF sup = sup_s4 THEN
        edge_sup := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_lamp" to synchronize for event "lamp.on".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Off":
         *   - 1st edge in the location
         ***********)
        IF hw_lamp = hw_lamp_Off THEN
            edge_hw_lamp := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.on" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_lamp := hw_lamp;
        current_sup_4 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s2". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s3;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s4". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s5;
        END_IF;
        (* Perform assignments of automaton "hw_lamp". *)
        IF edge_hw_lamp = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_lamp.Off". *)
            (* Perform update of current location of automaton "hw_lamp". *)
            hw_lamp := hw_lamp_On;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "lamp.off".
     *
     * - Automaton "sup" must always synchronize.
     * - Automaton "hw_lamp" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edges of automaton "sup" to synchronize for event "lamp.off".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "s8":
     *   - 1st edge in the location
     * - Location "s9":
     *   - 1st edge in the location
     ***********)
    IF sup = sup_s8 THEN
        edge_sup := 0;
    ELSIF sup = sup_s9 THEN
        edge_sup := 1;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        (***********
         * Test edge of automaton "hw_lamp" to synchronize for event "lamp.off".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "On":
         *   - 1st edge in the location
         ***********)
        IF hw_lamp = hw_lamp_On THEN
            edge_hw_lamp := 0;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.off" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_hw_lamp_1 := hw_lamp;
        current_sup_5 := sup;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "sup". *)
        IF edge_sup = 0 THEN
            (* Perform assignments of the 1st edge in location "sup.s8". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s10;
        ELSIF edge_sup = 1 THEN
            (* Perform assignments of the 1st edge in location "sup.s9". *)
            (* Perform update of current location of automaton "sup". *)
            sup := sup_s1;
        END_IF;
        (* Perform assignments of automaton "hw_lamp". *)
        IF edge_hw_lamp = 0 THEN
            (* Perform assignments of the 1st edge in location "hw_lamp.On". *)
            (* Perform update of current location of automaton "hw_lamp". *)
            hw_lamp := hw_lamp_Off;
        END_IF;
    END_IF;
END_WHILE;

(* --- Write PLC outputs. -------------------------------------------------- *)
(* Write algebraic variable "hw_lamp.bit" to PLC output. *)
out_hw_lamp_bit := hw_lamp = hw_lamp_On;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="MyConfig">
        <resource name="MyResource">
          <task interval="PT0.007S" name="MyTask" priority="123">
            <pouInstance name="MAIN" typeName="MAIN">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"/>
              </documentation>
            </pouInstance>
          </task>
          <globalVars constant="false" name="INPUTS">
            <variable address="%I15.5" name="in_hw_button_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I18" name="in_hw_button_bot">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%I19" name="in_hw_button_bat">
              <type>
                <REAL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="OUTPUTS">
            <variable address="%Q16.6" name="out_hw_lamp_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="TIMERS">
            <variable name="ton_timer_t">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
