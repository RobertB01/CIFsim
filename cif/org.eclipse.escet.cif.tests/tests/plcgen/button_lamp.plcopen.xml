<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T00:00:00Z" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="MyProj">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="timer_location">
        <baseType>
          <enum>
            <values>
              <value name="timer_Idle"/>
              <value name="timer_Running"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="sup_location">
        <baseType>
          <enum>
            <values>
              <value name="sup_s1"/>
              <value name="sup_s2"/>
              <value name="sup_s3"/>
              <value name="sup_s4"/>
              <value name="sup_s5"/>
              <value name="sup_s6"/>
              <value name="sup_s7"/>
              <value name="sup_s8"/>
              <value name="sup_s9"/>
              <value name="sup_s10"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="hw_button_location">
        <baseType>
          <enum>
            <values>
              <value name="hw_button_Released"/>
              <value name="hw_button_Pushed"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="hw_lamp_location">
        <baseType>
          <enum>
            <values>
              <value name="hw_lamp_Off"/>
              <value name="hw_lamp_On"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="timer_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="preset_timer_t">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="timer">
              <type>
                <derived name="timer_location"/>
              </type>
            </variable>
            <variable name="sup">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="hw_button_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="hw_button">
              <type>
                <derived name="hw_button_location"/>
              </type>
            </variable>
            <variable name="hw_lamp_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="hw_lamp">
              <type>
                <derived name="hw_lamp_location"/>
              </type>
            </variable>
            <variable name="firstRun">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
          </localVars>
          <tempVars>
            <variable name="curValue">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="current_hw_button">
              <type>
                <derived name="hw_button_location"/>
              </type>
            </variable>
            <variable name="current_hw_button_1">
              <type>
                <derived name="hw_button_location"/>
              </type>
            </variable>
            <variable name="current_hw_lamp">
              <type>
                <derived name="hw_lamp_location"/>
              </type>
            </variable>
            <variable name="current_hw_lamp_1">
              <type>
                <derived name="hw_lamp_location"/>
              </type>
            </variable>
            <variable name="current_hw_lamp_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="current_hw_lamp_bit_1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="current_sup">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_1">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_2">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_3">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_4">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_sup_5">
              <type>
                <derived name="sup_location"/>
              </type>
            </variable>
            <variable name="current_timer">
              <type>
                <derived name="timer_location"/>
              </type>
            </variable>
            <variable name="current_timer_1">
              <type>
                <derived name="timer_location"/>
              </type>
            </variable>
            <variable name="current_timer_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="eventEnabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="isProgress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="syncAutEdge">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_10">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_11">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_2">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_3">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_4">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_5">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_6">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_7">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_8">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="syncAutEdge_9">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="timeOut">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* --- Read input from sensors. -------------------------------------------- *)
hw_button_bit := in_hw_button_bit;

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    timer_t := 0.0;
    (* Reset timer of "timer_t". *)
    preset_timer_t := timer_t;
    ton_timer_t(IN := FALSE, PT := preset_timer_t);
    ton_timer_t(IN := TRUE, PT := preset_timer_t);
    timer := timer_Idle;
    sup := sup_s1;
    hw_button := hw_button_Released;
    hw_lamp_bit := FALSE;
    hw_lamp := hw_lamp_Off;
ELSE
    (* Update remaining time of "timer_t". *)
    ton_timer_t(IN := TRUE, PT := preset_timer_t, Q =&gt; timeOut, ET =&gt; curValue);
    timer_t := SEL(timeOut, preset_timer_t - curValue, 0.0);
END_IF;

(* --- Process all events. ------------------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (* Try to perform event "timer.start". *)
    eventEnabled := TRUE;
    IF timer = timer_Idle THEN
        syncAutEdge := 1;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        IF sup = sup_s3 THEN
            syncAutEdge_1 := 1;
        ELSIF sup = sup_s5 THEN
            syncAutEdge_1 := 2;
        ELSE
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_sup := sup;
        current_timer := timer;
        current_timer_t := timer_t;
        IF syncAutEdge = 1 THEN
            timer_t := 3.0;
            (* Reset timer of "timer_t". *)
            preset_timer_t := timer_t;
            ton_timer_t(IN := FALSE, PT := preset_timer_t);
            ton_timer_t(IN := TRUE, PT := preset_timer_t);
            timer := timer_Running;
        END_IF;
        IF syncAutEdge_1 = 1 THEN
            sup := sup_s6;
        ELSIF syncAutEdge_1 = 2 THEN
            sup := sup_s7;
        END_IF;
    END_IF;

    (* Try to perform event "timer.timeout". *)
    eventEnabled := TRUE;
    IF timer = timer_Running AND timer_t &lt;= 0.0 THEN
        syncAutEdge_2 := 1;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        IF sup = sup_s6 THEN
            syncAutEdge_3 := 1;
        ELSIF sup = sup_s7 THEN
            syncAutEdge_3 := 2;
        ELSE
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_sup_1 := sup;
        current_timer_1 := timer;
        IF syncAutEdge_2 = 1 THEN
            timer := timer_Idle;
        END_IF;
        IF syncAutEdge_3 = 1 THEN
            sup := sup_s8;
        ELSIF syncAutEdge_3 = 2 THEN
            sup := sup_s9;
        END_IF;
    END_IF;

    (* Try to perform event "button.push". *)
    eventEnabled := TRUE;
    IF sup = sup_s1 THEN
        syncAutEdge_4 := 1;
    ELSIF sup = sup_s4 THEN
        syncAutEdge_4 := 2;
    ELSIF sup = sup_s5 THEN
        syncAutEdge_4 := 3;
    ELSIF sup = sup_s7 THEN
        syncAutEdge_4 := 4;
    ELSIF sup = sup_s9 THEN
        syncAutEdge_4 := 5;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        IF hw_button = hw_button_Released AND hw_button_bit THEN
            syncAutEdge_5 := 1;
        ELSE
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_hw_button := hw_button;
        current_sup_2 := sup;
        IF syncAutEdge_4 = 1 THEN
            sup := sup_s2;
        ELSIF syncAutEdge_4 = 2 THEN
            sup := sup_s2;
        ELSIF syncAutEdge_4 = 3 THEN
            sup := sup_s3;
        ELSIF syncAutEdge_4 = 4 THEN
            sup := sup_s6;
        ELSIF syncAutEdge_4 = 5 THEN
            sup := sup_s8;
        END_IF;
        IF syncAutEdge_5 = 1 THEN
            hw_button := hw_button_Pushed;
        END_IF;
    END_IF;

    (* Try to perform event "button.release". *)
    eventEnabled := TRUE;
    IF sup = sup_s2 THEN
        syncAutEdge_6 := 1;
    ELSIF sup = sup_s3 THEN
        syncAutEdge_6 := 2;
    ELSIF sup = sup_s6 THEN
        syncAutEdge_6 := 3;
    ELSIF sup = sup_s8 THEN
        syncAutEdge_6 := 4;
    ELSIF sup = sup_s10 THEN
        syncAutEdge_6 := 5;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        IF hw_button = hw_button_Pushed AND NOT hw_button_bit THEN
            syncAutEdge_7 := 1;
        ELSE
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_hw_button_1 := hw_button;
        current_sup_3 := sup;
        IF syncAutEdge_6 = 1 THEN
            sup := sup_s4;
        ELSIF syncAutEdge_6 = 2 THEN
            sup := sup_s5;
        ELSIF syncAutEdge_6 = 3 THEN
            sup := sup_s7;
        ELSIF syncAutEdge_6 = 4 THEN
            sup := sup_s9;
        ELSIF syncAutEdge_6 = 5 THEN
            sup := sup_s1;
        END_IF;
        IF syncAutEdge_7 = 1 THEN
            hw_button := hw_button_Released;
        END_IF;
    END_IF;

    (* Try to perform event "lamp.on". *)
    eventEnabled := TRUE;
    IF sup = sup_s2 THEN
        syncAutEdge_8 := 1;
    ELSIF sup = sup_s4 THEN
        syncAutEdge_8 := 2;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        IF hw_lamp = hw_lamp_Off THEN
            syncAutEdge_9 := 1;
        ELSE
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_hw_lamp := hw_lamp;
        current_hw_lamp_bit := hw_lamp_bit;
        current_sup_4 := sup;
        IF syncAutEdge_8 = 1 THEN
            sup := sup_s3;
        ELSIF syncAutEdge_8 = 2 THEN
            sup := sup_s5;
        END_IF;
        IF syncAutEdge_9 = 1 THEN
            hw_lamp_bit := TRUE;
            hw_lamp := hw_lamp_On;
        END_IF;
    END_IF;

    (* Try to perform event "lamp.off". *)
    eventEnabled := TRUE;
    IF sup = sup_s8 THEN
        syncAutEdge_10 := 1;
    ELSIF sup = sup_s9 THEN
        syncAutEdge_10 := 2;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        IF hw_lamp = hw_lamp_On THEN
            syncAutEdge_11 := 1;
        ELSE
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_hw_lamp_1 := hw_lamp;
        current_hw_lamp_bit_1 := hw_lamp_bit;
        current_sup_5 := sup;
        IF syncAutEdge_10 = 1 THEN
            sup := sup_s10;
        ELSIF syncAutEdge_10 = 2 THEN
            sup := sup_s1;
        END_IF;
        IF syncAutEdge_11 = 1 THEN
            hw_lamp_bit := FALSE;
            hw_lamp := hw_lamp_Off;
        END_IF;
    END_IF;
END_WHILE;

(* --- Write output to actuators. ------------------------------------------ *)
out_hw_lamp_bit := hw_lamp_bit;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="MyConfig">
        <resource name="MyResource">
          <task interval="PT0.007S" name="MyTask" priority="123">
            <pouInstance name="MAIN" typeName="MAIN">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"/>
              </documentation>
            </pouInstance>
          </task>
          <globalVars constant="false" name="INPUTS">
            <variable address="%I15.5" name="in_hw_button_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="OUTPUTS">
            <variable address="%Q16.6" name="out_hw_lamp_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="TIMERS">
            <variable name="ton_timer_t">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
