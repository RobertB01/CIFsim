PROGRAM MAIN
VAR
    i: DINT;
    bol: BOOL;
    col: Color;
    aut_y: LREAL;
    firstRun: BOOL := TRUE;
END_VAR
VAR_TEMP
    current_aut_y: LREAL;
    current_aut_y_1: LREAL;
    edge_aut: BOOL;
    eventEnabled: BOOL;
    isProgress: BOOL;
END_VAR

(* Header text file for:
 *  -> (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * ----
 * Specification (top-level group):
 *
 * - Input variable "bol".
 * - Input variable "col".
 * - Input variable "i".
 *
 * ----
 * Automaton "aut":
 *
 * - Discrete variable "aut.y".
 *
 * - PLC edge selection variable "edge_aut".
 *
 * - No use of uncontrollable events.
 *
 * - Controllable event "aut.e".
 * - Controllable event "aut.f".
 * - Controllable event "aut.g".
 *------------------------------------------------------ *)

(* --- Initialize state. --------------------------------------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    (* Initialize discrete variable "aut.y". *)
    aut_y := 0.0;
END_IF;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "aut.e".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "aut" to synchronize for event "aut.e".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 1st edge in the location
     ***********)
    IF DINT_TO_LREAL(i) + 3.0 > DINT_TO_LREAL(3) THEN
        edge_aut := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.e" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_aut_y := aut_y;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "aut". *)
        IF edge_aut = 0 THEN
            (* Perform assignments of the 1st edge of automaton "aut". *)
            (* Perform update of discrete variable "aut.y". *)
            aut_y := (-2.14748352499877e9);
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "aut.f".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "aut" to synchronize for event "aut.f".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 2nd edge in the location
     ***********)
    IF bol = TRUE OR i = 0 THEN
        edge_aut := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.f" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_aut_y_1 := aut_y;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "aut". *)
        IF edge_aut = 0 THEN
            (* Perform assignments of the 2nd edge of automaton "aut". *)
            (* Perform update of discrete variable "aut.y". *)
            aut_y := 3087.0;
        END_IF;
    END_IF;

    (*************************************************************
     * Try to perform controllable event "aut.g".
     *
     * - Automaton "aut" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "aut" to synchronize for event "aut.g".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 3rd edge in the location
     ***********)
    IF col <> red_Color THEN
        edge_aut := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "aut.g" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* There are no assignments to perform for automata that must always synchronize. *)
        (* Automaton "aut" has no assignments to perform. *)
    END_IF;
END_WHILE;
END_PROGRAM
