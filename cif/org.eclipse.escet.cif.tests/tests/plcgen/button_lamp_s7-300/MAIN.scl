ORGANIZATION_BLOCK MAIN
{ S7_Optimized_Access := 'false' }
    VAR_TEMP
        curValue: TIME;
        current_hw_button: DINT;
        current_hw_button_1: DINT;
        current_hw_lamp: DINT;
        current_hw_lamp_1: DINT;
        current_hw_lamp_bit: BOOL;
        current_hw_lamp_bit_1: BOOL;
        current_sup: DINT;
        current_sup_1: DINT;
        current_sup_2: DINT;
        current_sup_3: DINT;
        current_sup_4: DINT;
        current_sup_5: DINT;
        current_timer: DINT;
        current_timer_1: DINT;
        current_timer_t: REAL;
        edge_hw_button_1: DINT;
        edge_hw_lamp_1: DINT;
        edge_sup_1: DINT;
        edge_timer_1: DINT;
        eventEnabled: BOOL;
        isProgress: BOOL;
        timeOut: BOOL;
    END_VAR

BEGIN
    (* Header text file for:
     *  -> (-*-) CIF PLC code generator.
     *)

    (*------------------------------------------------------
     * Model overview:
     *
     * Automaton "hw_button":
     * - Current location of automaton "hw_button".
     * - Input variable "hw_button.bit".
     *
     * - PLC edge selection variable "edge_hw_button".
     *
     * - Uncontrollable event "button.push".
     * - Uncontrollable event "button.release".
     *
     * - No use of controllable events.
     *
     * Automaton "hw_lamp":
     * - Current location of automaton "hw_lamp".
     * - Discrete variable "hw_lamp.bit".
     *
     * - PLC edge selection variable "edge_hw_lamp".
     *
     * - No use of uncontrollable events.
     *
     * - Controllable event "lamp.off".
     * - Controllable event "lamp.on".
     *
     * Automaton "sup":
     * - Current location of automaton "sup".
     *
     * - PLC edge selection variable "edge_sup_1".
     *
     * - Uncontrollable event "button.push".
     * - Uncontrollable event "button.release".
     * - Uncontrollable event "timer.timeout".
     *
     * - Controllable event "lamp.off".
     * - Controllable event "lamp.on".
     * - Controllable event "timer.start".
     *
     * Automaton "timer":
     * - Current location of automaton "timer".
     * - Continuous variable "timer.t".
     *
     * - PLC edge selection variable "edge_timer_1".
     *
     * - Uncontrollable event "timer.timeout".
     *
     * - Controllable event "timer.start".
     *
     *------------------------------------------------------ *)

    (* --- Read PLC inputs. ---------------------------------------------------- *)
    (* Read PLC input and write it to input variable "hw_button.bit". *)
    "DB".hw_button_bit := in_hw_button_bit;

    (* --- Initialize state or update continuous variables. -------------------- *)
    IF "DB".firstRun THEN
        "DB".firstRun := FALSE;

        (* Initialize the state variables. *)
        (* Initialize continuous variable "timer.t". *)
        "DB".timer_t := 0.0;
        (* Reset timer of "timer_t". *)
        "DB".preset_timer_t := DINT_TO_TIME(REAL_TO_DINT("DB".timer_t * 1000.0));
        ton_timer_t.TON(IN := FALSE, PT := "DB".preset_timer_t);
        ton_timer_t.TON(IN := TRUE, PT := "DB".preset_timer_t);
        (* Initialize current location of automaton "timer". *)
        "DB".timer_1 := timer_Idle;
        (* Initialize current location of automaton "sup". *)
        "DB".sup := sup_s1;
        (* Initialize current location of automaton "hw_button". *)
        "DB".hw_button := hw_button_Released;
        (* Initialize discrete variable "hw_lamp.bit". *)
        "DB".hw_lamp_bit := FALSE;
        (* Initialize current location of automaton "hw_lamp". *)
        "DB".hw_lamp := hw_lamp_Off;
    ELSE
        (* Update remaining time of continuous variable "timer.t". *)
        ton_timer_t.TON(IN := TRUE, PT := "DB".preset_timer_t, Q => timeOut, ET => curValue);
        "DB".timer_t := SEL_REAL(timeOut, MAX(IN1 := DINT_TO_REAL(TIME_TO_DINT("DB".preset_timer_t - curValue)) / 1000.0, IN2 := 0.0), 0.0);
    END_IF;

    (* --- Process uncontrollable events. -------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (*************************************************************
         * Try to perform uncontrollable event "timer.timeout".
         *
         * - Automaton "timer" must always synchronize.
         * - Automaton "sup" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edge of automaton "timer" to synchronize for event "timer.timeout".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Running":
         *   - 1st edge in the location
         ***********)
        IF "DB".timer_1 = timer_Running AND "DB".timer_t <= 0.0 THEN
            edge_timer_1 := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            (***********
             * Test edges of automaton "sup" to synchronize for event "timer.timeout".
             * This automaton must have an edge with a true guard to allow the event.
             *
             * Edges being tested:
             * - Location "s6":
             *   - 1st edge in the location
             * - Location "s7":
             *   - 1st edge in the location
             ***********)
            IF "DB".sup = sup_s6 THEN
                edge_sup_1 := 1;
            ELSIF "DB".sup = sup_s7 THEN
                edge_sup_1 := 2;
            ELSE
                (* The automaton has no edge with a true guard. Skip to the next event. *)
                eventEnabled := FALSE;
            END_IF;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "timer.timeout" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_sup := "DB".sup;
            current_timer := "DB".timer_1;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "timer". *)
            IF edge_timer_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "timer.Running". *)
                (* Perform update of current location of automaton "timer". *)
                "DB".timer_1 := timer_Idle;
            END_IF;
            (* Perform assignments of automaton "sup". *)
            IF edge_sup_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "sup.s6". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s8;
            ELSIF edge_sup_1 = 2 THEN
                (* Perform assignments of the 1st edge in location "sup.s7". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s9;
            END_IF;
        END_IF;

        (*************************************************************
         * Try to perform uncontrollable event "button.push".
         *
         * - Automaton "sup" must always synchronize.
         * - Automaton "hw_button" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edges of automaton "sup" to synchronize for event "button.push".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s1":
         *   - 1st edge in the location
         * - Location "s4":
         *   - 2nd edge in the location
         * - Location "s5":
         *   - 2nd edge in the location
         * - Location "s7":
         *   - 2nd edge in the location
         * - Location "s9":
         *   - 2nd edge in the location
         ***********)
        IF "DB".sup = sup_s1 THEN
            edge_sup_1 := 1;
        ELSIF "DB".sup = sup_s4 THEN
            edge_sup_1 := 2;
        ELSIF "DB".sup = sup_s5 THEN
            edge_sup_1 := 3;
        ELSIF "DB".sup = sup_s7 THEN
            edge_sup_1 := 4;
        ELSIF "DB".sup = sup_s9 THEN
            edge_sup_1 := 5;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            (***********
             * Test edge of automaton "hw_button" to synchronize for event "button.push".
             * This automaton must have an edge with a true guard to allow the event.
             *
             * Edge being tested:
             * - Location "Released":
             *   - 1st edge in the location
             ***********)
            IF "DB".hw_button = hw_button_Released AND "DB".hw_button_bit THEN
                edge_hw_button_1 := 1;
            ELSE
                (* The automaton has no edge with a true guard. Skip to the next event. *)
                eventEnabled := FALSE;
            END_IF;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "button.push" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_hw_button := "DB".hw_button;
            current_sup_1 := "DB".sup;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "sup". *)
            IF edge_sup_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "sup.s1". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s2;
            ELSIF edge_sup_1 = 2 THEN
                (* Perform assignments of the 2nd edge in location "sup.s4". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s2;
            ELSIF edge_sup_1 = 3 THEN
                (* Perform assignments of the 2nd edge in location "sup.s5". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s3;
            ELSIF edge_sup_1 = 4 THEN
                (* Perform assignments of the 2nd edge in location "sup.s7". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s6;
            ELSIF edge_sup_1 = 5 THEN
                (* Perform assignments of the 2nd edge in location "sup.s9". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s8;
            END_IF;
            (* Perform assignments of automaton "hw_button". *)
            IF edge_hw_button_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "hw_button.Released". *)
                (* Perform update of current location of automaton "hw_button". *)
                "DB".hw_button := hw_button_Pushed;
            END_IF;
        END_IF;

        (*************************************************************
         * Try to perform uncontrollable event "button.release".
         *
         * - Automaton "sup" must always synchronize.
         * - Automaton "hw_button" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edges of automaton "sup" to synchronize for event "button.release".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s2":
         *   - 2nd edge in the location
         * - Location "s3":
         *   - 2nd edge in the location
         * - Location "s6":
         *   - 2nd edge in the location
         * - Location "s8":
         *   - 2nd edge in the location
         * - Location "s10":
         *   - 1st edge in the location
         ***********)
        IF "DB".sup = sup_s2 THEN
            edge_sup_1 := 1;
        ELSIF "DB".sup = sup_s3 THEN
            edge_sup_1 := 2;
        ELSIF "DB".sup = sup_s6 THEN
            edge_sup_1 := 3;
        ELSIF "DB".sup = sup_s8 THEN
            edge_sup_1 := 4;
        ELSIF "DB".sup = sup_s10 THEN
            edge_sup_1 := 5;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            (***********
             * Test edge of automaton "hw_button" to synchronize for event "button.release".
             * This automaton must have an edge with a true guard to allow the event.
             *
             * Edge being tested:
             * - Location "Pushed":
             *   - 1st edge in the location
             ***********)
            IF "DB".hw_button = hw_button_Pushed AND (NOT "DB".hw_button_bit) THEN
                edge_hw_button_1 := 1;
            ELSE
                (* The automaton has no edge with a true guard. Skip to the next event. *)
                eventEnabled := FALSE;
            END_IF;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "button.release" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_hw_button_1 := "DB".hw_button;
            current_sup_2 := "DB".sup;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "sup". *)
            IF edge_sup_1 = 1 THEN
                (* Perform assignments of the 2nd edge in location "sup.s2". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s4;
            ELSIF edge_sup_1 = 2 THEN
                (* Perform assignments of the 2nd edge in location "sup.s3". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s5;
            ELSIF edge_sup_1 = 3 THEN
                (* Perform assignments of the 2nd edge in location "sup.s6". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s7;
            ELSIF edge_sup_1 = 4 THEN
                (* Perform assignments of the 2nd edge in location "sup.s8". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s9;
            ELSIF edge_sup_1 = 5 THEN
                (* Perform assignments of the 1st edge in location "sup.s10". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s1;
            END_IF;
            (* Perform assignments of automaton "hw_button". *)
            IF edge_hw_button_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "hw_button.Pushed". *)
                (* Perform update of current location of automaton "hw_button". *)
                "DB".hw_button := hw_button_Released;
            END_IF;
        END_IF;
    END_WHILE;

    (* --- Process controllable events. ---------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (*************************************************************
         * Try to perform controllable event "timer.start".
         *
         * - Automaton "timer" must always synchronize.
         * - Automaton "sup" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edge of automaton "timer" to synchronize for event "timer.start".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location "Idle":
         *   - 1st edge in the location
         ***********)
        IF "DB".timer_1 = timer_Idle THEN
            edge_timer_1 := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            (***********
             * Test edges of automaton "sup" to synchronize for event "timer.start".
             * This automaton must have an edge with a true guard to allow the event.
             *
             * Edges being tested:
             * - Location "s3":
             *   - 1st edge in the location
             * - Location "s5":
             *   - 1st edge in the location
             ***********)
            IF "DB".sup = sup_s3 THEN
                edge_sup_1 := 1;
            ELSIF "DB".sup = sup_s5 THEN
                edge_sup_1 := 2;
            ELSE
                (* The automaton has no edge with a true guard. Skip to the next event. *)
                eventEnabled := FALSE;
            END_IF;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "timer.start" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_sup_3 := "DB".sup;
            current_timer_1 := "DB".timer_1;
            current_timer_t := "DB".timer_t;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "timer". *)
            IF edge_timer_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "timer.Idle". *)
                (* Perform update of continuous variable "timer.t". *)
                "DB".timer_t := 3.0;
                (* Reset timer of "timer_t". *)
                "DB".preset_timer_t := DINT_TO_TIME(REAL_TO_DINT("DB".timer_t * 1000.0));
                ton_timer_t.TON(IN := FALSE, PT := "DB".preset_timer_t);
                ton_timer_t.TON(IN := TRUE, PT := "DB".preset_timer_t);
                (* Perform update of current location of automaton "timer". *)
                "DB".timer_1 := timer_Running;
            END_IF;
            (* Perform assignments of automaton "sup". *)
            IF edge_sup_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "sup.s3". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s6;
            ELSIF edge_sup_1 = 2 THEN
                (* Perform assignments of the 1st edge in location "sup.s5". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s7;
            END_IF;
        END_IF;

        (*************************************************************
         * Try to perform controllable event "lamp.on".
         *
         * - Automaton "sup" must always synchronize.
         * - Automaton "hw_lamp" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edges of automaton "sup" to synchronize for event "lamp.on".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s2":
         *   - 1st edge in the location
         * - Location "s4":
         *   - 1st edge in the location
         ***********)
        IF "DB".sup = sup_s2 THEN
            edge_sup_1 := 1;
        ELSIF "DB".sup = sup_s4 THEN
            edge_sup_1 := 2;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            (***********
             * Test edge of automaton "hw_lamp" to synchronize for event "lamp.on".
             * This automaton must have an edge with a true guard to allow the event.
             *
             * Edge being tested:
             * - Location "Off":
             *   - 1st edge in the location
             ***********)
            IF "DB".hw_lamp = hw_lamp_Off THEN
                edge_hw_lamp_1 := 1;
            ELSE
                (* The automaton has no edge with a true guard. Skip to the next event. *)
                eventEnabled := FALSE;
            END_IF;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.on" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_hw_lamp := "DB".hw_lamp;
            current_hw_lamp_bit := "DB".hw_lamp_bit;
            current_sup_4 := "DB".sup;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "sup". *)
            IF edge_sup_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "sup.s2". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s3;
            ELSIF edge_sup_1 = 2 THEN
                (* Perform assignments of the 1st edge in location "sup.s4". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s5;
            END_IF;
            (* Perform assignments of automaton "hw_lamp". *)
            IF edge_hw_lamp_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "hw_lamp.Off". *)
                (* Perform update of discrete variable "hw_lamp.bit". *)
                "DB".hw_lamp_bit := TRUE;
                (* Perform update of current location of automaton "hw_lamp". *)
                "DB".hw_lamp := hw_lamp_On;
            END_IF;
        END_IF;

        (*************************************************************
         * Try to perform controllable event "lamp.off".
         *
         * - Automaton "sup" must always synchronize.
         * - Automaton "hw_lamp" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edges of automaton "sup" to synchronize for event "lamp.off".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "s8":
         *   - 1st edge in the location
         * - Location "s9":
         *   - 1st edge in the location
         ***********)
        IF "DB".sup = sup_s8 THEN
            edge_sup_1 := 1;
        ELSIF "DB".sup = sup_s9 THEN
            edge_sup_1 := 2;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        IF eventEnabled THEN
            (***********
             * Test edge of automaton "hw_lamp" to synchronize for event "lamp.off".
             * This automaton must have an edge with a true guard to allow the event.
             *
             * Edge being tested:
             * - Location "On":
             *   - 1st edge in the location
             ***********)
            IF "DB".hw_lamp = hw_lamp_On THEN
                edge_hw_lamp_1 := 1;
            ELSE
                (* The automaton has no edge with a true guard. Skip to the next event. *)
                eventEnabled := FALSE;
            END_IF;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "lamp.off" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_hw_lamp_1 := "DB".hw_lamp;
            current_hw_lamp_bit_1 := "DB".hw_lamp_bit;
            current_sup_5 := "DB".sup;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "sup". *)
            IF edge_sup_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "sup.s8". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s10;
            ELSIF edge_sup_1 = 2 THEN
                (* Perform assignments of the 1st edge in location "sup.s9". *)
                (* Perform update of current location of automaton "sup". *)
                "DB".sup := sup_s1;
            END_IF;
            (* Perform assignments of automaton "hw_lamp". *)
            IF edge_hw_lamp_1 = 1 THEN
                (* Perform assignments of the 1st edge in location "hw_lamp.On". *)
                (* Perform update of discrete variable "hw_lamp.bit". *)
                "DB".hw_lamp_bit := FALSE;
                (* Perform update of current location of automaton "hw_lamp". *)
                "DB".hw_lamp := hw_lamp_Off;
            END_IF;
        END_IF;
    END_WHILE;

    (* --- Write PLC outputs. -------------------------------------------------- *)
    (* Write discrete variable "hw_lamp.bit" to PLC output. *)
    out_hw_lamp_bit := "DB".hw_lamp_bit;
END_ORGANIZATION_BLOCK
