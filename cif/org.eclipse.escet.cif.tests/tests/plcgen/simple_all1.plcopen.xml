<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T00:00:00Z" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="g_E">
        <baseType>
          <enum>
            <values>
              <value name="g_LIT1"/>
              <value name="g_LIT2"/>
            </values>
          </enum>
        </baseType>
      </dataType>
      <dataType name="TupleStruct">
        <baseType>
          <struct>
            <variable name="field1">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="field2">
              <type>
                <LREAL/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="TupleStruct_1">
        <baseType>
          <struct>
            <variable name="field1">
              <type>
                <derived name="TupleStruct"/>
              </type>
            </variable>
            <variable name="field2">
              <type>
                <LREAL/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="TupleStruct_2">
        <baseType>
          <struct>
            <variable name="field1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="field2">
              <type>
                <DINT/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="p_location">
        <baseType>
          <enum>
            <values>
              <value name="p_l1"/>
              <value name="p_l6"/>
              <value name="p_l7"/>
              <value name="p_l8"/>
              <value name="p_l9"/>
              <value name="p_l10"/>
              <value name="p_l11"/>
              <value name="p_l12"/>
              <value name="p_l13"/>
              <value name="p_l14"/>
              <value name="p_l15"/>
              <value name="p_l16"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="MAIN" pouType="program">
        <interface>
          <localVars>
            <variable name="g_inp">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="p_b">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="p_x">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="p_y">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="p_ve">
              <type>
                <derived name="g_E"/>
              </type>
            </variable>
            <variable name="p_v1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="p_v2">
              <type>
                <derived name="TupleStruct"/>
              </type>
            </variable>
            <variable name="p_v3">
              <type>
                <derived name="TupleStruct_1"/>
              </type>
            </variable>
            <variable name="p_tv">
              <type>
                <derived name="TupleStruct_2"/>
              </type>
            </variable>
            <variable name="p_j">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="p_r">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="p_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="preset_p_t">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="p">
              <type>
                <derived name="p_location"/>
              </type>
            </variable>
            <variable name="firstRun">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
          </localVars>
          <tempVars>
            <variable name="curValue">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="current_p">
              <type>
                <derived name="p_location"/>
              </type>
            </variable>
            <variable name="current_p_b">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="current_p_j">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="current_p_r">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="current_p_tv">
              <type>
                <derived name="TupleStruct_2"/>
              </type>
            </variable>
            <variable name="current_p_v3">
              <type>
                <derived name="TupleStruct_1"/>
              </type>
            </variable>
            <variable name="current_p_ve">
              <type>
                <derived name="g_E"/>
              </type>
            </variable>
            <variable name="current_p_x">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="edge_p_1">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable name="eventEnabled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="isProgress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="litStruct">
              <type>
                <derived name="TupleStruct"/>
              </type>
            </variable>
            <variable name="litStruct_1">
              <type>
                <derived name="TupleStruct_1"/>
              </type>
            </variable>
            <variable name="litStruct_2">
              <type>
                <derived name="TupleStruct_2"/>
              </type>
            </variable>
            <variable name="rightValue">
              <type>
                <derived name="TupleStruct_2"/>
              </type>
            </variable>
            <variable name="timeOut">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(* Header text file for:
 *  -&gt; (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * Group "g":
 *    - Input variable "g.inp".
 *
 * Automaton "p":
 *    - Current location of automaton "p".
 *    - Discrete variable "p.b".
 *    - Discrete variable "p.j".
 *    - Discrete variable "p.r".
 *    - Continuous variable "p.t".
 *    - Discrete variable "p.tv".
 *    - Discrete variable "p.v1".
 *    - Discrete variable "p.v2".
 *    - Discrete variable "p.v3".
 *    - Discrete variable "p.ve".
 *    - Discrete variable "p.x".
 *    - Discrete variable "p.y".
 *
 *    - PLC edge selection variable "edge_p".
 *
 *    - No use of uncontrollable events.
 *
 *    - Controllable event "p.evt".
 *
 *------------------------------------------------------ *)

(* --- Initialize state or update continuous variables. -------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    (* Initializing discrete variable "p.b". *)
    p_b := TRUE;
    (* Initializing discrete variable "p.x". *)
    p_x := 0;
    (* Initializing discrete variable "p.y". *)
    p_y := 1.23;
    (* Initializing discrete variable "p.ve". *)
    p_ve := g_LIT1;
    (* Initializing discrete variable "p.v1". *)
    p_v1 := 0;
    (* Initializing discrete variable "p.v2". *)
    litStruct.field1 := 0.0;
    litStruct.field2 := 0.0;
    p_v2 := litStruct;
    (* Initializing discrete variable "p.v3". *)
    litStruct.field1 := 0.0;
    litStruct.field2 := 0.0;
    litStruct_1.field1 := litStruct;
    litStruct_1.field2 := 0.0;
    p_v3 := litStruct_1;
    (* Initializing discrete variable "p.tv". *)
    litStruct_2.field1 := 0;
    litStruct_2.field2 := 0;
    p_tv := litStruct_2;
    (* Initializing discrete variable "p.j". *)
    p_j := 0;
    (* Initializing discrete variable "p.r". *)
    p_r := 1000000.0;
    (* Initializing continuous variable "p.t". *)
    p_t := 0.0;
    (* Reset timer of "p_t". *)
    preset_p_t := p_t;
    ton_p_t(IN := FALSE, PT := preset_p_t);
    ton_p_t(IN := TRUE, PT := preset_p_t);
    (* Initializing current location of automaton "p". *)
    p := p_l1;
ELSE
    (* Update remaining time of continuous variable "p.t". *)
    ton_p_t(IN := TRUE, PT := preset_p_t, Q =&gt; timeOut, ET =&gt; curValue);
    p_t := SEL(timeOut, preset_p_t - curValue, 0.0);
END_IF;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "p.evt".
     *
     * - Automaton "p" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Testing edges of automaton "p" to synchronize for event "p.evt".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edges being tested:
     * - Location "l1":
     *   - 1st edge in the location
     * - Location "l6":
     *   - 1st edge in the location
     * - Location "l7":
     *   - 1st edge in the location
     * - Location "l8":
     *   - 1st edge in the location
     * - Location "l9":
     *   - 1st edge in the location
     * - Location "l10":
     *   - 1st edge in the location
     * - Location "l11":
     *   - 1st edge in the location
     * - Location "l12":
     *   - 1st edge in the location
     * - Location "l13":
     *   - 1st edge in the location
     * - Location "l14":
     *   - 1st edge in the location
     * - Location "l15":
     *   - 1st edge in the location
     ***********)
    IF p = p_l1 THEN
        edge_p_1 := 1;
    ELSIF p = p_l6 THEN
        edge_p_1 := 2;
    ELSIF p = p_l7 THEN
        edge_p_1 := 3;
    ELSIF p = p_l8 THEN
        edge_p_1 := 4;
    ELSIF p = p_l9 THEN
        edge_p_1 := 5;
    ELSIF p = p_l10 THEN
        edge_p_1 := 6;
    ELSIF p = p_l11 THEN
        edge_p_1 := 7;
    ELSIF p = p_l12 THEN
        edge_p_1 := 8;
    ELSIF p = p_l13 THEN
        edge_p_1 := 9;
    ELSIF p = p_l14 THEN
        edge_p_1 := 10;
    ELSIF p = p_l15 THEN
        edge_p_1 := 11;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "p.evt" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_p := p;
        current_p_b := p_b;
        current_p_j := p_j;
        current_p_r := p_r;
        current_p_tv := p_tv;
        current_p_v3 := p_v3;
        current_p_ve := p_ve;
        current_p_x := p_x;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "p". *)
        IF edge_p_1 = 1 THEN
            (* Perform assignments of the 1st edge in location "p.l1". *)
            (* Perform update of discrete variable "p.tv". *)
            litStruct_2.field1 := 1;
            litStruct_2.field2 := 2;
            p_tv := litStruct_2;
            (* Perform update of current location of automaton "p". *)
            p := p_l6;
        ELSIF edge_p_1 = 2 THEN
            (* Perform assignments of the 1st edge in location "p.l6". *)
            (* Perform update of discrete variable "p.x". *)
            p_x := 3;
            (* Perform update of discrete variable "p.j". *)
            p_j := 4;
            (* Perform update of current location of automaton "p". *)
            p := p_l7;
        ELSIF edge_p_1 = 3 THEN
            (* Perform assignments of the 1st edge in location "p.l7". *)
            rightValue := current_p_tv;
            (* Perform update of discrete variable "p.x". *)
            p_x := rightValue.field1;
            (* Perform update of discrete variable "p.j". *)
            p_j := rightValue.field2;
            (* Perform update of current location of automaton "p". *)
            p := p_l8;
        ELSIF edge_p_1 = 4 THEN
            (* Perform assignments of the 1st edge in location "p.l8". *)
            (* Perform update of discrete variable "p.tv". *)
            p_tv.field1 := 5;
            (* Perform update of current location of automaton "p". *)
            p := p_l9;
        ELSIF edge_p_1 = 5 THEN
            (* Perform assignments of the 1st edge in location "p.l9". *)
            (* Perform update of discrete variable "p.tv". *)
            p_tv.field2 := 6;
            (* Perform update of discrete variable "p.j". *)
            p_j := 7;
            (* Perform update of current location of automaton "p". *)
            p := p_l10;
        ELSIF edge_p_1 = 6 THEN
            (* Perform assignments of the 1st edge in location "p.l10". *)
            (* Perform update of discrete variable "p.v3". *)
            p_v3.field1.field2 := 7.8;
            (* Perform update of current location of automaton "p". *)
            p := p_l11;
        ELSIF edge_p_1 = 7 THEN
            (* Perform assignments of the 1st edge in location "p.l11". *)
            (* Perform update of discrete variable "p.v3". *)
            litStruct.field1 := 1.2;
            litStruct.field2 := 3.4;
            litStruct_1.field1 := litStruct;
            litStruct_1.field2 := 5.6;
            p_v3 := litStruct_1;
            (* Perform update of current location of automaton "p". *)
            p := p_l12;
        ELSIF edge_p_1 = 8 THEN
            (* Perform assignments of the 1st edge in location "p.l12". *)
            (* Perform update of discrete variable "p.j". *)
            p_j := current_p_j + 1;
            (* Perform update of current location of automaton "p". *)
            p := p_l13;
        ELSIF edge_p_1 = 9 THEN
            (* Perform assignments of the 1st edge in location "p.l13". *)
            (* Perform update of discrete variable "p.b". *)
            p_b := FALSE;
            (* Perform update of current location of automaton "p". *)
            p := p_l14;
        ELSIF edge_p_1 = 10 THEN
            (* Perform assignments of the 1st edge in location "p.l14". *)
            IF NOT current_p_b THEN
                (* Perform update of discrete variable "p.ve". *)
                p_ve := g_LIT2;
            END_IF;
            (* Perform update of current location of automaton "p". *)
            p := p_l15;
        ELSIF edge_p_1 = 11 THEN
            (* Perform assignments of the 1st edge in location "p.l15". *)
            (* Perform update of discrete variable "p.r". *)
            p_r := DINT_TO_LREAL(g_inp) + 10.0;
            (* Perform update of current location of automaton "p". *)
            p := p_l16;
        END_IF;
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Untitled1">
        <resource name="Untitled1">
          <task interval="PT0.010S" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN">
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"/>
              </documentation>
            </pouInstance>
          </task>
          <globalVars constant="false" name="TIMERS">
            <variable name="ton_p_t">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
