PROGRAM MAIN
VAR
    Good_x: DINT;
    firstRun: BOOL := TRUE;
END_VAR
VAR_TEMP
    channelValue: DINT;
    current_Good_x: DINT;
    current_Good_x_1: DINT;
    eventEnabled: BOOL;
    isProgress: BOOL;
    receiverAut: DINT;
    receiverEdge: DINT;
    senderAut: DINT;
    senderEdge: DINT;
    syncAutEdge: DINT;
    syncAutEdge_1: DINT;
    syncAutEdge_2: DINT;
    syncAutEdge_3: DINT;
END_VAR

(* --- Initialize state. --------------------------------------------------- *)
IF firstRun THEN
    firstRun := FALSE;

    (* Initialize the state variables. *)
    Good_x := 0;
END_IF;

(* --- Process all events. ------------------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
WHILE isProgress DO
    isProgress := FALSE;

    (* Try to perform event "noSync". *)
    eventEnabled := TRUE;
    IF TRUE THEN
        syncAutEdge := 1;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_Good_x := Good_x;
        IF syncAutEdge = 1 THEN
            Good_x := (current_Good_x + 1) MOD 6;
        END_IF;
    END_IF;

    (* Try to perform event "noMonitor". *)
    eventEnabled := TRUE;
    IF TRUE THEN
        syncAutEdge_2 := 1;
    ELSE
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
        current_Good_x_1 := Good_x;
        IF syncAutEdge_2 = 1 THEN
            Good_x := (current_Good_x_1 + 5) MOD 6;
        END_IF;
    END_IF;

    (* Try to perform event "channel". *)
    eventEnabled := TRUE;
    senderAut := 0;
    IF senderAut = 0 THEN
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        receiverAut := 0;
        IF receiverAut = 0 THEN
            eventEnabled := FALSE;
        END_IF;
    END_IF;
    IF eventEnabled THEN
        eventEnabled := FALSE;
    END_IF;
    IF eventEnabled THEN
        isProgress := TRUE;
    END_IF;
END_WHILE;
END_PROGRAM
