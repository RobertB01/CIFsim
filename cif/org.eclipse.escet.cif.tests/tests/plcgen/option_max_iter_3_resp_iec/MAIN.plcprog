PROGRAM MAIN
VAR
    p_x: DINT;
    firstRun: BOOL := TRUE;
    loopsKilled: INT;
END_VAR
VAR_TEMP
    loopCount: DINT;
    current_p_x: DINT;
    current_p_x_1: DINT;
    edge_p: BOOL;
    eventEnabled: BOOL;
    isProgress: BOOL;
END_VAR

(* Header text file for:
 *  -> (-*-) CIF PLC code generator.
 *)

(*------------------------------------------------------
 * Model overview:
 *
 * ----
 * Automaton "p":
 *
 * - Discrete variable "p.x".
 *
 * - PLC edge selection variable "edge_p".
 *
 * - Uncontrollable event "u".
 *
 * - Controllable event "e".
 *------------------------------------------------------ *)

(* --- Initialize state. --------------------------------------------------- *)
IF firstRun THEN
    firstRun := FALSE;
    loopsKilled := 0;

    (* Initialize the state variables. *)
    (* Initialize discrete variable "p.x". *)
    p_x := 5;
END_IF;

(* --- Process uncontrollable events. -------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
(* Track the number of iterations and abort if there are too many. *)
loopCount := 0;
WHILE isProgress AND loopCount < 3 DO
    loopCount := loopCount + 1;
    isProgress := FALSE;

    (*************************************************************
     * Try to perform uncontrollable event "u".
     *
     * - Automaton "p" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "p" to synchronize for event "u".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 2nd edge in the location
     ***********)
    IF TRUE THEN
        edge_p := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "u" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_p_x := p_x;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "p". *)
        IF edge_p = 0 THEN
            (* Perform assignments of the 2nd edge of automaton "p". *)
            (* Perform update of discrete variable "p.x". *)
            p_x := 11 - current_p_x;
        END_IF;
    END_IF;
END_WHILE;
(* Register the first 9999 aborted loops. *)
IF loopCount >= 3 THEN
    loopsKilled := MIN(loopsKilled + 1, 9999);
END_IF;

(* --- Process controllable events. ---------------------------------------- *)
isProgress := TRUE;
(* Perform events until none can be done anymore. *)
(* Track the number of iterations and abort if there are too many. *)
loopCount := 0;
WHILE isProgress AND loopCount < 2 DO
    loopCount := loopCount + 1;
    isProgress := FALSE;

    (*************************************************************
     * Try to perform controllable event "e".
     *
     * - Automaton "p" must always synchronize.
     *************************************************************)
    eventEnabled := TRUE;
    (*******************************
     * Check each synchronizing automaton for having an edge with a true guard.
     *******************************)
    (***********
     * Test edge of automaton "p" to synchronize for event "e".
     * This automaton must have an edge with a true guard to allow the event.
     *
     * Edge being tested:
     * - Location:
     *   - 1st edge in the location
     ***********)
    IF TRUE THEN
        edge_p := 0;
    ELSE
        (* The automaton has no edge with a true guard. Skip to the next event. *)
        eventEnabled := FALSE;
    END_IF;
    (* All checks have been done. If variable "eventEnabled" still holds, event "e" can occur. *)
    IF eventEnabled THEN
        isProgress := TRUE;
        (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
        current_p_x_1 := p_x;
        (*******************************
         * Perform the assignments of each synchronizing automaton.
         *******************************)
        (* Perform assignments of automaton "p". *)
        IF edge_p = 0 THEN
            (* Perform assignments of the 1st edge of automaton "p". *)
            (* Perform update of discrete variable "p.x". *)
            p_x := 7;
        END_IF;
    END_IF;
END_WHILE;
(* Register the first 9999 aborted loops. *)
IF loopCount >= 2 THEN
    loopsKilled := MIN(loopsKilled + 1, 9999);
END_IF;
END_PROGRAM
