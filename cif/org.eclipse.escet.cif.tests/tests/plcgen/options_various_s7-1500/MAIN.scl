ORGANIZATION_BLOCK MAIN
{ S7_Optimized_Access := 'true' }
    VAR_TEMP
        loopCount: DINT;
        curValue: TIME;
        current_p_t: REAL;
        edge_p_1: DINT;
        eventEnabled: BOOL;
        isProgress: BOOL;
        timeOut: BOOL;
        dummyVar1: DINT;
        dummyVar2: DINT;
    END_VAR

BEGIN
    (* Header text file for:
     *  -> (-*-) CIF PLC code generator.
     *)

    (*------------------------------------------------------
     * Model overview:
     *
     * Automaton "p":
     * - Continuous variable "p.t".
     * - Discrete variable "p.x".
     *
     * - PLC edge selection variable "edge_p".
     *
     * - Uncontrollable event "e".
     *
     * - No use of controllable events.
     *
     *------------------------------------------------------ *)

    (* --- Initialize state or update continuous variables. -------------------- *)
    IF "DB".firstRun THEN
        "DB".firstRun := FALSE;
        "DB".loopsKilled := 0;

        (* Initialize the state variables. *)
        (* Initialize discrete variable "p.x". *)
        "DB".p_x := 5;
        (* Initialize continuous variable "p.t". *)
        "DB".p_t := 0.0;
        (* Reset timer of "p_t". *)
        "DB".preset_p_t := LINT_TO_TIME(REAL_TO_LINT("DB".p_t * 1000.0));
        ton_p_t.TON(IN := FALSE, PT := "DB".preset_p_t);
        ton_p_t.TON(IN := TRUE, PT := "DB".preset_p_t);
    ELSE
        (* Update remaining time of continuous variable "p.t". *)
        ton_p_t.TON(IN := TRUE, PT := "DB".preset_p_t, Q => timeOut, ET => curValue);
        "DB".p_t := SEL_REAL(G := timeOut, IN0 := MAX(IN1 := LINT_TO_REAL(TIME_TO_LINT("DB".preset_p_t - curValue)) / 1000.0, IN2 := 0.0), IN1 := 0.0);
    END_IF;

    (* --- Process uncontrollable events. -------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    (* Track the number of iterations and abort if there are too many. *)
    loopCount := 0;
    WHILE isProgress AND loopCount < 101 DO
        loopCount := loopCount + 1;
        isProgress := FALSE;

        (*************************************************************
         * Try to perform uncontrollable event "e".
         *
         * - Automaton "p" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edge of automaton "p" to synchronize for event "e".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edge being tested:
         * - Location:
         *   - 1st edge in the location
         ***********)
        IF "DB".p_t <= 1.0 AND "DB".p_x = 5 THEN
            edge_p_1 := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "e" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_p_t := "DB".p_t;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "p". *)
            IF edge_p_1 = 1 THEN
                (* Perform assignments of the 1st edge of automaton "p". *)
                (* Perform update of continuous variable "p.t". *)
                "DB".p_t := 7.0;
                (* Reset timer of "p_t". *)
                "DB".preset_p_t := LINT_TO_TIME(REAL_TO_LINT("DB".p_t * 1000.0));
                ton_p_t.TON(IN := FALSE, PT := "DB".preset_p_t);
                ton_p_t.TON(IN := TRUE, PT := "DB".preset_p_t);
            END_IF;
        END_IF;
    END_WHILE;
    (* Register the first 9999 aborted loops. *)
    IF loopCount >= 101 THEN
        "DB".loopsKilled := MIN(IN1 := "DB".loopsKilled + 1, IN2 := 9999);
    END_IF;
END_ORGANIZATION_BLOCK
