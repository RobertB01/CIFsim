ORGANIZATION_BLOCK MAIN
{ S7_Optimized_Access := 'true' }
    VAR_TEMP
        curValue: TIME;
        current_aut: DINT;
        current_aut_b: BOOL;
        current_aut_i: DINT;
        current_aut_r: LREAL;
        current_aut_tii: TupleStruct;
        edge_aut: BYTE;
        eventEnabled: BOOL;
        ifResult: BOOL;
        isProgress: BOOL;
        litStruct: TupleStruct;
        timeOut: BOOL;
    END_VAR

BEGIN
    (* Header text file for:
     *  -> (-*-) CIF PLC code generator.
     *)

    (*------------------------------------------------------
     * Model overview:
     *
     * ----
     * Specification (top-level group):
     *
     * - Continuous variable "c".
     * - Input variable "inp".
     *
     * ----
     * Automaton "aut":
     *
     * - Current location of automaton "aut".
     * - Discrete variable "aut.b".
     * - Discrete variable "aut.i".
     * - Discrete variable "aut.r".
     * - Discrete variable "aut.tii".
     *
     * - PLC edge selection variable "edge_aut".
     *
     * - Uncontrollable event "aut.f".
     *
     * - Controllable event "aut.e".
     *------------------------------------------------------ *)

    (* --- Initialize state or update continuous variables. -------------------- *)
    IF "DB".firstRun THEN
        "DB".firstRun := FALSE;

        (* Initialize the state variables. *)
        (* Initialize continuous variable "c". *)
        "DB".c := 0.0;
        (* Reset timer of "c". *)
        "DB".preset_c := LINT_TO_TIME(LREAL_TO_LINT("DB".c * 1000.0));
        ton_c.TON(IN := FALSE, PT := "DB".preset_c);
        ton_c.TON(IN := TRUE, PT := "DB".preset_c);
        (* Initialize discrete variable "aut.r". *)
        "DB".aut_r := 0.0;
        (* Initialize discrete variable "aut.b". *)
        "DB".aut_b := FALSE;
        (* Initialize discrete variable "aut.i". *)
        "DB".aut_i := 0;
        (* Initialize discrete variable "aut.tii". *)
        litStruct.field1 := 0;
        litStruct.field2 := 0;
        "DB".aut_tii := litStruct;
        (* Initialize current location of automaton "aut". *)
        "DB".aut := aut_l1;
    ELSE
        (* Update remaining time of continuous variable "c". *)
        ton_c.TON(IN := TRUE, PT := "DB".preset_c, Q => timeOut, ET => curValue);
        "DB".c := SEL_LREAL(G := timeOut, IN0 := MAX(IN1 := LINT_TO_LREAL(TIME_TO_LINT("DB".preset_c - curValue)) / 1000.0, IN2 := 0.0), IN1 := 0.0);
    END_IF;

    (* --- Process uncontrollable events. -------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (*************************************************************
         * Try to perform uncontrollable event "aut.f".
         *
         * - Automaton "aut" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edges of automaton "aut" to synchronize for event "aut.f".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "l1":
         *   - 30th edge in the location
         *   - 31st edge in the location
         ***********)
        IF "DB".aut = aut_l1 AND ("DB".aut_b OR "DB".aut_b) THEN
            edge_aut := 0;
        ELSIF "DB".aut = aut_l1 AND "DB".aut_b THEN
            edge_aut := 1;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "aut.f" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* There are no assignments to perform for automata that must always synchronize. *)
            (* Automaton "aut" has no assignments to perform. *)
        END_IF;
    END_WHILE;

    (* --- Process controllable events. ---------------------------------------- *)
    isProgress := TRUE;
    (* Perform events until none can be done anymore. *)
    WHILE isProgress DO
        isProgress := FALSE;

        (*************************************************************
         * Try to perform controllable event "aut.e".
         *
         * - Automaton "aut" must always synchronize.
         *************************************************************)
        eventEnabled := TRUE;
        (*******************************
         * Check each synchronizing automaton for having an edge with a true guard.
         *******************************)
        (***********
         * Test edges of automaton "aut" to synchronize for event "aut.e".
         * This automaton must have an edge with a true guard to allow the event.
         *
         * Edges being tested:
         * - Location "l1":
         *   - 1st edge in the location
         *   - 2nd edge in the location
         *   - 3rd edge in the location
         *   - 4th edge in the location
         *   - 5th edge in the location
         *   - 6th edge in the location
         *   - 7th edge in the location
         *   - 8th edge in the location
         *   - 9th edge in the location
         *   - 10th edge in the location
         *   - 11th edge in the location
         *   - 12th edge in the location
         *   - 13th edge in the location
         *   - 14th edge in the location
         *   - 15th edge in the location
         *   - 16th edge in the location
         *   - 17th edge in the location
         *   - 18th edge in the location
         *   - 19th edge in the location
         *   - 20th edge in the location
         *   - 21st edge in the location
         *   - 22nd edge in the location
         *   - 23rd edge in the location
         *   - 24th edge in the location
         *   - 25th edge in the location
         *   - 26th edge in the location
         *   - 27th edge in the location
         *   - 28th edge in the location
         *   - 29th edge in the location
         ***********)
        IF "DB".aut = aut_l1 THEN
            edge_aut := 0;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 1;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 2;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 3;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 4;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 5;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 6;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 7;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 8;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 9;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 10;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 11;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 12;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 13;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 14;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 15;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 16;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 17;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 18;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 19;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 20;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 21;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 22;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 23;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 24;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 25;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 26;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 27;
        ELSIF "DB".aut = aut_l1 THEN
            edge_aut := 28;
        ELSE
            (* The automaton has no edge with a true guard. Skip to the next event. *)
            eventEnabled := FALSE;
        END_IF;
        (* All checks have been done. If variable "eventEnabled" still holds, event "aut.e" can occur. *)
        IF eventEnabled THEN
            isProgress := TRUE;
            (* Make temporary copies of assigned variables to preserve the old values while assigning new values. *)
            current_aut := "DB".aut;
            current_aut_b := "DB".aut_b;
            current_aut_i := "DB".aut_i;
            current_aut_r := "DB".aut_r;
            current_aut_tii := "DB".aut_tii;
            (*******************************
             * Perform the assignments of each synchronizing automaton.
             *******************************)
            (* Perform assignments of automaton "aut". *)
            IF edge_aut = 0 THEN
                (* Perform assignments of the 1st edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := "DB".inp;
            ELSIF edge_aut = 1 THEN
                (* Perform assignments of the 2nd edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := "DB".inp + (-1.0);
                (* Perform update of current location of automaton "aut". *)
                "DB".aut := aut_l2;
            ELSIF edge_aut = 2 THEN
                (* Perform assignments of the 3rd edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := DINT_TO_LREAL(current_aut_i);
            ELSIF edge_aut = 3 THEN
                (* Perform assignments of the 4th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.b". *)
                "DB".aut_b := (NOT current_aut_b);
            ELSIF edge_aut = 4 THEN
                (* Perform assignments of the 5th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.b". *)
                "DB".aut_b := current_aut_b OR (NOT current_aut_b);
            ELSIF edge_aut = 5 THEN
                (* Perform assignments of the 6th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := DINT_TO_LREAL(current_aut_i) / DINT_TO_LREAL(current_aut_i);
            ELSIF edge_aut = 6 THEN
                (* Perform assignments of the 7th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.b". *)
                IF current_aut_b THEN
                    ifResult := current_aut_b;
                ELSE
                    ifResult := current_aut_b;
                END_IF;
                "DB".aut_b := ifResult;
            ELSIF edge_aut = 7 THEN
                (* Perform assignments of the 8th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.i". *)
                "DB".aut_i := current_aut_tii.field1;
            ELSIF edge_aut = 8 THEN
                (* Perform assignments of the 9th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := ABS(current_aut_r);
            ELSIF edge_aut = 9 THEN
                (* Perform assignments of the 10th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := EXP(current_aut_r);
            ELSIF edge_aut = 10 THEN
                (* Perform assignments of the 11th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := LN(current_aut_r);
            ELSIF edge_aut = 11 THEN
                (* Perform assignments of the 12th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := LN(current_aut_r) / LN(10.0);
            ELSIF edge_aut = 12 THEN
                (* Perform assignments of the 13th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.i". *)
                "DB".aut_i := MIN(IN1 := current_aut_i, IN2 := current_aut_i);
            ELSIF edge_aut = 13 THEN
                (* Perform assignments of the 14th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := MIN(IN1 := DINT_TO_LREAL(current_aut_i), IN2 := current_aut_r);
            ELSIF edge_aut = 14 THEN
                (* Perform assignments of the 15th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := MIN(IN1 := current_aut_r, IN2 := DINT_TO_LREAL(current_aut_i));
            ELSIF edge_aut = 15 THEN
                (* Perform assignments of the 16th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := MIN(IN1 := current_aut_r, IN2 := current_aut_r);
            ELSIF edge_aut = 16 THEN
                (* Perform assignments of the 17th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.i". *)
                "DB".aut_i := MAX(IN1 := current_aut_i, IN2 := current_aut_i);
            ELSIF edge_aut = 17 THEN
                (* Perform assignments of the 18th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := MAX(IN1 := DINT_TO_LREAL(current_aut_i), IN2 := current_aut_r);
            ELSIF edge_aut = 18 THEN
                (* Perform assignments of the 19th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := MAX(IN1 := current_aut_r, IN2 := DINT_TO_LREAL(current_aut_i));
            ELSIF edge_aut = 19 THEN
                (* Perform assignments of the 20th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := MAX(IN1 := current_aut_r, IN2 := current_aut_r);
            ELSIF edge_aut = 20 THEN
                (* Perform assignments of the 21st edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := SQRT(current_aut_r);
            ELSIF edge_aut = 21 THEN
                (* Perform assignments of the 22nd edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := ASIN(current_aut_r);
            ELSIF edge_aut = 22 THEN
                (* Perform assignments of the 23rd edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := ACOS(current_aut_r);
            ELSIF edge_aut = 23 THEN
                (* Perform assignments of the 24th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := ATAN(current_aut_r);
            ELSIF edge_aut = 24 THEN
                (* Perform assignments of the 25th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := SIN(current_aut_r);
            ELSIF edge_aut = 25 THEN
                (* Perform assignments of the 26th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := COS(current_aut_r);
            ELSIF edge_aut = 26 THEN
                (* Perform assignments of the 27th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := TAN(current_aut_r);
            ELSIF edge_aut = 27 THEN
                (* Perform assignments of the 28th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.tii". *)
                litStruct.field1 := current_aut_i;
                litStruct.field2 := current_aut_i + 1;
                "DB".aut_tii := litStruct;
            ELSIF edge_aut = 28 THEN
                (* Perform assignments of the 29th edge in location "aut.l1". *)
                (* Perform update of discrete variable "aut.r". *)
                "DB".aut_r := current_aut_r * 2.0;
                (* Perform update of discrete variable "aut.i". *)
                "DB".aut_i := current_aut_i + 1;
            END_IF;
        END_IF;
    END_WHILE;
END_ORGANIZATION_BLOCK
