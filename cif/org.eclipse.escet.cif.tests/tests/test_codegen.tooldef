//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:cif" import cifcodegen;

// Configuration.
string test_path = "codegen";
string test_pattern = "*.cif";
list string default_options = ["--devmode=1"];
map(string:list string) test_options = {
    "codegen/option_code_prefix_invalid_1.cif":     ["-p a%b"],
};
set string test_skip = {};

// Initialize counts.
int count = 0;
int successes = 0;
int failures = 0;
int skipped = 0;

// Find tests.
list string tests = find(test_path, test_pattern);
for i in range(tests):: tests[i] = replace(pathjoin(test_path, tests[i]), "\\", "/");
for i in reverse(range(tests)):
    if contains(test_skip, tests[i]):
        tests = delidx(tests, i);
        count = count + 1;
        skipped = skipped + 1;
    end
end

// Test all tests.
for test in tests:
    string name = basename(test);
    name = chfileext(name, "cif", null);

    // Test for all target languages.
    for target in ["java", "c99", "c89", "simulink"]:
        // Get test specific options.
        list string options = default_options;
        list string extra_options;
        if contains(test_options, test):: extra_options = test_options[test];
        options = options + extra_options;

        // Print what we are testing.
        outln("Testing \"%s\" (%s) using options \"%s\"...", test, target, join(extra_options, " "));

        // Get paths.
        string test_out_exp  = chfileext(test, newext=target + ".out");
        string test_err_exp  = chfileext(test, newext=target + ".err");
        string test_out_real = chfileext(test, newext=target + ".out.real");
        string test_err_real = chfileext(test, newext=target + ".err.real");

        string dir_exp  = chfileext(test, oldext="cif") + "_" + target;
        string dir_real = chfileext(test, oldext="cif") + "_" + target + "_real";

        // Get options.
        string java_pkg = name + "_" + target;
        options = options + ["-l", target, "-o", dir_real];
        options = options + ["--java-package=" + java_pkg];

        // Execute.
        cifcodegen([test] + options, stdout=test_out_real, stderr=test_err_real, ignoreNonZeroExitCode=true);

        // Compare output files.
        bool stderr_diff  = diff(test_err_exp, test_err_real, missingAsEmpty=true, warnOnDiff=true);
        bool stdout_diff  = diff(test_out_exp, test_out_real, missingAsEmpty=true, warnOnDiff=true);
        if not stderr_diff::  rmfile(test_err_real);
        if not stdout_diff::  rmfile(test_out_real);

        // Compare output directories.
        list string filenames_exp;
        if isdir(dir_exp):
            filenames_exp = find(dir_exp, recursive=true, files=true, dirs=false);
        end
        list string filenames_real;
        if isdir(dir_real):
            filenames_real = find(dir_real, recursive=true, files=true, dirs=false);
        end
        set string filenames;
        for filename in filenames_exp + filenames_real:: filenames = filenames or {filename};

        int target_diff_count;
        for filename in filenames:
            string filename_exp = replace(pathjoin(dir_exp, filename), "\\", "/");
            string filename_real = replace(pathjoin(dir_real, filename), "\\", "/");
            bool target_diff = diff(filename_exp, filename_real, missingAsEmpty=true, warnOnDiff=true);
            if target_diff:: target_diff_count = target_diff_count + 1;
        end
        if isdir(dir_real) and target_diff_count == 0:: rmdir(dir_real);

        // Update counts.
        int diff_count = 0;
        if stderr_diff::  diff_count = diff_count + 1;
        if stdout_diff::  diff_count = diff_count + 1;
        diff_count = diff_count + target_diff_count;

        count = count + 1;
        if diff_count == 0:: successes = successes + 1;
        if diff_count > 0:: failures = failures + 1;
    end
end

// Get result message.
string rslt;
if failures == 0: rslt = "SUCCESS"; else rslt = "FAILURE"; end

string msg = fmt("Test %s (%s): %d tests, %d successes, %d failures, %d skipped.",
                 rslt, test_path, count, successes, failures, skipped);

// Output result message.
if failures == 0:
    outln(msg);
else
    errln(msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit failures;
