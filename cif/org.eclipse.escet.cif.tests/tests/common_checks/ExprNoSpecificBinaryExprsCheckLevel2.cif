//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Top level scope.
invariant 1 < 2;

// Group.
group grp:
  invariant 1 < 2;
end

// Nested group.
group nested_grp:
  group nested_grp:
    invariant 1 < 2;
  end
end

// With type declarations.
group type_decl:
  type t = int; // rangeless int
  alg t a = 1;
  invariant a < a; // rangeless int
end

// ADDITION.
group ADDITION_NUMBERS:
  input int k;
  invariant GG: 1 + 1 > 0;
  invariant KG: k + 1 > 0;
  invariant GK: 1 + k > 0;
  invariant KK: k + k > 0;
  invariant GR: 1 + 1.0 > 0;
  invariant RG: 1.0 + 1 > 0;
  invariant RR: 1.0 + 1.0 > 0;
end

// ADDITION_LISTS.
group ADDITION_LISTS:
  invariant empty([1] + [1]);
end

// ADDITION_STRINGS.
group ADDITION_STRINGS:
  invariant "a" + "a" = "aa";
end

// ADDITION_DICTS.
group ADDITION_DICTS:
  invariant empty({true: false} + {false: true});
end

// BI_CONDITIONAL.
group BI_CONDITIONAL:
  invariant true <=> false;
end

// CONJUNCTION.
group CONJUNCTION:
  invariant BB: true and false;
  invariant SS: empty({true} and {false});
end

// DISJUNCTION.
group DISJUNCTION:
  invariant BB: true or false;
  invariant SS: empty({true} or {false});
end

// DIVISION.
group DIVISION:
  invariant II: 1 / 1 = 0;
  invariant IR: 1 / 1.0 = 0;
  invariant RI: 1.0 / 1 = 0;
  invariant RR: 1.0 / 1.0 = 0;
end

// ELEMENT_OF_LISTS.
group ELEMENT_OF_LISTS:
  invariant 1 in [1];
end

// ELEMENT_OF_SETS.
group ELEMENT_OF_SETS:
  invariant 1 in {1};
end

// ELEMENT_OF_DICTS.
group ELEMENT_OF_DICTS:
  invariant 1 in {1: 2};
end

// EQUAL.
group EQUAL:
  enum E = A, B;
  invariant 1 = 1;
  invariant true = true;
  invariant 1.2 = 1.2;
  invariant [1, 2, 3] = [1, 2, 3];
  invariant {1, 2, 3} = {1, 2, 3};
  invariant {1:10, 2:20} = {1:10, 2:20};
  invariant A = A;
  invariant (1, 2, 3) = (1, 2, 3);
  invariant "abc" = "abc";
end

// GREATER_EQUAL.
group GREATER_EQUAL:
  input int k;
  invariant GG: 1 >= 1;
  invariant KK: k >= k;
  invariant IR: 1 >= 1.0;
  invariant RI: 1.0 >= 1;
  invariant RR: 1.0 >= 1.0;
end

// GREATER_THAN.
group GREATER_THAN:
  input int k;
  invariant GG: 1 > 1;
  invariant KK: k > k;
  invariant IR: 1 > 1.0;
  invariant RI: 1.0 > 1;
  invariant RR: 1.0 > 1.0;
end

// IMPLICATION.
group IMPLICATION:
  invariant true => false;
end

// INTEGER_DIVISION.
group INTEGER_DIVISION:
  input int k;
  invariant GG: 1 div 1 = 0;
  invariant GK: 1 div k = 0;
  invariant KG: k div 1 = 0;
  invariant KK: k div k = 0;
end

// LESS_EQUAL.
group LESS_EQUAL:
  input int k;
  invariant GG: 1 <= 1;
  invariant KK: k <= k;
  invariant IR: 1 <= 1.0;
  invariant RI: 1.0 <= 1;
  invariant RR: 1.0 <= 1.0;
end

// LESS_THAN.
group LESS_THAN:
  input int k;
  invariant GG: 1 < 1;
  invariant KK: k < k;
  invariant IR: 1 < 1.0;
  invariant RI: 1.0 < 1;
  invariant RR: 1.0 < 1.0;
end

// MODULUS.
group MODULUS:
  input int k;
  invariant GG: 1 mod 1 = 0;
  invariant GK: 1 mod k = 0;
  invariant IG: 1 mod 1 = 0;
  invariant KK: k mod k = 0;
end

// MULTIPLICATION.
group MULTIPLICATION:
  input int k;
  invariant GG: 1 * 1 = 0;
  invariant KK: k * k = 0;
  invariant IR: 1 * 1.0 = 0;
  invariant RI: 1.0 * 1 = 0;
  invariant RR: 1.0 * 1.0 = 0;
end

// SUBSET.
group SUBSET:
  invariant {true} sub {false};
end

// SUBTRACTION_NUMBERS.
group SUBTRACTION_NUMBERS:
  input int k;
  invariant GG: 1 - 1 > 0;
  invariant KG: k - 1 > 0;
  invariant GK: 1 - k > 0;
  invariant KK: k - k > 0;
  invariant GR: 1 - 1.0 > 0;
  invariant RG: 1.0 - 1 > 0;
  invariant RR: 1.0 - 1.0 > 0;
end

// SUBTRACTION_CONTAINERS.
group SUBTRACTION_CONTAINERS:
  input int k;
  invariant SS: empty({true} - {false});
  invariant DD: empty({1: 2} - {1: 2});
  invariant DS: empty({1: 2} - {1});
  invariant DLG: empty({1: 2} - [1]);
  invariant DLK: empty({1: 2} - [k]);
end

// UNEQUAL.
group UNEQUAL:
  enum E = A, B;
  invariant 1 != 2;
  invariant true != false;
  invariant 1.2 != 1.5;
  invariant [1, 2, 4] != [1, 2, 3];
  invariant {1, 2, 4} != {1, 2, 3};
  invariant {1:10, 5:20} != {1:10, 2:20};
  invariant A = B;
  invariant (1, 2, 4) != (1, 2, 3);
  invariant "abc" != "def";
end
