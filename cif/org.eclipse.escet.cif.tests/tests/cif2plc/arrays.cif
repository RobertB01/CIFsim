//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Suppress no input variables warning.
input int i;

const list[5] int[0..50] c = [1, 2, 3, 4, 5];
const list[2] list[5] int c2 = [c, c];

func int pf(int x):
  return c[x];
end

func list[5] int lf(list[5] int l; int x):
  list[5] int r = l;
  r[x] := 6;
  return r;
end

func list[2] list[5] int llf(int x, y):
  list[2] list[5] int r = c2;
  r[0][x] := y;
  return r;
end

automaton aut:
  disc int i = 0;
  disc int j = 1;
  disc list[5] int l = c;
  disc list[2] list[5] int[0..99] ll = [c, c];
  disc list[0] int empty_arr;

  location l1:
    initial;
    edge do i := l[0], j := l[-1] goto l2; // i = 1, j = 5

  location l2:
    edge do l[0] := 7, l[-1] := 8 goto l3; // l[0] = 7, l[4] = 8

  location l3:
    edge do ll[-2] := lf([11, 22, 33, 44, 55], -1) goto l4; // ll[0] = [11, 22, 33, 44, 6]

  location l4:
    edge do ll := llf(-1, 9) goto l5; // ll = [[1, 2, 3, 4, 9], [1, 2, 3, 4, 5]]

  location l5:
    edge do ll[0] := llf(3, 123)[0] goto l6; // ll[0] = [1, 2, 3, 123, 5]

  location l6:
    edge do i := ll[1][2] goto l7; // i = 3

  location l7:
    edge do empty_arr := [] goto l8; // empty_arr = []

  location l8;
end
