<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<TcPlcObject ProductVersion="3.1.0.18" Version="1.1.0.1">
  <POU Name="MAIN">
    <Declaration>
      <![CDATA[PROGRAM MAIN
VAR_OUTPUT
    timerValue0: TIME;
    timerValue1: TIME;
END_VAR
VAR
    cnt: LINT;
    first: BOOL := TRUE;
    curTimerValue: TIME;
    state0: STATE;
    curTime: LREAL;
    loopsKilled: LINT;
END_VAR
VAR_TEMP
    lastTimerValue: TIME;
    curDeltaTime: TIME;
    curDeltaSecs: LREAL;
    state1: STATE;
    progress: BOOL;
    loopCount: INT;
END_VAR]]>
    </Declaration>
    <Implementation>
      <ST>
        <![CDATA[
// Handle 'time' and cycle time.
cnt := cnt + 1;

timer0(IN := curTimer = 0, PT := T#1D);
timer1(IN := curTimer = 1, PT := T#1D);
timerValue0 := timer0.ET;
timerValue1 := timer1.ET;

lastTimerValue := curTimerValue;
IF curTimer = 0 THEN
    curTimerValue := timerValue0;
ELSE
    curTimerValue := timerValue1;
END_IF;
curDeltaTime := curTimerValue - lastTimerValue;
curDeltaSecs := TIME_TO_LREAL(curDeltaTime) / 1000;
curTime := curTime + curDeltaSecs;

IF cnt MOD 10 = 0 THEN
    curTimer := 1 - curTimer;
    curTimerValue := T#0S;
    timer0(IN := curTimer = 0, PT := T#1D);
    timer1(IN := curTimer = 1, PT := T#1D);
    timerValue0 := timer0.ET;
    timerValue1 := timer1.ET;
END_IF;

IF first THEN
    first := FALSE;

    // Initialize state variables for initial state.
    state0.dvar_M_p_v0 := 0.0;
    state0.dvar_M_p_v1 := 1;
    state0.dvar_M_p_v2 := 2;
    state0.dvar_M_p_v3 := 3;
    state0.dvar_M_p_v99 := 1.0e99;
    state0.dvar_M_p_vx := 0.0;
    state0.dvar_M_p_vr := makeTupleStruct_1(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0);
    state0.dvar_M_p := elit_m1;
ELSE
    // Update continuous variables for time delay.

    state0.curTime := curTime;
END_IF;

// Event loop.
WHILE TRUE DO
    progress := FALSE;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_p) = (elit_m1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_p_vr := makeTupleStruct_1(-(state0.dvar_M_p_v0), -(-(-(state0.dvar_M_p_v0))), -(-(-(-(-(state0.dvar_M_p_v0))))), (state0.dvar_M_p_v0) * (-1.0), (state0.dvar_M_p_v0) / (-1), (-4.9e-324) / (state0.dvar_M_p_v99), EXPT(-(state0.dvar_M_p_v0), 1.0/3), LN((state0.dvar_M_p_v1) - (1.0e-18)), LN((state0.dvar_M_p_v1) - (1.0e-17)), LN((state0.dvar_M_p_v1) - (1.0e-16)), EXPT(-1.0e-300, state0.dvar_M_p_v1), EXPT(-1.0e-300, state0.dvar_M_p_v2), EXPT(-1.0e-300, state0.dvar_M_p_v3), -(state0.dvar_M_p_vx));
            state1.dvar_M_p := elit_m2;

            state0 := state1;
        END_IF;
    END_IF;

    // Done with events?
    IF NOT progress THEN
        EXIT;
    END_IF;

    // Protect against events that are always enabled.
    loopCount := loopCount + 1;
    IF loopCount >= 100 THEN
        loopsKilled := loopsKilled + 1;
        EXIT;
    END_IF;
END_WHILE;]]>
      </ST>
    </Implementation>
    <ObjectProperties/>
  </POU>
</TcPlcObject>
