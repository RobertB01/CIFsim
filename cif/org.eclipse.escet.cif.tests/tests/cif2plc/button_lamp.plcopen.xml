<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eclipse Foundation" creationDateTime="1970-01-01T01:00:00" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="MyProj">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="STATE">
        <baseType>
          <struct>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_hw_button">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_hw_lamp_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_hw_lamp">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_sup">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_timer_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_timer">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="enum_E">
        <baseType>
          <enum>
            <values>
              <value name="elit_Idle"/>
              <value name="elit_Off"/>
              <value name="elit_On"/>
              <value name="elit_Pushed"/>
              <value name="elit_Released"/>
              <value name="elit_Running"/>
              <value name="elit_s1"/>
              <value name="elit_s10"/>
              <value name="elit_s2"/>
              <value name="elit_s3"/>
              <value name="elit_s4"/>
              <value name="elit_s5"/>
              <value name="elit_s6"/>
              <value name="elit_s7"/>
              <value name="elit_s8"/>
              <value name="elit_s9"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="derivcvar_M_timer_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_timer_t := 1.0;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="MAIN" pouType="program">
        <interface>
          <outputVars>
            <variable name="timerValue0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="timerValue1">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cnt">
              <type>
                <LINT/>
              </type>
            </variable>
            <variable name="first">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="curTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="state0">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="loopsKilled">
              <type>
                <LINT/>
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="lastTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaTime">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaSecs">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="state1">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="progress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="loopCount">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="b1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
// Handle 'time' and cycle time.
cnt := cnt + 1;

timer0(IN := curTimer = 0, PT := T#1D);
timer1(IN := curTimer = 1, PT := T#1D);
timerValue0 := timer0.ET;
timerValue1 := timer1.ET;

lastTimerValue := curTimerValue;
IF curTimer = 0 THEN
    curTimerValue := timerValue0;
ELSE
    curTimerValue := timerValue1;
END_IF;
curDeltaTime := curTimerValue - lastTimerValue;
curDeltaSecs := TIME_TO_LREAL(curDeltaTime) / 1000;
curTime := curTime + curDeltaSecs;

IF cnt MOD 10 = 0 THEN
    curTimer := 1 - curTimer;
    curTimerValue := T#0S;
    timer0(IN := curTimer = 0, PT := T#1D);
    timer1(IN := curTimer = 1, PT := T#1D);
    timerValue0 := timer0.ET;
    timerValue1 := timer1.ET;
END_IF;

IF first THEN
    first := FALSE;

    // Initialize state variables for initial state.
    state0.dvar_M_hw_button := elit_Released;
    state0.dvar_M_hw_lamp_bit := FALSE;
    state0.dvar_M_hw_lamp := elit_Off;
    state0.dvar_M_sup := elit_s1;
    state0.cvar_M_timer_t := 0.0;
    state0.dvar_M_timer := elit_Idle;
ELSE
    // Update continuous variables for time delay.
    state1.cvar_M_timer_t := state0.cvar_M_timer_t + curDeltaSecs * derivcvar_M_timer_t(state0);

    state0.curTime := curTime;
    state0.cvar_M_timer_t := state1.cvar_M_timer_t;
END_IF;

// Event loop.
WHILE TRUE DO
    progress := FALSE;

    // Event "button_push".
    IF NOT progress THEN
        b1 := (state0.dvar_M_hw_button) = (elit_Released);
        b1 := b1 AND (ivar_M_hw_button_bit);
        IF b1 THEN
            b2 := (state0.dvar_M_sup) = (elit_s1);
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s4));
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s5));
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s7));
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s9));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_hw_button := elit_Pushed;
            IF ((state0.dvar_M_sup) = (elit_s1)) THEN
                state1.dvar_M_sup := elit_s2;
            ELSIF ((state0.dvar_M_sup) = (elit_s4)) THEN
                state1.dvar_M_sup := elit_s2;
            ELSIF ((state0.dvar_M_sup) = (elit_s5)) THEN
                state1.dvar_M_sup := elit_s3;
            ELSIF ((state0.dvar_M_sup) = (elit_s7)) THEN
                state1.dvar_M_sup := elit_s6;
            ELSIF ((state0.dvar_M_sup) = (elit_s9)) THEN
                state1.dvar_M_sup := elit_s8;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "button_release".
    IF NOT progress THEN
        b1 := (state0.dvar_M_hw_button) = (elit_Pushed);
        b1 := b1 AND (NOT(ivar_M_hw_button_bit));
        IF b1 THEN
            b2 := (state0.dvar_M_sup) = (elit_s2);
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s3));
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s6));
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s8));
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s10));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_hw_button := elit_Released;
            IF ((state0.dvar_M_sup) = (elit_s2)) THEN
                state1.dvar_M_sup := elit_s4;
            ELSIF ((state0.dvar_M_sup) = (elit_s3)) THEN
                state1.dvar_M_sup := elit_s5;
            ELSIF ((state0.dvar_M_sup) = (elit_s6)) THEN
                state1.dvar_M_sup := elit_s7;
            ELSIF ((state0.dvar_M_sup) = (elit_s8)) THEN
                state1.dvar_M_sup := elit_s9;
            ELSIF ((state0.dvar_M_sup) = (elit_s10)) THEN
                state1.dvar_M_sup := elit_s1;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "lamp_off".
    IF NOT progress THEN
        b1 := (state0.dvar_M_hw_lamp) = (elit_On);
        IF b1 THEN
            b2 := (state0.dvar_M_sup) = (elit_s8);
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s9));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_hw_lamp_bit := FALSE;
            state1.dvar_M_hw_lamp := elit_Off;
            IF ((state0.dvar_M_sup) = (elit_s8)) THEN
                state1.dvar_M_sup := elit_s10;
            ELSIF ((state0.dvar_M_sup) = (elit_s9)) THEN
                state1.dvar_M_sup := elit_s1;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "lamp_on".
    IF NOT progress THEN
        b1 := (state0.dvar_M_hw_lamp) = (elit_Off);
        IF b1 THEN
            b2 := (state0.dvar_M_sup) = (elit_s2);
            b2 := b2 OR ((state0.dvar_M_sup) = (elit_s4));
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_hw_lamp_bit := TRUE;
            state1.dvar_M_hw_lamp := elit_On;
            IF ((state0.dvar_M_sup) = (elit_s2)) THEN
                state1.dvar_M_sup := elit_s3;
            ELSIF ((state0.dvar_M_sup) = (elit_s4)) THEN
                state1.dvar_M_sup := elit_s5;
            END_IF;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.timer_start".
    IF NOT progress THEN
        b2 := (state0.dvar_M_sup) = (elit_s3);
        b2 := b2 OR ((state0.dvar_M_sup) = (elit_s5));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_timer) = (elit_Idle));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_sup) = (elit_s3)) THEN
                state1.dvar_M_sup := elit_s6;
            ELSIF ((state0.dvar_M_sup) = (elit_s5)) THEN
                state1.dvar_M_sup := elit_s7;
            END_IF;
            state1.cvar_M_timer_t := 0.0;
            state1.dvar_M_timer := elit_Running;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.timer_timeout".
    IF NOT progress THEN
        b2 := (state0.dvar_M_sup) = (elit_s6);
        b2 := b2 OR ((state0.dvar_M_sup) = (elit_s7));
        b1 := b2;
        b1 := b1 AND ((state0.dvar_M_timer) = (elit_Running));
        b1 := b1 AND ((state0.cvar_M_timer_t) &gt;= (3.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            IF ((state0.dvar_M_sup) = (elit_s6)) THEN
                state1.dvar_M_sup := elit_s8;
            ELSIF ((state0.dvar_M_sup) = (elit_s7)) THEN
                state1.dvar_M_sup := elit_s9;
            END_IF;
            state1.dvar_M_timer := elit_Idle;

            state0 := state1;
        END_IF;
    END_IF;

    // Done with events?
    IF NOT progress THEN
        EXIT;
    END_IF;

    // Protect against events that are always enabled.
    loopCount := loopCount + 1;
    IF loopCount &gt;= 100 THEN
        loopsKilled := loopsKilled + 1;
        EXIT;
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="MyConfig">
        <resource name="MyResource">
          <task interval="t#7ms" name="MyTask" priority="123">
            <pouInstance name="MAIN" typeName="MAIN"/>
          </task>
          <globalVars constant="false" name="INPUTS">
            <variable address="%I*" name="ivar_M_hw_button_bit">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="TIMERS">
            <variable name="timer0">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="timer1">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="curTimer">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
