//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

type tbir = tuple(bool b; int i; real r);

enum e1 = l1, l2;
enum e2 = l3, l4;

plant p:
  disc bool vt = true, vf = false;
  disc int[2..3] vr2 = 2, vr3 = 3;
  disc int v0 = 0, v1 = 1, v2 = 2, v3 = 3, v123 = 123,
           vn1 = -1, vn2 = -2;
  disc real v00 = 0.0, v01 = 0.1, v05 = 0.5, v10 = 1.0, v20 = 2.0, v30 = 3.0,
            v270 = 27.0,
            vn01 = -0.1, vn10 = -1.0;
  disc real e = 2.71828182846;
  disc e1 ve1 = l1, ve2 = l2;
  disc e2 ve3 = l3, ve4 = l4;
  disc tbir vbir;

  disc bool vb000, vb001, vb002, vb003, vb004, vb005, vb006, vb007, vb008, vb009,
            vb010, vb011, vb012, vb013, vb014, vb015, vb016, vb017, vb018, vb019,
            vb020, vb021, vb022, vb023, vb024, vb025, vb026, vb027, vb028, vb029,
            vb030, vb031, vb032, vb033, vb034, vb035, vb036, vb037, vb038, vb039,
            vb040, vb041, vb042, vb043, vb044, vb045, vb046, vb047, vb048, vb049,
            vb050, vb051, vb052, vb053, vb054, vb055, vb056, vb057, vb058, vb059,
            vb060, vb061, vb062, vb063, vb064, vb065, vb066, vb067, vb068, vb069,
            vb070, vb071, vb072, vb073, vb074, vb075, vb076, vb077, vb078, vb079,
            vb080, vb081, vb082, vb083, vb084, vb085, vb086, vb087, vb088, vb089,
            vb090, vb091, vb092, vb093, vb094, vb095, vb096, vb097, vb098, vb099;
  disc int vi00, vi01, vi02, vi03, vi04, vi05, vi06, vi07, vi08, vi09,
           vi10, vi11, vi12, vi13, vi14, vi15, vi16, vi17, vi18, vi19,
           vi20, vi21, vi22, vi23, vi24, vi25, vi26, vi27, vi28, vi29,
           vi30, vi31, vi32, vi33, vi34;
  disc real vr00, vr01, vr02, vr03, vr04, vr05, vr06, vr07, vr08, vr09,
            vr10, vr11, vr12, vr13, vr14, vr15, vr16, vr17, vr18, vr19,
            vr20, vr21, vr22, vr23, vr24, vr25, vr26, vr27, vr28, vr29,
            vr30, vr31, vr32, vr33, vr34, vr35, vr36, vr37, vr38, vr39,
            vr40, vr41, vr42, vr43, vr44, vr45, vr46, vr47, vr48, vr49,
            vr50, vr51, vr52, vr53, vr54, vr55, vr56, vr57, vr58;

  location m1:
    initial;
    edge do // unary not
            vb000 := not vf,
            vb001 := not vt,

            // =>
            vb002 := vf => vf,
            vb003 := vf => vt,
            vb004 := vt => vf,
            vb005 := vt => vt,
            //vf => (sqrt(vn10) > 0), // short circuit

            // <=>
            vb006 := vf <=> vf,
            vb007 := vf <=> vt,
            vb008 := vt <=> vf,
            vb009 := vt <=> vt,

            // and
            vb010 := vf and vf,
            vb011 := vf and vt,
            vb012 := vt and vf,
            vb013 := vt and vt,
            //vf and (sqrt(vn10) > 0), // short circuit

            // or
            vb014 := vf or vf,
            vb015 := vf or vt,
            vb016 := vt or vf,
            vb017 := vt or vt,
            //vt or (sqrt(vn10) > 0), // short circuit

            // binary < (int - int)
            vb018 := v0 < v1,
            vb019 := v1 < v1,
            vb020 := v2 < v1,

            // binary <= (int - int)
            vb021 := v0 <= v1,
            vb022 := v1 <= v1,
            vb023 := v2 <= v1,

            // binary > (int - int)
            vb024 := v0 > v1,
            vb025 := v1 > v1,
            vb026 := v2 > v1,

            // binary >= (int - int)
            vb027 := v0 >= v1,
            vb028 := v1 >= v1,
            vb029 := v2 >= v1,

            // binary < (int - real)
            vb030 := v0 < v10,
            vb031 := v1 < v10,
            vb032 := v2 < v10,

            // binary <= (int - real)
            vb033 := v0 <= v10,
            vb034 := v1 <= v10,
            vb035 := v2 <= v10,

            // binary > (int - real)
            vb036 := v0 > v10,
            vb037 := v1 > v10,
            vb038 := v2 > v10,

            // binary >= (int - real)
            vb039 := v0 >= v10,
            vb040 := v1 >= v10,
            vb041 := v2 >= v10,

            // binary < (real - int)
            vb042 := v00 < v1,
            vb043 := v10 < v1,
            vb044 := v20 < v1,

            // binary <= (real - int)
            vb045 := v00 <= v1,
            vb046 := v10 <= v1,
            vb047 := v20 <= v1,

            // binary > (real - int)
            vb048 := v00 > v1,
            vb049 := v10 > v1,
            vb050 := v20 > v1,

            // binary >= (real - int)
            vb051 := v00 >= v1,
            vb052 := v10 >= v1,
            vb053 := v20 >= v1,

            // binary < (real - real)
            vb054 := v00 < v10,
            vb055 := v10 < v10,
            vb056 := v20 < v10,

            // binary <= (real - real)
            vb057 := v00 <= v10,
            vb058 := v10 <= v10,
            vb059 := v20 <= v10,

            // binary > (real - real)
            vb060 := v00 > v10,
            vb061 := v10 > v10,
            vb062 := v20 > v10,

            // binary >= (real - real)
            vb063 := v00 >= v10,
            vb064 := v10 >= v10,
            vb065 := v20 >= v10,

            // binary = (bool)
            vb066 := vt = true,
            vb067 := vt = false,
            vb068 := vf = true,
            vb069 := vf = false,

            // binary = (int)
            vb070 := v0 = 0,
            vb071 := v0 = 1,
            vb072 := v1 = 0,
            vb073 := v1 = 1,

            // binary = (real)
            vb074 := v00 = 0.0,
            vb075 := v00 = 1.0,
            vb076 := v10 = 0.0,
            vb077 := v10 = 1.0,

            // binary = (enum)
            vb078 := ve1 = l2,
            vb079 := ve1 = l1,
            vb080 := ve2 = l2,
            vb081 := ve2 = l1,
            vb082 := ve3 = l3,
            vb083 := ve3 = l4,
            vb084 := ve4 = l3,
            vb085 := ve4 = l4,

            // binary != (bool)
            vb086 := vt != true,
            vb087 := vt != false,
            vb088 := vf != true,
            vb089 := vf != false,

            // binary != (int)
            vb090 := v0 != 0,
            vb091 := v0 != 1,
            vb092 := v1 != 0,
            vb093 := v1 != 1,

            // binary != (real)
            vb094 := v00 != 0.0,
            vb095 := v00 != 1.0,
            vb096 := v10 != 0.0,
            vb097 := v10 != 1.0,

            // binary != (enum)
            vb098 := ve1 != l2,
            vb099 := ve1 != l1,

            // unary +/- (int)
            vi00 := -vn1,
            vi01 := --vn2,
            vi02 := -v3,
            vi03 := +v2,
            vi04 := +vn2,

            // cast int to int
            vi05 := <int>v123,

            // binary + (int - int)
            vi06 := v2 + v3,

            // binary - (int - int)
            vi07 := v2 - v3,

            // binary * (int - int)
            vi08 := v2 * v3,

            // binary div
            vi09 := 7 div 4,
            vi10 := 7 div -4,
            vi11 := -7 div 4,
            vi12 := -7 div -4,

            // binary mod
            vi13 := 7 mod 4,
            vi14 := 7 mod -4,
            vi15 := -7 mod 4,
            vi16 := -7 mod -4,
            vi17 := v1 mod v0, // (0, err in CIF)

            // if expr
            vi18 := if vt: 8 else 9 end,
            vi19 := if vf: 8 else 9 end,
            vi20 := if vf: 8 elif vf: 9 else 10 end,
            vi21 := if vf: 8 elif vt: 9 else 10 end,
            vi22 := if vt: 8 elif vf: 9 else 10 end,
            vi23 := if vt: 8 elif vt: 9 else 10 end,
            vi24 := if vf: 4 elif vf: 5 elif vf: 6 else 7 end,

            // stdlib functions
            vi25 := abs(vn1),
            vi26 := abs(vn2),
            vi27 := min(v0, v1),
            vi28 := min(v1, v1),
            vi29 := min(v2, v1),
            vi30 := max(v0, v1),
            vi31 := max(v1, v1),
            vi32 := max(v2, v1),
            vi33 := pow(vr2, vr3),

            // proj fcall rslt
            vi34 := dup(234)[0],

            // cast int to real
            vr00 := <real>v123,

            // cast real to real
            vr01 := <real>v00,

            // unary +/- (real)
            vr02 := -vn01,
            vr03 := --vn10,
            vr04 := -v05,
            vr05 := +v01,
            vr06 := +vn01,

            // binary + (real - int)
            vr07 := v20 + v3,
            vr08 := v2 + v30,

            // binary + (real - real)
            vr09 := v20 + v30,

            // binary - (real - int)
            vr10 := v20 - v3,
            vr11 := v2 - v30,

            // binary - (real - real)
            vr12 := v20 - v30,

            // binary * (real - int)
            vr13 := v20 * v3,
            vr14 := v2 * v30,

            // binary * (real - real)
            vr15 := v20 * v30,

            // binary / (int - int)
            vr16 := v2 / v3,

            // binary / (real - int)
            vr17 := v20 / v3,
            vr18 := v2 / v30,

            // binary / (real - real)
            vr19 := v20 / v30,

            // stdlib functions
            vr20 := abs(vn01),
            vr21 := abs(vn10),
            vr22 := cbrt(v270),
            vr23 := exp(ln(ln(e))),
            vr24 := log(pow(10, v3)),
            vr25 := min(v0,  v10),
            vr26 := min(v1,  v10),
            vr27 := min(v2,  v10),
            vr28 := min(v00, v1),
            vr29 := min(v10, v1),
            vr30 := min(v20, v1),
            vr31 := min(v00, v10),
            vr32 := min(v10, v10),
            vr33 := min(v20, v10),
            vr34 := max(v0,  v10),
            vr35 := max(v1,  v10),
            vr36 := max(v2,  v10),
            vr37 := max(v00, v1),
            vr38 := max(v10, v1),
            vr39 := max(v20, v1),
            vr40 := max(v00, v10),
            vr41 := max(v10, v10),
            vr42 := max(v20, v10),
            vr43 := pow(v00, v00),
            vr44 := pow(v2, v3),
            vr45 := pow(v2, v30),
            vr46 := pow(v20, v3),
            vr47 := pow(v20, v30),
            vr48 := sqrt(v00),
            vr49 := sqrt(v01),
            vr50 := sqrt(v10),
            vr51 := sqrt(v20),
            vr52 := sin(v05),
            vr53 := cos(v05),
            vr54 := tan(v05),
            vr55 := asin(v05),
            vr56 := acos(v05),
            vr57 := atan(v05),

            // fcall, params
            vr58 := add3(v1, v2, v3)
    goto m2;

  location m2:
    edge do // tuple field proj
            vbir[i] := vbir[i] + v1
    goto m3;

  location m3;
end

func real add3(int a, b, c):
  return a + <real>b + c;
end

func int, int dup(int a):
  return a, a;
end
