//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

enum e = X, Y;

type t   = e;
type ft  = func real (real);
type dt1 = dict(int:real);
type dt2 = dict(set list tuple(int a, b):ft);
type tt  = tuple(int a, b);

type intmm = int[-2147483647-1 .. 2147483647];

// All types.
alg bool           b  = true;
alg int            i1 = 1;
alg int[1..2]      i2 = 2;
alg intmm          i3 = 3;
alg e              e1 = X;
alg t              e2 = Y;
alg real           r  = 1.0;
alg string         g  = "abc";
alg list int       l0 = [1, 2];
alg list[3] int    l1 = [1, 2, 3];
alg list[2..4] int l2 = [1, 2];
alg list[5..5] int l3 = [1, 2, 3, 4, 5];
alg set int        s  = {1, 2};
alg ft             f  = p.v1;
alg dt1            d1 = {1:1.0, 2:2.0};
alg dt2            d2 = {{[t1]}: p.v1, {[(3, 4), (5, 6)]}: p.v1};
alg tt             t1 = (1, 2);
alg dist real      d3 = p.d4;

// All types in lists, with 2 elements, to test type merging.
alg list bool      lb  = [true, false];
alg list int       li1 = [1, 8];
alg list int[1..2] li2 = [2, 2, 1];
alg list intmm     li3 = [-2147483647-1, 3, 2147483647];
alg list e         le1 = [X, X];
alg list t         le2 = [Y, Y];
alg list real      lr  = [1.0, 2.0];
alg list string    lg  = ["abc", "def"];
alg list list int  ll  = [[1, 2], [3, 4]];
alg list set int   ls  = [{1, 2}, {2, 3}];
alg list ft        lf  = [p.v1, p.v1];
alg list dt1       ld1 = [d1, d1];
alg list dt2       ld2 = [d2, d2];
alg list tt        lt1 = [(1, 2), (4, 5)];
alg list dist real ld3 = [p.d4, p.d4];

// Test type merging for ranged lists.
alg list[4] int l4 = [1, 2, 3, 4];
alg list[6] int l6 = [1, 2, 3, 4, 5, 6];
alg list[0..4] int l04 = [1];
alg list[3..7] int l37 = [1, 2, 3];

alg int size_l1 = size(if true: <list[0] int>[]
                       else     <list[1] int[1..1]>[1]
                       end);
alg int size_l2 = size(if true: l04 else l37 end);
alg int size_l3 = size(if true: l4 else l6 end);

automaton p:
  disc ft v1;
  disc dt2 d1;
  disc dist real d4 = random();
  disc tuple(real s; dist real d) r;
  invariant size(d1) > 0;
  location:
    initial;
    edge do r := sample d3;
end
