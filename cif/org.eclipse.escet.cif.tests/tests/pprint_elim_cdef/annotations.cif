//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Annotations on the specification.

@@a
@@a()
@@a(b: 123)

// All syntax variations (for annotated input variables).

input bool i0; // No annotations.

@a
input bool i1;

@a:b
input bool i2;

@a:b:c
input bool i3;

@a
@b()
@c(p: 1)
@d(p: 1,)
@e(p: 1, q: 2)
@f(p: 1, q: 2,)
@g(p: 1, q: 2, r: 3)
@h(p: 1, q: 2, r: 3,)
@i(p: true, q: "a")
@j(p: 1, q: i4 + 1)
@k(b: 1, c.d: 2, e.f.g.h: [true, false])
@l(1, a: 2, 3, b: 4, 5)
input int[1..3] i4;

@abc:def input bool i5;

@a(b:1)
input bool i6, i7, i8;

@a ( x: 1,
  y:2, z : /* comment */
 [true, false] // a
   )
input bool i9;

@a($disc: 5, $const.$apple.$alg: 123)
input bool i10;

@a(b: 1)
@abc:def
input bool i11;

@abc:def
@a(b: 1)
input bool i12;

@a(b: 1)
@a(b: 3)
@b(x: 1)
@a(b: 2)
@b(x: 3)
@b(x: 2)
@b(true)
@b("a")
input bool i13;

// Also check other types of annotated objects.

@a(b: 0)
automaton a1:
  @a(b: 1)
  location:
    initial;
end

@a(b: 1)
plant p1:
  @a(b: 11)
  location;
end

@a(b: 2)
plant automaton p2:
  location:
    initial;
end

automaton a2:
  @a(b: 1)
  location loc1:
    initial;

  @a(b: 1)
  location loc2:
    initial;
end

automaton a2b:
  alg bool a;
  @a(b: 22)
  location: // Nameless location with annotation and equation.
    initial;
    equation a = true;
end

automaton a2c:
  alg bool a;
  @a(b: 23)
  location loc: // Named location with annotation and equation.
    initial;
    equation a = false;
end

automaton a3:
  @a(b: 1)
  disc int x = 1, y = 2;

  @a(b: 2)
  cont c1 = 1 der 2, c2 = 3 der 4;

  invariant x > 0 and y > 0 and c1 > 0 and c2 > 0;

  @a(b: 5)
  event event1a, event1b;

  @a(b: 6)
  event bool event2a, event2b;

  @a(b: 7)
  controllable event3a, event3b;

  @a(b: 8)
  uncontrollable bool event4a, event4b;

  location:
    initial;
    edge event1a, event1b, event2a, event2b, event3a, event3b, event4a, event4b;
end

@a(b: 1)
group g1:
  @a(b: 3)
  alg bool alg1 = true;

  @a(b: 4)
  const bool const1 = false;

  @a(b: 5)
  type tdecl1 = bool, tdecl2 = real;

  @a(b: 6)
  enum enumDecl1 = lit1, lit2;

  @a(b: 7)
  enum enumDecl2 = @a(b: 8) @a(b: 9) lit3, lit4, @a(b: 10) @a(b: 11) lit5;

  @a(b: 12)
  func bool func1(): "java:something";

  @a(b: 13)
  func bool func2(
    @a(b: 14)
    bool fparam1, fparam2;
    @a(b: 15)
    bool fparam3, fparam4
  ):
    @a(b: 16)
    bool fvar1 = true, fvar2 = false;
    @a(b: 17)
    bool fvar3 = true, fvar4 = false;
    return fparam1 or fparam2 or fparam3 or fparam4 or fvar1 or fvar2 or fvar3 or fvar4;
  end
end
