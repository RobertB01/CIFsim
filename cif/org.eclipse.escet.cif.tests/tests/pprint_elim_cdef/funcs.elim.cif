func bool ext(): "java:a.b";
func bool iden(bool x):
  return x;
end
func bool, int, list int f1(list int x; list int y; bool z):
  int g;
  int h = 1;
  bool b = z;
  return b and z, g + h, x + y;
end
func bool f2():
  int x;
  int y;
  int t;
  if true:
    x := 1;
  end
  if true:
    x := 1;
    x := 2;
  elif true:
    x := 3;
  end
  if true:
    x := 1;
  elif true:
    x := 2;
  elif false:
    x := 3;
  end
  if true:
    x := 1;
  else
    x := 2;
  end
  if true:
    x := 1;
  elif x > 0:
    x := 2;
  else
    x := 3;
  end
  x := 10;
  while true:
    if x = 0:
      break;
    end
    x := x - 1;
  end
  x := 10;
  while true:
    if x > 0:
      x := x - 1;
      continue;
    end
    break;
  end
  x := 10;
  y := 10;
  while x >= 0:
    while y >= 0:
      t := t + x * y;
      y := y - 1;
    end
    x := x - 1;
  end
  return true;
end
const bool c = true;
enum e = A;
type t = e;
func bool f3(bool a; bool b):
  t v1 = A;
  e v2 = A;
  if v1 = v2:
    return true;
  end
  return a and b;
end
func int f4(int x):
  return f5(x - 1) + 1;
end
func int f5(int x):
  return f4(x - 1) + 2;
end
func int fac1(int x):
  return if x <= 1: 1 else fac1(x - 1) * x end;
end
func int fac2(int[0..12] x):
  int[-1..12] y = x - 1;
  int[0..12] z = max(2, y);
  return if x <= 1: 1 else fac2(z) * x end;
end
func bool f6(int x):
  return x > 3;
end
func func bool(int) f7():
  return f6;
end
func bool f8(dist bool d):
  return (sample d)[0];
end
func int, real f9a():
  if true:
    return 1, 1.0;
  else
    return (2, 2.0);
  end
end
func tuple(int a; real b) f9b():
  if true:
    return 1, 1.0;
  else
    return (2, 2.0);
  end
end
func bool f10():
  return true;
end
func bool f11():
  func bool() x = f10;
  return x();
end
func list int, set int fhint():
  return <list[0] int>[], <set int>{};
end
group p1:
  group a:
    func bool f():
      return p2.f();
    end
  end
end
group p2:
  func bool f():
    return true;
  end
end
automaton p:
  disc dist bool d = constant(true);
  location:
    initial;
end
automaton q:
  disc func bool() x = f11;
  invariant x();
  location:
    initial;
end
invariant ext();
invariant iden(true);
invariant f1([1], [2], true)[0];
invariant f2();
invariant f3(c, false);
invariant f7()(2);
invariant p1.a.f() or p2.f();
invariant f8(p.d);
invariant f9a()[0] + f9b()[a] > 0;
