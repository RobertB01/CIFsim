% Generated by CIF to mCRL2.

% Sorts for CIF enumerations.
sort E' = struct A' | B';
sort F' = struct C' | D' | G';
sort h'E' = struct h'B' | h'A';
sort aut'LPE' = struct aut'l1' | aut'l2' | aut'l3' | aut'l4' | aut'l5' | aut'l6' | aut'l7';

% Actions for CIF events.
act aut'e1';
act aut'e2';

% Actions for CIF variables having certain values.
act aut''varvalue: aut'LPE';
act aut'x1''varvalue: E';
act aut'x2''varvalue: E';
act aut'y''varvalue: F';
act aut'z''varvalue: h'E';

% Process for behavior of the CIF specification.
proc P(
    aut'x1': E',
    aut'x2': E',
    aut'y': F',
    aut'z': h'E',
    aut': aut'LPE'
) =
    % CIF linearized edges.
    ((aut' == aut'l1')) -> aut'e1' . P(aut'x1' = aut'x2', aut' = aut'l2')
    +
    ((aut' == aut'l2')) -> aut'e1' . P(aut' = aut'l3')
    +
    (((aut' == aut'l3') && (aut'x1' != B'))) -> aut'e1' . P(aut' = aut'l4')
    +
    ((aut' == aut'l4')) -> aut'e1' . P(aut'y' = C', aut' = aut'l5')
    +
    (((aut' == aut'l5') && (aut'y' == C'))) -> aut'e1' . P(aut' = aut'l6')
    +
    ((aut' == aut'l6')) -> aut'e1' . P(aut'z' = h'B', aut' = aut'l7')
    +
    (((aut' == aut'l7') && (aut'z' != h'A'))) -> aut'e1' . P(aut' = aut'l1')
    +
    (((aut' == aut'l2') && (aut'x1' == aut'x2'))) -> aut'e2' . P()
    +
    % CIF variable value actions.
    aut''varvalue(aut') . P()
    +
    aut'x1''varvalue(aut'x1') . P()
    +
    aut'x2''varvalue(aut'x2') . P()
    +
    aut'y''varvalue(aut'y') . P()
    +
    aut'z''varvalue(aut'z') . P()
;

% Initialization.
init P(A', A', C', h'B', aut'l1');
