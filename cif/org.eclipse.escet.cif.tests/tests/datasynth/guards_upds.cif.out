Reading CIF file "datasynth/guards_upds.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..5]  p1.x  1      3 * 2     6 * 2       8 * 2       75%
        3      discrete variable  int[0..5]  p2.y  2      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      14        28          36          ~78%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 7

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [before]
                    Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [before]
                    Total span:   4 (total)   0.57 (avg/edge) / WES:   0.634921 (total)   0.090703 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [before]
                        Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 7

                        Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [before]
                        Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   3 (total)   0.43 (avg/edge) / WES:   0.476190 (total)   0.068027 (avg/edge) [before]
                        Total span:   4 (total)   0.57 (avg/edge) / WES:   0.634921 (total)   0.090703 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 7

                        Total span:   4 (total)   0.57 (avg/edge) / WES:   0.634921 (total)   0.090703 (avg/edge) [before]
                        Total span:   4 (total)   0.57 (avg/edge) / WES:   0.634921 (total)   0.090703 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Maximum number of iterations: 20

                Total span:   3 (total)   1.50 (avg/edge) / WES:   1.111111 (total)   0.555556 (avg/edge) [before]
                Total span:   3 (total)   1.50 (avg/edge) / WES:   1.111111 (total)   0.555556 (avg/edge) [iteration 1]
                Total span:   3 (total)   1.50 (avg/edge) / WES:   1.111111 (total)   0.555556 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Window length: 3

                Total span:   3 (total)   1.50 (avg/edge) / WES:   1.111111 (total)   0.555556 (avg/edge) [before]
                Total span:   3 (total)   1.50 (avg/edge) / WES:   1.111111 (total)   0.555556 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  p2.y  0      3 * 2     6 * 2       8 * 2       75%
        2      discrete variable  int[0..5]  p1.x  1      3 * 2     6 * 2       8 * 2       75%
        3      location pointer   n/a        p1    2      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      14        28          36          ~78%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p2.y = 0
    Initial   (discrete variable 1):             p1.x = 0
    Initial   (discrete variables):              p2.y = 0 and p1.x = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p1.l0
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        p1.l0
    Initial   (uncontrolled system):             p2.y = 0 and (p1.x = 0 and p1.l0)
    Initial   (system, combined init/plant inv): p2.y = 0 and (p1.x = 0 and p1.l0)
    Initial   (system, combined init/state inv): p2.y = 0 and (p1.x = 0 and p1.l0)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p1.l0
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      p1.l0
    Marked    (uncontrolled system):             p1.l0
    Marked    (system, combined mark/plant inv): p1.l0
    Marked    (system, combined mark/state inv): p1.l0

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: p2.y = 4 and p1.l0 or (p2.y = 5 and p1.l0 or p2.y = 3 and p1.l0)) (assignments: p1.x := p1.x + 1, p1 := p1.l1, p2.y := 3)
            Edge: (event: b) (guard: p1.x = 5 and p1.l0 or p1.x = 3 and p1.l0)

Restricting edge guards to prevent runtime errors:
    Edge: (event: a) (guard: p2.y = 4 and p1.l0 or (p2.y = 5 and p1.l0 or p2.y = 3 and p1.l0) -> p2.y = 4 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or p2.y = 4 and ((p1.x = 1 or p1.x = 5) and p1.l0) or (p2.y = 4 and (p1.x = 3 and p1.l0) or p2.y = 5 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0)) or (p2.y = 5 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 5 and (p1.x = 3 and p1.l0) or (p2.y = 3 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or (p2.y = 3 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 3 and (p1.x = 3 and p1.l0))))) (assignments: p1.x := p1.x + 1, p1 := p1.l1, p2.y := 3)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: p2.y = 4 and p1.l0 or (p2.y = 5 and p1.l0 or p2.y = 3 and p1.l0) -> p2.y = 4 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or p2.y = 4 and ((p1.x = 1 or p1.x = 5) and p1.l0) or (p2.y = 4 and (p1.x = 3 and p1.l0) or p2.y = 5 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0)) or (p2.y = 5 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 5 and (p1.x = 3 and p1.l0) or (p2.y = 3 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or (p2.y = 3 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 3 and (p1.x = 3 and p1.l0))))) (assignments: p1.x := p1.x + 1, p1 := p1.l1, p2.y := 3)
            Edge: (event: b) (guard: p1.x = 5 and p1.l0 or p1.x = 3 and p1.l0)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p2.y = 0 and (p1.x = 0 and p1.l0).

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p2.y" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "p1.x" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.

Re-initializing edges for being applied.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.l0 [marker predicate]
Backward controlled-behavior: p1.l0 -> (p2.y = 2 or p2.y = 3 or (p1.x = 2 or (p1.x = 3 or p1.l0))) and (p2.y = 2 or p2.y = 3 or (not(p1.x = 2 or p1.x = 3) or p1.l0)) and ((not(p2.y = 2 or p2.y = 3) or p1.x = 2 or (p1.x = 3 or p1.l0)) and (not(p2.y = 2 or p2.y = 3) or (not(p1.x = 2 or p1.x = 3) or p1.l0))) [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: (p2.y = 2 or p2.y = 3 or (p1.x = 2 or (p1.x = 3 or p1.l0))) and (p2.y = 2 or p2.y = 3 or (not(p1.x = 2 or p1.x = 3) or p1.l0)) and ((not(p2.y = 2 or p2.y = 3) or p1.x = 2 or (p1.x = 3 or p1.l0)) and (not(p2.y = 2 or p2.y = 3) or (not(p1.x = 2 or p1.x = 3) or p1.l0))) [fixed point].
Controlled behavior: true -> (p2.y = 2 or p2.y = 3 or (p1.x = 2 or (p1.x = 3 or p1.l0))) and (p2.y = 2 or p2.y = 3 or (not(p1.x = 2 or p1.x = 3) or p1.l0)) and ((not(p2.y = 2 or p2.y = 3) or p1.x = 2 or (p1.x = 3 or p1.l0)) and (not(p2.y = 2 or p2.y = 3) or (not(p1.x = 2 or p1.x = 3) or p1.l0))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p2.y = 2 or p2.y = 3 or (p1.x = 2 or (p1.x = 3 or p1.l1))) and (p2.y = 2 or p2.y = 3 or (not(p1.x = 2 or p1.x = 3) or p1.l1)) and ((not(p2.y = 2 or p2.y = 3) or p1.x = 2 or (p1.x = 3 or p1.l1)) and (not(p2.y = 2 or p2.y = 3) or (not(p1.x = 2 or p1.x = 3) or p1.l1))) [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p2.y = 0 and (p1.x = 0 and p1.l0) [initialization predicate]
Forward reachability: iteration 1.
Controlled behavior: (p2.y = 2 or p2.y = 3 or (p1.x = 2 or (p1.x = 3 or p1.l0))) and (p2.y = 2 or p2.y = 3 or (not(p1.x = 2 or p1.x = 3) or p1.l0)) and ((not(p2.y = 2 or p2.y = 3) or p1.x = 2 or (p1.x = 3 or p1.l0)) and (not(p2.y = 2 or p2.y = 3) or (not(p1.x = 2 or p1.x = 3) or p1.l0))) -> p2.y = 0 and (p1.x = 0 and p1.l0).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.l0 [marker predicate]
Backward controlled-behavior: p1.l0 -> p2.y = 0 and (p1.x = 0 and p1.l0) [restricted to current/previous controlled-behavior predicate: p2.y = 0 and (p1.x = 0 and p1.l0)]
Backward reachability: iteration 1.
Backward controlled-behavior: p2.y = 0 and (p1.x = 0 and p1.l0) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p2.y != 0 or (p1.x != 0 or p1.l1) [current/previous controlled behavior predicate]

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: a) (guard: p2.y = 4 and p1.l0 or (p2.y = 5 and p1.l0 or p2.y = 3 and p1.l0) -> p2.y = 4 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or p2.y = 4 and ((p1.x = 1 or p1.x = 5) and p1.l0) or (p2.y = 4 and (p1.x = 3 and p1.l0) or p2.y = 5 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0)) or (p2.y = 5 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 5 and (p1.x = 3 and p1.l0) or (p2.y = 3 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or (p2.y = 3 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 3 and (p1.x = 3 and p1.l0))))) (assignments: p1.x := p1.x + 1, p1 := p1.l1, p2.y := 3): guard: p2.y = 4 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or p2.y = 4 and ((p1.x = 1 or p1.x = 5) and p1.l0) or (p2.y = 4 and (p1.x = 3 and p1.l0) or p2.y = 5 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0)) or (p2.y = 5 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 5 and (p1.x = 3 and p1.l0) or (p2.y = 3 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p1.l0) or (p2.y = 3 and ((p1.x = 1 or p1.x = 5) and p1.l0) or p2.y = 3 and (p1.x = 3 and p1.l0)))) -> false.
Edge (event: b) (guard: p1.x = 5 and p1.l0 or p1.x = 3 and p1.l0): guard: p1.x = 5 and p1.l0 or p1.x = 3 and p1.l0 -> false.

Final synthesis result:
    State: (controlled-behavior: p2.y = 0 and (p1.x = 0 and p1.l0))
        Edge: (event: a) (guard: p2.y = 4 and p1.l0 or (p2.y = 5 and p1.l0 or p2.y = 3 and p1.l0) -> false) (assignments: p1.x := p1.x + 1, p1 := p1.l1, p2.y := 3)
        Edge: (event: b) (guard: p1.x = 5 and p1.l0 or p1.x = 3 and p1.l0 -> false)

Controlled system: exactly 1 state.

Initial (synthesis result):            p2.y = 0 and (p1.x = 0 and p1.l0)
Initial (uncontrolled system):         p2.y = 0 and (p1.x = 0 and p1.l0)
Initial (controlled system):           p2.y = 0 and (p1.x = 0 and p1.l0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/guards_upds.ctrlsys.real.cif".
