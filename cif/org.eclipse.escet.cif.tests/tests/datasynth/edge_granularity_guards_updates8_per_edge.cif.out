Reading CIF file "datasynth/edge_granularity_guards_updates8_per_edge.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      3 * 2     5 * 2       8 * 2       ~63%
        2      discrete variable  int[0..3]  p.x   1      2 * 2     4 * 2       4 * 2       100%
        3      discrete variable  int[0..3]  p.y   2      2 * 2     4 * 2       4 * 2       100%
        4      discrete variable  int[0..3]  p.z   3      2 * 2     4 * 2       4 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      4      18        34          40          85%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 21

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 6

                    Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [before]
                    Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 6

                    Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [before]
                    Total span:   3 (total)   0.14 (avg/edge) / WES:   0.321429 (total)   0.015306 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 6

                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [before]
                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 21

                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [before]
                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 6

                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.297619 (total)   0.014172 (avg/edge) [before]
                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.321429 (total)   0.015306 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 21

                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.321429 (total)   0.015306 (avg/edge) [before]
                        Total span:   3 (total)   0.14 (avg/edge) / WES:   0.321429 (total)   0.015306 (avg/edge) [reversed]

                Found new best variable order.

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Maximum number of iterations: 20

                Total span:   18 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.250000 (avg/edge) [before]
                Total span:   18 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.250000 (avg/edge) [iteration 1]
                Total span:   18 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.250000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Window length: 4

                Total span:   18 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.250000 (avg/edge) [before]
                Total span:   18 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.250000 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..3]  p.x   0      2 * 2     4 * 2       4 * 2       100%
        2      discrete variable  int[0..3]  p.z   1      2 * 2     4 * 2       4 * 2       100%
        3      discrete variable  int[0..3]  p.y   2      2 * 2     4 * 2       4 * 2       100%
        4      location pointer   n/a        p     3      3 * 2     5 * 2       8 * 2       ~63%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      4      18        34          40          85%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             true
    Initial   (discrete variable 1):             p.z = 0
    Initial   (discrete variable 2):             p.y = 0
    Initial   (discrete variables):              p.z = 0 and p.y = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.l1
    Initial   (auts/locs init predicate):        p.l1
    Initial   (uncontrolled system):             p.z = 0 and (p.y = 0 and p.l1)
    Initial   (system, combined init/plant inv): p.z = 0 and (p.y = 0 and p.l1)
    Initial   (system, combined init/state inv): p.z = 0 and (p.y = 0 and p.l1)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3)
    Marked    (auts/locs marker predicate):      p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3)
    Marked    (uncontrolled system):             p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3)
    Marked    (system, combined mark/plant inv): p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3)
    Marked    (system, combined mark/state inv): p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3)

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: e) (guard: (p.x = 0 or p.x = 1) and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0)
            Edge: (event: e) (guard: p.x = 2 and p.l1 or p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 1, p := p.y1)
            Edge: (event: e) (guard: p.x = 0 and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0)
            Edge: (event: e) (guard: p.x = 0 and p.l1) (assignments: p.y := 2, p.z := 2, p := p.y2)
            Edge: (event: e) (guard: p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 2, p := p.y1)
            Edge: (event: e) (guard: p.x = 1 and p.l1) (assignments: p.y := 3, p.z := 3, p := p.y3)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.z = 0 and (p.y = 0 and p.l1).

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p" (group: 3, domain: 6+7, BDD variables: 3, CIF/BDD values: 5/8)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3) [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3) -> (p.x = 0 or p.x = 1) and (p.y = 0 and (p.l1 or p.y0)) or (p.x = 0 or p.x = 1) and (p.y = 2 and p.l1) or ((p.x = 0 or p.x = 1) and (p.y = 2 and p.y2) or (p.x = 0 or p.x = 1) and (p.y = 1 and (p.l1 or p.y1))) or ((p.x = 0 or p.x = 1) and (p.y = 3 and (p.l1 or p.y3)) or (p.x = 2 or p.x = 3) and (p.y = 0 and p.y0) or ((p.x = 2 or p.x = 3) and (p.y = 2 and p.y2) or ((p.x = 2 or p.x = 3) and (p.y = 1 and p.y1) or (p.x = 2 or p.x = 3) and (p.y = 3 and p.y3)))) [backward reach with edge: (event: e) (guard: (p.x = 0 or p.x = 1) and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0), restricted to current/previous controlled-behavior predicate: true]
            Backward controlled-behavior: (p.x = 0 or p.x = 1) and (p.y = 0 and (p.l1 or p.y0)) or (p.x = 0 or p.x = 1) and (p.y = 2 and p.l1) or ((p.x = 0 or p.x = 1) and (p.y = 2 and p.y2) or (p.x = 0 or p.x = 1) and (p.y = 1 and (p.l1 or p.y1))) or ((p.x = 0 or p.x = 1) and (p.y = 3 and (p.l1 or p.y3)) or (p.x = 2 or p.x = 3) and (p.y = 0 and p.y0) or ((p.x = 2 or p.x = 3) and (p.y = 2 and p.y2) or ((p.x = 2 or p.x = 3) and (p.y = 1 and p.y1) or (p.x = 2 or p.x = 3) and (p.y = 3 and p.y3)))) -> <bdd 21n 14p> [backward reach with edge: (event: e) (guard: p.x = 2 and p.l1 or p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 1, p := p.y1), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: <bdd 21n 14p> [fixed point].

        Controlled behavior: true -> <bdd 21n 14p>.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 21n 32p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.z = 0 and (p.y = 0 and p.l1) [initialization predicate]
        Forward controlled-behavior: p.z = 0 and (p.y = 0 and p.l1) -> (p.x = 0 or p.x = 2) and p.z = 0 and (p.y = 0 and p.l1) or p.x = 1 and p.z = 0 and (p.y = 0 and p.l1) [restricted to current/previous controlled-behavior predicate: <bdd 21n 14p>]

        Forward reachability iteration 1:
            Forward controlled-behavior: (p.x = 0 or p.x = 2) and p.z = 0 and (p.y = 0 and p.l1) or p.x = 1 and p.z = 0 and (p.y = 0 and p.l1) -> p.x = 0 and p.z = 0 and (p.y = 0 and p.l1) or p.x = 0 and p.z = 1 and (p.y = 0 and p.y0) or (p.x = 2 and p.z = 0 and (p.y = 0 and p.l1) or (p.x = 1 and p.z = 0 and (p.y = 0 and p.l1) or p.x = 1 and p.z = 1 and (p.y = 0 and p.y0))) [forward reach with edge: (event: e) (guard: (p.x = 0 or p.x = 1) and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0), restricted to current/previous controlled-behavior predicate: <bdd 21n 14p>]
            Forward controlled-behavior: p.x = 0 and p.z = 0 and (p.y = 0 and p.l1) or p.x = 0 and p.z = 1 and (p.y = 0 and p.y0) or (p.x = 2 and p.z = 0 and (p.y = 0 and p.l1) or (p.x = 1 and p.z = 0 and (p.y = 0 and p.l1) or p.x = 1 and p.z = 1 and (p.y = 0 and p.y0))) -> <bdd 23n 7p> [forward reach with edge: (event: e) (guard: p.x = 2 and p.l1 or p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 1, p := p.y1), restricted to current/previous controlled-behavior predicate: <bdd 21n 14p>]
            Forward controlled-behavior: <bdd 23n 7p> -> <bdd 27n 8p> [forward reach with edge: (event: e) (guard: p.x = 0 and p.l1) (assignments: p.y := 2, p.z := 2, p := p.y2), restricted to current/previous controlled-behavior predicate: <bdd 21n 14p>]
            Forward controlled-behavior: <bdd 27n 8p> -> <bdd 28n 9p> [forward reach with edge: (event: e) (guard: p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 2, p := p.y1), restricted to current/previous controlled-behavior predicate: <bdd 21n 14p>]
            Forward controlled-behavior: <bdd 28n 9p> -> <bdd 33n 10p> [forward reach with edge: (event: e) (guard: p.x = 1 and p.l1) (assignments: p.y := 3, p.z := 3, p := p.y3), restricted to current/previous controlled-behavior predicate: <bdd 21n 14p>]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: <bdd 33n 10p> [fixed point].

        Controlled behavior: <bdd 21n 14p> -> <bdd 33n 10p>.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3) [marker predicate]
        Backward controlled-behavior: p.y = 0 and p.y0 or p.y = 2 and p.y2 or (p.y = 1 and p.y1 or p.y = 3 and p.y3) -> <bdd 29n 7p> [restricted to current/previous controlled-behavior predicate: <bdd 33n 10p>]

        Backward reachability iteration 1:
            Backward controlled-behavior: <bdd 29n 7p> -> <bdd 32n 9p> [backward reach with edge: (event: e) (guard: (p.x = 0 or p.x = 1) and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0), restricted to current/previous controlled-behavior predicate: <bdd 33n 10p>]
            Backward controlled-behavior: <bdd 32n 9p> -> <bdd 33n 10p> [backward reach with edge: (event: e) (guard: p.x = 2 and p.l1 or p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 1, p := p.y1), restricted to current/previous controlled-behavior predicate: <bdd 33n 10p>]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: <bdd 33n 10p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 33n 52p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    No guards changed.

Final synthesis result:
    State: (controlled-behavior: <bdd 33n 10p>)
        Edge: (event: e) (guard: (p.x = 0 or p.x = 1) and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0)
        Edge: (event: e) (guard: p.x = 2 and p.l1 or p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 1, p := p.y1)
        Edge: (event: e) (guard: p.x = 0 and p.l1) (assignments: p.y := 0, p.z := 1, p := p.y0)
        Edge: (event: e) (guard: p.x = 0 and p.l1) (assignments: p.y := 2, p.z := 2, p := p.y2)
        Edge: (event: e) (guard: p.x = 1 and p.l1) (assignments: p.y := 1, p.z := 2, p := p.y1)
        Edge: (event: e) (guard: p.x = 1 and p.l1) (assignments: p.y := 3, p.z := 3, p := p.y3)

Computing initialization predicate of the controlled system.

Controlled system: exactly 10 states.

Initial (synthesis result):            <bdd 33n 10p>
Initial (uncontrolled system):         p.z = 0 and (p.y = 0 and p.l1)
Initial (controlled system):           (p.x = 0 or p.x = 2) and p.z = 0 and (p.y = 0 and p.l1) or p.x = 1 and p.z = 0 and (p.y = 0 and p.l1)
Initial (removed by supervisor):       p.x = 3 and p.z = 0 and (p.y = 0 and p.l1)
Initial (added by supervisor):         p.x != 3 or p.z != 0 or (p.y != 0 or not p.l1)

Simplification of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
    Initial: (p.x = 0 or p.x = 2) and p.z = 0 and (p.y = 0 and p.l1) or p.x = 1 and p.z = 0 and (p.y = 0 and p.l1) -> p.x != 3 [assume p.z = 0 and (p.y = 0 and p.l1)].

Checking post-synthesis for events that are never enabled.

Constructing output CIF specification.
Writing output CIF file "datasynth/edge_granularity_guards_updates8_per_edge.ctrlsys.real.cif".
