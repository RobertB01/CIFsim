Reading CIF file "datasynth/input_vars5.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind            Type       Name       Group  BDD vars  CIF values  BDD values  Values used
        -----  --------------  ---------  ---------  -----  --------  ----------  ----------  -----------
        1      input variable  int[0..2]  io.sensor  0      2 * 2     3 * 2       4 * 2       75%
        -----  --------------  ---------  ---------  -----  --------  ----------  ----------  -----------
        Total                                        1      4         6           8           75%

    Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variables):              true
    Initial   (component init predicate):        io.sensor = 1
    Initial   (components init predicate):       io.sensor = 1
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             io.sensor = 1
    Initial   (system, combined init/plant inv): io.sensor = 1
    Initial   (system, combined init/state inv): io.sensor = 1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       io.sensor = 2
    Marked    (auts/locs marker predicate):      io.sensor = 2
    Marked    (uncontrolled system):             io.sensor = 2
    Marked    (system, combined mark/plant inv): io.sensor = 2
    Marked    (system, combined mark/state inv): io.sensor = 2

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: io.sensor) (guard: true) (assignments: io.sensor+ != io.sensor)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: io.sensor = 1.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: input variable "io.sensor" of type "int[0..2]" (group: 0, domain: 0+1, BDD variables: 2, CIF/BDD values: 3/4)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: io.sensor = 2 [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: io.sensor = 2 -> true [backward reach with edge: (event: io.sensor) (guard: true) (assignments: io.sensor+ != io.sensor), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: io.sensor = 1 [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: io.sensor = 1 -> true [forward reach with edge: (event: io.sensor) (guard: true) (assignments: io.sensor+ != io.sensor), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    No guards changed.

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: true)
        Edge: (event: io.sensor) (guard: true) (assignments: io.sensor+ != io.sensor)

Computing initialization predicate of the controlled system.

Controlled system: exactly 3 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            true
    Initial (uncontrolled system):         io.sensor = 1
    Initial (controlled system):           io.sensor = 1
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model.

Checking post-synthesis for events that are never enabled.

Constructing output CIF specification.
Writing output CIF file "datasynth/input_vars5.ctrlsys.real.cif".
