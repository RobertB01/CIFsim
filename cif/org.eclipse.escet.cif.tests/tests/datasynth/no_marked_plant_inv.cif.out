Reading CIF file "datasynth/no_marked_plant_inv.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  p.x   0      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      1      6         12          16          75%

    Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (component state plant invariant): p.x = 1
    Invariant (components state plant inv):      p.x = 1
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    p.x = 1

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             true
    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             true
    Initial   (system, combined init/plant inv): p.x = 1
    Initial   (system, combined init/state inv): p.x = 1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p.x = 3
    Marked    (auts/locs marker predicate):      p.x = 3
    Marked    (uncontrolled system):             p.x = 3
    Marked    (system, combined mark/plant inv): false
    Marked    (system, combined mark/state inv): false

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No guards changed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.x = 1.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.x = 3 [marker predicate]

        Controlled behavior: true -> p.x = 3.

    Finished: all states are bad.

Computing final controlled system guards:
    No guards changed.

Final synthesis result:
    State: (controlled-behavior: p.x = 3)

Computing initialization predicate of the controlled system.

Controlled system: exactly 0 states.

Initial (synthesis result):            p.x = 3
Initial (uncontrolled system):         true
Initial (controlled system):           false
Initial (removed by supervisor):       true
Initial (added by supervisor):         false
