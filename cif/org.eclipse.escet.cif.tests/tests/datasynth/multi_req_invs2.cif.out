Reading CIF file "datasynth/multi_req_invs2.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..7]  p.x   0      3 * 2     8 * 2       8 * 2       100%
        2      discrete variable  int[0..7]  p.y   1      3 * 2     8 * 2       8 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      12        32          32          100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 11

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [before]
                    Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [before]
                    Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [before]
                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 11

                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [before]
                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [before]
                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 11

                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [before]
                        Total span:   5 (total)   0.45 (avg/edge) / WES:   0.590909 (total)   0.053719 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Maximum number of iterations: 10

                Total span:   4 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.250000 (avg/edge) [before]
                Total span:   4 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.250000 (avg/edge) [iteration 1]
                Total span:   4 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.250000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Window length: 2

                Total span:   4 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.250000 (avg/edge) [before]
                Total span:   4 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.250000 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p.x = 3
    Initial   (discrete variable 1):             p.y = 6
    Initial   (discrete variables):              p.x = 3 and p.y = 6
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             p.x = 3 and p.y = 6
    Initial   (system, combined init/plant inv): p.x = 3 and p.y = 6
    Initial   (system, combined init/state inv): p.x = 3 and p.y = 6

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): true

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        Event "a" needs:
            4 <= p.x and p.x <= 7
            0 <= p.x and p.x <= 5
        Event "b" needs:
            p.y = 6 or p.y = 7
        Event "c" needs:
            p.y != 5
        Event "d" needs:
            false

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: b) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: c) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: d) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: e) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: a) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: b) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: c) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: d) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: e) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: b) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: c) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: d) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: e) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.x = 3 and p.y = 6.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior not changed.

Restricting behavior using state/event exclusion requirements:
    Edge (event: a) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7) -> 2 <= p.x and p.x <= 7 and ((not(p.x = 4 or p.x = 5) or p.y != 0) and (p.x = 0 or p.x = 1 or (p.x = 4 or p.x = 5))) [state/event exclusion requirement: p.x = 4 or p.x = 5].
    Edge (event: b) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7) -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.y = 6 or p.y = 7) or ((p.x = 1 or p.x = 5) and (p.y = 6 or p.y = 7) or p.x = 3 and (p.y = 6 or p.y = 7)) [state/event exclusion requirement: p.y = 6 or p.y = 7].
    Edge (event: c) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7) -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and ((p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 5))) and (not(p.x = 1 or p.x = 5) or p.y != 0)) and ((not(p.x = 1 or p.x = 5) or p.y != 5) and (p.x != 3 or p.y != 0) and ((p.x != 3 or p.y != 5) and p.x != 7)) [state/event exclusion requirement: p.y != 5].
    Edge (event: d) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7) -> false [state/event exclusion requirement: false].

    Restricted behavior using state/event exclusion requirements:
        State: (controlled-behavior: true)
            Edge: (event: a) (guard: true -> 2 <= p.x and p.x <= 7 and ((not(p.x = 4 or p.x = 5) or p.y != 0) and (p.x = 0 or p.x = 1 or (p.x = 4 or p.x = 5)))) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: b) (guard: true -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.y = 6 or p.y = 7) or ((p.x = 1 or p.x = 5) and (p.y = 6 or p.y = 7) or p.x = 3 and (p.y = 6 or p.y = 7))) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: c) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and ((p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 5))) and (not(p.x = 1 or p.x = 5) or p.y != 0)) and ((not(p.x = 1 or p.x = 5) or p.y != 5) and (p.x != 3 or p.y != 0) and ((p.x != 3 or p.y != 5) and p.x != 7))) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: d) (guard: true -> false) (assignments: p.x := p.x + 1, p.y := p.y - 1)
            Edge: (event: e) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.x = 3 and p.y = 6 [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: p.x = 3 and p.y = 6 -> p.x = 4 and p.y = 5 or p.x = 3 and p.y = 6 [forward reach with edge: (event: b) (guard: true -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.y = 6 or p.y = 7) or ((p.x = 1 or p.x = 5) and (p.y = 6 or p.y = 7) or p.x = 3 and (p.y = 6 or p.y = 7))) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]
            Forward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 3 and p.y = 6 -> p.x = 4 and p.y = 5 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) [forward reach with edge: (event: e) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 2:
            Forward controlled-behavior: p.x = 4 and p.y = 5 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) [forward reach with edge: (event: a) (guard: true -> 2 <= p.x and p.x <= 7 and ((not(p.x = 4 or p.x = 5) or p.y != 0) and (p.x = 0 or p.x = 1 or (p.x = 4 or p.x = 5)))) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]
            Forward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [forward reach with edge: (event: c) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and ((p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 5))) and (not(p.x = 1 or p.x = 5) or p.y != 0)) and ((not(p.x = 1 or p.x = 5) or p.y != 5) and (p.x != 3 or p.y != 0) and ((p.x != 3 or p.y != 5) and p.x != 7))) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 3:
            No change this iteration.

        Forward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [fixed point].

        Controlled behavior: true -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)).

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [restricted to current/previous controlled-behavior predicate: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2))]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (p.x != 4 or p.y != 5) and (p.x != 6 or p.y != 3) and ((p.x != 5 or p.y != 4) and ((p.x != 3 or p.y != 6) and (p.x != 7 or p.y != 2))) [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: a) (guard: true -> 2 <= p.x and p.x <= 7 and ((not(p.x = 4 or p.x = 5) or p.y != 0) and (p.x = 0 or p.x = 1 or (p.x = 4 or p.x = 5)))) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: 2 <= p.x and p.x <= 7 and ((not(p.x = 4 or p.x = 5) or p.y != 0) and (p.x = 0 or p.x = 1 or (p.x = 4 or p.x = 5))) -> p.x = 4 and p.y = 5 or p.x = 5 and p.y = 4.
    Edge (event: b) (guard: true -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.y = 6 or p.y = 7) or ((p.x = 1 or p.x = 5) and (p.y = 6 or p.y = 7) or p.x = 3 and (p.y = 6 or p.y = 7))) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.y = 6 or p.y = 7) or ((p.x = 1 or p.x = 5) and (p.y = 6 or p.y = 7) or p.x = 3 and (p.y = 6 or p.y = 7)) -> p.x = 2 and p.y = 7 or p.x = 3 and p.y = 6.
    Edge (event: c) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and ((p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 5))) and (not(p.x = 1 or p.x = 5) or p.y != 0)) and ((not(p.x = 1 or p.x = 5) or p.y != 5) and (p.x != 3 or p.y != 0) and ((p.x != 3 or p.y != 5) and p.x != 7))) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and ((p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 5))) and (not(p.x = 1 or p.x = 5) or p.y != 0)) and ((not(p.x = 1 or p.x = 5) or p.y != 5) and (p.x != 3 or p.y != 0) and ((p.x != 3 or p.y != 5) and p.x != 7)) -> p.x = 2 and p.y = 7 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6).
    Edge (event: e) (guard: true -> (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7)) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: (p.x = 1 or p.x = 3 or (p.x = 5 or (p.x = 7 or p.y != 0))) and (not(p.x = 1 or p.x = 5) or p.y != 0) and ((p.x != 3 or p.y != 0) and p.x != 7) -> p.x = 4 and p.y = 5 or p.x = 2 and p.y = 7 or (p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6)).

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)))
        Edge: (event: a) (guard: true -> p.x = 4 and p.y = 5 or p.x = 5 and p.y = 4) (assignments: p.x := p.x + 1, p.y := p.y - 1)
        Edge: (event: b) (guard: true -> p.x = 2 and p.y = 7 or p.x = 3 and p.y = 6) (assignments: p.x := p.x + 1, p.y := p.y - 1)
        Edge: (event: c) (guard: true -> p.x = 2 and p.y = 7 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
        Edge: (event: d) (guard: true -> false) (assignments: p.x := p.x + 1, p.y := p.y - 1)
        Edge: (event: e) (guard: true -> p.x = 4 and p.y = 5 or p.x = 2 and p.y = 7 or (p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6))) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 5 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2))
    Initial (uncontrolled system):         p.x = 3 and p.y = 6
    Initial (controlled system):           p.x = 3 and p.y = 6
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event a: guard: p.x = 4 and p.y = 5 or p.x = 5 and p.y = 4.
    Event b: guard: p.x = 2 and p.y = 7 or p.x = 3 and p.y = 6.
    Event c: guard: p.x = 2 and p.y = 7 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6).
    Event d: guard: false.
    Event e: guard: p.x = 4 and p.y = 5 or p.x = 2 and p.y = 7 or (p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6)).

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/multi_req_invs2.ctrlsys.real.cif".
