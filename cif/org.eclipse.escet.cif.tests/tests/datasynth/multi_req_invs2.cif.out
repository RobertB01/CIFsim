Reading CIF file "datasynth/multi_req_invs2.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..7]  p.x   0      3 * 2     8 * 2       8 * 2       100%
  2      discrete variable  int[0..7]  p.y   1      3 * 2     8 * 2       8 * 2       100%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      2      12        32          32          100%

Applying automatic variable ordering:
  Number of hyperedges: 11

  Applying FORCE algorithm:
    Maximum number of iterations: 10

    Total span:                    5 (total)                 0.45 (avg/edge) [before]
    Total span:                    5 (total)                 0.45 (avg/edge) [iteration 1]
    Total span:                    5 (total)                 0.45 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 2

    Total span:                    5 (total)                 0.45 (avg/edge) [before]
    Total span:                    5 (total)                 0.45 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             p.x = 3
Initial   (discrete variable 1):             p.y = 6
Initial   (discrete variables):              p.x = 3 and p.y = 6
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             p.x = 3 and p.y = 6
Initial   (system, combined init/plant inv): p.x = 3 and p.y = 6
Initial   (system, combined init/state inv): p.x = 3 and p.y = 6

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): true

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "a" needs:
    4 <= p.x and p.x <= 7
    0 <= p.x and p.x <= 5
  Event "b" needs:
    p.y = 6 or p.y = 7
  Event "c" needs:
    p.y != 5
  Event "d" needs:
    false

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: a) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: b) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: c) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: d) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: e) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Edge (event: a) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: true -> p.x = 4 or p.x = 5 [requirement: p.x = 4 or p.x = 5].
Edge (event: b) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: true -> p.y = 6 or p.y = 7 [requirement: p.y = 6 or p.y = 7].
Edge (event: c) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: true -> p.y != 5 [requirement: p.y != 5].
Edge (event: d) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: true -> false [requirement: false].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: a) (guard: true -> p.x = 4 or p.x = 5) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: b) (guard: true -> p.y = 6 or p.y = 7) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: c) (guard: true -> p.y != 5) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: d) (guard: true -> false) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: e) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward reachability: iteration 1.

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.x = 3 and p.y = 6 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p.x = 3 and p.y = 6 -> p.x = 4 and p.y = 5 or p.x = 3 and p.y = 6 [forward reach with edge: (event: b) (guard: true -> p.y = 6 or p.y = 7) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 3 and p.y = 6 -> p.x = 4 and p.y = 5 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) [forward reach with edge: (event: e) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: p.x = 4 and p.y = 5 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) [forward reach with edge: (event: a) (guard: true -> p.x = 4 or p.x = 5) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6) -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [forward reach with edge: (event: c) (guard: true -> p.y != 5) (assignments: p.x := p.x + 1, p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [fixed point].
Controlled behavior: true -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [restricted to current/previous controlled-behavior predicate: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.x != 4 or p.y != 5) and (p.x != 6 or p.y != 3) and ((p.x != 5 or p.y != 4) and ((p.x != 3 or p.y != 6) and (p.x != 7 or p.y != 2))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: a) (guard: true -> p.x = 4 or p.x = 5) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: p.x = 4 or p.x = 5 -> p.x = 4 and p.y = 5 or p.x = 5 and p.y = 4.
Edge (event: b) (guard: true -> p.y = 6 or p.y = 7) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: p.y = 6 or p.y = 7 -> p.x = 2 and p.y = 7 or p.x = 3 and p.y = 6.
Edge (event: c) (guard: true -> p.y != 5) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: p.y != 5 -> p.x = 2 and p.y = 7 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6).
Edge (event: e) (guard: true) (assignments: p.x := p.x + 1, p.y := p.y - 1): guard: true -> p.x = 4 and p.y = 5 or p.x = 2 and p.y = 7 or (p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6)).

Final synthesis result:
  State: (controlled-behavior: p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2)))
    Edge: (event: a) (guard: true -> p.x = 4 and p.y = 5 or p.x = 5 and p.y = 4) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: b) (guard: true -> p.x = 2 and p.y = 7 or p.x = 3 and p.y = 6) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: c) (guard: true -> p.x = 2 and p.y = 7 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6)) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: d) (guard: true -> false) (assignments: p.x := p.x + 1, p.y := p.y - 1)
    Edge: (event: e) (guard: true -> p.x = 4 and p.y = 5 or p.x = 2 and p.y = 7 or (p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or p.x = 3 and p.y = 6))) (assignments: p.x := p.x + 1, p.y := p.y - 1)

Controlled system:                     exactly 5 states.

Initial (synthesis result):            p.x = 4 and p.y = 5 or p.x = 6 and p.y = 3 or (p.x = 5 and p.y = 4 or (p.x = 3 and p.y = 6 or p.x = 7 and p.y = 2))
Initial (uncontrolled system):         p.x = 3 and p.y = 6
Initial (controlled system):           p.x = 3 and p.y = 6
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/multi_req_invs2.ctrlsys.real.cif".
