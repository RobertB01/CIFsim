Reading CIF file "datasynth/loop.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..7]  p.x   1      3 * 2     8 * 2       8 * 2       100%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      2      8         20          20          100%

Applying automatic variable ordering:
  Number of hyper-edges: 4
  Number of graph edges: 1

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm.
    Maximum number of iterations: 10
    Total span:   2 (total)   0.50 (avg/edge) [before]
    Total span:   2 (total)   0.50 (avg/edge) [iteration 1]
    Total span:   2 (total)   0.50 (avg/edge) [after]

    Applying sliding window algorithm.
    Window length: 2
    Total span:   2 (total)   0.50 (avg/edge) [before]
    Total span:   2 (total)   0.50 (avg/edge) [after]

Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):             p.x = 0
Initial   (discrete variables):              p.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p.l1
Initial   (auts/locs init predicate):        p.l1
Initial   (uncontrolled system):             p.l1 and p.x = 0
Initial   (system, combined init/plant inv): p.l1 and p.x = 0
Initial   (system, combined init/state inv): p.l1 and p.x = 0

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))
Marked    (auts/locs marker predicate):      p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))
Marked    (uncontrolled system):             p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))
Marked    (system, combined mark/plant inv): p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))
Marked    (system, combined mark/state inv): p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c) (guard: p.l1) (assignments: p.x := p.x + 2)
    Edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l2)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) -> (p.l2 or 0 <= p.x and p.x <= 3) and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (p.l2 or 0 <= p.x and p.x <= 3) and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) [fixed point].
Controlled behavior: true -> (p.l2 or 0 <= p.x and p.x <= 3) and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p.l1 and (4 <= p.x and p.x <= 7) or (p.l2 and p.x = 6 or p.l2 and (p.x = 5 or p.x = 7)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l1 and p.x = 0 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l1 and p.x = 0 -> p.l1 and (p.x = 0 or p.x = 2) [forward reach with edge: (event: c) (guard: p.l1) (assignments: p.x := p.x + 2), restricted to current/previous controlled-behavior predicate: (p.l2 or 0 <= p.x and p.x <= 3) and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))]
Forward controlled-behavior: p.l1 and (p.x = 0 or p.x = 2) -> p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3) [forward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: (p.l2 or 0 <= p.x and p.x <= 3) and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6)))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3) [fixed point].
Controlled behavior: (p.l2 or 0 <= p.x and p.x <= 3) and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) -> p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) [marker predicate]
Backward controlled-behavior: p.l2 and ((p.l1 or p.x != 6) and (p.l1 or (0 <= p.x and p.x <= 4 or p.x = 6))) -> p.l2 and (p.x = 1 or p.x = 3) [restricted to current/previous controlled-behavior predicate: p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3)]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l2 and (p.x = 1 or p.x = 3) -> p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3) [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3)]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.l2 or (p.x = 1 or 3 <= p.x and p.x <= 7)) and (p.l1 or not(p.x = 1 or p.x = 3)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c) (guard: p.l1) (assignments: p.x := p.x + 2): guard: p.l1 -> p.l1 and p.x = 0.

Final synthesis result:
  State: (controlled-behavior: p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3))
    Edge: (event: c) (guard: p.l1 -> p.l1 and p.x = 0) (assignments: p.x := p.x + 2)
    Edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l2)

Controlled system:                     exactly 4 states.

Initial (synthesis result):            p.l1 and (p.x = 0 or p.x = 2) or p.l2 and (p.x = 1 or p.x = 3)
Initial (uncontrolled system):         p.l1 and p.x = 0
Initial (controlled system):           p.l1 and p.x = 0
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event c: guard: p.l1 and p.x = 0 -> p.x = 0 [assume p.l1].

Constructing output CIF specification.
Writing output CIF file "datasynth/loop.ctrlsys.real.cif".
