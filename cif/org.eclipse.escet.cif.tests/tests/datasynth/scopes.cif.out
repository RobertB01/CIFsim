Reading CIF file "datasynth/scopes.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name   Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  -----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[2..4]  g.p.x  0      3 * 2     3 * 2       8 * 2       ~38%
        2      discrete variable  int[1..5]  p.x    1      3 * 2     5 * 2       8 * 2       ~63%
        -----  -----------------  ---------  -----  -----  --------  ----------  ----------  -----------
        Total                                       2      12        16          32          50%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 5

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [before]
                    Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [before]
                    Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [before]
                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 5

                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [before]
                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [before]
                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 5

                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [before]
                        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.500000 (total)   0.100000 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Maximum number of iterations: 10

                Total span:   2 (total)   0.67 (avg/edge) / WES:   0.666667 (total)   0.222222 (avg/edge) [before]
                Total span:   2 (total)   0.67 (avg/edge) / WES:   0.666667 (total)   0.222222 (avg/edge) [iteration 1]
                Total span:   2 (total)   0.67 (avg/edge) / WES:   0.666667 (total)   0.222222 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Window length: 2

                Total span:   2 (total)   0.67 (avg/edge) / WES:   0.666667 (total)   0.222222 (avg/edge) [before]
                Total span:   2 (total)   0.67 (avg/edge) / WES:   0.666667 (total)   0.222222 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             g.p.x = 2
    Initial   (discrete variable 1):             p.x = 1
    Initial   (discrete variables):              g.p.x = 2 and p.x = 1
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             g.p.x = 2 and p.x = 1
    Initial   (system, combined init/plant inv): g.p.x = 2 and p.x = 1
    Initial   (system, combined init/state inv): g.p.x = 2 and p.x = 1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): true

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c1) (guard: true) (assignments: g.p.x := g.p.x + 1, p.x := 1)
            Edge: (event: g.c2) (guard: true) (assignments: g.p.x := g.p.x + 1, p.x := 1)
            Edge: (event: g.p.c3) (guard: true) (assignments: g.p.x := g.p.x + 1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: c1) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1)
    Edge: (event: g.c2) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1)
    Edge: (event: g.p.c3) (guard: true -> true) (assignments: g.p.x := g.p.x + 1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c1) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1)
            Edge: (event: g.c2) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1)
            Edge: (event: g.p.c3) (guard: true -> true) (assignments: g.p.x := g.p.x + 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: g.p.x = 2 and p.x = 1.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "g.p.x" of type "int[2..4]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 3/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[1..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 5/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: g.p.x = 2 and p.x = 1 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: g.p.x = 2 and p.x = 1 -> g.p.x != 4 and p.x = 1 [forward reach with edge: (event: c1) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: g.p.x != 4 and p.x = 1 -> g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1) [forward reach with edge: (event: g.c2) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1) [fixed point].
Controlled behavior: true -> g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1) [restricted to current/previous controlled-behavior predicate: g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1)]
Backward reachability: iteration 1.
Backward controlled-behavior: g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (g.p.x != 4 or p.x != 1) and ((g.p.x != 2 or p.x != 1) and (g.p.x != 3 or p.x != 1)) [current/previous controlled behavior predicate]

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c1) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1): guard: true -> g.p.x != 4.
Edge (event: g.c2) (guard: true -> true) (assignments: g.p.x := g.p.x + 1, p.x := 1): guard: true -> g.p.x != 4.
Edge (event: g.p.c3) (guard: true -> true) (assignments: g.p.x := g.p.x + 1): guard: true -> g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1.

Final synthesis result:
    State: (controlled-behavior: g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1))
        Edge: (event: c1) (guard: true -> g.p.x != 4) (assignments: g.p.x := g.p.x + 1, p.x := 1)
        Edge: (event: g.c2) (guard: true -> g.p.x != 4) (assignments: g.p.x := g.p.x + 1, p.x := 1)
        Edge: (event: g.p.c3) (guard: true -> g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1) (assignments: g.p.x := g.p.x + 1)

Controlled system: exactly 3 states.

Initial (synthesis result):            g.p.x = 4 and p.x = 1 or (g.p.x = 2 and p.x = 1 or g.p.x = 3 and p.x = 1)
Initial (uncontrolled system):         g.p.x = 2 and p.x = 1
Initial (controlled system):           g.p.x = 2 and p.x = 1
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/scopes.ctrlsys.real.cif".
