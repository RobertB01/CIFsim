Reading CIF file "datasynth/no_marked1.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..5]  p1.x  1      3 * 2     6 * 2       8 * 2       75%
  3      location pointer   n/a        p2    2      1 * 2     2 * 2       2 * 2       100%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      3      10        20          24          ~83%

Applying automatic variable ordering:
  Number of hyperedges: 1

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    2 (total)                 2.00 (avg/edge) [before]
    Total span:                    1 (total)                 1.00 (avg/edge) [iteration 1]
    Total span:                    1 (total)                 1.00 (avg/edge) [iteration 2]
    Total span:                    1 (total)                 1.00 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 3

    Total span:                    1 (total)                 1.00 (avg/edge) [before]
    Total span:                    1 (total)                 1.00 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer   n/a        p2    1      1 * 2     2 * 2       2 * 2       100%
  3      discrete variable  int[0..5]  p1.x  2      3 * 2     6 * 2       8 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      3      10        20          24          ~83%

Starting data-based synthesis.

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 2):             p1.x = 0
Initial   (discrete variables):              p1.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p1.l0
Initial   (aut/locs init predicate):         p2.l0
Initial   (auts/locs init predicate):        p1.l0 and p2.l0
Initial   (uncontrolled system):             p1.l0 and (p2.l0 and p1.x = 0)
Initial   (system, combined init/req inv):   p1.l0 and (p2.l0 and p1.x = 0)

Marked    (component marker predicate):      p1.x = 4 or (p1.x = 5 or p1.x = 3)
Marked    (component marker predicate):      p1.x = 0 or p1.x = 1
Marked    (components marker predicate):     false
Marked    (aut/locs marker predicate):       p1.l0
Marked    (aut/locs marker predicate):       p2.l1
Marked    (auts/locs marker predicate):      p1.l0 and p2.l1
Marked    (uncontrolled system):             false
Marked    (system, combined marked/req inv): false

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c) (guard: p1.l0 and p2.l0) (assignments: p1 := p1.l1, p2 := p2.l1)
    Edge: (event: c) (guard: p1.l0 and p2.l1) (assignments: p1 := p1.l1, p2 := p2.l0)
    Edge: (event: c) (guard: p1.l1 and p2.l0) (assignments: p1 := p1.l0, p2 := p2.l1)
    Edge: (event: c) (guard: p1.l1 and p2.l1) (assignments: p1 := p1.l0, p2 := p2.l0)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p1.x" of type "int[0..5]" (group: 2, domain: 4+5, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: false [marker predicate]
Backward reachability: iteration 1.
Controlled behavior: true -> false.

Round 1: finished, all states are bad.

Computing controlled system guards.

Edge (event: c) (guard: p1.l0 and p2.l0) (assignments: p1 := p1.l1, p2 := p2.l1): guard: p1.l0 and p2.l0 -> false.
Edge (event: c) (guard: p1.l0 and p2.l1) (assignments: p1 := p1.l1, p2 := p2.l0): guard: p1.l0 and p2.l1 -> false.
Edge (event: c) (guard: p1.l1 and p2.l0) (assignments: p1 := p1.l0, p2 := p2.l1): guard: p1.l1 and p2.l0 -> false.
Edge (event: c) (guard: p1.l1 and p2.l1) (assignments: p1 := p1.l0, p2 := p2.l0): guard: p1.l1 and p2.l1 -> false.

Final synthesis result:
  State: (controlled-behavior: false)
    Edge: (event: c) (guard: p1.l0 and p2.l0 -> false) (assignments: p1 := p1.l1, p2 := p2.l1)
    Edge: (event: c) (guard: p1.l0 and p2.l1 -> false) (assignments: p1 := p1.l1, p2 := p2.l0)
    Edge: (event: c) (guard: p1.l1 and p2.l0 -> false) (assignments: p1 := p1.l0, p2 := p2.l1)
    Edge: (event: c) (guard: p1.l1 and p2.l1 -> false) (assignments: p1 := p1.l0, p2 := p2.l0)

Controlled system:                     exactly 0 states.

Initial (synthesis result):            false
Initial (uncontrolled system):         p1.l0 and (p2.l0 and p1.x = 0)
Initial (controlled system):           false
Initial (removed by supervisor):       p1.l0 and (p2.l0 and p1.x = 0)
Initial (added by supervisor):         p1.l1 or (p2.l1 or p1.x != 0)
