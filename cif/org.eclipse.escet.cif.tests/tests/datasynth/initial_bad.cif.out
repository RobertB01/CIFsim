Reading CIF file "datasynth/initial_bad.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a         p     0      2 * 2     3 * 2       4 * 2       75%
        2      discrete variable  int[0..20]  p.x   1      5 * 2     21 * 2      32 * 2      ~66%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       2      14        48          72          ~67%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 4

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Maximum number of iterations: 10

                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [before]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [iteration 1]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Window length: 2

                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [before]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 1):             true
    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.l0
    Initial   (auts/locs init predicate):        p.l0
    Initial   (uncontrolled system):             not p.l2 and not p.l1
    Initial   (system, combined init/plant inv): not p.l2 and not p.l1
    Initial   (system, combined init/state inv): not p.l2 and not p.l1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13))
    Marked    (auts/locs marker predicate):      p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13))
    Marked    (uncontrolled system):             p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13))
    Marked    (system, combined mark/plant inv): p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13))
    Marked    (system, combined mark/state inv): p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13))

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        Event "u1" needs:
            p.x != 3
        Event "u2" needs:
            p.x != 6

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: u1) (guard: p.l0) (assignments: p := p.l1)
            Edge: (event: u2) (guard: p.l1) (assignments: p := p.l2)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: not p.l2 and not p.l1.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p" (group: 0, domain: 0+1, BDD variables: 2, CIF/BDD values: 3/4)].
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..20]" (group: 1, domain: 2+3, BDD variables: 5, CIF/BDD values: 21/32)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Controlled behavior: true -> <bdd 13n 27p> [state/event exclusion requirement: p.x != 3, edge: (event: u1) (guard: p.l0) (assignments: p := p.l1)].
    Controlled behavior: <bdd 13n 27p> -> <bdd 17n 27p> [state/event exclusion requirement: p.x != 6, edge: (event: u2) (guard: p.l1) (assignments: p := p.l2)].

    Restricted behavior using state/event exclusion requirements:
        State: (controlled-behavior: <bdd 17n 27p>)

<<<<<<< HEAD
Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [marker predicate]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and p.x = 7 or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [restricted to current/previous controlled-behavior predicate: <bdd 17n 27p>]
Backward controlled-behavior: <bdd 21n 10p> [fixed point].
Controlled behavior: <bdd 17n 27p> -> <bdd 21n 10p>.
=======
Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.
>>>>>>> refs/remotes/origin/develop

<<<<<<< HEAD
Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 21n 24p> [current/previous controlled behavior predicate]
Backward uncontrolled bad-state: (p.l1 or p.x != 16) and (not p.l1 or p.x != 16) [fixed point].
Controlled behavior: <bdd 21n 10p> -> not p.l1 and p.x = 16 or p.l1 and p.x = 16.
=======
Re-initializing edges for being applied.
>>>>>>> refs/remotes/origin/develop

<<<<<<< HEAD
Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: not p.l2 and not p.l1 [initialization predicate]
Forward controlled-behavior: not p.l2 and not p.l1 -> p.l0 and p.x = 16 [restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]
Forward controlled-behavior: not p.l1 and p.x = 16 or p.l1 and p.x = 16 [fixed point].
=======
Checking pre-synthesis for events that are never enabled.
>>>>>>> refs/remotes/origin/develop

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [marker predicate]
        Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and p.x = 7 or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [restricted to current/previous controlled-behavior predicate: <bdd 17n 27p>]

        Backward reachability iteration 1:
            Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and p.x = 7 or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.l0 and p.x = 7 or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [backward reach with edge: (event: u1) (guard: p.l0) (assignments: p := p.l1), restricted to current/previous controlled-behavior predicate: <bdd 17n 27p>]
            Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.l0 and p.x = 7 or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.l0 and p.x = 7 or p.l2 and p.x = 16 or (p.l1 and p.x = 16 or p.l1 and p.x = 13)) [backward reach with edge: (event: u2) (guard: p.l1) (assignments: p := p.l2), restricted to current/previous controlled-behavior predicate: <bdd 17n 27p>]

<<<<<<< HEAD
Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [marker predicate]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) -> p.l2 and p.x = 16 [restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]
Backward controlled-behavior: not p.l1 and p.x = 16 or p.l1 and p.x = 16 [fixed point].
=======
        Backward reachability iteration 2:
            Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.l0 and p.x = 7 or p.l2 and p.x = 16 or (p.l1 and p.x = 16 or p.l1 and p.x = 13)) -> <bdd 21n 10p> [backward reach with edge: (event: u1) (guard: p.l0) (assignments: p := p.l1), restricted to current/previous controlled-behavior predicate: <bdd 17n 27p>]
>>>>>>> refs/remotes/origin/develop

        Backward reachability iteration 3:
            No change this iteration.

        Backward controlled-behavior: <bdd 21n 10p> [fixed point].

        Controlled behavior: <bdd 17n 27p> -> <bdd 21n 10p>.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 21n 24p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            Backward uncontrolled bad-state: <bdd 21n 24p> -> <bdd 13n 22p> [backward reach with edge: (event: u1) (guard: p.l0) (assignments: p := p.l1)]
            Backward uncontrolled bad-state: <bdd 13n 22p> -> (not p.l0 or p.x != 16) and (not p.l0 or p.x != 13) and ((not p.l2 or p.x != 16) and (not p.l1 or p.x != 16)) [backward reach with edge: (event: u2) (guard: p.l1) (assignments: p := p.l2)]

        Backward reachability iteration 2:
            Backward uncontrolled bad-state: (not p.l0 or p.x != 16) and (not p.l0 or p.x != 13) and ((not p.l2 or p.x != 16) and (not p.l1 or p.x != 16)) -> (p.l1 or p.x != 16) and (not p.l1 or p.x != 16) [backward reach with edge: (event: u1) (guard: p.l0) (assignments: p := p.l1)]

        Backward reachability iteration 3:
            No change this iteration.

        Backward uncontrolled bad-state: (p.l1 or p.x != 16) and (not p.l1 or p.x != 16) [fixed point].

        Controlled behavior: <bdd 21n 10p> -> not p.l1 and p.x = 16 or p.l1 and p.x = 16.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: not p.l2 and not p.l1 [initialization predicate]
        Forward controlled-behavior: not p.l2 and not p.l1 -> p.l0 and p.x = 16 [restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]

        Forward reachability iteration 1:
            Forward controlled-behavior: p.l0 and p.x = 16 -> not p.l2 and p.x = 16 [forward reach with edge: (event: u1) (guard: p.l0) (assignments: p := p.l1), restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]
            Forward controlled-behavior: not p.l2 and p.x = 16 -> not p.l1 and p.x = 16 or p.l1 and p.x = 16 [forward reach with edge: (event: u2) (guard: p.l1) (assignments: p := p.l2), restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: not p.l1 and p.x = 16 or p.l1 and p.x = 16 [fixed point].

        Controlled behavior not changed.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) [marker predicate]
        Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l0 and (p.x = 1 or p.x = 9)) or (p.l0 and p.x = 5 or p.l0 and (p.x = 3 or p.x = 7) or (p.l2 and p.x = 16 or p.l1 and p.x = 13)) -> p.l2 and p.x = 16 [restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]

        Backward reachability iteration 1:
            Backward controlled-behavior: p.l2 and p.x = 16 -> p.l2 and p.x = 16 or p.l1 and p.x = 16 [backward reach with edge: (event: u2) (guard: p.l1) (assignments: p := p.l2), restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]

        Backward reachability iteration 2:
            Backward controlled-behavior: p.l2 and p.x = 16 or p.l1 and p.x = 16 -> not p.l1 and p.x = 16 or p.l1 and p.x = 16 [backward reach with edge: (event: u1) (guard: p.l0) (assignments: p := p.l1), restricted to current/previous controlled-behavior predicate: not p.l1 and p.x = 16 or p.l1 and p.x = 16]

        Backward reachability iteration 3:
            No change this iteration.

        Backward controlled-behavior: not p.l1 and p.x = 16 or p.l1 and p.x = 16 [fixed point].

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    No guards changed.

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: not p.l1 and p.x = 16 or p.l1 and p.x = 16)
        Edge: (event: u1) (guard: p.l0) (assignments: p := p.l1)
        Edge: (event: u2) (guard: p.l1) (assignments: p := p.l2)

Computing initialization predicate of the controlled system.

Controlled system: exactly 3 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            not p.l1 and p.x = 16 or p.l1 and p.x = 16
    Initial (uncontrolled system):         not p.l2 and not p.l1
    Initial (controlled system):           p.l0 and p.x = 16
    Initial (removed by supervisor):       (not p.l0 or p.x != 16) and (not p.l2 and not p.l1)
    Initial (added by supervisor):         p.l0 and p.x = 16 or (p.l2 or p.l1)

    Simplifying of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
        Initial: p.l0 and p.x = 16 -> p.x = 16 [assume not p.l2 and not p.l1].

    Initial (output model):                p.x = 16

Determining supervisor guards for output model:
    No controllable events.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/initial_bad.ctrlsys.real.cif".
