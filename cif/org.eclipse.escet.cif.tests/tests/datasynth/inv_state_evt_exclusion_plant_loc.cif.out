Reading CIF file "datasynth/inv_state_evt_exclusion_plant_loc.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a         a     0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..25]  a.x   1      5 * 2     26 * 2      32 * 2      ~81%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       2      12        56          68          ~82%

Applying automatic variable ordering:
  Number of hyper-edges: 50
  Number of graph edges: 1

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm.
    Maximum number of iterations: 10
    Total span:   4 (total)   0.08 (avg/edge) / WES:   0.480000 (total)   0.009600 (avg/edge) [before]
    Total span:   4 (total)   0.08 (avg/edge) / WES:   0.480000 (total)   0.009600 (avg/edge) [iteration 1]
    Total span:   4 (total)   0.08 (avg/edge) / WES:   0.480000 (total)   0.009600 (avg/edge) [after]

    Applying sliding window algorithm.
    Window length: 2
    Total span:   4 (total)   0.08 (avg/edge) / WES:   0.480000 (total)   0.009600 (avg/edge) [before]
    Total span:   4 (total)   0.08 (avg/edge) / WES:   0.480000 (total)   0.009600 (avg/edge) [after]

Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):             a.x = 1
Initial   (discrete variables):              a.x = 1
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         a.l1
Initial   (auts/locs init predicate):        a.l1
Initial   (uncontrolled system):             a.l1 and a.x = 1
Initial   (system, combined init/plant inv): a.l1 and a.x = 1
Initial   (system, combined init/state inv): a.l1 and a.x = 1

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       a.l2
Marked    (auts/locs marker predicate):      a.l2
Marked    (uncontrolled system):             a.l2
Marked    (system, combined mark/plant inv): a.l2
Marked    (system, combined mark/state inv): a.l2

State/event exclusion plants:
  Event "f" needs:
    (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 25) and (not(a.x = 4 or a.x = 5) and not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7)))
    0 <= a.x and a.x <= 15
  Event "g" needs:
    not(a.x = 0 or a.x = 2 or (a.x = 8 or a.x = 10)) and not(a.x = 4 or a.x = 6) and (not(a.x = 1 or a.x = 9) and (a.x != 5 and not(a.x = 3 or a.x = 7)))
    not(a.x = 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))) and not(a.x = 17 or (a.x = 21 or a.x = 25)) and (a.x != 19 and (a.x != 23 and a.x != 15))
  Event "h" needs:
    (0 <= a.x and a.x <= 15 or a.x = 18 or (a.x = 19 or (a.x = 22 or a.x = 23))) and not(a.x = 18 or a.x = 19) and (not(a.x = 22 or a.x = 23) and not(a.x = 14 or a.x = 15))
    (a.l1 or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 25)) and (a.l1 or not(4 <= a.x and a.x <= 7))
  Event "j" needs:
    (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 25) and (not(a.x = 4 or a.x = 5) and not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7)))
    0 <= a.x and a.x <= 15
  Event "k" needs:
    not(a.x = 0 or a.x = 2 or (a.x = 8 or a.x = 10)) and not(a.x = 4 or a.x = 6) and (not(a.x = 1 or a.x = 9) and (a.x != 5 and not(a.x = 3 or a.x = 7)))
    not(a.x = 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))) and not(a.x = 17 or (a.x = 21 or a.x = 25)) and (a.x != 19 and (a.x != 23 and a.x != 15))
  Event "l" needs:
    (0 <= a.x and a.x <= 15 or a.x = 18 or (a.x = 19 or (a.x = 22 or a.x = 23))) and not(a.x = 18 or a.x = 19) and (not(a.x = 22 or a.x = 23) and not(a.x = 14 or a.x = 15))
    (a.l1 or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 25)) and (a.l1 or not(4 <= a.x and a.x <= 7))

State/event exclusion requirements:
  None

Uncontrolled system (state/event exclusion plants not applied yet):
  State: (controlled-behavior: ?)
    Edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1)
    Edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1)
    Edge: (event: f) (guard: a.l1)
    Edge: (event: f) (guard: a.l2)
    Edge: (event: g) (guard: a.l1)
    Edge: (event: g) (guard: a.l2)
    Edge: (event: h) (guard: a.l1)
    Edge: (event: h) (guard: a.l2)
    Edge: (event: b) (guard: a.l1 and a.x = 5) (assignments: a := a.l2)
    Edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1)
    Edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1)
    Edge: (event: j) (guard: a.l1)
    Edge: (event: j) (guard: a.l2)
    Edge: (event: k) (guard: a.l1)
    Edge: (event: k) (guard: a.l2)
    Edge: (event: l) (guard: a.l1)
    Edge: (event: l) (guard: a.l2)
    Edge: (event: c) (guard: a.l1 and a.x = 5) (assignments: a := a.l2)

Restricting behavior using state/event exclusion plants.

Edge (event: f) (guard: a.l1): guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
Edge (event: f) (guard: a.l2): guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) or a.l2 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
Edge (event: g) (guard: a.l1): guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
Edge (event: g) (guard: a.l2): guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 14) or (a.l2 and a.x = 13 or a.l2 and a.x = 11) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
Edge (event: h) (guard: a.l1): guard: a.l1 -> (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1)) [plant: a.l1 and (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) or a.l1 and (a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) or (a.l1 and (a.x = 6 or a.x = 7) or a.l2 and (a.x = 12 or a.x = 13))].
Edge (event: h) (guard: a.l2): guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) [plant: a.l1 and (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) or a.l1 and (a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) or (a.l1 and (a.x = 6 or a.x = 7) or a.l2 and (a.x = 12 or a.x = 13))].
Edge (event: j) (guard: a.l1): guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
Edge (event: j) (guard: a.l2): guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) or a.l2 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
Edge (event: k) (guard: a.l1): guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
Edge (event: k) (guard: a.l2): guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 14) or (a.l2 and a.x = 13 or a.l2 and a.x = 11) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
Edge (event: l) (guard: a.l1): guard: a.l1 -> (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1)) [plant: a.l1 and (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) or a.l1 and (a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) or (a.l1 and (a.x = 6 or a.x = 7) or a.l2 and (a.x = 12 or a.x = 13))].
Edge (event: l) (guard: a.l2): guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) [plant: a.l1 and (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) or a.l1 and (a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) or (a.l1 and (a.x = 6 or a.x = 7) or a.l2 and (a.x = 12 or a.x = 13))].

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1)
    Edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1)
    Edge: (event: f) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: f) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) or a.l2 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: g) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11))
    Edge: (event: g) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 14) or (a.l2 and a.x = 13 or a.l2 and a.x = 11))
    Edge: (event: h) (guard: a.l1 -> (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1)))
    Edge: (event: h) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13))
    Edge: (event: b) (guard: a.l1 and a.x = 5) (assignments: a := a.l2)
    Edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1)
    Edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1)
    Edge: (event: j) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: j) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) or a.l2 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: k) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11))
    Edge: (event: k) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 14) or (a.l2 and a.x = 13 or a.l2 and a.x = 11))
    Edge: (event: l) (guard: a.l1 -> (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1)))
    Edge: (event: l) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13))
    Edge: (event: c) (guard: a.l1 and a.x = 5) (assignments: a := a.l2)

Initialized controlled-behavior predicate: true.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "a.x" of type "int[0..25]" (group: 1, domain: 2+3, BDD variables: 5, CIF/BDD values: 26/32)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: a.l2 [marker predicate]
Backward controlled-behavior: a.l2 -> a.l2 [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: a.l2 -> (a.l2 or (a.x = 1 or a.x = 3) or (a.x = 5 or a.x = 7 or (a.x = 9 or a.x = 11)) or (a.x = 13 or (a.x = 15 or a.x = 17) or (a.x = 19 or a.x = 21 or (a.x = 23 or a.x = 25)))) and (a.l2 or not(a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25))) and ((a.l2 or a.x != 21) and ((a.l2 or a.x != 13) and (a.l2 or not(a.x = 3 or (a.x = 7 or a.x = 11) or (a.x = 15 or (a.x = 19 or a.x = 23)))))) [backward reach with edge: (event: b) (guard: a.l1 and a.x = 5) (assignments: a := a.l2), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (a.l2 or (a.x = 1 or a.x = 3) or (a.x = 5 or a.x = 7 or (a.x = 9 or a.x = 11)) or (a.x = 13 or (a.x = 15 or a.x = 17) or (a.x = 19 or a.x = 21 or (a.x = 23 or a.x = 25)))) and (a.l2 or not(a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25))) and ((a.l2 or a.x != 21) and ((a.l2 or a.x != 13) and (a.l2 or not(a.x = 3 or (a.x = 7 or a.x = 11) or (a.x = 15 or (a.x = 19 or a.x = 23)))))) -> (a.l2 or 2 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 15 or 18 <= a.x and a.x <= 23)) and (a.l2 or not(a.x = 20 or a.x = 21)) and ((a.l2 or not(a.x = 12 or a.x = 13)) and (a.l2 or not(a.x = 2 or (a.x = 3 or a.x = 6) or (a.x = 7 or (a.x = 10 or a.x = 11)) or (a.x = 14 or (a.x = 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23)))))) [backward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (a.l2 or 2 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 15 or 18 <= a.x and a.x <= 23)) and (a.l2 or not(a.x = 20 or a.x = 21)) and ((a.l2 or not(a.x = 12 or a.x = 13)) and (a.l2 or not(a.x = 2 or (a.x = 3 or a.x = 6) or (a.x = 7 or (a.x = 10 or a.x = 11)) or (a.x = 14 or (a.x = 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23)))))) -> (a.l2 or not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24))) and (a.l2 or a.x != 20) and ((a.l2 or a.x != 12) and ((a.l2 or not(a.x = 2 or (a.x = 6 or a.x = 10) or (a.x = 14 or (a.x = 18 or a.x = 22)))) and (a.l2 or not(a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25))))) and ((a.l2 or a.x != 21) and (a.l2 or a.x != 13) and ((a.l2 or a.x != 19) and ((a.l2 or a.x != 11) and (a.l2 or not(a.x = 7 or (a.x = 15 or a.x = 23)))))) [backward reach with edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (a.l2 or not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24))) and (a.l2 or a.x != 20) and ((a.l2 or a.x != 12) and ((a.l2 or not(a.x = 2 or (a.x = 6 or a.x = 10) or (a.x = 14 or (a.x = 18 or a.x = 22)))) and (a.l2 or not(a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25))))) and ((a.l2 or a.x != 21) and (a.l2 or a.x != 13) and ((a.l2 or a.x != 19) and ((a.l2 or a.x != 11) and (a.l2 or not(a.x = 7 or (a.x = 15 or a.x = 23)))))) -> (a.l2 or 2 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 15 or 18 <= a.x and a.x <= 23)) and ((a.l2 or not(a.x = 20 or a.x = 21)) and (a.l2 or not(a.x = 12 or a.x = 13))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23)))))) [backward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: (a.l2 or 2 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 15 or 18 <= a.x and a.x <= 23)) and ((a.l2 or not(a.x = 20 or a.x = 21)) and (a.l2 or not(a.x = 12 or a.x = 13))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23)))))) -> (a.l2 or not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24))) and (a.l2 or a.x != 20) and ((a.l2 or a.x != 12) and ((a.l2 or a.x != 18) and (a.l2 or a.x != 10))) and ((a.l2 or not(a.x = 6 or (a.x = 14 or a.x = 22))) and ((a.l2 or not(a.x = 17 or a.x = 21)) and (a.l2 or not(a.x = 9 or (a.x = 13 or a.x = 25)))) and ((a.l2 or a.x != 19) and ((a.l2 or a.x != 11) and (a.l2 or not(a.x = 7 or (a.x = 15 or a.x = 23)))))) [backward reach with edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (a.l2 or not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24))) and (a.l2 or a.x != 20) and ((a.l2 or a.x != 12) and ((a.l2 or a.x != 18) and (a.l2 or a.x != 10))) and ((a.l2 or not(a.x = 6 or (a.x = 14 or a.x = 22))) and ((a.l2 or not(a.x = 17 or a.x = 21)) and (a.l2 or not(a.x = 9 or (a.x = 13 or a.x = 25)))) and ((a.l2 or a.x != 19) and ((a.l2 or a.x != 11) and (a.l2 or not(a.x = 7 or (a.x = 15 or a.x = 23)))))) -> (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23)))))) [backward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 4.
Backward controlled-behavior: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23)))))) [fixed point].
Controlled behavior: true -> (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23)))))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: a.l1 and (a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21)) or a.l1 and (a.x = 8 or (a.x = 9 or a.x = 12) or (a.x = 13 or (a.x = 24 or a.x = 25))) or (a.l1 and (a.x = 18 or a.x = 19) or (a.l1 and (a.x = 10 or a.x = 11) or a.l1 and (a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: a.l1 and a.x = 1 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: a.l1 and a.x = 1 -> a.l1 and a.x = 2 or a.l1 and a.x = 1 [forward reach with edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 2 or a.l1 and a.x = 1 -> a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3) [forward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 2.
Forward controlled-behavior: a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3)) [forward reach with edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3)) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) [forward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and a.x = 5)) [forward reach with edge: (event: c) (guard: a.l1 and a.x = 5) (assignments: a := a.l2), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 3.
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and a.x = 5)) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and a.x = 6 or a.l2 and a.x = 5)) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and a.x = 6 or a.l2 and a.x = 5)) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and a.x = 6 or a.l2 and (a.x = 5 or a.x = 7))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 4.
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and a.x = 6 or a.l2 and (a.x = 5 or a.x = 7))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or a.l2 and a.x = 8 or (a.l2 and a.x = 6 or a.l2 and (a.x = 5 or a.x = 7))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or a.l2 and a.x = 8 or (a.l2 and a.x = 6 or a.l2 and (a.x = 5 or a.x = 7))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and a.x = 8 or a.l2 and a.x = 6 or (a.l2 and a.x = 9 or (a.l2 and a.x = 5 or a.l2 and a.x = 7))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 5.
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and a.x = 8 or a.l2 and a.x = 6 or (a.l2 and a.x = 9 or (a.l2 and a.x = 5 or a.l2 and a.x = 7))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and a.x = 8)) or (a.l2 and a.x = 10 or a.l2 and a.x = 6 or (a.l2 and a.x = 9 or (a.l2 and a.x = 5 or a.l2 and a.x = 7))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and a.x = 8)) or (a.l2 and a.x = 10 or a.l2 and a.x = 6 or (a.l2 and a.x = 9 or (a.l2 and a.x = 5 or a.l2 and a.x = 7))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and a.x = 8 or a.l2 and a.x = 10 or (a.l2 and a.x = 6 or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7)))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 6.
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and a.x = 8 or a.l2 and a.x = 10 or (a.l2 and a.x = 6 or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7)))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 10 or (a.l2 and a.x = 6 or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7)))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 10 or (a.l2 and a.x = 6 or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7)))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 10 or (a.l2 and a.x = 6 or a.l2 and a.x = 9) or (a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and a.x = 7))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 7.
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 10 or (a.l2 and a.x = 6 or a.l2 and a.x = 9) or (a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and a.x = 7))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and a.x = 9) or (a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and a.x = 7))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and a.x = 9) or (a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and a.x = 7))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 8.
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and a.x = 16)) or (a.l2 and a.x = 8 or (a.l2 and a.x = 12 or a.l2 and a.x = 10) or (a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or (a.l1 and a.x = 3 or a.l2 and a.x = 16)) or (a.l2 and a.x = 8 or (a.l2 and a.x = 12 or a.l2 and a.x = 10) or (a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or a.l2 and a.x = 16 or (a.l2 and a.x = 8 or a.l2 and a.x = 12)) or (a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and a.x = 17) or (a.l2 and a.x = 9 or a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and (a.x = 7 or a.x = 15)))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 9.
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or a.l2 and a.x = 16 or (a.l2 and a.x = 8 or a.l2 and a.x = 12)) or (a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and a.x = 17) or (a.l2 and a.x = 9 or a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and (a.x = 7 or a.x = 15)))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or a.l2 and a.x = 16 or (a.l2 and a.x = 8 or a.l2 and a.x = 12)) or (a.l2 and a.x = 18 or a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and a.x = 17) or (a.l2 and a.x = 9 or a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and (a.x = 7 or a.x = 15)))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or a.l2 and a.x = 16 or (a.l2 and a.x = 8 or a.l2 and a.x = 12)) or (a.l2 and a.x = 18 or a.l2 and a.x = 10 or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and a.x = 17) or (a.l2 and a.x = 9 or a.l2 and (a.x = 5 or a.x = 13) or (a.l2 and a.x = 11 or a.l2 and (a.x = 7 or a.x = 15)))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and a.x = 16 or a.l2 and a.x = 8)) or (a.l2 and a.x = 12 or (a.l2 and a.x = 18 or a.l2 and a.x = 10) or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [forward reach with edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 10.
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and a.x = 16 or a.l2 and a.x = 8)) or (a.l2 and a.x = 12 or (a.l2 and a.x = 18 or a.l2 and a.x = 10) or (a.l2 and (a.x = 6 or a.x = 14) or a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [forward reach with edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23))))))]
Forward reachability: iteration 11.
Forward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [fixed point].
Controlled behavior: (a.l2 or not(a.x = 16 or a.x = 17 or (a.x = 20 or a.x = 21))) and (a.l2 or 0 <= a.x and a.x <= 7 or (a.x = 10 or (a.x = 11 or 14 <= a.x and a.x <= 23))) and ((a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 10 or a.x = 11)) and (a.l2 or not(a.x = 6 or (a.x = 7 or a.x = 14) or (a.x = 15 or (a.x = 22 or a.x = 23)))))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: a.l2 [marker predicate]
Backward controlled-behavior: a.l2 -> a.l2 and (a.l1 or not(a.x = 0 or a.x = 4)) and ((a.l1 or a.x != 24) and (a.l1 or a.x != 2)) and ((a.l1 or a.x != 22) and (a.l1 or not(a.x = 1 or a.x = 3)) and ((a.l1 or a.x != 25) and (a.l1 or not(a.x = 21 or a.x = 23)))) [restricted to current/previous controlled-behavior predicate: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))]
Backward reachability: iteration 1.
Backward controlled-behavior: a.l2 and (a.l1 or not(a.x = 0 or a.x = 4)) and ((a.l1 or a.x != 24) and (a.l1 or a.x != 2)) and ((a.l1 or a.x != 22) and (a.l1 or not(a.x = 1 or a.x = 3)) and ((a.l1 or a.x != 25) and (a.l1 or not(a.x = 21 or a.x = 23)))) -> a.l1 and a.x = 5 or a.l2 and (a.x = 16 or a.x = 20) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 18) or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [backward reach with edge: (event: b) (guard: a.l1 and a.x = 5) (assignments: a := a.l2), restricted to current/previous controlled-behavior predicate: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))]
Backward controlled-behavior: a.l1 and a.x = 5 or a.l2 and (a.x = 16 or a.x = 20) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 18) or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and (a.x = 4 or a.x = 5) or a.l2 and (a.x = 16 or a.x = 20) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 18) or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [backward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))]
Backward reachability: iteration 2.
Backward controlled-behavior: a.l1 and (a.x = 4 or a.x = 5) or a.l2 and (a.x = 16 or a.x = 20) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 18) or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and a.x = 4 or a.l1 and a.x = 5 or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [backward reach with edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))]
Backward controlled-behavior: a.l1 and a.x = 4 or a.l1 and a.x = 5 or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and (a.x = 4 or a.x = 5) or a.l1 and (a.x = 2 or a.x = 3) or (a.l2 and (a.x = 16 or a.x = 20) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 18)) or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [backward reach with edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))]
Backward reachability: iteration 3.
Backward controlled-behavior: a.l1 and (a.x = 4 or a.x = 5) or a.l1 and (a.x = 2 or a.x = 3) or (a.l2 and (a.x = 16 or a.x = 20) or (a.l2 and (a.x = 8 or a.x = 12) or a.l2 and a.x = 18)) or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) -> a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [backward reach with edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))]
Backward reachability: iteration 4.
Backward controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (a.l2 or a.x != 4) and ((a.l2 or a.x != 2) and (a.l2 or not(a.x = 1 or a.x = 5))) and ((a.l2 or a.x != 3) and ((a.l1 or not(a.x = 16 or a.x = 20)) and (a.l1 or not(a.x = 8 or a.x = 12)))) and ((a.l1 or a.x != 18) and ((a.l1 or a.x != 10) and (a.l1 or not(a.x = 6 or a.x = 14))) and ((a.l1 or not(a.x = 17 or a.x = 19)) and ((a.l1 or not(a.x = 9 or a.x = 11)) and (a.l1 or not(a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1)) (assignments: a.x := a.x + 1): guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1) -> a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3)).
Edge (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1): guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23))) -> a.l2 and (a.l1 or 4 <= a.x and a.x <= 25) and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23))).
Edge (event: f) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15))): guard: a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) -> false.
Edge (event: g) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11)): guard: a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11) -> false.
Edge (event: h) (guard: a.l1 -> (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1))): guard: (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1)) -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3).

Final synthesis result:
  State: (controlled-behavior: a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15))))))
    Edge: (event: e) (guard: (a.l2 or 0 <= a.x and a.x <= 23) and ((a.l2 or not(20 <= a.x and a.x <= 23)) and a.l1) -> a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1)
    Edge: (event: e) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23))) -> a.l2 and (a.l1 or 4 <= a.x and a.x <= 25) and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1)
    Edge: (event: f) (guard: a.l1 -> false)
    Edge: (event: f) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) or a.l2 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: g) (guard: a.l1 -> false)
    Edge: (event: g) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 14) or (a.l2 and a.x = 13 or a.l2 and a.x = 11))
    Edge: (event: h) (guard: a.l1 -> a.l1 and a.x = 4 or a.l1 and a.x = 2 or (a.l1 and (a.x = 1 or a.x = 5) or a.l1 and a.x = 3))
    Edge: (event: h) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13))
    Edge: (event: b) (guard: a.l1 and a.x = 5) (assignments: a := a.l2)
    Edge: (event: i) (guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3))) (assignments: a.x := a.x + 1)
    Edge: (event: i) (guard: a.l2 and ((a.l1 or 0 <= a.x and a.x <= 23) and (a.l1 or not(20 <= a.x and a.x <= 23)))) (assignments: a.x := a.x + 1)
    Edge: (event: j) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 13) or a.l1 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: j) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13) or a.l2 and (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: k) (guard: a.l1 -> a.l1 and (a.x = 12 or a.x = 14) or (a.l1 and a.x = 13 or a.l1 and a.x = 11))
    Edge: (event: k) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 14) or (a.l2 and a.x = 13 or a.l2 and a.x = 11))
    Edge: (event: l) (guard: a.l1 -> (a.l2 or (0 <= a.x and a.x <= 15 or a.x = 18) or (a.x = 19 or (a.x = 22 or a.x = 23))) and (a.l2 or not(a.x = 18 or a.x = 19)) and ((a.l2 or not(a.x = 22 or a.x = 23)) and ((a.l2 or not(a.x = 14 or a.x = 15)) and a.l1)))
    Edge: (event: l) (guard: a.l2 -> a.l2 and (a.x = 12 or a.x = 13))
    Edge: (event: c) (guard: a.l1 and a.x = 5) (assignments: a := a.l2)

Controlled system:                     exactly 21 states.

Initial (synthesis result):            a.l1 and a.x = 4 or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 5)) or (a.l1 and a.x = 3 or (a.l2 and (a.x = 16 or a.x = 20) or a.l2 and (a.x = 8 or a.x = 12))) or (a.l2 and a.x = 18 or (a.l2 and a.x = 10 or a.l2 and (a.x = 6 or a.x = 14)) or (a.l2 and (a.x = 17 or a.x = 19) or (a.l2 and (a.x = 9 or a.x = 11) or a.l2 and (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)))))
Initial (uncontrolled system):         a.l1 and a.x = 1
Initial (controlled system):           a.l1 and a.x = 1
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event e: guard: a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3)) or (a.l2 and (16 <= a.x and a.x <= 19) or (a.l2 and (8 <= a.x and a.x <= 11) or a.l2 and (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15))) -> a.l1 and (a.x = 0 or a.x = 4) or (a.l1 and a.x = 2 or a.l1 and (a.x = 1 or a.x = 3)) or (a.l2 and (16 <= a.x and a.x <= 19) or (a.l2 and (8 <= a.x and a.x <= 11 or (a.x = 24 or a.x = 25)) or a.l2 and (4 <= a.x and a.x <= 7 or (12 <= a.x and a.x <= 15 or 20 <= a.x and a.x <= 23)))) [assume 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))].
  Event b: guard: a.l1 and a.x = 5 -> true [assume a.l1 and a.x = 5].

Constructing output CIF specification.
Writing output CIF file "datasynth/inv_state_evt_exclusion_plant_loc.ctrlsys.real.cif".
