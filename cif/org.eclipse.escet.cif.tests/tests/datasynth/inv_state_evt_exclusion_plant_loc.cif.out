Reading CIF file "datasynth/inv_state_evt_exclusion_plant_loc.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a         a     0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..25]  a.x   1      5 * 2     26 * 2      32 * 2      ~81%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       2      12        56          68          ~82%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 32

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [before]
                    Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [before]
                    Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [before]
                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 32

                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [before]
                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [before]
                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 32

                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [before]
                        Total span:   4 (total)   0.13 (avg/edge) / WES:   0.468750 (total)   0.014648 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 18
                Maximum number of iterations: 10

                Total span:   18 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.055556 (avg/edge) [before]
                Total span:   18 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.055556 (avg/edge) [iteration 1]
                Total span:   18 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.055556 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 18
                Window length: 2

                Total span:   18 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.055556 (avg/edge) [before]
                Total span:   18 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.055556 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..25]  a.x   0      5 * 2     26 * 2      32 * 2      ~81%
        2      location pointer   n/a         a     1      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       2      12        56          68          ~82%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             a.x = 1
    Initial   (discrete variables):              a.x = 1
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         a.l1
    Initial   (auts/locs init predicate):        a.l1
    Initial   (uncontrolled system):             a.x = 1 and a.l1
    Initial   (system, combined init/plant inv): a.x = 1 and a.l1
    Initial   (system, combined init/state inv): a.x = 1 and a.l1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       a.l2
    Marked    (auts/locs marker predicate):      a.l2
    Marked    (uncontrolled system):             a.l2
    Marked    (system, combined mark/plant inv): a.l2
    Marked    (system, combined mark/state inv): a.l2

    State/event exclusion plants:
        Event "f" needs:
            (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 25) and (not(a.x = 4 or a.x = 5) and not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7)))
            0 <= a.x and a.x <= 15
        Event "g" needs:
            not(a.x = 0 or a.x = 2 or (a.x = 8 or a.x = 10)) and not(a.x = 4 or a.x = 6) and (not(a.x = 1 or a.x = 9) and (a.x != 5 and not(a.x = 3 or a.x = 7)))
            not(a.x = 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))) and not(a.x = 17 or (a.x = 21 or a.x = 25)) and (a.x != 19 and (a.x != 23 and a.x != 15))
        Event "h" needs:
            (0 <= a.x and a.x <= 15 or a.x = 18 or (a.x = 19 or (a.x = 22 or a.x = 23))) and not(a.x = 18 or a.x = 19) and (not(a.x = 22 or a.x = 23) and not(a.x = 14 or a.x = 15))
            (4 <= a.x and a.x <= 7 or (12 <= a.x and a.x <= 25 or a.l1)) and (not(4 <= a.x and a.x <= 7) or a.l1)
        Event "j" needs:
            (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 25) and (not(a.x = 4 or a.x = 5) and not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7)))
            0 <= a.x and a.x <= 15
        Event "k" needs:
            not(a.x = 0 or a.x = 2 or (a.x = 8 or a.x = 10)) and not(a.x = 4 or a.x = 6) and (not(a.x = 1 or a.x = 9) and (a.x != 5 and not(a.x = 3 or a.x = 7)))
            not(a.x = 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))) and not(a.x = 17 or (a.x = 21 or a.x = 25)) and (a.x != 19 and (a.x != 23 and a.x != 15))
        Event "l" needs:
            (0 <= a.x and a.x <= 15 or a.x = 18 or (a.x = 19 or (a.x = 22 or a.x = 23))) and not(a.x = 18 or a.x = 19) and (not(a.x = 22 or a.x = 23) and not(a.x = 14 or a.x = 15))
            (4 <= a.x and a.x <= 7 or (12 <= a.x and a.x <= 25 or a.l1)) and (not(4 <= a.x and a.x <= 7) or a.l1)

    State/event exclusion requirements:
        None

    Uncontrolled system (state/event exclusion plants not applied yet):
        State: (controlled-behavior: ?)
            Edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1)
            Edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1)
            Edge: (event: f) (guard: a.l1)
            Edge: (event: f) (guard: a.l2)
            Edge: (event: g) (guard: a.l1)
            Edge: (event: g) (guard: a.l2)
            Edge: (event: h) (guard: a.l1)
            Edge: (event: h) (guard: a.l2)
            Edge: (event: b) (guard: a.x = 5 and a.l1) (assignments: a := a.l2)
            Edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1)
            Edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1)
            Edge: (event: j) (guard: a.l1)
            Edge: (event: j) (guard: a.l2)
            Edge: (event: k) (guard: a.l1)
            Edge: (event: k) (guard: a.l2)
            Edge: (event: l) (guard: a.l1)
            Edge: (event: l) (guard: a.l2)
            Edge: (event: c) (guard: a.x = 5 and a.l1) (assignments: a := a.l2)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    Edge (event: f) (guard: a.l1): guard: a.l1 -> (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1 [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
    Edge (event: f) (guard: a.l2): guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2 [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
    Edge (event: g) (guard: a.l1): guard: a.l1 -> (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
    Edge (event: g) (guard: a.l2): guard: a.l2 -> (a.x = 12 or a.x = 14) and a.l2 or (a.x = 13 and a.l2 or a.x = 11 and a.l2) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
    Edge (event: h) (guard: a.l1): guard: a.l1 -> (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1) [plant: (a.x = 0 or a.x = 1 or (a.x = 8 or a.x = 9)) and a.l1 or ((a.x = 4 or a.x = 5) and a.l1 or a.x = 12) or (a.x = 13 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))].
    Edge (event: h) (guard: a.l2): guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 [plant: (a.x = 0 or a.x = 1 or (a.x = 8 or a.x = 9)) and a.l1 or ((a.x = 4 or a.x = 5) and a.l1 or a.x = 12) or (a.x = 13 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))].
    Edge (event: j) (guard: a.l1): guard: a.l1 -> (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1 [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
    Edge (event: j) (guard: a.l2): guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2 [plant: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].
    Edge (event: k) (guard: a.l1): guard: a.l1 -> (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
    Edge (event: k) (guard: a.l2): guard: a.l2 -> (a.x = 12 or a.x = 14) and a.l2 or (a.x = 13 and a.l2 or a.x = 11 and a.l2) [plant: a.x = 12 or a.x = 14 or (a.x = 13 or a.x = 11)].
    Edge (event: l) (guard: a.l1): guard: a.l1 -> (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1) [plant: (a.x = 0 or a.x = 1 or (a.x = 8 or a.x = 9)) and a.l1 or ((a.x = 4 or a.x = 5) and a.l1 or a.x = 12) or (a.x = 13 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))].
    Edge (event: l) (guard: a.l2): guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 [plant: (a.x = 0 or a.x = 1 or (a.x = 8 or a.x = 9)) and a.l1 or ((a.x = 4 or a.x = 5) and a.l1 or a.x = 12) or (a.x = 13 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))].

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1)
            Edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1)
            Edge: (event: f) (guard: a.l1 -> (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1)
            Edge: (event: f) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2)
            Edge: (event: g) (guard: a.l1 -> (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1))
            Edge: (event: g) (guard: a.l2 -> (a.x = 12 or a.x = 14) and a.l2 or (a.x = 13 and a.l2 or a.x = 11 and a.l2))
            Edge: (event: h) (guard: a.l1 -> (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))
            Edge: (event: h) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2)
            Edge: (event: b) (guard: a.x = 5 and a.l1) (assignments: a := a.l2)
            Edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1)
            Edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1)
            Edge: (event: j) (guard: a.l1 -> (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1)
            Edge: (event: j) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2)
            Edge: (event: k) (guard: a.l1 -> (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1))
            Edge: (event: k) (guard: a.l2 -> (a.x = 12 or a.x = 14) and a.l2 or (a.x = 13 and a.l2 or a.x = 11 and a.l2))
            Edge: (event: l) (guard: a.l1 -> (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))
            Edge: (event: l) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2)
            Edge: (event: c) (guard: a.x = 5 and a.l1) (assignments: a := a.l2)

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: a.x = 1 and a.l1.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "a.x" of type "int[0..25]" (group: 0, domain: 0+1, BDD variables: 5, CIF/BDD values: 26/32)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: a.l2 [marker predicate]
Backward controlled-behavior: a.l2 -> not(2 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 15 or 18 <= a.x and a.x <= 23)) and a.l2 or (a.x = 4 or a.x = 5 or (a.x = 20 or a.x = 21)) and a.l2 or ((a.x = 12 or a.x = 13) and a.l2 or ((a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7) or (a.x = 18 or a.x = 19 or (a.x = 22 or a.x = 23))) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2)) [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: not(2 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 15 or 18 <= a.x and a.x <= 23)) and a.l2 or (a.x = 4 or a.x = 5 or (a.x = 20 or a.x = 21)) and a.l2 or ((a.x = 12 or a.x = 13) and a.l2 or ((a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7) or (a.x = 18 or a.x = 19 or (a.x = 22 or a.x = 23))) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2)) -> (a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24)) and a.l2 or (a.x = 4 or a.x = 20) and a.l2 or (a.x = 12 and a.l2 or ((a.x = 2 or a.x = 6 or (a.x = 18 or a.x = 22)) and a.l2 or (a.x = 10 or a.x = 14) and a.l2)) or ((a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25)) and a.l2 or (a.x = 5 or a.x = 21 and a.l2) or (a.x = 13 and a.l2 or ((a.x = 3 or a.x = 7 or (a.x = 19 or a.x = 23)) and a.l2 or (a.x = 11 or a.x = 15) and a.l2))) [backward reach with edge: (event: b) (guard: a.x = 5 and a.l1) (assignments: a := a.l2), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24)) and a.l2 or (a.x = 4 or a.x = 20) and a.l2 or (a.x = 12 and a.l2 or ((a.x = 2 or a.x = 6 or (a.x = 18 or a.x = 22)) and a.l2 or (a.x = 10 or a.x = 14) and a.l2)) or ((a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25)) and a.l2 or (a.x = 5 or a.x = 21 and a.l2) or (a.x = 13 and a.l2 or ((a.x = 3 or a.x = 7 or (a.x = 19 or a.x = 23)) and a.l2 or (a.x = 11 or a.x = 15) and a.l2))) -> (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 15 or (18 <= a.x and a.x <= 23 or a.l2)) and (not(a.x = 20 or a.x = 21) or a.l2) and ((not(a.x = 12 or a.x = 13) or a.l2) and ((not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7) or (a.x = 18 or a.x = 19 or (a.x = 22 or a.x = 23))) or a.l2) and (not(a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) or a.l2))) [backward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 15 or (18 <= a.x and a.x <= 23 or a.l2)) and (not(a.x = 20 or a.x = 21) or a.l2) and ((not(a.x = 12 or a.x = 13) or a.l2) and ((not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7) or (a.x = 18 or a.x = 19 or (a.x = 22 or a.x = 23))) or a.l2) and (not(a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) or a.l2))) -> (not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24)) or a.l2) and ((a.x != 20 or a.l2) and (a.x != 12 or a.l2)) and ((not(a.x = 2 or a.x = 6 or (a.x = 18 or a.x = 22)) or a.l2) and ((not(a.x = 10 or a.x = 14) or a.l2) and (not(a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25)) or a.l2))) and ((a.x != 21 or a.l2) and ((a.x != 13 or a.l2) and (a.x != 19 or a.l2)) and ((a.x != 11 or a.l2) and ((not(a.x = 7 or a.x = 23) or a.l2) and (a.x != 15 or a.l2)))) [backward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24)) or a.l2) and ((a.x != 20 or a.l2) and (a.x != 12 or a.l2)) and ((not(a.x = 2 or a.x = 6 or (a.x = 18 or a.x = 22)) or a.l2) and ((not(a.x = 10 or a.x = 14) or a.l2) and (not(a.x = 1 or a.x = 9 or (a.x = 17 or a.x = 25)) or a.l2))) and ((a.x != 21 or a.l2) and ((a.x != 13 or a.l2) and (a.x != 19 or a.l2)) and ((a.x != 11 or a.l2) and ((not(a.x = 7 or a.x = 23) or a.l2) and (a.x != 15 or a.l2)))) -> (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 15 or (18 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2))) [backward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 15 or (18 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2))) -> (not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24)) or a.l2) and ((a.x != 20 or a.l2) and (a.x != 12 or a.l2)) and ((a.x != 18 or a.l2) and (a.x != 10 or a.l2) and ((not(a.x = 6 or a.x = 22) or a.l2) and (a.x != 14 or a.l2))) and ((a.x != 17 or a.l2) and (not(a.x = 9 or a.x = 25) or a.l2) and ((a.x != 21 or a.l2) and (a.x != 13 or a.l2)) and ((a.x != 19 or a.l2) and (a.x != 11 or a.l2) and ((not(a.x = 7 or a.x = 23) or a.l2) and (a.x != 15 or a.l2)))) [backward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (not(a.x = 0 or a.x = 8 or (a.x = 16 or a.x = 24)) or a.l2) and ((a.x != 20 or a.l2) and (a.x != 12 or a.l2)) and ((a.x != 18 or a.l2) and (a.x != 10 or a.l2) and ((not(a.x = 6 or a.x = 22) or a.l2) and (a.x != 14 or a.l2))) and ((a.x != 17 or a.l2) and (not(a.x = 9 or a.x = 25) or a.l2) and ((a.x != 21 or a.l2) and (a.x != 13 or a.l2)) and ((a.x != 19 or a.l2) and (a.x != 11 or a.l2) and ((not(a.x = 7 or a.x = 23) or a.l2) and (a.x != 15 or a.l2)))) -> (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2))) [backward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 4.
Backward controlled-behavior: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2))) [fixed point].
Controlled behavior: true -> (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (a.x = 16 or a.x = 17) and a.l1 or (a.x = 8 or a.x = 9 or (a.x = 24 or a.x = 25)) and a.l1 or ((a.x = 20 or a.x = 21) and a.l1 or (a.x = 12 or a.x = 13) and a.l1) or ((a.x = 18 or a.x = 19) and a.l1 or (a.x = 10 or a.x = 11) and a.l1 or ((a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) and a.l1 or (a.x = 14 or a.x = 15) and a.l1)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: a.x = 1 and a.l1 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: a.x = 1 and a.l1 -> a.x = 2 and a.l1 or a.x = 1 and a.l1 [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 2 and a.l1 or a.x = 1 and a.l1 -> a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1 [forward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 2.
Forward controlled-behavior: a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1 -> a.x = 4 and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 4 and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1) -> a.x = 4 and a.l1 or a.x = 2 and a.l1 or ((a.x = 1 or a.x = 5) and a.l1 or a.x = 3 and a.l1) [forward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 4 and a.l1 or a.x = 2 and a.l1 or ((a.x = 1 or a.x = 5) and a.l1 or a.x = 3 and a.l1) -> a.x = 4 and a.l1 or a.x = 2 and a.l1 or (a.x = 1 and a.l1 or (a.x = 5 or a.x = 3 and a.l1)) [forward reach with edge: (event: c) (guard: a.x = 5 and a.l1) (assignments: a := a.l2), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 3.
Forward controlled-behavior: a.x = 4 and a.l1 or a.x = 2 and a.l1 or (a.x = 1 and a.l1 or (a.x = 5 or a.x = 3 and a.l1)) -> a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or (a.x = 5 or a.x = 3 and a.l1)) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or (a.x = 5 or a.x = 3 and a.l1)) -> a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2)) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 4.
Forward controlled-behavior: a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2)) -> a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2)) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2)) -> a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or a.x = 9 and a.l2 or (a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2))) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 5.
Forward controlled-behavior: a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or a.x = 6 and a.l2) or (a.x = 1 and a.l1 or a.x = 9 and a.l2 or (a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2))) -> a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or a.x = 9 and a.l2 or (a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2))) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or a.x = 9 and a.l2 or (a.x = 5 or (a.x = 3 and a.l1 or a.x = 7 and a.l2))) -> a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 6.
Forward controlled-behavior: a.x = 8 and a.l2 or a.x = 4 and a.l1 or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) -> a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) -> a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 7.
Forward controlled-behavior: a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or a.x = 6 and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) -> a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or a.x = 7 and a.l2))) -> a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 8.
Forward controlled-behavior: a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or (a.x = 8 and a.l2 or a.x = 4 and a.l1) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 16 and a.l2 or (a.x = 8 and a.l2 or a.x = 4 and a.l1) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or (a.x = 8 and a.l2 or a.x = 4 and a.l1) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 9.
Forward controlled-behavior: a.x = 16 and a.l2 or (a.x = 8 and a.l2 or a.x = 4 and a.l1) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) [forward reach with edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 10.
Forward controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 12 and a.l2) or (a.x = 2 and a.l1 or a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) [forward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2)))]
Forward reachability: iteration 11.
Forward controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) [fixed point].
Controlled behavior: (not(a.x = 16 or a.x = 17) or a.l2) and (0 <= a.x and a.x <= 7 or (10 <= a.x and a.x <= 23 or a.l2)) and ((not(a.x = 20 or a.x = 21) or a.l2) and (not(a.x = 12 or a.x = 13) or a.l2)) and ((not(a.x = 18 or a.x = 19) or a.l2) and (not(a.x = 10 or a.x = 11) or a.l2) and ((not(a.x = 6 or a.x = 7 or (a.x = 22 or a.x = 23)) or a.l2) and (not(a.x = 14 or a.x = 15) or a.l2))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: a.l2 [marker predicate]
Backward controlled-behavior: a.l2 -> (a.x = 16 or a.x = 20) and a.l2 or (a.x = 8 or a.x = 12) and a.l2 or (a.x = 18 and a.l2 or a.x = 10 and a.l2) or ((a.x = 6 or a.x = 14) and a.l2 or (a.x = 17 or a.x = 19) and a.l2 or ((a.x = 9 or a.x = 11) and a.l2 or (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)) and a.l2)) [restricted to current/previous controlled-behavior predicate: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))]
Backward reachability: iteration 1.
Backward controlled-behavior: (a.x = 16 or a.x = 20) and a.l2 or (a.x = 8 or a.x = 12) and a.l2 or (a.x = 18 and a.l2 or a.x = 10 and a.l2) or ((a.x = 6 or a.x = 14) and a.l2 or (a.x = 17 or a.x = 19) and a.l2 or ((a.x = 9 or a.x = 11) and a.l2 or (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)) and a.l2)) -> (a.x = 16 or a.x = 20) and a.l2 or ((a.x = 8 or a.x = 12) and a.l2 or a.x = 18 and a.l2) or (a.x = 10 and a.l2 or ((a.x = 6 or a.x = 14) and a.l2 or a.x = 17 and a.l2)) or (a.x = 9 and a.l2 or (a.x = 5 or a.x = 13 and a.l2) or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [backward reach with edge: (event: b) (guard: a.x = 5 and a.l1) (assignments: a := a.l2), restricted to current/previous controlled-behavior predicate: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))]
Backward controlled-behavior: (a.x = 16 or a.x = 20) and a.l2 or ((a.x = 8 or a.x = 12) and a.l2 or a.x = 18 and a.l2) or (a.x = 10 and a.l2 or ((a.x = 6 or a.x = 14) and a.l2 or a.x = 17 and a.l2)) or (a.x = 9 and a.l2 or (a.x = 5 or a.x = 13 and a.l2) or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or (a.x = 8 and a.l2 or a.x = 4 and a.l1) or (a.x = 20 and a.l2 or a.x = 12 and a.l2 or (a.x = 18 and a.l2 or a.x = 10 and a.l2)) or ((a.x = 6 or a.x = 14) and a.l2 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [backward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))]
Backward reachability: iteration 2.
Backward controlled-behavior: a.x = 16 and a.l2 or (a.x = 8 and a.l2 or a.x = 4 and a.l1) or (a.x = 20 and a.l2 or a.x = 12 and a.l2 or (a.x = 18 and a.l2 or a.x = 10 and a.l2)) or ((a.x = 6 or a.x = 14) and a.l2 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 17 and a.l2 or a.x = 9 and a.l2 or (a.x = 5 or a.x = 13 and a.l2) or (a.x = 3 and a.l1 or a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) [backward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))]
Backward controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2)) or (a.x = 17 and a.l2 or a.x = 9 and a.l2 or (a.x = 5 or a.x = 13 and a.l2) or (a.x = 3 and a.l1 or a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or a.x = 10 and a.l2)) or ((a.x = 6 or a.x = 14) and a.l2 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) [backward reach with edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))]
Backward reachability: iteration 3.
Backward controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or a.x = 10 and a.l2)) or ((a.x = 6 or a.x = 14) and a.l2 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) -> a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) [backward reach with edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))]
Backward reachability: iteration 4.
Backward controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 15n 27p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1)) (assignments: a.x := a.x + 1): guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1) -> (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1).
Edge (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1): guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2) -> 16 <= a.x and (a.x <= 19 and a.l2) or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2).
Edge (event: f) (guard: a.l1 -> (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1): guard: (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1 -> false.
Edge (event: g) (guard: a.l1 -> (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1)): guard: (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1) -> false.
Edge (event: h) (guard: a.l1 -> (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1)): guard: (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1) -> a.x = 4 and a.l1 or a.x = 2 and a.l1 or ((a.x = 1 or a.x = 5) and a.l1 or a.x = 3 and a.l1).

Final synthesis result:
    State: (controlled-behavior: a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2)))))
        Edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l1 or (8 <= a.x and (a.x <= 11 and a.l1) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l1) -> (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1)
        Edge: (event: e) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2) -> 16 <= a.x and (a.x <= 19 and a.l2) or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1)
        Edge: (event: f) (guard: a.l1 -> false)
        Edge: (event: f) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2)
        Edge: (event: g) (guard: a.l1 -> false)
        Edge: (event: g) (guard: a.l2 -> (a.x = 12 or a.x = 14) and a.l2 or (a.x = 13 and a.l2 or a.x = 11 and a.l2))
        Edge: (event: h) (guard: a.l1 -> a.x = 4 and a.l1 or a.x = 2 and a.l1 or ((a.x = 1 or a.x = 5) and a.l1 or a.x = 3 and a.l1))
        Edge: (event: h) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2)
        Edge: (event: b) (guard: a.x = 5 and a.l1) (assignments: a := a.l2)
        Edge: (event: i) (guard: (a.x = 0 or a.x = 4) and a.l1 or (a.x = 2 and a.l1 or (a.x = 1 or a.x = 3) and a.l1)) (assignments: a.x := a.x + 1)
        Edge: (event: i) (guard: (0 <= a.x and a.x <= 3 or 16 <= a.x and a.x <= 19) and a.l2 or (8 <= a.x and (a.x <= 11 and a.l2) or (4 <= a.x and a.x <= 7 or 12 <= a.x and a.x <= 15) and a.l2)) (assignments: a.x := a.x + 1)
        Edge: (event: j) (guard: a.l1 -> (a.x = 12 or a.x = 13) and a.l1 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l1)
        Edge: (event: j) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2 or (a.x = 10 or a.x = 11 or (a.x = 14 or a.x = 15)) and a.l2)
        Edge: (event: k) (guard: a.l1 -> (a.x = 12 or a.x = 14) and a.l1 or (a.x = 13 and a.l1 or a.x = 11 and a.l1))
        Edge: (event: k) (guard: a.l2 -> (a.x = 12 or a.x = 14) and a.l2 or (a.x = 13 and a.l2 or a.x = 11 and a.l2))
        Edge: (event: l) (guard: a.l1 -> (a.x = 0 or a.x = 1 or (a.x = 4 or a.x = 5) or (a.x = 8 or a.x = 9 or (a.x = 12 or a.x = 13))) and a.l1 or ((a.x = 2 or a.x = 3 or (a.x = 10 or a.x = 11)) and a.l1 or (a.x = 6 or a.x = 7) and a.l1))
        Edge: (event: l) (guard: a.l2 -> (a.x = 12 or a.x = 13) and a.l2)
        Edge: (event: c) (guard: a.x = 5 and a.l1) (assignments: a := a.l2)

Controlled system: exactly 21 states.

Initial (synthesis result):            a.x = 16 and a.l2 or a.x = 8 and a.l2 or (a.x = 4 and a.l1 or a.x = 20 and a.l2) or (a.x = 12 and a.l2 or a.x = 2 and a.l1 or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2))) or (a.x = 1 and a.l1 or a.x = 17 and a.l2 or (a.x = 9 and a.l2 or a.x = 5) or (a.x = 13 and a.l2 or a.x = 3 and a.l1 or (a.x = 19 and a.l2 or (a.x = 11 and a.l2 or (a.x = 7 or a.x = 15) and a.l2))))
Initial (uncontrolled system):         a.x = 1 and a.l1
Initial (controlled system):           a.x = 1 and a.l1
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
    Event e: guard: a.x = 0 and a.l1 or (a.x = 16 and a.l2 or a.x = 8 and a.l2) or (a.x = 4 or (a.x = 12 and a.l2 or a.x = 2 and a.l1)) or (a.x = 18 and a.l2 or (a.x = 10 and a.l2 or (a.x = 6 or a.x = 14) and a.l2) or ((a.x = 1 or a.x = 3) and a.l1 or (a.x = 17 or a.x = 19) and a.l2 or ((a.x = 9 or a.x = 11) and a.l2 or (a.x = 5 or a.x = 7 or (a.x = 13 or a.x = 15)) and a.l2))) -> (a.x != 0 or a.l1) and ((a.x != 16 or a.l2) and (not(a.x = 8 or a.x = 24) or a.l2)) and ((a.x != 12 or a.l2) and ((a.x != 2 or a.l1) and (a.x != 18 or a.l2))) and ((a.x != 10 or a.l2) and ((not(a.x = 6 or (a.x = 14 or a.x = 22)) or a.l2) and (not(a.x = 1 or a.x = 3) or a.l1)) and ((not(a.x = 17 or a.x = 19) or a.l2) and ((not(a.x = 9 or (a.x = 11 or a.x = 25)) or a.l2) and (not(a.x = 5 or (a.x = 7 or a.x = 13) or (a.x = 15 or (a.x = 21 or a.x = 23))) or a.l2)))) [assume 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))].
    Event b: guard: a.x = 5 and a.l1 -> true [assume a.x = 5 and a.l1].

Constructing output CIF specification.
Writing output CIF file "datasynth/inv_state_evt_exclusion_plant_loc.ctrlsys.real.cif".
