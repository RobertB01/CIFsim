Reading CIF file "datasynth/traffic_lights_req_state_inv_per_edge.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind              Type  Name    Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  ------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   LightA  0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer  n/a   LightB  1      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  ------  -----  --------  ----------  ----------  -----------
        Total                                  2      4         8           8           100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 5

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
                    Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
                    Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 5

                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 5

                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
                        Total span:   1 (total)   0.20 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Maximum number of iterations: 10

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Window length: 2

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.062500 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (component state req invariant):   LightA.Red or LightB.Red
    Invariant (components state req invariant):  LightA.Red or LightB.Red
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      LightA.Red or LightB.Red

    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         LightA.Red
    Initial   (aut/locs init predicate):         LightB.Red
    Initial   (auts/locs init predicate):        LightA.Red and LightB.Red
    Initial   (uncontrolled system):             LightA.Red and LightB.Red
    Initial   (system, combined init/plant inv): LightA.Red and LightB.Red
    Initial   (system, combined init/state inv): LightA.Red and LightB.Red

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       LightA.Red
    Marked    (aut/locs marker predicate):       LightB.Red
    Marked    (auts/locs marker predicate):      LightA.Red and LightB.Red
    Marked    (uncontrolled system):             LightA.Red and LightB.Red
    Marked    (system, combined mark/plant inv): LightA.Red and LightB.Red
    Marked    (system, combined mark/state inv): LightA.Red and LightB.Red

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: green_A) (guard: LightA.Red) (assignments: LightA := LightA.Green)
            Edge: (event: red_A) (guard: LightA.Green) (assignments: LightA := LightA.Red)
            Edge: (event: green_B) (guard: LightB.Red) (assignments: LightB := LightB.Green)
            Edge: (event: red_B) (guard: LightB.Green) (assignments: LightB := LightB.Red)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: LightA.Red and LightB.Red.

Restricting behavior using state requirements:
    Edge (event: green_A) (guard: LightA.Red) (assignments: LightA := LightA.Green): guard: LightA.Red -> LightA.Red and LightB.Red [state requirement: LightA.Red and LightB.Red].
    Edge (event: green_B) (guard: LightB.Red) (assignments: LightB := LightB.Green): guard: LightB.Red -> LightA.Red and LightB.Red [state requirement: LightA.Red and LightB.Red].

    Restricted behavior using state requirements:
        State: (controlled-behavior: true)
            Edge: (event: green_A) (guard: LightA.Red -> LightA.Red and LightB.Red) (assignments: LightA := LightA.Green)
            Edge: (event: red_A) (guard: LightA.Green) (assignments: LightA := LightA.Red)
            Edge: (event: green_B) (guard: LightB.Red -> LightA.Red and LightB.Red) (assignments: LightB := LightB.Green)
            Edge: (event: red_B) (guard: LightB.Green) (assignments: LightB := LightB.Red)
    Controlled-initialization not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior not changed.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: LightA.Red and LightB.Red [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: LightA.Red and LightB.Red -> LightB.Red [backward reach with edge: (event: red_A) (guard: LightA.Green) (assignments: LightA := LightA.Red), restricted to current/previous controlled-behavior predicate: true]
            Backward controlled-behavior: LightB.Red -> true [backward reach with edge: (event: red_B) (guard: LightB.Green) (assignments: LightB := LightB.Red), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: LightA.Red and LightB.Red [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: LightA.Red and LightB.Red -> LightB.Red [forward reach with edge: (event: green_A) (guard: LightA.Red -> LightA.Red and LightB.Red) (assignments: LightA := LightA.Green), restricted to current/previous controlled-behavior predicate: true]
            Forward controlled-behavior: LightB.Red -> LightA.Red or LightB.Red [forward reach with edge: (event: green_B) (guard: LightB.Red -> LightA.Red and LightB.Red) (assignments: LightB := LightB.Green), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: LightA.Red or LightB.Red [fixed point].

        Controlled behavior: true -> LightA.Red or LightB.Red.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: LightA.Red and LightB.Red [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: LightA.Red and LightB.Red -> LightB.Red [backward reach with edge: (event: red_A) (guard: LightA.Green) (assignments: LightA := LightA.Red), restricted to current/previous controlled-behavior predicate: LightA.Red or LightB.Red]
            Backward controlled-behavior: LightB.Red -> LightA.Red or LightB.Red [backward reach with edge: (event: red_B) (guard: LightB.Green) (assignments: LightB := LightB.Red), restricted to current/previous controlled-behavior predicate: LightA.Red or LightB.Red]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: LightA.Red or LightB.Red [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: LightA.Green and LightB.Green [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    No guards changed.

Final synthesis result:
    State: (controlled-behavior: LightA.Red or LightB.Red)
        Edge: (event: green_A) (guard: LightA.Red -> LightA.Red and LightB.Red) (assignments: LightA := LightA.Green)
        Edge: (event: red_A) (guard: LightA.Green) (assignments: LightA := LightA.Red)
        Edge: (event: green_B) (guard: LightB.Red -> LightA.Red and LightB.Red) (assignments: LightB := LightB.Green)
        Edge: (event: red_B) (guard: LightB.Green) (assignments: LightB := LightB.Red)

Controlled system: exactly 3 states.

Initial (synthesis result):            LightA.Red or LightB.Red
Initial (uncontrolled system):         LightA.Red and LightB.Red
Initial (controlled system):           LightA.Red and LightB.Red
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Checking post-synthesis for events that are never enabled.

Simplification of controlled system under the assumption of the plants:
    Event green_A: guard: LightA.Red and LightB.Red -> LightB.Red [assume LightA.Red].
    Event red_A: guard: LightA.Green -> true [assume LightA.Green].
    Event green_B: guard: LightA.Red and LightB.Red -> LightA.Red [assume LightB.Red].
    Event red_B: guard: LightB.Green -> true [assume LightB.Green].

Constructing output CIF specification.
Writing output CIF file "datasynth/traffic_lights_req_state_inv_per_edge.ctrlsys.real.cif".
