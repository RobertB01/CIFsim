Reading CIF file "datasynth/multi_req_invs1.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..10]  p.x   0      4 * 2     11 * 2      16 * 2      ~69%
  2      discrete variable  int[0..10]  p.y   1      4 * 2     11 * 2      16 * 2      ~69%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       2      16        44          64          ~69%

Applying automatic variable ordering:
  Number of hyper-edges: 11
  Number of graph edges: 1

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm.
    Maximum number of iterations: 10
    Total span:   1 (total)   0.09 (avg/edge) / WES:   0.272727 (total)   0.024793 (avg/edge) [before]
    Total span:   1 (total)   0.09 (avg/edge) / WES:   0.272727 (total)   0.024793 (avg/edge) [iteration 1]
    Total span:   1 (total)   0.09 (avg/edge) / WES:   0.272727 (total)   0.024793 (avg/edge) [after]

    Applying sliding window algorithm.
    Window length: 2
    Total span:   1 (total)   0.09 (avg/edge) / WES:   0.272727 (total)   0.024793 (avg/edge) [before]
    Total span:   1 (total)   0.09 (avg/edge) / WES:   0.272727 (total)   0.024793 (avg/edge) [after]

Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (component state req invariant):   p.x != 10 and p.x != 9
Invariant (component state req invariant):   p.y != 7
Invariant (component state req invariant):   2 <= p.x and p.x <= 10
Invariant (components state req invariant):  p.x != 0 and (p.x != 8 or p.y != 7) and ((p.x != 4 or p.y != 7) and (not(p.x = 2 or p.x = 6) or p.y != 7)) and (p.x != 10 and not(p.x = 1 or p.x = 9) and ((p.x != 5 or p.y != 7) and (not(p.x = 3 or p.x = 7) or p.y != 7)))
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      p.x != 0 and (p.x != 8 or p.y != 7) and ((p.x != 4 or p.y != 7) and (not(p.x = 2 or p.x = 6) or p.y != 7)) and (p.x != 10 and not(p.x = 1 or p.x = 9) and ((p.x != 5 or p.y != 7) and (not(p.x = 3 or p.x = 7) or p.y != 7)))

Initial   (discrete variable 0):             p.x = 5
Initial   (discrete variable 1):             p.y = 6
Initial   (discrete variables):              p.x = 5 and p.y = 6
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             p.x = 5 and p.y = 6
Initial   (system, combined init/plant inv): p.x = 5 and p.y = 6
Initial   (system, combined init/state inv): p.x = 5 and p.y = 6

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): p.x != 0 and (p.x != 8 or p.y != 7) and ((p.x != 4 or p.y != 7) and (not(p.x = 2 or p.x = 6) or p.y != 7)) and (p.x != 10 and not(p.x = 1 or p.x = 9) and ((p.x != 5 or p.y != 7) and (not(p.x = 3 or p.x = 7) or p.y != 7)))

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: a) (guard: true) (assignments: p.x := p.x + 1)
    Edge: (event: b) (guard: true) (assignments: p.x := p.x - 1, p.y := p.y + 1)
    Edge: (event: c) (guard: true) (assignments: p.y := p.y - 1)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: p.x != 0 and (p.x != 8 or p.y != 7) and ((p.x != 4 or p.y != 7) and (not(p.x = 2 or p.x = 6) or p.y != 7)) and (p.x != 10 and not(p.x = 1 or p.x = 9) and ((p.x != 5 or p.y != 7) and (not(p.x = 3 or p.x = 7) or p.y != 7))).

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: p.x != 0 and (p.x != 8 or p.y != 7) and ((p.x != 4 or p.y != 7) and (not(p.x = 2 or p.x = 6) or p.y != 7)) and (p.x != 10 and not(p.x = 1 or p.x = 9) and ((p.x != 5 or p.y != 7) and (not(p.x = 3 or p.x = 7) or p.y != 7))) -> <bdd 12n 25p> [range: true, variable: discrete variable "p.y" of type "int[0..10]" (group: 1, domain: 2+3, BDD variables: 4, CIF/BDD values: 11/16)].

Extended controlled-behavior predicate using variable ranges: <bdd 12n 25p>.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> <bdd 12n 25p> [restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 12n 25p> [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 12n 26p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.x = 5 and p.y = 6 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p.x = 5 and p.y = 6 -> p.x = 6 and p.y = 6 or p.x = 5 and p.y = 6 [forward reach with edge: (event: a) (guard: true) (assignments: p.x := p.x + 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward controlled-behavior: p.x = 6 and p.y = 6 or p.x = 5 and p.y = 6 -> p.x = 6 and p.y = 6 or p.x = 6 and p.y = 5 or (p.x = 5 and p.y = 6 or p.x = 5 and p.y = 5) [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 2.
Forward controlled-behavior: p.x = 6 and p.y = 6 or p.x = 6 and p.y = 5 or (p.x = 5 and p.y = 6 or p.x = 5 and p.y = 5) -> p.x = 6 and p.y = 6 or p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and p.y = 6 or (p.x = 5 or p.x = 7) and p.y = 5) [forward reach with edge: (event: a) (guard: true) (assignments: p.x := p.x + 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward controlled-behavior: p.x = 6 and p.y = 6 or p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and p.y = 6 or (p.x = 5 or p.x = 7) and p.y = 5) -> p.x = 4 and p.y = 6 or p.x = 6 and p.y = 6 or (p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and p.y = 6 or (p.x = 5 or p.x = 7) and p.y = 5)) [forward reach with edge: (event: b) (guard: true) (assignments: p.x := p.x - 1, p.y := p.y + 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward controlled-behavior: p.x = 4 and p.y = 6 or p.x = 6 and p.y = 6 or (p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and p.y = 6 or (p.x = 5 or p.x = 7) and p.y = 5)) -> p.x = 4 and p.y = 6 or (p.x = 4 and p.y = 5 or p.x = 6 and (p.y = 4 or p.y = 6)) or (p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and (p.y = 4 or p.y = 6) or (p.x = 5 or p.x = 7) and p.y = 5)) [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 3.
Forward controlled-behavior: p.x = 4 and p.y = 6 or (p.x = 4 and p.y = 5 or p.x = 6 and (p.y = 4 or p.y = 6)) or (p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and (p.y = 4 or p.y = 6) or (p.x = 5 or p.x = 7) and p.y = 5)) -> p.x = 8 and (p.y = 4 or p.y = 6) or p.x = 8 and p.y = 5 or (p.x = 4 and p.y = 6 or p.x = 4 and p.y = 5) or (p.x = 6 and (p.y = 4 or p.y = 6) or p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and (p.y = 4 or p.y = 6) or (p.x = 5 or p.x = 7) and p.y = 5)) [forward reach with edge: (event: a) (guard: true) (assignments: p.x := p.x + 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward controlled-behavior: p.x = 8 and (p.y = 4 or p.y = 6) or p.x = 8 and p.y = 5 or (p.x = 4 and p.y = 6 or p.x = 4 and p.y = 5) or (p.x = 6 and (p.y = 4 or p.y = 6) or p.x = 6 and p.y = 5 or ((p.x = 5 or p.x = 7) and (p.y = 4 or p.y = 6) or (p.x = 5 or p.x = 7) and p.y = 5)) -> p.x = 8 and (p.y = 4 or p.y = 6) or p.x = 8 and p.y = 5 or (p.x = 4 and p.y = 6 or (p.x = 4 and p.y = 5 or p.x = 6 and (p.y = 4 or p.y = 6))) or (p.x = 6 and p.y = 5 or (p.x = 5 and (p.y = 4 or p.y = 6) or p.x = 5 and p.y = 5) or (p.x = 3 and p.y = 6 or (p.x = 7 and (p.y = 4 or p.y = 6) or p.x = 7 and p.y = 5))) [forward reach with edge: (event: b) (guard: true) (assignments: p.x := p.x - 1, p.y := p.y + 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward controlled-behavior: p.x = 8 and (p.y = 4 or p.y = 6) or p.x = 8 and p.y = 5 or (p.x = 4 and p.y = 6 or (p.x = 4 and p.y = 5 or p.x = 6 and (p.y = 4 or p.y = 6))) or (p.x = 6 and p.y = 5 or (p.x = 5 and (p.y = 4 or p.y = 6) or p.x = 5 and p.y = 5) or (p.x = 3 and p.y = 6 or (p.x = 7 and (p.y = 4 or p.y = 6) or p.x = 7 and p.y = 5))) -> p.x = 8 and (p.y = 4 or p.y = 6) or p.x = 8 and p.y = 5 or (p.x = 8 and p.y = 3 or p.x = 4 and (p.y = 4 or p.y = 6)) or (p.x = 4 and p.y = 5 or p.x = 6 and (p.y = 4 or p.y = 6) or (p.x = 6 and p.y = 5 or p.x = 6 and p.y = 3)) or (p.x = 5 and (p.y = 4 or p.y = 6) or p.x = 5 and p.y = 5 or (p.x = 5 and p.y = 3 or p.x = 3 and p.y = 6) or (p.x = 3 and p.y = 5 or p.x = 7 and (p.y = 4 or p.y = 6) or (p.x = 7 and p.y = 5 or p.x = 7 and p.y = 3))) [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 4.
Forward controlled-behavior: p.x = 8 and (p.y = 4 or p.y = 6) or p.x = 8 and p.y = 5 or (p.x = 8 and p.y = 3 or p.x = 4 and (p.y = 4 or p.y = 6)) or (p.x = 4 and p.y = 5 or p.x = 6 and (p.y = 4 or p.y = 6) or (p.x = 6 and p.y = 5 or p.x = 6 and p.y = 3)) or (p.x = 5 and (p.y = 4 or p.y = 6) or p.x = 5 and p.y = 5 or (p.x = 5 and p.y = 3 or p.x = 3 and p.y = 6) or (p.x = 3 and p.y = 5 or p.x = 7 and (p.y = 4 or p.y = 6) or (p.x = 7 and p.y = 5 or p.x = 7 and p.y = 3))) -> <bdd 22n 17p> [forward reach with edge: (event: b) (guard: true) (assignments: p.x := p.x - 1, p.y := p.y + 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward controlled-behavior: <bdd 22n 17p> -> <bdd 23n 23p> [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 5.
Forward controlled-behavior: <bdd 23n 23p> -> <bdd 23n 25p> [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 6.
Forward controlled-behavior: <bdd 23n 25p> -> <bdd 22n 23p> [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 7.
Forward controlled-behavior: <bdd 22n 23p> -> <bdd 20n 23p> [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 8.
Forward controlled-behavior: <bdd 20n 23p> -> p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and ((p.x != 8 or p.y != 7) and (p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)))) and ((p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and (p.x != 2 or not(p.y = 0 or p.y = 8))) and ((p.x != 2 or p.y != 10) and ((p.x != 2 or p.y != 9) and (p.x != 2 or p.y != 7)))) and (p.x != 10 and (p.x != 6 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 6 or p.y != 9) and ((p.x != 6 or p.y != 7) and not(p.x = 1 or p.x = 9))) and ((p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7)) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))) [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 9.
Forward controlled-behavior: p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and ((p.x != 8 or p.y != 7) and (p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)))) and ((p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and (p.x != 2 or not(p.y = 0 or p.y = 8))) and ((p.x != 2 or p.y != 10) and ((p.x != 2 or p.y != 9) and (p.x != 2 or p.y != 7)))) and (p.x != 10 and (p.x != 6 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 6 or p.y != 9) and ((p.x != 6 or p.y != 7) and not(p.x = 1 or p.x = 9))) and ((p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7)) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))) -> p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))) [forward reach with edge: (event: c) (guard: true) (assignments: p.y := p.y - 1), restricted to current/previous controlled-behavior predicate: <bdd 12n 25p>]
Forward reachability: iteration 10.
Forward controlled-behavior: p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))) [fixed point].
Controlled behavior: <bdd 12n 25p> -> p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))) [restricted to current/previous controlled-behavior predicate: p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7)))))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 11n 26p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: a) (guard: true) (assignments: p.x := p.x + 1): guard: true -> not(p.x = 0 or p.x = 8) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9)) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and (p.x != 10 and (not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.y != 9) and ((not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.y != 7) and p.x != 9))).
Edge (event: b) (guard: true) (assignments: p.x := p.x - 1, p.y := p.y + 1): guard: true -> p.x = 8 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or (p.x = 8 and (p.y = 2 or p.y = 3) or p.x = 4 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5))) or (p.x = 4 and (p.y = 2 or p.y = 3) or (p.x = 6 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or p.x = 6 and (p.y = 2 or p.y = 3))) or (p.x = 9 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or (p.x = 9 and (p.y = 2 or p.y = 3) or p.x = 5 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5))) or (p.x = 5 and (p.y = 2 or p.y = 3) or ((p.x = 3 or p.x = 7) and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or (p.x = 3 or p.x = 7) and (p.y = 2 or p.y = 3)))).
Edge (event: c) (guard: true) (assignments: p.y := p.y - 1): guard: true -> p.x != 0 and (p.x != 8 or not(p.y = 0 or p.y = 8)) and ((p.x != 8 or p.y != 10) and (p.x != 8 or p.y != 9)) and ((p.x != 4 or not(p.y = 0 or p.y = 8)) and (p.x != 4 or p.y != 10) and ((p.x != 4 or p.y != 9) and ((not(p.x = 2 or p.x = 6) or not(p.y = 0 or p.y = 8)) and (not(p.x = 2 or p.x = 6) or p.y != 10)))) and ((not(p.x = 2 or p.x = 6) or p.y != 9) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or not(p.y = 0 or p.y = 8))) and ((p.x != 5 or p.y != 10) and (p.x != 5 or p.y != 9) and ((not(p.x = 3 or p.x = 7) or not(p.y = 0 or p.y = 8)) and ((not(p.x = 3 or p.x = 7) or p.y != 10) and (not(p.x = 3 or p.x = 7) or p.y != 9))))).

Final synthesis result:
  State: (controlled-behavior: p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7))))))
    Edge: (event: a) (guard: true -> not(p.x = 0 or p.x = 8) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9)) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and (p.x != 10 and (not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.y != 9) and ((not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.y != 7) and p.x != 9)))) (assignments: p.x := p.x + 1)
    Edge: (event: b) (guard: true -> p.x = 8 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or (p.x = 8 and (p.y = 2 or p.y = 3) or p.x = 4 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5))) or (p.x = 4 and (p.y = 2 or p.y = 3) or (p.x = 6 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or p.x = 6 and (p.y = 2 or p.y = 3))) or (p.x = 9 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or (p.x = 9 and (p.y = 2 or p.y = 3) or p.x = 5 and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5))) or (p.x = 5 and (p.y = 2 or p.y = 3) or ((p.x = 3 or p.x = 7) and (p.y = 0 or p.y = 1 or (p.y = 4 or p.y = 5)) or (p.x = 3 or p.x = 7) and (p.y = 2 or p.y = 3))))) (assignments: p.x := p.x - 1, p.y := p.y + 1)
    Edge: (event: c) (guard: true -> p.x != 0 and (p.x != 8 or not(p.y = 0 or p.y = 8)) and ((p.x != 8 or p.y != 10) and (p.x != 8 or p.y != 9)) and ((p.x != 4 or not(p.y = 0 or p.y = 8)) and (p.x != 4 or p.y != 10) and ((p.x != 4 or p.y != 9) and ((not(p.x = 2 or p.x = 6) or not(p.y = 0 or p.y = 8)) and (not(p.x = 2 or p.x = 6) or p.y != 10)))) and ((not(p.x = 2 or p.x = 6) or p.y != 9) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or not(p.y = 0 or p.y = 8))) and ((p.x != 5 or p.y != 10) and (p.x != 5 or p.y != 9) and ((not(p.x = 3 or p.x = 7) or not(p.y = 0 or p.y = 8)) and ((not(p.x = 3 or p.x = 7) or p.y != 10) and (not(p.x = 3 or p.x = 7) or p.y != 9)))))) (assignments: p.y := p.y - 1)

Controlled system:                     exactly 49 states.

Initial (synthesis result):            p.x != 0 and (p.x != 8 or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((p.x != 8 or p.y != 9) and (p.x != 8 or p.y != 7)) and ((p.x != 4 or (0 <= p.y and p.y <= 7 or p.y = 9)) and (p.x != 4 or p.y != 9) and ((p.x != 4 or p.y != 7) and ((not(p.x = 2 or p.x = 6) or (0 <= p.y and p.y <= 7 or p.y = 9)) and (not(p.x = 2 or p.x = 6) or p.y != 9)))) and ((not(p.x = 2 or p.x = 6) or p.y != 7) and p.x != 10 and (not(p.x = 1 or p.x = 9) and (p.x != 5 or (0 <= p.y and p.y <= 7 or p.y = 9))) and ((p.x != 5 or p.y != 9) and (p.x != 5 or p.y != 7) and ((not(p.x = 3 or p.x = 7) or (0 <= p.y and p.y <= 7 or p.y = 9)) and ((not(p.x = 3 or p.x = 7) or p.y != 9) and (not(p.x = 3 or p.x = 7) or p.y != 7)))))
Initial (uncontrolled system):         p.x = 5 and p.y = 6
Initial (controlled system):           p.x = 5 and p.y = 6
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/multi_req_invs1.ctrlsys.real.cif".
