Reading CIF file "datasynth/marked_2vars.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..5]  p.x   0      3 * 2     6 * 2       8 * 2       75%
  2      discrete variable  int[0..5]  p.y   1      3 * 2     6 * 2       8 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      2      12        24          32          75%

Applying automatic variable ordering:
  Number of hyperedges: 0

  Skipping automatic ordering: no hyperedges.

Starting data-based synthesis.

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             true
Initial   (discrete variable 1):             true
Initial   (discrete variables):              true
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             true
Initial   (system, combined init/req inv):   true

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1
Marked    (auts/locs marker predicate):      p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1
Marked    (uncontrolled system):             p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1
Marked    (system, combined marked/req inv): p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "p.y" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1 [marker predicate]
Backward reachability: iteration 1.
Controlled behavior: true -> p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1.

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.x != 2 or p.y != 2) and (p.x != 1 or p.y != 1) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: true [initialization predicate]
Forward controlled-behavior: true -> p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1 [restricted to current/previous controlled-behavior predicate: p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1]
Forward reachability: iteration 1.
Forward controlled-behavior: p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1 [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1)

Controlled system:                     exactly 2 states.

Initial (synthesis result):            p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1
Initial (uncontrolled system):         true
Initial (controlled system):           p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1
Initial (removed by supervisor):       (p.x != 2 or p.y != 2) and (p.x != 1 or p.y != 1)
Initial (added by supervisor):         p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1

Simplification of controlled system under the assumption of the uncontrolled system:
  Initial: p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1 -> p.x = 2 and p.y = 2 or p.x = 1 and p.y = 1 [assume true].

Constructing output CIF specification.
Writing output CIF file "datasynth/marked_2vars.ctrlsys.real.cif".
