Reading CIF file "datasynth/var_order_hyper_edge_linearized.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        buffer1        0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  buffer1.count  1      2 * 2     4 * 2       4 * 2       100%
  3      location pointer   n/a        buffer3        2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..3]  buffer3.count  3      2 * 2     4 * 2       4 * 2       100%
  5      location pointer   n/a        buffer2        4      1 * 2     2 * 2       2 * 2       100%
  6      discrete variable  int[0..3]  buffer2.count  5      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  Total                                               6      18        36          36          100%

Applying automatic variable ordering:
  Number of hyper-edges: 12
  Number of graph edges: 3

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm.
    Maximum number of iterations: 20
    Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [before]
    Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [iteration 1]
    Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [after]

    Applying sliding window algorithm.
    Window length: 4
    Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [before]
    Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [after]

Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (component state req invariant):   buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)
Invariant (components state req invariant):  buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)

Initial   (discrete variable 1):             buffer1.count = 0
Initial   (discrete variable 3):             buffer3.count = 0
Initial   (discrete variable 5):             buffer2.count = 0
Initial   (discrete variables):              buffer1.count = 0 and (buffer3.count = 0 and buffer2.count = 0)
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         buffer1.add
Initial   (aut/locs init predicate):         buffer3.add
Initial   (aut/locs init predicate):         buffer2.add
Initial   (auts/locs init predicate):        buffer1.add and (buffer3.add and buffer2.add)
Initial   (uncontrolled system):             buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))
Initial   (system, combined init/plant inv): buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))
Initial   (system, combined init/state inv): buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove)
    Edge: (event: buffer1.u_switch_loc) (guard: buffer1.remove and (buffer1.add or buffer1.count != 0)) (assignments: buffer1 := buffer1.add)
    Edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove)
    Edge: (event: buffer3.u_switch_loc) (guard: buffer3.remove and (buffer3.add or buffer3.count != 0)) (assignments: buffer3 := buffer3.add)
    Edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.remove or buffer2.count != 3) and buffer2.add) (assignments: buffer2 := buffer2.remove)
    Edge: (event: buffer2.u_switch_loc) (guard: buffer2.remove and (buffer2.add or buffer2.count != 0)) (assignments: buffer2 := buffer2.add)
    Edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove) (assignments: buffer2.count := buffer2.count - 1)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate: true.

Restricting behavior using state requirements.
Controlled behavior: true -> buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) [state requirements: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)].

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) [restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Backward reachability: iteration 1.
Backward controlled-behavior: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: buffer1.count = 3 and (buffer3.count = 3 and buffer2.count = 3) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) -> buffer1.count = 0 and buffer3.add and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.count = 0 and buffer3.add and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) -> buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) or buffer1.remove and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) or buffer1.remove and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) -> buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and buffer2.count = 0)) or buffer1.remove and (buffer1.count = 0 and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and buffer2.count = 0)) or buffer1.remove and (buffer1.count = 0 and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0)) or buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.remove and (buffer3.count = 0 and buffer2.count = 0)) or (buffer1.remove and buffer1.count = 0 and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0)) or buffer1.remove and buffer1.count = 0 and (buffer3.remove and (buffer3.count = 0 and buffer2.count = 0))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.remove or buffer2.count != 3) and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0)) or buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.remove and (buffer3.count = 0 and buffer2.count = 0)) or (buffer1.remove and buffer1.count = 0 and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0)) or buffer1.remove and buffer1.count = 0 and (buffer3.remove and (buffer3.count = 0 and buffer2.count = 0))) -> buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0))) or (buffer1.remove and (buffer1.count = 0 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0)))) [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 2.
Forward controlled-behavior: buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0))) or (buffer1.remove and (buffer1.count = 0 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0)))) -> (buffer1.count = 0 or buffer1.count = 1) and buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.remove and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.count = 0 or buffer1.count = 1) and buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.remove and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0))) -> buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)))) or (buffer1.add and (buffer1.count = 1 and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 1 and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0))))) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)))) or (buffer1.add and (buffer1.count = 1 and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 1 and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and (buffer3.count = 0 and (buffer2.remove and buffer2.count = 0))))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)))) -> buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and (buffer3.count = 1 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and (buffer3.count = 1 and (buffer2.remove and buffer2.count = 0))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.remove and buffer2.count = 0)) or buffer1.add and (buffer1.count = 1 and buffer3.add) and (buffer3.count = 1 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))))) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and (buffer3.count = 1 and (buffer2.remove and buffer2.count = 0)) or buffer1.add and (buffer1.count = 1 and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 1 and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.remove and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and (buffer3.count = 1 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and (buffer3.count = 1 and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)))))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and (buffer3.count = 1 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.add) and (buffer3.count = 1 and (buffer2.remove and buffer2.count = 0))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.remove and buffer2.count = 0)) or buffer1.add and (buffer1.count = 1 and buffer3.add) and (buffer3.count = 1 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))))) or (buffer1.add and (buffer1.count = 1 and buffer3.add) and (buffer3.count = 1 and (buffer2.remove and buffer2.count = 0)) or buffer1.add and (buffer1.count = 1 and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 1 and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.remove and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and (buffer3.count = 1 and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.add) and (buffer3.count = 1 and (buffer2.remove and buffer2.count = 0)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.remove) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.remove and buffer2.count = 0)))))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.add and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and buffer1.count = 1 and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.add and buffer1.count = 1 and (buffer3.add and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and buffer1.count = 1 and (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.add and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 0 or buffer2.count = 1)))))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.remove or buffer2.count != 3) and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.add and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and buffer1.count = 1 and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 0 or buffer2.count = 1)))) or (buffer1.add and buffer1.count = 1 and (buffer3.add and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and buffer1.count = 1 and (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.add and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 0 or buffer2.count = 1)))))) -> <bdd 9n 27p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 9n 27p> -> (buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.remove or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove) or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove) or (buffer3.count != 1 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.remove or buffer3.count != 3)) and (buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 2 or buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.add or buffer3.count = 2) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.add or (buffer3.count = 0 or buffer3.count = 1))))) and ((buffer1.count != 1 or (buffer3.remove or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count != 1 or (buffer3.remove or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.count != 1 or buffer3.remove or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count != 1 or (buffer3.remove or buffer3.count != 1) or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.count != 1 or (buffer3.remove or buffer3.count != 3)) and (buffer1.count != 1 or (buffer3.add or buffer3.count = 2) or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and ((buffer1.count != 1 or (buffer3.add or buffer3.count = 2) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.count != 1 or buffer3.add or (buffer3.count = 0 or buffer3.count = 1)) and buffer1.count != 3)))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.remove or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove) or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove) or (buffer3.count != 1 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.remove or buffer3.count != 3)) and (buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 2 or buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.add or buffer3.count = 2) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.add or (buffer3.count = 0 or buffer3.count = 1))))) and ((buffer1.count != 1 or (buffer3.remove or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count != 1 or (buffer3.remove or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.count != 1 or buffer3.remove or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))) and (buffer1.count != 1 or (buffer3.remove or buffer3.count != 1) or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.count != 1 or (buffer3.remove or buffer3.count != 3)) and (buffer1.count != 1 or (buffer3.add or buffer3.count = 2) or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and ((buffer1.count != 1 or (buffer3.add or buffer3.count = 2) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.count != 1 or buffer3.add or (buffer3.count = 0 or buffer3.count = 1)) and buffer1.count != 3)))) -> <bdd 9n 27p> [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: <bdd 9n 27p> -> (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.remove or buffer3.count != 1 or (buffer2.remove or buffer2.count != 3)) and (buffer1.remove or buffer3.count != 1 or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.remove or buffer3.count != 3) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 1 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 3)) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.count != 1) or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.remove or buffer3.count != 1 or (buffer2.remove or buffer2.count != 3)) and (buffer1.remove or buffer3.count != 1 or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.remove or buffer3.count != 3) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 1 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 3)) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.remove or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.count = 1) or (buffer3.count = 3 or buffer2.add or (buffer2.count = 0 or buffer2.count = 1)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or (buffer2.remove or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.count != 1) or (buffer2.add or (buffer2.count = 0 or buffer2.count = 1))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) -> <bdd 9n 27p> [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: <bdd 9n 27p> -> (buffer1.remove or (buffer3.remove or buffer2.count != 3)) and ((buffer1.remove or buffer3.add or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.remove or buffer3.add or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.remove or (buffer3.add or buffer3.count != 3)) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.remove or buffer2.count != 3))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 3))) and (buffer1.add or buffer1.count != 1 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.add or buffer1.count != 1 or (buffer3.add or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.remove or buffer2.count != 3) and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.remove or (buffer3.remove or buffer2.count != 3)) and ((buffer1.remove or buffer3.add or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.remove or buffer3.add or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.remove or (buffer3.add or buffer3.count != 3)) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.remove or buffer2.count != 3))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 3))) and (buffer1.add or buffer1.count != 1 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.add or buffer1.count != 1 or (buffer3.add or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) -> <bdd 14n 50p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 14n 50p> [fixed point].
Controlled behavior: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) -> <bdd 14n 50p>.

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> <bdd 14n 50p> [restricted to current/previous controlled-behavior predicate: <bdd 14n 50p>]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 14n 50p> [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 14n 23p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1): guard: buffer1.add -> <bdd 13n 32p>.
Edge (event: buffer1.c_remove) (guard: buffer1.remove) (assignments: buffer1.count := buffer1.count - 1): guard: buffer1.remove -> buffer1.remove and (buffer1.add or buffer1.count != 0) and ((buffer1.add or buffer1.count != 2 or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 2 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 3))))) and ((buffer1.add or buffer1.count != 2 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.add or buffer3.count != 1 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or (buffer3.add or buffer3.count != 3)))))).
Edge (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1): guard: buffer3.add -> <bdd 14n 32p>.
Edge (event: buffer3.c_remove) (guard: buffer3.remove) (assignments: buffer3.count := buffer3.count - 1): guard: buffer3.remove -> (buffer1.remove or buffer3.remove) and ((buffer1.remove or (buffer3.add or buffer3.count != 0)) and (buffer1.remove or buffer3.add or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3)))) and ((buffer1.remove or (buffer3.add or buffer3.count = 0) or (buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove)) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 0))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.remove))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 0)) and (buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count != 3)))).
Edge (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1): guard: buffer2.add -> <bdd 15n 33p>.
Edge (event: buffer2.c_remove) (guard: buffer2.remove) (assignments: buffer2.count := buffer2.count - 1): guard: buffer2.remove -> (buffer1.remove or (buffer3.remove or buffer2.remove)) and (buffer1.remove or buffer3.remove or (buffer2.add or buffer2.count != 0)) and ((buffer1.remove or buffer3.add or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and ((buffer1.remove or (buffer3.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.add or buffer2.count != 0))) and (buffer1.remove or buffer3.add or (buffer3.count != 1 or buffer2.remove)))) and ((buffer1.remove or buffer3.add or (buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.remove or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.remove or buffer2.remove)))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.remove or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 0)))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or (buffer3.count != 1 or buffer2.remove))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.remove or buffer2.remove)) and (buffer1.add or buffer1.count != 1 or (buffer3.remove or (buffer2.add or buffer2.count != 0))))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 0))) and (buffer1.add or buffer1.count != 1 or (buffer3.add or (buffer3.count != 1 or buffer2.remove)))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3))))).

Final synthesis result:
  State: (controlled-behavior: <bdd 14n 50p>)
    Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove)
    Edge: (event: buffer1.u_switch_loc) (guard: buffer1.remove and (buffer1.add or buffer1.count != 0)) (assignments: buffer1 := buffer1.add)
    Edge: (event: buffer1.c_add) (guard: buffer1.add -> <bdd 13n 32p>) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.remove and (buffer1.add or buffer1.count != 0) and ((buffer1.add or buffer1.count != 2 or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 2 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 3))))) and ((buffer1.add or buffer1.count != 2 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.add or buffer3.count != 1 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or (buffer3.add or buffer3.count != 3))))))) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove)
    Edge: (event: buffer3.u_switch_loc) (guard: buffer3.remove and (buffer3.add or buffer3.count != 0)) (assignments: buffer3 := buffer3.add)
    Edge: (event: buffer3.c_add) (guard: buffer3.add -> <bdd 14n 32p>) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> (buffer1.remove or buffer3.remove) and ((buffer1.remove or (buffer3.add or buffer3.count != 0)) and (buffer1.remove or buffer3.add or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3)))) and ((buffer1.remove or (buffer3.add or buffer3.count = 0) or (buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove)) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 0))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.remove))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 0)) and (buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count != 3))))) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.remove or buffer2.count != 3) and buffer2.add) (assignments: buffer2 := buffer2.remove)
    Edge: (event: buffer2.u_switch_loc) (guard: buffer2.remove and (buffer2.add or buffer2.count != 0)) (assignments: buffer2 := buffer2.add)
    Edge: (event: buffer2.c_add) (guard: buffer2.add -> <bdd 15n 33p>) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> (buffer1.remove or (buffer3.remove or buffer2.remove)) and (buffer1.remove or buffer3.remove or (buffer2.add or buffer2.count != 0)) and ((buffer1.remove or buffer3.add or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and ((buffer1.remove or (buffer3.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.add or buffer2.count != 0))) and (buffer1.remove or buffer3.add or (buffer3.count != 1 or buffer2.remove)))) and ((buffer1.remove or buffer3.add or (buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.remove or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.remove or buffer2.remove)))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.remove or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 0)))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or (buffer3.count != 1 or buffer2.remove))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.remove or buffer2.remove)) and (buffer1.add or buffer1.count != 1 or (buffer3.remove or (buffer2.add or buffer2.count != 0))))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 0))) and (buffer1.add or buffer1.count != 1 or (buffer3.add or (buffer3.count != 1 or buffer2.remove)))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))))) (assignments: buffer2.count := buffer2.count - 1)

Controlled system:                     exactly 342 states.

Initial (synthesis result):            <bdd 14n 50p>
Initial (uncontrolled system):         buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))
Initial (controlled system):           buffer1.add and (buffer1.count = 0 and buffer3.add) and (buffer3.count = 0 and (buffer2.add and buffer2.count = 0))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event buffer1.c_add: guard: <bdd 13n 32p> -> <bdd 12n 32p> [assume buffer1.add].
  Event buffer1.c_remove: guard: buffer1.remove and (buffer1.add or buffer1.count != 0) and ((buffer1.add or buffer1.count != 2 or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 2 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 3))))) and ((buffer1.add or buffer1.count != 2 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.add or buffer3.count != 1 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or (buffer3.add or buffer3.count != 3)))))) -> buffer1.count != 0 and (buffer1.count != 2 or buffer3.remove or (buffer2.add or buffer2.count != 3)) and ((buffer1.count != 2 or (buffer3.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and (buffer1.count != 2 or buffer3.add or (buffer3.count != 1 or (buffer2.add or buffer2.count != 3)))) and ((buffer1.count != 2 or (buffer3.add or buffer3.count != 3)) and (buffer1.count = 0 or buffer1.count = 2 or (buffer3.remove or (buffer2.add or buffer2.count != 3))) and ((buffer1.count = 0 or (buffer1.count = 2 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 3))) and ((buffer1.count = 0 or (buffer1.count = 2 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 3))) and (buffer1.count = 0 or buffer1.count = 2 or (buffer3.add or buffer3.count != 3))))) [assume buffer1.remove].
  Event buffer3.c_add: guard: <bdd 14n 32p> -> <bdd 12n 32p> [assume buffer3.add].
  Event buffer3.c_remove: guard: (buffer1.remove or buffer3.remove) and ((buffer1.remove or (buffer3.add or buffer3.count != 0)) and (buffer1.remove or buffer3.add or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3)))) and ((buffer1.remove or (buffer3.add or buffer3.count = 0) or (buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.remove)) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 0))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.remove))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 0)) and (buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count != 3)))) -> (buffer1.remove or buffer3.count != 0) and (buffer1.remove or buffer3.count != 2 or (buffer2.add or buffer2.count != 3)) and ((buffer1.remove or buffer3.count = 0 or (buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 0)) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or (buffer1.count != 1 or buffer3.count != 0)) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 2 or (buffer2.add or buffer2.count != 3))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 0) or (buffer3.count = 2 or (buffer2.add or buffer2.count != 3))) and (buffer1.add or buffer1.count != 3)))) [assume buffer3.remove].
  Event buffer2.c_add: guard: <bdd 15n 33p> -> <bdd 13n 33p> [assume buffer2.add].
  Event buffer2.c_remove: guard: (buffer1.remove or (buffer3.remove or buffer2.remove)) and (buffer1.remove or buffer3.remove or (buffer2.add or buffer2.count != 0)) and ((buffer1.remove or buffer3.add or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and ((buffer1.remove or (buffer3.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.add or buffer2.count != 0))) and (buffer1.remove or buffer3.add or (buffer3.count != 1 or buffer2.remove)))) and ((buffer1.remove or buffer3.add or (buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.remove or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.remove or buffer2.remove)))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.remove or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 0)))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or (buffer3.count != 1 or buffer2.remove))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.remove or buffer2.remove)) and (buffer1.add or buffer1.count != 1 or (buffer3.remove or (buffer2.add or buffer2.count != 0))))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.add or buffer2.count != 0))) and (buffer1.add or buffer1.count != 1 or (buffer3.add or (buffer3.count != 1 or buffer2.remove)))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count != 1 or (buffer2.add or buffer2.count != 0))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3))))) -> (buffer1.remove or (buffer3.remove or buffer2.count != 0)) and ((buffer1.remove or buffer3.add or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 0))) and (buffer1.remove or buffer3.add or (buffer3.count != 1 or buffer2.count != 0))) and ((buffer1.remove or (buffer3.add or buffer3.count != 3)) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.remove or buffer2.count != 0))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 0))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.add or (buffer3.count != 1 or buffer2.count != 0))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.add or buffer3.count != 3))) and (buffer1.add or buffer1.count != 1 or (buffer3.remove or buffer2.count != 0))) and ((buffer1.add or (buffer1.count != 1 or buffer3.add) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 0))) and (buffer1.add or buffer1.count != 1 or (buffer3.add or (buffer3.count != 1 or buffer2.count != 0))) and ((buffer1.add or buffer1.count != 1 or (buffer3.add or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) [assume buffer2.remove].

Constructing output CIF specification.
Writing output CIF file "datasynth/var_order_hyper_edge_linearized.ctrlsys.real.cif".
