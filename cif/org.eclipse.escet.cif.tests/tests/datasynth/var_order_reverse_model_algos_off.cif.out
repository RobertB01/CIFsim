Reading CIF file "datasynth/var_order_reverse_model_algos_off.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        buffer1        0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..3]  buffer1.count  1      2 * 2     4 * 2       4 * 2       100%
        3      location pointer   n/a        buffer3        2      1 * 2     2 * 2       2 * 2       100%
        4      discrete variable  int[0..3]  buffer3.count  3      2 * 2     4 * 2       4 * 2       100%
        5      location pointer   n/a        buffer2        4      1 * 2     2 * 2       2 * 2       100%
        6      discrete variable  int[0..3]  buffer2.count  5      2 * 2     4 * 2       4 * 2       100%
        -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
        Total                                               6      18        36          36          100%

    Applying variable ordering:
        Applying 2 orderers, sequentially:
            Applying model variable order:
                Effect: var-order

            Reversing the variable order:
                Relations: legacy
                Effect: both
                Number of hyper-edges: 22

                Total span:   13 (total)   0.59 (avg/edge) / WES:   0.290404 (total)   0.013200 (avg/edge) [before]
                Total span:   13 (total)   0.59 (avg/edge) / WES:   0.290404 (total)   0.013200 (avg/edge) [reversed]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..3]  buffer2.count  0      2 * 2     4 * 2       4 * 2       100%
        2      location pointer   n/a        buffer2        1      1 * 2     2 * 2       2 * 2       100%
        3      discrete variable  int[0..3]  buffer3.count  2      2 * 2     4 * 2       4 * 2       100%
        4      location pointer   n/a        buffer3        3      1 * 2     2 * 2       2 * 2       100%
        5      discrete variable  int[0..3]  buffer1.count  4      2 * 2     4 * 2       4 * 2       100%
        6      location pointer   n/a        buffer1        5      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
        Total                                               6      18        36          36          100%

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (component state req invariant):   buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)
    Invariant (components state req invariant):  buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)

    Initial   (discrete variable 0):             buffer2.count = 0
    Initial   (discrete variable 2):             buffer3.count = 0
    Initial   (discrete variable 4):             buffer1.count = 0
    Initial   (discrete variables):              buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0)
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         buffer1.add
    Initial   (aut/locs init predicate):         buffer3.add
    Initial   (aut/locs init predicate):         buffer2.add
    Initial   (auts/locs init predicate):        buffer2.add and (buffer3.add and buffer1.add)
    Initial   (uncontrolled system):             buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add))
    Initial   (system, combined init/plant inv): buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add))
    Initial   (system, combined init/state inv): buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add))

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove)
            Edge: (event: buffer1.u_switch_loc) (guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1 := buffer1.add)
            Edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1)
            Edge: (event: buffer1.c_remove) (guard: buffer1.remove) (assignments: buffer1.count := buffer1.count - 1)
            Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove)
            Edge: (event: buffer3.u_switch_loc) (guard: buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3 := buffer3.add)
            Edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1)
            Edge: (event: buffer3.c_remove) (guard: buffer3.remove) (assignments: buffer3.count := buffer3.count - 1)
            Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
            Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
            Edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1)
            Edge: (event: buffer2.c_remove) (guard: buffer2.remove) (assignments: buffer2.count := buffer2.count - 1)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    Edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2.count := buffer2.count - 1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove)
            Edge: (event: buffer1.u_switch_loc) (guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1 := buffer1.add)
            Edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1)
            Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1.count := buffer1.count - 1)
            Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove)
            Edge: (event: buffer3.u_switch_loc) (guard: buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3 := buffer3.add)
            Edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3.count := buffer3.count + 1)
            Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3.count := buffer3.count - 1)
            Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
            Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
            Edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1)
            Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2.count := buffer2.count - 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add)).

Restricting behavior using state requirements:
    Controlled behavior: true -> buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3) [state requirements: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)].

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior not changed.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3) [restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3) [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: buffer2.count = 3 and (buffer3.count = 3 and buffer1.count = 3) [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add)) [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add)) -> buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer3.add and buffer1.count = 0)) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer3.add and buffer1.count = 0)) -> buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer3.add and buffer1.count = 0)) or buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 1 and buffer1.add)) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer3.add and buffer1.count = 0)) or buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 1 and buffer1.add)) -> buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 1 and buffer1.add)) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 1 and buffer1.add)) -> buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 0 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 0)) or buffer2.count = 0 and (buffer2.add and buffer3.count = 1) and (buffer3.add and (buffer1.count = 1 and buffer1.add))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 0 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 0)) or buffer2.count = 0 and (buffer2.add and buffer3.count = 1) and (buffer3.add and (buffer1.count = 1 and buffer1.add))) -> buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 0 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 0 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) -> buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 0 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 0)) or buffer2.count = 1 and (buffer2.add and buffer3.count = 1) and (buffer3.add and (buffer1.count = 1 and buffer1.add)))) [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]

        Forward reachability iteration 2:
            Forward controlled-behavior: buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 0 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 0) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 0)) or buffer2.count = 1 and (buffer2.add and buffer3.count = 1) and (buffer3.add and (buffer1.count = 1 and buffer1.add)))) -> buffer2.count = 0 and (buffer3.count = 0 and (buffer1.count = 0 or buffer1.count = 1)) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 0 or buffer1.count = 1)) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 0 or buffer1.count = 1)) or buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and (buffer1.count = 0 or buffer1.count = 1)))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and (buffer3.count = 0 and (buffer1.count = 0 or buffer1.count = 1)) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 0 or buffer1.count = 1)) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 0 or buffer1.count = 1)) or buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and (buffer1.count = 0 or buffer1.count = 1)))) -> buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0) or (buffer2.count = 0 and buffer3.count = 0 and (buffer1.count = 2 and buffer1.add) or buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 1)) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 0) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 1))) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and buffer1.count = 1)) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 0)) or (buffer2.count = 1 and (buffer2.add and buffer3.count = 1) and (buffer3.add and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 1))))) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 0) or (buffer2.count = 0 and buffer3.count = 0 and (buffer1.count = 2 and buffer1.add) or buffer2.count = 0 and (buffer3.count = 0 and buffer1.count = 1)) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 0) or (buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 0 and buffer3.count = 1 and (buffer3.add and buffer1.count = 1))) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and buffer1.count = 0) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 1 and buffer2.add and (buffer3.count = 0 and buffer1.count = 1)) or (buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 0)) or (buffer2.count = 1 and (buffer2.add and buffer3.count = 1) and (buffer3.add and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 1 and buffer2.add and (buffer3.count = 1 and (buffer3.add and buffer1.count = 1))))) -> buffer2.count = 0 and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 0) or (buffer2.count = 0 and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and buffer1.add) or buffer2.count = 0 and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1)) or (buffer2.count = 1 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 0) or (buffer2.count = 1 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 1 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: buffer2.count = 0 and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 0) or (buffer2.count = 0 and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and buffer1.add) or buffer2.count = 0 and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1)) or (buffer2.count = 1 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 0) or (buffer2.count = 1 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and buffer1.add)) or buffer2.count = 1 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1))) -> (buffer2.count != 0 or buffer3.count != 0 or (buffer1.count != 2 or buffer1.add)) and (buffer2.count != 0 or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count != 0 or buffer3.count != 2 or (buffer3.remove or (buffer1.count != 2 or buffer1.add))) and (buffer2.count != 0 or buffer3.count != 2 or (buffer3.remove or buffer1.count != 3))) and ((buffer2.count != 0 or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 0 or buffer3.count != 1 or (buffer1.count != 2 or buffer1.add)) and ((buffer2.count != 0 or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count != 0 or buffer3.count != 3) and buffer2.count != 2))) and ((buffer2.count != 1 or buffer2.remove or (buffer3.count != 0 or (buffer1.count != 2 or buffer1.add))) and (buffer2.count != 1 or buffer2.remove or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count != 1 or (buffer2.remove or buffer3.count != 2) or (buffer3.remove or (buffer1.count != 2 or buffer1.add))) and ((buffer2.count != 1 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3))) and (buffer2.count != 1 or buffer2.remove or (buffer3.count != 2 or buffer3.add)))) and ((buffer2.count != 1 or buffer2.remove or (buffer3.count != 1 or (buffer1.count != 2 or buffer1.add))) and (buffer2.count != 1 or buffer2.remove or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count != 1 or (buffer2.remove or buffer3.count != 3)) and ((buffer2.count != 1 or buffer2.add) and buffer2.count != 3)))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: (buffer2.count != 0 or buffer3.count != 0 or (buffer1.count != 2 or buffer1.add)) and (buffer2.count != 0 or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count != 0 or buffer3.count != 2 or (buffer3.remove or (buffer1.count != 2 or buffer1.add))) and (buffer2.count != 0 or buffer3.count != 2 or (buffer3.remove or buffer1.count != 3))) and ((buffer2.count != 0 or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 0 or buffer3.count != 1 or (buffer1.count != 2 or buffer1.add)) and ((buffer2.count != 0 or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count != 0 or buffer3.count != 3) and buffer2.count != 2))) and ((buffer2.count != 1 or buffer2.remove or (buffer3.count != 0 or (buffer1.count != 2 or buffer1.add))) and (buffer2.count != 1 or buffer2.remove or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count != 1 or (buffer2.remove or buffer3.count != 2) or (buffer3.remove or (buffer1.count != 2 or buffer1.add))) and ((buffer2.count != 1 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3))) and (buffer2.count != 1 or buffer2.remove or (buffer3.count != 2 or buffer3.add)))) and ((buffer2.count != 1 or buffer2.remove or (buffer3.count != 1 or (buffer1.count != 2 or buffer1.add))) and (buffer2.count != 1 or buffer2.remove or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count != 1 or (buffer2.remove or buffer3.count != 3)) and ((buffer2.count != 1 or buffer2.add) and buffer2.count != 3)))) -> (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 0 or (buffer1.count != 2 or buffer1.add))) and (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count = 2 or (buffer2.count = 3 or buffer3.count != 2) or (buffer3.remove or (buffer1.count != 2 or buffer1.add))) and (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)))) and ((buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 2 or buffer3.add)) and (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 1 or (buffer1.count != 2 or buffer1.add))) and ((buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count = 2 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count = 0 or buffer2.count = 1)))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 0 or (buffer1.count != 2 or buffer1.add))) and (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count = 2 or (buffer2.count = 3 or buffer3.count != 2) or (buffer3.remove or (buffer1.count != 2 or buffer1.add))) and (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)))) and ((buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 2 or buffer3.add)) and (buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 1 or (buffer1.count != 2 or buffer1.add))) and ((buffer2.count = 2 or buffer2.count = 3 or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count = 2 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count = 0 or buffer2.count = 1)))) -> <bdd 12n 27p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]

        Forward reachability iteration 3:
            Forward controlled-behavior: <bdd 12n 27p> -> (buffer2.count != 0 or (buffer3.count != 0 or buffer1.count != 3)) and (buffer2.count != 0 or buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)) and ((buffer2.count != 0 or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 0 or (buffer3.count != 1 or buffer1.count != 3))) and ((buffer2.count != 0 or buffer3.count != 3) and (buffer2.count != 2 or buffer2.remove or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count != 2 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3))) and (buffer2.count != 2 or buffer2.remove or (buffer3.count != 2 or buffer3.add)))) and ((buffer2.count != 2 or buffer2.remove or (buffer3.count != 1 or buffer1.count != 3)) and (buffer2.count != 2 or (buffer2.remove or buffer3.count != 3)) and ((buffer2.count != 2 or buffer2.add) and (buffer2.count != 1 or (buffer3.count != 0 or buffer1.count != 3))) and ((buffer2.count != 1 or buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)) and (buffer2.count != 1 or (buffer3.count != 2 or buffer3.add)) and ((buffer2.count != 1 or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count != 1 or buffer3.count != 3) and buffer2.count != 3)))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: (buffer2.count != 0 or (buffer3.count != 0 or buffer1.count != 3)) and (buffer2.count != 0 or buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)) and ((buffer2.count != 0 or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 0 or (buffer3.count != 1 or buffer1.count != 3))) and ((buffer2.count != 0 or buffer3.count != 3) and (buffer2.count != 2 or buffer2.remove or (buffer3.count != 0 or buffer1.count != 3)) and ((buffer2.count != 2 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3))) and (buffer2.count != 2 or buffer2.remove or (buffer3.count != 2 or buffer3.add)))) and ((buffer2.count != 2 or buffer2.remove or (buffer3.count != 1 or buffer1.count != 3)) and (buffer2.count != 2 or (buffer2.remove or buffer3.count != 3)) and ((buffer2.count != 2 or buffer2.add) and (buffer2.count != 1 or (buffer3.count != 0 or buffer1.count != 3))) and ((buffer2.count != 1 or buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)) and (buffer2.count != 1 or (buffer3.count != 2 or buffer3.add)) and ((buffer2.count != 1 or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer2.count != 1 or buffer3.count != 3) and buffer2.count != 3)))) -> <bdd 11n 27p> [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: <bdd 11n 27p> -> (buffer2.count != 0 or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 0 or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 0 or buffer3.count != 3) and ((buffer2.count != 2 or (buffer2.remove or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 2 or buffer2.remove or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 2 or (buffer2.remove or buffer3.count != 3)) and ((buffer2.count != 2 or buffer2.add) and (buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 1 or buffer3.count != 3) and buffer2.count != 3))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: (buffer2.count != 0 or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 0 or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 0 or buffer3.count != 3) and ((buffer2.count != 2 or (buffer2.remove or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 2 or buffer2.remove or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 2 or (buffer2.remove or buffer3.count != 3)) and ((buffer2.count != 2 or buffer2.add) and (buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 1 or buffer3.count != 3) and buffer2.count != 3))) -> <bdd 10n 27p> [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: <bdd 10n 27p> -> (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 3 or buffer3.add))) and ((buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 1 or buffer3.count != 3 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or (buffer3.count != 3 or buffer3.add)) and buffer2.count != 3))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]
            Forward controlled-behavior: (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 3 or buffer3.add))) and ((buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 1 or buffer3.count != 3 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or (buffer3.count != 3 or buffer3.add)) and buffer2.count != 3))) -> <bdd 14n 26p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3)]

        Forward reachability iteration 4:
            No change this iteration.

        Forward controlled-behavior: <bdd 14n 26p> [fixed point].

        Controlled behavior: buffer2.count != 3 or (buffer3.count != 3 or buffer1.count != 3) -> <bdd 14n 26p>.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> <bdd 14n 26p> [restricted to current/previous controlled-behavior predicate: <bdd 14n 26p>]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: <bdd 14n 26p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 3 and buffer1.remove) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 3 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 3 and buffer1.remove))) or ((buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 3 and buffer3.remove) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 3 and buffer1.remove) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 3 and buffer1.remove))) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 3 and buffer1.remove)) or (buffer2.count = 1 and (buffer3.count = 3 and buffer3.remove) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 3 and buffer1.remove))) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 3 and buffer1.remove)) or buffer2.count = 3 and buffer2.add and (buffer3.count = 3 and (buffer3.add and buffer1.count = 3)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 3 and buffer3.remove) or buffer2.count = 3 and buffer2.remove))) [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1): guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add -> (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer1.add)))))).
    Edge (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1.count := buffer1.count - 1): guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove -> (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)))))).
    Edge (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3.count := buffer3.count + 1): guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add -> (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count != 1 or (buffer3.count = 1 or buffer3.count = 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or buffer3.add)) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or (buffer3.count != 1 or buffer3.add))))) and ((buffer2.count != 1 or buffer3.count != 3) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 0) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 0 or buffer3.add)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 1 or buffer3.add)) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 3)) and (buffer2.count != 3 or buffer2.add))))).
    Edge (event: buffer3.c_remove) (guard: buffer3.remove -> buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3.count := buffer3.count - 1): guard: buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove -> (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 0)) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 2 or buffer3.remove)) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 0) and ((buffer2.count != 1 or (buffer3.count != 2 or buffer3.remove)) and (buffer2.count != 1 or buffer3.count != 2 or (buffer3.add or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 1 or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)) and (buffer2.count != 1 or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 0)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.remove or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.add)))).
    Edge (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1): guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add -> <bdd 16n 26p>.
    Edge (event: buffer2.c_remove) (guard: buffer2.remove -> buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2.count := buffer2.count - 1): guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove -> buffer2.count != 0 and (buffer2.count != 2 or buffer2.remove) and ((buffer2.count != 2 or (buffer2.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 2 or (buffer2.add or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 3 or buffer3.add)) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.remove)) and (buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 0 or buffer2.count = 2 or (buffer2.add or (buffer3.count != 3 or buffer3.add)))))).

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: <bdd 14n 26p>)
        Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove)
        Edge: (event: buffer1.u_switch_loc) (guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1 := buffer1.add)
        Edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer1.add))))))) (assignments: buffer1.count := buffer1.count + 1)
        Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove))))))) (assignments: buffer1.count := buffer1.count - 1)
        Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove)
        Edge: (event: buffer3.u_switch_loc) (guard: buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3 := buffer3.add)
        Edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count != 1 or (buffer3.count = 1 or buffer3.count = 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or buffer3.add)) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or (buffer3.count != 1 or buffer3.add))))) and ((buffer2.count != 1 or buffer3.count != 3) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 0) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 0 or buffer3.add)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 1 or buffer3.add)) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 3)) and (buffer2.count != 3 or buffer2.add)))))) (assignments: buffer3.count := buffer3.count + 1)
        Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 0)) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 2 or buffer3.remove)) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 0) and ((buffer2.count != 1 or (buffer3.count != 2 or buffer3.remove)) and (buffer2.count != 1 or buffer3.count != 2 or (buffer3.add or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 1 or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)) and (buffer2.count != 1 or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 0)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.remove or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.add))))) (assignments: buffer3.count := buffer3.count - 1)
        Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
        Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
        Edge: (event: buffer2.c_add) (guard: buffer2.add -> <bdd 16n 26p>) (assignments: buffer2.count := buffer2.count + 1)
        Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> buffer2.count != 0 and (buffer2.count != 2 or buffer2.remove) and ((buffer2.count != 2 or (buffer2.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 2 or (buffer2.add or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 3 or buffer3.add)) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.remove)) and (buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 0 or buffer2.count = 2 or (buffer2.add or (buffer3.count != 3 or buffer3.add))))))) (assignments: buffer2.count := buffer2.count - 1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 342 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            <bdd 14n 26p>
    Initial (uncontrolled system):         buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add))
    Initial (controlled system):           buffer2.count = 0 and (buffer2.add and buffer3.count = 0) and (buffer3.add and (buffer1.count = 0 and buffer1.add))
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event buffer1.c_add: guard: (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer1.add)))))).
    Event buffer1.c_remove: guard: (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)))))).
    Event buffer3.c_add: guard: (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count != 1 or (buffer3.count = 1 or buffer3.count = 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or buffer3.add)) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or (buffer3.count != 1 or buffer3.add))))) and ((buffer2.count != 1 or buffer3.count != 3) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 0) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 0 or buffer3.add)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 1 or buffer3.add)) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 3)) and (buffer2.count != 3 or buffer2.add))))).
    Event buffer3.c_remove: guard: (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 0)) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 2 or buffer3.remove)) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 0) and ((buffer2.count != 1 or (buffer3.count != 2 or buffer3.remove)) and (buffer2.count != 1 or buffer3.count != 2 or (buffer3.add or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 1 or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)) and (buffer2.count != 1 or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 0)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.remove or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.add)))).
    Event buffer2.c_add: guard: <bdd 16n 26p>.
    Event buffer2.c_remove: guard: buffer2.count != 0 and (buffer2.count != 2 or buffer2.remove) and ((buffer2.count != 2 or (buffer2.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 2 or (buffer2.add or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 3 or buffer3.add)) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.remove)) and (buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 0 or buffer2.count = 2 or (buffer2.add or (buffer3.count != 3 or buffer3.add)))))).

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants, requirement automata, state/event exclusion plant invariants, state/event exclusion requirement invariants, state plant invariants, state requirement invariants, and controlled behavior.

    Event buffer1.c_add: guard: (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 1 and buffer1.add) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.add))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 1 and buffer1.add)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer1.add)))))) -> (buffer2.count = 1 or (buffer2.count = 3 or buffer1.count != 3)) and (buffer2.count != 1 or buffer1.count != 3) and ((buffer2.count != 3 or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3)) and ((buffer2.count != 3 or (buffer3.count != 1 or buffer1.count != 3)) and (buffer2.count != 3 or buffer3.count != 3 or (buffer1.count = 0 or buffer1.count = 1)))) [assume (buffer2.count = 0 or buffer2.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.add) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 1 and buffer1.add) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and buffer1.add) or (buffer2.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.add) or buffer2.count = 1 and (buffer3.count = 1 and buffer1.add))) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and buffer1.add) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.add) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and buffer1.add) or (buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.add)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and (buffer1.count = 1 and buffer1.add)))))].
    Event buffer1.c_remove: guard: (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)))) or (buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and buffer1.remove))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 2 and buffer1.remove)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)) or (buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and (buffer1.count = 2 and buffer1.remove)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 1 or buffer1.count = 3) and buffer1.remove)))))) -> buffer1.count != 0 [assume (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.remove) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 1 and (buffer1.count = 1 and buffer1.remove)) or ((buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove)) or (buffer2.count = 0 or buffer2.count = 2) and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.remove)) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove) or (buffer2.count = 1 and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.remove) or buffer2.count = 1 and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove)))) or (buffer2.count = 1 and buffer3.count = 1 and (buffer1.count = 1 and buffer1.remove) or buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove)) or (buffer2.count = 1 and buffer3.count = 3 and (buffer3.add and (buffer1.count = 1 and buffer1.remove)) or buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove))) or (buffer2.count = 3 and buffer2.add and ((buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer1.remove)) or buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove)) or (buffer2.count = 3 and buffer2.add and (buffer3.count = 1 and (buffer1.count = 1 and buffer1.remove)) or (buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer1.remove)) or buffer2.count = 3 and (buffer2.add and buffer3.count = 3) and (buffer3.add and (buffer1.count = 1 and buffer1.remove))))))].
    Event buffer3.c_add: guard: (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or buffer3.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count != 1 or (buffer3.count = 1 or buffer3.count = 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or buffer3.add)) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or (buffer3.count != 1 or buffer3.add))))) and ((buffer2.count != 1 or buffer3.count != 3) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 0) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 0 or buffer3.add)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or (buffer3.remove or buffer1.count != 3)))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.add)) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 1 or buffer3.add)) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 3)) and (buffer2.count != 3 or buffer2.add))))) -> (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count != 1 or buffer3.count != 3) and ((buffer2.count != 3 or (buffer3.count != 2 or buffer1.count != 3)) and (buffer2.count != 3 or buffer3.count != 3)) [assume (buffer2.count = 1 or buffer2.count = 3 or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or (buffer2.count = 3 or buffer3.add)) and ((buffer2.count != 1 or buffer3.remove or (buffer1.count != 3 or buffer1.add)) and ((buffer2.count != 1 or buffer3.add) and (buffer2.count != 3 or (buffer2.remove or buffer3.count = 1) or (buffer3.count = 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.add))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 1) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 1 or buffer3.add))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 3 or (buffer3.remove or buffer1.count != 3))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 3 or buffer3.add)) and (buffer2.count != 3 or buffer2.add))))].
    Event buffer3.c_remove: guard: (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 0)) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 2 or buffer3.remove)) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 0) and ((buffer2.count != 1 or (buffer3.count != 2 or buffer3.remove)) and (buffer2.count != 1 or buffer3.count != 2 or (buffer3.add or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 1 or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove)) and (buffer2.count != 1 or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 0)) and (buffer2.count != 3 or buffer2.remove or (buffer3.count != 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 2) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.remove or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 3 or buffer2.add)))) -> buffer3.count != 0 [assume (buffer2.count = 1 or buffer2.count = 3 or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.remove))) and (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count = 1) or (buffer3.count = 3 or buffer3.add or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 1 or buffer2.count = 3 or (buffer3.count != 1 or buffer3.remove)) and (buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 1) or (buffer3.add or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer3.count != 3)) and (buffer2.count != 1 or buffer3.count = 1 or (buffer3.count = 3 or buffer3.remove)) and ((buffer2.count != 1 or (buffer3.count = 1 or buffer3.count = 3) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or (buffer3.count != 1 or buffer3.remove)))) and ((buffer2.count != 1 or buffer3.count != 1 or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer3.count != 3) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count = 1 or (buffer3.count = 3 or buffer3.remove))) and (buffer2.count != 3 or (buffer2.remove or buffer3.count = 1) or (buffer3.count = 3 or buffer3.add or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count != 3 or buffer2.remove or (buffer3.count != 1 or buffer3.remove)) and (buffer2.count != 3 or (buffer2.remove or buffer3.count != 1) or (buffer3.add or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 3 or (buffer2.remove or buffer3.count != 3)) and (buffer2.count != 3 or buffer2.add))))].
    Event buffer2.c_add: guard: <bdd 16n 26p> -> (buffer2.count != 2 or (buffer3.count != 3 or buffer1.count != 3)) and buffer2.count != 3 [assume <bdd 15n 26p>].
    Event buffer2.c_remove: guard: buffer2.count != 0 and (buffer2.count != 2 or buffer2.remove) and ((buffer2.count != 2 or (buffer2.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 2 or (buffer2.add or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))))) and ((buffer2.count != 2 or buffer2.add or (buffer3.count != 3 or buffer3.add)) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.remove)) and (buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 0 or (buffer2.count = 2 or buffer2.add) or (buffer3.count != 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 0 or buffer2.count = 2 or (buffer2.add or (buffer3.count != 3 or buffer3.add)))))) -> buffer2.count != 0 [assume (buffer2.count = 1 or (buffer2.count = 3 or buffer2.remove)) and (buffer2.count = 1 or (buffer2.count = 3 or buffer2.add) or (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer2.add) or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count = 1 or (buffer2.count = 3 or buffer2.add) or (buffer3.count != 3 or buffer3.remove or (buffer1.count != 3 or buffer1.add))) and (buffer2.count = 1 or buffer2.count = 3 or (buffer2.add or (buffer3.count != 3 or buffer3.add))))) and ((buffer2.count != 1 or buffer2.remove) and ((buffer2.count != 1 or (buffer2.add or buffer3.count = 1) or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer2.count != 1 or buffer2.add or (buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)))) and ((buffer2.count != 1 or (buffer2.add or buffer3.count != 3) or (buffer3.remove or (buffer1.count != 3 or buffer1.add))) and ((buffer2.count != 1 or buffer2.add or (buffer3.count != 3 or buffer3.add)) and buffer2.count != 3)))].

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/var_order_reverse_model_algos_off.ctrlsys.real.cif".
