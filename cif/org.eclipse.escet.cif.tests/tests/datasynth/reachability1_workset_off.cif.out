Reading CIF file "datasynth/reachability1_workset_off.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..14]  p.v   0      4 * 2     15 * 2      16 * 2      ~94%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       1      8         30          32          ~94%

    Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p.v = 0
    Initial   (discrete variables):              p.v = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             p.v = 0
    Initial   (system, combined init/plant inv): p.v = 0
    Initial   (system, combined init/state inv): p.v = 0

    Marked    (component marker predicate):      p.v = 14
    Marked    (components marker predicate):     p.v = 14
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             p.v = 14
    Marked    (system, combined mark/plant inv): p.v = 14
    Marked    (system, combined mark/state inv): p.v = 14

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: p.m) (guard: p.v = 13) (assignments: p.v := 14)
            Edge: (event: p.d) (guard: p.v = 4 or p.v = 3) (assignments: p.v := 4 / p.v := 5)
            Edge: (event: p.f) (guard: p.v = 6 or p.v = 7) (assignments: p.v := 8 / p.v := 7)
            Edge: (event: p.e) (guard: p.v = 5) (assignments: p.v := 6)
            Edge: (event: p.a) (guard: p.v = 0) (assignments: p.v := 1)
            Edge: (event: p.g) (guard: p.v = 8) (assignments: p.v := 9)
            Edge: (event: p.c) (guard: p.v = 2) (assignments: p.v := 3)
            Edge: (event: p.b) (guard: p.v = 1) (assignments: p.v := 2)
            Edge: (event: p.k) (guard: p.v = 12) (assignments: p.v := 13)
            Edge: (event: p.h) (guard: p.v = 9) (assignments: p.v := 10)
            Edge: (event: p.i) (guard: p.v = 10) (assignments: p.v := 11)
            Edge: (event: p.j) (guard: p.v = 11) (assignments: p.v := 12)
            Edge: (event: p.l) (guard: p.v = 12) (assignments: p.v := 13)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.v = 0.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.v" of type "int[0..14]" (group: 0, domain: 0+1, BDD variables: 4, CIF/BDD values: 15/16)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.v = 14 [marker predicate]

        Backward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.v = 0 [initialization predicate]

        Forward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    No guards changed.

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: true)
        Edge: (event: p.m) (guard: p.v = 13) (assignments: p.v := 14)
        Edge: (event: p.d) (guard: p.v = 4 or p.v = 3) (assignments: p.v := 4 / p.v := 5)
        Edge: (event: p.f) (guard: p.v = 6 or p.v = 7) (assignments: p.v := 8 / p.v := 7)
        Edge: (event: p.e) (guard: p.v = 5) (assignments: p.v := 6)
        Edge: (event: p.a) (guard: p.v = 0) (assignments: p.v := 1)
        Edge: (event: p.g) (guard: p.v = 8) (assignments: p.v := 9)
        Edge: (event: p.c) (guard: p.v = 2) (assignments: p.v := 3)
        Edge: (event: p.b) (guard: p.v = 1) (assignments: p.v := 2)
        Edge: (event: p.k) (guard: p.v = 12) (assignments: p.v := 13)
        Edge: (event: p.h) (guard: p.v = 9) (assignments: p.v := 10)
        Edge: (event: p.i) (guard: p.v = 10) (assignments: p.v := 11)
        Edge: (event: p.j) (guard: p.v = 11) (assignments: p.v := 12)
        Edge: (event: p.l) (guard: p.v = 12) (assignments: p.v := 13)

Computing initialization predicate of the controlled system.

Controlled system: exactly 15 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            true
    Initial (uncontrolled system):         p.v = 0
    Initial (controlled system):           p.v = 0
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    No controllable events.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/reachability1_workset_off.ctrlsys.real.cif".
