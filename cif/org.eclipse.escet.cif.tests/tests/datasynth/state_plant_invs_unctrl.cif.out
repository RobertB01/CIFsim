Reading CIF file "datasynth/state_plant_invs_unctrl.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs).
    CIF variables and location pointers:
        Nr     Kind               Type       Name   Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  -----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  A.Vu1  0      3 * 2     6 * 2       8 * 2       75%
        2      discrete variable  int[0..5]  A.Vu2  1      3 * 2     6 * 2       8 * 2       75%
        3      discrete variable  int[0..5]  A.Vu3  2      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  -----  -----  --------  ----------  ----------  -----------
        Total                                       3      18        36          48          75%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 9

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 9

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 9

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Maximum number of iterations: 20

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.074074 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.074074 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.074074 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Window length: 3

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.074074 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.074074 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Invariant (component state plant invariant): A.Vu2 != 3
Invariant (component state plant invariant): A.Vu3 != 4
Invariant (components state plant inv):      (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and A.Vu2 != 3)
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and A.Vu2 != 3)

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             A.Vu1 = 0
Initial   (discrete variable 1):             A.Vu2 = 0
Initial   (discrete variable 2):             A.Vu3 = 0
Initial   (discrete variables):              A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0)
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0)
Initial   (system, combined init/plant inv): A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0)
Initial   (system, combined init/state inv): A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and A.Vu2 != 3)
Marked    (system, combined mark/state inv): (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and A.Vu2 != 3)

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
    State: (controlled-behavior: ?)
        Edge: (event: u0) (guard: true)
        Edge: (event: u1) (guard: A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1)
        Edge: (event: u2) (guard: true) (assignments: A.Vu2 := A.Vu2 + 1)
        Edge: (event: u3) (guard: true) (assignments: A.Vu3 := A.Vu3 + 1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1)
    Edge: (event: u2) (guard: true -> true) (assignments: A.Vu2 := A.Vu2 + 1)
    Edge: (event: u3) (guard: true -> true) (assignments: A.Vu3 := A.Vu3 + 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Restricting uncontrolled system behavior using state plant invariants.

Edge (event: u2) (guard: true -> true) (assignments: A.Vu2 := A.Vu2 + 1): guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4)).
Edge (event: u3) (guard: true -> true) (assignments: A.Vu3 := A.Vu3 + 1): guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3).

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0).

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vu1" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vu2" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vu3" of type "int[0..5]" (group: 2, domain: 4+5, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: false -> A.Vu1 = 5 [backward reach with edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1)]
Backward uncontrolled bad-state: A.Vu1 = 5 -> <bdd 13n 29p> [backward reach with edge: (event: u2) (guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4))) (assignments: A.Vu2 := A.Vu2 + 1)]
Backward uncontrolled bad-state: <bdd 13n 29p> -> <bdd 11n 32p> [backward reach with edge: (event: u3) (guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3)) (assignments: A.Vu3 := A.Vu3 + 1)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: <bdd 11n 32p> -> <bdd 13n 35p> [backward reach with edge: (event: u2) (guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4))) (assignments: A.Vu2 := A.Vu2 + 1)]
Backward uncontrolled bad-state: <bdd 13n 35p> -> <bdd 10n 23p> [backward reach with edge: (event: u3) (guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3)) (assignments: A.Vu3 := A.Vu3 + 1)]
Backward reachability: iteration 3.
Backward uncontrolled bad-state: <bdd 10n 23p> -> <bdd 11n 26p> [backward reach with edge: (event: u2) (guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4))) (assignments: A.Vu2 := A.Vu2 + 1)]
Backward reachability: iteration 4.
Backward uncontrolled bad-state: <bdd 11n 26p> [fixed point].
Controlled behavior: true -> (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4)))).

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0) -> (A.Vu1 = 0 or A.Vu1 = 1) and (A.Vu2 = 0 and A.Vu3 = 0) [forward reach with edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 1) and (A.Vu2 = 0 and A.Vu3 = 0) -> (A.Vu1 = 0 or A.Vu1 = 1) and ((A.Vu2 = 0 or A.Vu2 = 1) and A.Vu3 = 0) [forward reach with edge: (event: u2) (guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4))) (assignments: A.Vu2 := A.Vu2 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 1) and ((A.Vu2 = 0 or A.Vu2 = 1) and A.Vu3 = 0) -> (A.Vu1 = 0 or A.Vu1 = 1) and ((A.Vu2 = 0 or A.Vu2 = 1) and (A.Vu3 = 0 or A.Vu3 = 1)) [forward reach with edge: (event: u3) (guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3)) (assignments: A.Vu3 := A.Vu3 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward reachability: iteration 2.
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 1) and ((A.Vu2 = 0 or A.Vu2 = 1) and (A.Vu3 = 0 or A.Vu3 = 1)) -> (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 1) and (A.Vu3 = 0 or A.Vu3 = 1)) or A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 1) and (A.Vu3 = 0 or A.Vu3 = 1)) [forward reach with edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 1) and (A.Vu3 = 0 or A.Vu3 = 1)) or A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 1) and (A.Vu3 = 0 or A.Vu3 = 1)) -> (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 1)) or (A.Vu1 = 0 or A.Vu1 = 2) and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 1)) or (A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 1)) or A.Vu1 = 1 and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 1))) [forward reach with edge: (event: u2) (guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4))) (assignments: A.Vu2 := A.Vu2 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 1)) or (A.Vu1 = 0 or A.Vu1 = 2) and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 1)) or (A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 1)) or A.Vu1 = 1 and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 1))) -> (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 2)) or (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 2) and A.Vu3 = 1) or ((A.Vu1 = 0 or A.Vu1 = 2) and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 2)) or (A.Vu1 = 0 or A.Vu1 = 2) and (A.Vu2 = 1 and A.Vu3 = 1)) or (A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 2)) or A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 2) and A.Vu3 = 1) or (A.Vu1 = 1 and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 2)) or A.Vu1 = 1 and (A.Vu2 = 1 and A.Vu3 = 1))) [forward reach with edge: (event: u3) (guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3)) (assignments: A.Vu3 := A.Vu3 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward reachability: iteration 3.
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 2)) or (A.Vu1 = 0 or A.Vu1 = 2) and ((A.Vu2 = 0 or A.Vu2 = 2) and A.Vu3 = 1) or ((A.Vu1 = 0 or A.Vu1 = 2) and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 2)) or (A.Vu1 = 0 or A.Vu1 = 2) and (A.Vu2 = 1 and A.Vu3 = 1)) or (A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 2)) or A.Vu1 = 1 and ((A.Vu2 = 0 or A.Vu2 = 2) and A.Vu3 = 1) or (A.Vu1 = 1 and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 2)) or A.Vu1 = 1 and (A.Vu2 = 1 and A.Vu3 = 1))) -> 0 <= A.Vu1 and A.Vu1 <= 3 and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 2)) or 0 <= A.Vu1 and A.Vu1 <= 3 and ((A.Vu2 = 0 or A.Vu2 = 2) and A.Vu3 = 1) or (0 <= A.Vu1 and A.Vu1 <= 3 and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 2)) or 0 <= A.Vu1 and A.Vu1 <= 3 and (A.Vu2 = 1 and A.Vu3 = 1)) [forward reach with edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward controlled-behavior: 0 <= A.Vu1 and A.Vu1 <= 3 and ((A.Vu2 = 0 or A.Vu2 = 2) and (A.Vu3 = 0 or A.Vu3 = 2)) or 0 <= A.Vu1 and A.Vu1 <= 3 and ((A.Vu2 = 0 or A.Vu2 = 2) and A.Vu3 = 1) or (0 <= A.Vu1 and A.Vu1 <= 3 and (A.Vu2 = 1 and (A.Vu3 = 0 or A.Vu3 = 2)) or 0 <= A.Vu1 and A.Vu1 <= 3 and (A.Vu2 = 1 and A.Vu3 = 1)) -> 0 <= A.Vu1 and A.Vu1 <= 3 and ((A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or 0 <= A.Vu1 and A.Vu1 <= 3 and (A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3)) [forward reach with edge: (event: u3) (guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3)) (assignments: A.Vu3 := A.Vu3 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward reachability: iteration 4.
Forward controlled-behavior: 0 <= A.Vu1 and A.Vu1 <= 3 and ((A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or 0 <= A.Vu1 and A.Vu1 <= 3 and (A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3)) -> (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3))) [forward reach with edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1), restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4))))]
Forward reachability: iteration 5.
Forward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3))) [fixed point].
Controlled behavior: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 3 and A.Vu3 = 4) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 3 and A.Vu3 = 4) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 3 and A.Vu3 = 4)))) -> (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3))) [restricted to current/previous controlled-behavior predicate: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3)))]
Backward reachability: iteration 1.
Backward controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (1 <= A.Vu1 and A.Vu1 <= 3 or (A.Vu1 = 5 or A.Vu2 = 1) or (3 <= A.Vu2 and A.Vu2 <= 5 or (A.Vu3 = 4 or A.Vu3 = 5))) and ((1 <= A.Vu1 and A.Vu1 <= 3 or A.Vu1 = 5 or (A.Vu2 != 1 or (A.Vu3 = 4 or A.Vu3 = 5))) and (A.Vu1 != 2 or A.Vu2 = 1 or (3 <= A.Vu2 and A.Vu2 <= 5 or (A.Vu3 = 4 or A.Vu3 = 5)))) and ((A.Vu1 != 2 or A.Vu2 != 1 or (A.Vu3 = 4 or A.Vu3 = 5)) and ((not(A.Vu1 = 1 or A.Vu1 = 3) or A.Vu2 = 1 or (3 <= A.Vu2 and A.Vu2 <= 5 or (A.Vu3 = 4 or A.Vu3 = 5))) and (not(A.Vu1 = 1 or A.Vu1 = 3) or A.Vu2 != 1 or (A.Vu3 = 4 or A.Vu3 = 5)))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
    State: (controlled-behavior: (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3))))
        Edge: (event: u0) (guard: true)
        Edge: (event: u1) (guard: A.Vu1 != 4 -> A.Vu1 != 4) (assignments: A.Vu1 := A.Vu1 + 1)
        Edge: (event: u2) (guard: true -> (1 <= A.Vu2 and A.Vu2 <= 3 or (A.Vu2 = 5 or A.Vu3 != 4)) and A.Vu2 != 2 and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 4)) and (A.Vu2 != 3 or A.Vu3 != 4))) (assignments: A.Vu2 := A.Vu2 + 1)
        Edge: (event: u3) (guard: true -> (A.Vu2 = 1 or A.Vu2 = 3 or (A.Vu2 = 5 or A.Vu3 != 3)) and ((A.Vu2 = 0 or (2 <= A.Vu2 and A.Vu2 <= 4 or A.Vu3 != 3)) and A.Vu2 != 3)) (assignments: A.Vu3 := A.Vu3 + 1)

Controlled system: exactly 60 states.

Initial (synthesis result):            (A.Vu1 = 0 or A.Vu1 = 4) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 0 or A.Vu1 = 4) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or A.Vu1 = 2 and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3)) or (A.Vu1 = 2 and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3) or ((A.Vu1 = 1 or A.Vu1 = 3) and (A.Vu2 = 0 or A.Vu2 = 2) and (0 <= A.Vu3 and A.Vu3 <= 3) or (A.Vu1 = 1 or A.Vu1 = 3) and A.Vu2 = 1 and (0 <= A.Vu3 and A.Vu3 <= 3)))
Initial (uncontrolled system):         A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0)
Initial (controlled system):           A.Vu1 = 0 and (A.Vu2 = 0 and A.Vu3 = 0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/state_plant_invs_unctrl.ctrlsys.real.cif".
