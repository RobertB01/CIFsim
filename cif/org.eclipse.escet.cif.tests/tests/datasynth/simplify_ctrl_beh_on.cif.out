Reading CIF file "datasynth/simplify_ctrl_beh_on.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  p1.x  1      2 * 2     4 * 2       4 * 2       100%
  3      location pointer   n/a        p2    2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..3]  p2.x  3      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      4      12        24          24          100%

Applying variable ordering:
  Applying model variable order.

  Number of hyper-edges: 8
  Number of graph edges: 2

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm.
    Maximum number of iterations: 20
    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.281250 (total)   0.035156 (avg/edge) [before]
    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.281250 (total)   0.035156 (avg/edge) [iteration 1]
    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.281250 (total)   0.035156 (avg/edge) [after]

    Applying sliding window algorithm.
    Window length: 4
    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.281250 (total)   0.035156 (avg/edge) [before]
    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.281250 (total)   0.035156 (avg/edge) [after]

Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):             p1.x = 0
Initial   (discrete variable 3):             p2.x = 0
Initial   (discrete variables):              p1.x = 0 and p2.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p1.a
Initial   (aut/locs init predicate):         p2.a
Initial   (auts/locs init predicate):        p1.a and p2.a
Initial   (uncontrolled system):             p1.a and p1.x = 0 and (p2.a and p2.x = 0)
Initial   (system, combined init/plant inv): p1.a and p1.x = 0 and (p2.a and p2.x = 0)
Initial   (system, combined init/state inv): p1.a and p1.x = 0 and (p2.a and p2.x = 0)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p1.a
Marked    (aut/locs marker predicate):       p2.a
Marked    (auts/locs marker predicate):      p1.a and p2.a
Marked    (uncontrolled system):             p1.a and p2.a
Marked    (system, combined mark/plant inv): p1.a and p2.a
Marked    (system, combined mark/state inv): p1.a and p2.a

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c1) (guard: p1.a) (assignments: p1 := p1.b)
    Edge: (event: u1) (guard: p1.b and (p1.x = 0 or p1.x = 1)) (assignments: p1.x := p1.x + 1, p1 := p1.a)
    Edge: (event: c2) (guard: p2.a) (assignments: p2 := p2.b)
    Edge: (event: u2) (guard: p2.b and (p2.x = 0 or p2.x = 1)) (assignments: p2.x := p2.x + 1, p2 := p2.a)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p1.a and p1.x = 0 and (p2.a and p2.x = 0).

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.a and p2.a [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: p1.a and p2.a -> p1.a and p2.a or p1.b and ((p1.x = 0 or p1.x = 1) and p2.a) [backward reach with edge: (event: u1) (guard: p1.b and (p1.x = 0 or p1.x = 1)) (assignments: p1.x := p1.x + 1, p1 := p1.a), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: p1.a and p2.a or p1.b and ((p1.x = 0 or p1.x = 1) and p2.a) -> (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))) [backward reach with edge: (event: u2) (guard: p2.b and (p2.x = 0 or p2.x = 1)) (assignments: p2.x := p2.x + 1, p2 := p2.a), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))) [fixed point].
Controlled behavior: true -> (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p1.a and (p2.b and (p2.x = 2 or p2.x = 3)) or (p1.b and (p1.x = 0 or p1.x = 1) and (p2.b and (p2.x = 2 or p2.x = 3)) or p1.b and (p1.x = 2 or p1.x = 3)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p1.a and p1.x = 0 and (p2.a and p2.x = 0) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p1.a and p1.x = 0 and (p2.a and p2.x = 0) -> p1.x = 0 and (p2.a and p2.x = 0) [forward reach with edge: (event: c1) (guard: p1.a) (assignments: p1 := p1.b), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward controlled-behavior: p1.x = 0 and (p2.a and p2.x = 0) -> p1.a and (p1.x = 0 or p1.x = 1) and (p2.a and p2.x = 0) or p1.b and p1.x = 0 and (p2.a and p2.x = 0) [forward reach with edge: (event: u1) (guard: p1.b and (p1.x = 0 or p1.x = 1)) (assignments: p1.x := p1.x + 1, p1 := p1.a), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward controlled-behavior: p1.a and (p1.x = 0 or p1.x = 1) and (p2.a and p2.x = 0) or p1.b and p1.x = 0 and (p2.a and p2.x = 0) -> p1.a and ((p1.x = 0 or p1.x = 1) and p2.x = 0) or p1.b and (p1.x = 0 and p2.x = 0) [forward reach with edge: (event: c2) (guard: p2.a) (assignments: p2 := p2.b), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward controlled-behavior: p1.a and ((p1.x = 0 or p1.x = 1) and p2.x = 0) or p1.b and (p1.x = 0 and p2.x = 0) -> p1.a and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.a and (p1.x = 0 or p1.x = 1) and (p2.b and p2.x = 0) or (p1.b and p1.x = 0 and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and p1.x = 0 and (p2.b and p2.x = 0)) [forward reach with edge: (event: u2) (guard: p2.b and (p2.x = 0 or p2.x = 1)) (assignments: p2.x := p2.x + 1, p2 := p2.a), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward reachability: iteration 2.
Forward controlled-behavior: p1.a and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.a and (p1.x = 0 or p1.x = 1) and (p2.b and p2.x = 0) or (p1.b and p1.x = 0 and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and p1.x = 0 and (p2.b and p2.x = 0)) -> (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.x = 0 or p1.x = 1) and (p2.b and p2.x = 0) [forward reach with edge: (event: c1) (guard: p1.a) (assignments: p1 := p1.b), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward controlled-behavior: (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.x = 0 or p1.x = 1) and (p2.b and p2.x = 0) -> p1.a and (p1.x = 0 or p1.x = 2) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.a and (p1.x = 0 or p1.x = 2) and (p2.b and p2.x = 0) or p1.a and p1.x = 1 and (p2.a and (p2.x = 0 or p2.x = 1))) or (p1.a and p1.x = 1 and (p2.b and p2.x = 0) or (p1.b and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and (p1.x = 0 or p1.x = 1) and (p2.b and p2.x = 0))) [forward reach with edge: (event: u1) (guard: p1.b and (p1.x = 0 or p1.x = 1)) (assignments: p1.x := p1.x + 1, p1 := p1.a), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward controlled-behavior: p1.a and (p1.x = 0 or p1.x = 2) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.a and (p1.x = 0 or p1.x = 2) and (p2.b and p2.x = 0) or p1.a and p1.x = 1 and (p2.a and (p2.x = 0 or p2.x = 1))) or (p1.a and p1.x = 1 and (p2.b and p2.x = 0) or (p1.b and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and (p1.x = 0 or p1.x = 1) and (p2.b and p2.x = 0))) -> p1.a and ((p1.x = 0 or p1.x = 2) and (p2.x = 0 or p2.x = 1)) or (p1.a and (p1.x = 1 and (p2.x = 0 or p2.x = 1)) or p1.b and ((p1.x = 0 or p1.x = 1) and (p2.x = 0 or p2.x = 1))) [forward reach with edge: (event: c2) (guard: p2.a) (assignments: p2 := p2.b), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward controlled-behavior: p1.a and ((p1.x = 0 or p1.x = 2) and (p2.x = 0 or p2.x = 1)) or (p1.a and (p1.x = 1 and (p2.x = 0 or p2.x = 1)) or p1.b and ((p1.x = 0 or p1.x = 1) and (p2.x = 0 or p2.x = 1))) -> (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))) [forward reach with edge: (event: u2) (guard: p2.b and (p2.x = 0 or p2.x = 1)) (assignments: p2.x := p2.x + 1, p2 := p2.a), restricted to current/previous controlled-behavior predicate: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))]
Forward reachability: iteration 3.
Forward controlled-behavior: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))) [fixed point].
Controlled behavior: (p1.b or p2.a or (p2.x = 0 or p2.x = 1)) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))) -> (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.a and p2.a [marker predicate]
Backward controlled-behavior: p1.a and p2.a -> (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.b or p1.x = 1 or (p1.x = 3 or p2.a)) and (p1.b or p1.x != 1 or (p2.b or p2.x != 3))) and ((p1.b or (p1.x != 1 or p2.a)) and ((p1.b or p1.x != 3) and p1.a)) [restricted to current/previous controlled-behavior predicate: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))))]
Backward reachability: iteration 1.
Backward controlled-behavior: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.b or p1.x = 1 or (p1.x = 3 or p2.a)) and (p1.b or p1.x != 1 or (p2.b or p2.x != 3))) and ((p1.b or (p1.x != 1 or p2.a)) and ((p1.b or p1.x != 3) and p1.a)) -> (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or p1.x = 1 or (p1.x = 3 or p2.a)) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or (p1.x != 1 or p2.a))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or p1.x = 2 or (p1.x = 3 or p2.a)) and (p1.a or (p1.x = 0 or p1.x = 1)))) [backward reach with edge: (event: u1) (guard: p1.b and (p1.x = 0 or p1.x = 1)) (assignments: p1.x := p1.x + 1, p1 := p1.a), restricted to current/previous controlled-behavior predicate: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))))]
Backward controlled-behavior: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or p1.x = 1 or (p1.x = 3 or p2.a)) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or (p1.x != 1 or p2.a))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or p1.x = 2 or (p1.x = 3 or p2.a)) and (p1.a or (p1.x = 0 or p1.x = 1)))) -> (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))) [backward reach with edge: (event: u2) (guard: p2.b and (p2.x = 0 or p2.x = 1)) (assignments: p2.x := p2.x + 1, p2 := p2.a), restricted to current/previous controlled-behavior predicate: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))))]
Backward reachability: iteration 2.
Backward controlled-behavior: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p1.a and (p1.x = 0 or p1.x = 2) and (p2.a and p2.x = 3) or p1.a and (p1.x = 0 or p1.x = 2) and (p2.b and (p2.x = 2 or p2.x = 3)) or (p1.a and p1.x = 1 and (p2.a and p2.x = 3) or p1.a and p1.x = 1 and (p2.b and (p2.x = 2 or p2.x = 3))) or (p1.a and p1.x = 3 or p1.b and (p1.x = 0 or p1.x = 1) and (p2.a and p2.x = 3) or (p1.b and (p1.x = 0 or p1.x = 1) and (p2.b and (p2.x = 2 or p2.x = 3)) or p1.b and (p1.x = 2 or p1.x = 3))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c1) (guard: p1.a) (assignments: p1 := p1.b): guard: p1.a -> (p1.b or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or (p1.x = 0 or p1.x = 1)) and p1.a).
Edge (event: c2) (guard: p2.a) (assignments: p2 := p2.b): guard: p2.a -> p1.a and (p1.x = 0 or p1.x = 2) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.a and p1.x = 1 and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1))).

Final synthesis result:
  State: (controlled-behavior: (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1)))))
    Edge: (event: c1) (guard: p1.a -> (p1.b or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or (p1.x = 0 or p1.x = 1)) and p1.a)) (assignments: p1 := p1.b)
    Edge: (event: u1) (guard: p1.b and (p1.x = 0 or p1.x = 1)) (assignments: p1.x := p1.x + 1, p1 := p1.a)
    Edge: (event: c2) (guard: p2.a -> p1.a and (p1.x = 0 or p1.x = 2) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.a and p1.x = 1 and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1)))) (assignments: p2 := p2.b)
    Edge: (event: u2) (guard: p2.b and (p2.x = 0 or p2.x = 1)) (assignments: p2.x := p2.x + 1, p2 := p2.a)

Controlled system:                     exactly 25 states.

Initial (synthesis result):            (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))))
Initial (uncontrolled system):         p1.a and p1.x = 0 and (p2.a and p2.x = 0)
Initial (controlled system):           p1.a and p1.x = 0 and (p2.a and p2.x = 0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the controlled behavior:
  Event c1: guard: (p1.b or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or (p1.x = 0 or p1.x = 1)) and p1.a) -> p1.a and (p1.x = 0 or p1.x = 1) [assume (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))))].
  Event c2: guard: p1.a and (p1.x = 0 or p1.x = 2) and (p2.a and (p2.x = 0 or p2.x = 1)) or (p1.a and p1.x = 1 and (p2.a and (p2.x = 0 or p2.x = 1)) or p1.b and (p1.x = 0 or p1.x = 1) and (p2.a and (p2.x = 0 or p2.x = 1))) -> p2.a and (p2.x = 0 or p2.x = 1) [assume (p1.b or p1.x = 1 or (p1.x = 3 or (p2.b or p2.x != 3))) and (p1.b or (p1.x = 1 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and ((p1.b or p1.x != 1 or (p2.b or p2.x != 3)) and (p1.b or p1.x != 1 or (p2.a or (p2.x = 0 or p2.x = 1)))) and ((p1.b or p1.x != 3) and (p1.a or p1.x = 2 or (p1.x = 3 or (p2.b or p2.x != 3))) and ((p1.a or (p1.x = 2 or p1.x = 3) or (p2.a or (p2.x = 0 or p2.x = 1))) and (p1.a or (p1.x = 0 or p1.x = 1))))].

Constructing output CIF specification.
Writing output CIF file "datasynth/simplify_ctrl_beh_on.ctrlsys.real.cif".
