Reading CIF file "datasynth/multi_plants.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..5]  p1.x  1      3 * 2     6 * 2       8 * 2       75%
  3      location pointer   n/a        p2    2      2 * 2     3 * 2       4 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      3      12        22          28          ~79%

Applying automatic variable ordering:
  Number of hyperedges: 6

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    4 (total)                 0.67 (avg/edge) [before]
    Total span:                    4 (total)                 0.67 (avg/edge) [iteration 1]
    Total span:                    4 (total)                 0.67 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 3

    Total span:                    4 (total)                 0.67 (avg/edge) [before]
    Total span:                    4 (total)                 0.67 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):         p1.x = 0
Initial   (discrete variables):              p1.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p1.l0
Initial   (aut/locs init predicate):         p2.l0
Initial   (auts/locs init predicate):        p1.l0 and p2.l0
Initial   (uncontrolled system):             p1.l0 and (p1.x = 0 and p2.l0)
Initial   (system, combined init/req inv):   p1.l0 and (p1.x = 0 and p2.l0)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p1.l0
Marked    (aut/locs marker predicate):       p2.l0
Marked    (auts/locs marker predicate):      p1.l0 and p2.l0
Marked    (uncontrolled system):             p1.l0 and p2.l0
Marked    (system, combined marked/req inv): p1.l0 and p2.l0

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: a) (guard: p1.l0 and (p1.x = 1 and p2.l0)) (assignments: p1 := p1.l1, p2 := p2.l1)
    Edge: (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2)
    Edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0)
    Edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p1.x" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p2" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.l0 and p2.l0 [marker predicate]
Backward controlled-behavior: p1.l0 and p2.l0 -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2))) [backward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2))) -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1))) [backward reach with edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1))) [fixed point].
Controlled behavior: true -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l2) or p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l1) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l2) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l1)) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l0) or p1.l1 and (p1.x = 2 and p2.l0) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l0) or p1.l1 and p1.x = 5)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p1.l0 and (p1.x = 0 and p2.l0) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p1.l0 and (p1.x = 0 and p2.l0) -> p1.l0 and (p1.x = 0 and p2.l0) or p1.l1 and (p1.x = 0 and p2.l2) [forward reach with edge: (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward controlled-behavior: p1.l0 and (p1.x = 0 and p2.l0) or p1.l1 and (p1.x = 0 and p2.l2) -> p1.l0 and ((p1.x = 0 or p1.x = 1) and p2.l0) or p1.l1 and (p1.x = 0 and p2.l2) [forward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward reachability: iteration 2.
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 1) and p2.l0) or p1.l1 and (p1.x = 0 and p2.l2) -> p1.l0 and ((p1.x = 0 or p1.x = 1) and p2.l0) or (p1.l1 and (p1.x = 0 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1)) [forward reach with edge: (event: a) (guard: p1.l0 and (p1.x = 1 and p2.l0)) (assignments: p1 := p1.l1, p2 := p2.l1), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 1) and p2.l0) or (p1.l1 and (p1.x = 0 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1)) -> p1.l0 and ((p1.x = 0 or p1.x = 1) and p2.l0) or p1.l1 and (p1.x = 0 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1)) [forward reach with edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward reachability: iteration 3.
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 1) and p2.l0) or p1.l1 and (p1.x = 0 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1)) -> p1.l0 and ((p1.x = 0 or p1.x = 2) and p2.l0) or p1.l0 and (p1.x = 1 and p2.l0) or (p1.l1 and (p1.x = 0 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1))) [forward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward reachability: iteration 4.
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 2) and p2.l0) or p1.l0 and (p1.x = 1 and p2.l0) or (p1.l1 and (p1.x = 0 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1))) -> p1.l0 and ((p1.x = 0 or p1.x = 2) and p2.l0) or p1.l0 and (p1.x = 1 and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1))) [forward reach with edge: (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 2) and p2.l0) or p1.l0 and (p1.x = 1 and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1))) -> p1.l0 and 0 <= p1.x and (p1.x <= 3 and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1)) [forward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward reachability: iteration 5.
Forward controlled-behavior: p1.l0 and 0 <= p1.x and (p1.x <= 3 and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l1)) -> p1.l0 and 0 <= p1.x and (p1.x <= 3 and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [forward reach with edge: (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward controlled-behavior: p1.l0 and 0 <= p1.x and (p1.x <= 3 and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) -> p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or (p1.l0 and (p1.x = 2 and p2.l0) or p1.l0 and ((p1.x = 1 or p1.x = 3) and p2.l0)) or (p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [forward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward reachability: iteration 6.
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or (p1.l0 and (p1.x = 2 and p2.l0) or p1.l0 and ((p1.x = 1 or p1.x = 3) and p2.l0)) or (p1.l1 and ((p1.x = 0 or p1.x = 2) and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) -> p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or p1.l0 and (p1.x = 2 and p2.l0) or (p1.l0 and ((p1.x = 1 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [forward reach with edge: (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward controlled-behavior: p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or p1.l0 and (p1.x = 2 and p2.l0) or (p1.l0 and ((p1.x = 1 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [forward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)))]
Forward reachability: iteration 7.
Forward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [fixed point].
Controlled behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 2 and p2.l1) or (p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1))) -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.l0 and p2.l0 [marker predicate]
Backward controlled-behavior: p1.l0 and p2.l0 -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) [restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2)))]
Backward reachability: iteration 1.
Backward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2))) [backward reach with edge: (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2)))]
Backward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2))) -> p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [backward reach with edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2)))]
Backward reachability: iteration 2.
Backward controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p1.l1 or p1.x = 2 or (p1.x = 3 or not p2.l0)) and ((p1.l1 or (not(p1.x = 2 or p1.x = 3) or not p2.l0)) and (p1.l0 or 1 <= p1.x and p1.x <= 3 or (p1.x = 5 or not p2.l2))) and ((p1.l0 or (p1.x != 2 or not p2.l2)) and (p1.l0 or (p1.x != 1 or not p2.l2)) and ((p1.l0 or (p1.x != 1 or not p2.l1)) and (p1.l0 or (p1.x != 3 or not p2.l2)))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2): guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0)) -> p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or (p1.l0 and (p1.x = 2 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0)).
Edge (event: b) (guard: p1.l1 and p2.l2) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0): guard: p1.l1 and p2.l2 -> p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2)).
Edge (event: c) (guard: p2.l1) (assignments: p2 := p2.l2): guard: p2.l1 -> p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1) or (p1.l1 and (p1.x = 2 and p2.l1) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)).

Final synthesis result:
  State: (controlled-behavior: p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2))))
    Edge: (event: a) (guard: p1.l0 and (p1.x = 1 and p2.l0)) (assignments: p1 := p1.l1, p2 := p2.l1)
    Edge: (event: a) (guard: p1.l0 and ((p1.x = 0 or (p1.x = 2 or p1.x = 4)) and p2.l0) or (p1.l0 and (p1.x = 5 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0)) -> p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or (p1.l0 and (p1.x = 2 and p2.l0) or p1.l0 and (p1.x = 3 and p2.l0))) (assignments: p1 := p1.l1, p2 := p2.l2)
    Edge: (event: b) (guard: p1.l1 and p2.l2 -> p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0)
    Edge: (event: c) (guard: p2.l1 -> p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1) or (p1.l1 and (p1.x = 2 and p2.l1) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1))) (assignments: p2 := p2.l2)

Controlled system:                     exactly 12 states.

Initial (synthesis result):            p1.l0 and (not(p1.x = 2 or p1.x = 3) and p2.l0) or (p1.l0 and ((p1.x = 2 or p1.x = 3) and p2.l0) or p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2)) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and (p1.x = 1 and p2.l2) or (p1.l1 and (p1.x = 1 and p2.l1) or p1.l1 and (p1.x = 3 and p2.l2)))
Initial (uncontrolled system):         p1.l0 and (p1.x = 0 and p2.l0)
Initial (controlled system):           p1.l0 and (p1.x = 0 and p2.l0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event a: guard: p1.l0 and ((p1.x = 0 or p1.x = 4) and p2.l0) or (p1.l0 and (p1.x = 2 and p2.l0) or p1.l0 and ((p1.x = 1 or p1.x = 3) and p2.l0)) -> p1.x != 5 [assume p1.l0 and p2.l0].
  Event b: guard: p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l2) or (p1.l1 and (p1.x = 2 and p2.l2) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l2)) -> p1.x != 5 [assume p1.l1 and p2.l2].
  Event c: guard: p1.l1 and ((p1.x = 0 or p1.x = 4) and p2.l1) or (p1.l1 and (p1.x = 2 and p2.l1) or p1.l1 and ((p1.x = 1 or p1.x = 3) and p2.l1)) -> p1.l1 and (p1.l0 or p1.x != 5) [assume p2.l1].

Constructing output CIF specification.
Writing output CIF file "datasynth/multi_plants.ctrlsys.real.cif".
