Reading CIF file "datasynth/multi_plants.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..5]  p1.x  1      3 * 2     6 * 2       8 * 2       75%
        3      location pointer   n/a        p2    2      2 * 2     3 * 2       4 * 2       75%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      12        22          28          ~79%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 6

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [before]
                    Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [before]
                    Total span:   4 (total)   0.67 (avg/edge) / WES:   0.703704 (total)   0.117284 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [before]
                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [before]
                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.629630 (total)   0.104938 (avg/edge) [before]
                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.703704 (total)   0.117284 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.703704 (total)   0.117284 (avg/edge) [before]
                        Total span:   4 (total)   0.67 (avg/edge) / WES:   0.703704 (total)   0.117284 (avg/edge) [reversed]

                Found new best variable order.

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Maximum number of iterations: 20

                Total span:   6 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.263889 (avg/edge) [before]
                Total span:   6 (total)   1.50 (avg/edge) / WES:   1.111111 (total)   0.277778 (avg/edge) [iteration 1]
                Total span:   6 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.263889 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Window length: 3

                Total span:   6 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.263889 (avg/edge) [before]
                Total span:   6 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.263889 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  p1.x  0      3 * 2     6 * 2       8 * 2       75%
        2      location pointer   n/a        p2    1      2 * 2     3 * 2       4 * 2       75%
        3      location pointer   n/a        p1    2      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      12        22          28          ~79%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p1.x = 0
    Initial   (discrete variables):              p1.x = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p1.l0
    Initial   (aut/locs init predicate):         p2.l0
    Initial   (auts/locs init predicate):        p2.l0 and p1.l0
    Initial   (uncontrolled system):             p1.x = 0 and (p2.l0 and p1.l0)
    Initial   (system, combined init/plant inv): p1.x = 0 and (p2.l0 and p1.l0)
    Initial   (system, combined init/state inv): p1.x = 0 and (p2.l0 and p1.l0)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p1.l0
    Marked    (aut/locs marker predicate):       p2.l0
    Marked    (auts/locs marker predicate):      p2.l0 and p1.l0
    Marked    (uncontrolled system):             p2.l0 and p1.l0
    Marked    (system, combined mark/plant inv): p2.l0 and p1.l0
    Marked    (system, combined mark/state inv): p2.l0 and p1.l0

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: p1.x = 1 and (p2.l0 and p1.l0)) (assignments: p1 := p1.l1, p2 := p2.l1)
            Edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2)
            Edge: (event: b) (guard: p2.l2 and p1.l1) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0)
            Edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2)

Restricting edge guards to prevent runtime errors:
    Edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: p1.x = 1 and (p2.l0 and p1.l0)) (assignments: p1 := p1.l1, p2 := p2.l1)
            Edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2)
            Edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0)
            Edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p1.x = 0 and (p2.l0 and p1.l0).

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p1.x" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p2" (group: 1, domain: 2+3, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements.

Re-initializing edges for being applied.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p2.l0 and p1.l0 [marker predicate]
Backward controlled-behavior: p2.l0 and p1.l0 -> not(p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) or (p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: not(p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) or (p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1)) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [backward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1)) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1)))) [backward reach with edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1)))) [fixed point].
Controlled behavior: true -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1)))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 12n 21p> [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) -> p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) [forward reach with edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) -> p1.x = 0 and (p2.l0 and p1.l0) or (p1.x = 0 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0)) [forward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward reachability: iteration 2.
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) or (p1.x = 0 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0)) -> p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l1 and p1.l1)) [forward reach with edge: (event: a) (guard: p1.x = 1 and (p2.l0 and p1.l0)) (assignments: p1 := p1.l1, p2 := p2.l1), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l1 and p1.l1)) -> p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1))) [forward reach with edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward reachability: iteration 3.
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1))) -> p1.x = 0 and (p2.l0 and p1.l0) or (p1.x = 0 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l0 and p1.l0)) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1))) [forward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward reachability: iteration 4.
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) or (p1.x = 0 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l0 and p1.l0)) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1))) -> (p1.x = 0 or p1.x = 2) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 2) and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1))) [forward reach with edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward controlled-behavior: (p1.x = 0 or p1.x = 2) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 2) and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1))) -> (p1.x = 0 or p1.x = 2) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 2) and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0)) or (p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l1 and p1.l1) or p1.x = 3 and (p2.l0 and p1.l0))) [forward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward reachability: iteration 5.
Forward controlled-behavior: (p1.x = 0 or p1.x = 2) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 2) and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0)) or (p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l1 and p1.l1) or p1.x = 3 and (p2.l0 and p1.l0))) -> (p1.x = 0 or p1.x = 2) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 2) and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0)) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1))) [forward reach with edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward controlled-behavior: (p1.x = 0 or p1.x = 2) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 2) and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0)) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1))) -> p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) or (p1.x = 4 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [forward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward reachability: iteration 6.
Forward controlled-behavior: p1.x = 0 and (p2.l0 and p1.l0) or p1.x = 0 and (p2.l2 and p1.l1) or (p1.x = 4 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1)) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [forward reach with edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1)) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [forward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1))))]
Forward reachability: iteration 7.
Forward controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [fixed point].
Controlled behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or ((p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1)) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 2 and (p2.l1 and p1.l1))) or (p1.x = 1 and (p2.l0 and p1.l0) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1)) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l1 and p1.l1)))) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p2.l0 and p1.l0 [marker predicate]
Backward controlled-behavior: p2.l0 and p1.l0 -> not(p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) or (p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) [restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1))))]
Backward reachability: iteration 1.
Backward controlled-behavior: not(p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) or (p1.x = 2 or p1.x = 3) and (p2.l0 and p1.l0) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1)) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [backward reach with edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1))))]
Backward controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 2 and (p2.l2 and p1.l1)) or (p1.x = 1 and (p2.l0 and p1.l0) or p1.x = 1 and (p2.l2 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [backward reach with edge: (event: c) (guard: p2.l1) (assignments: p2 := p2.l2), restricted to current/previous controlled-behavior predicate: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1))))]
Backward reachability: iteration 2.
Backward controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (1 <= p1.x and p1.x <= 3 or p1.x = 5 or (not p2.l0 or p1.l1)) and (1 <= p1.x and p1.x <= 3 or p1.x = 5 or (not p2.l2 or p1.l0)) and ((p1.x != 2 or (not p2.l0 or p1.l1)) and ((p1.x != 2 or (not p2.l2 or p1.l0)) and (p1.x != 1 or (not p2.l0 or p1.l1)))) and ((p1.x != 1 or (not p2.l2 or p1.l0)) and (p1.x != 1 or (not p2.l1 or p1.l0)) and ((p1.x != 5 or (not p2.l0 or p1.l1)) and ((p1.x != 3 or (not p2.l0 or p1.l1)) and (p1.x != 3 or (not p2.l2 or p1.l0))))) [current/previous controlled behavior predicate]

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2): guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0)) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0)).
Edge (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0): guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l2 and p1.l1) or ((p1.x = 1 or p1.x = 5) and (p2.l2 and p1.l1) or p1.x = 3 and (p2.l2 and p1.l1)) -> (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l2 and p1.l1) or (p1.x = 1 or p1.x = 3) and (p2.l2 and p1.l1)).
Edge (event: c) (guard: p2.l1) (assignments: p2 := p2.l2): guard: p2.l1 -> (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1) or (p1.x = 2 and (p2.l1 and p1.l1) or (p1.x = 1 or p1.x = 3) and (p2.l1 and p1.l1)).

Final synthesis result:
    State: (controlled-behavior: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1)))))
        Edge: (event: a) (guard: p1.x = 1 and (p2.l0 and p1.l0)) (assignments: p1 := p1.l1, p2 := p2.l1)
        Edge: (event: a) (guard: (p1.x = 0 or (p1.x = 2 or p1.x = 4)) and (p2.l0 and p1.l0) or (p1.x = 5 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0)) -> (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l0 and p1.l0))) (assignments: p1 := p1.l1, p2 := p2.l2)
        Edge: (event: b) (guard: p2.l2 and p1.l1 -> (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l2 and p1.l1) or (p1.x = 1 or p1.x = 3) and (p2.l2 and p1.l1))) (assignments: p1.x := p1.x + 1, p1 := p1.l0, p2 := p2.l0)
        Edge: (event: c) (guard: p2.l1 -> (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1) or (p1.x = 2 and (p2.l1 and p1.l1) or (p1.x = 1 or p1.x = 3) and (p2.l1 and p1.l1))) (assignments: p2 := p2.l2)

Controlled system: exactly 12 states.

Initial (synthesis result):            (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l0 and p1.l0))) or (p1.x = 1 and (p2.l2 and p1.l1) or p1.x = 1 and (p2.l1 and p1.l1) or (p1.x = 5 and (p2.l0 and p1.l0) or (p1.x = 3 and (p2.l0 and p1.l0) or p1.x = 3 and (p2.l2 and p1.l1))))
Initial (uncontrolled system):         p1.x = 0 and (p2.l0 and p1.l0)
Initial (controlled system):           p1.x = 0 and (p2.l0 and p1.l0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
    Event a: guard: (p1.x = 0 or p1.x = 4) and (p2.l0 and p1.l0) or (p1.x = 2 and (p2.l0 and p1.l0) or (p1.x = 1 or p1.x = 3) and (p2.l0 and p1.l0)) -> p1.x != 5 [assume p2.l0 and p1.l0].
    Event b: guard: (p1.x = 0 or p1.x = 4) and (p2.l2 and p1.l1) or (p1.x = 2 and (p2.l2 and p1.l1) or (p1.x = 1 or p1.x = 3) and (p2.l2 and p1.l1)) -> p1.x != 5 [assume p2.l2 and p1.l1].
    Event c: guard: (p1.x = 0 or p1.x = 4) and (p2.l1 and p1.l1) or (p1.x = 2 and (p2.l1 and p1.l1) or (p1.x = 1 or p1.x = 3) and (p2.l1 and p1.l1)) -> (p1.x = 0 or p1.x = 4) and p1.l1 or (p1.x = 2 and p1.l1 or (p1.x = 1 or p1.x = 3) and p1.l1) [assume p2.l1].

Constructing output CIF specification.
Writing output CIF file "datasynth/multi_plants.ctrlsys.real.cif".
