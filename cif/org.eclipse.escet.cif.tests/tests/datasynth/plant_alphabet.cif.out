Reading CIF file "datasynth/plant_alphabet.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   p1    0      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
  Total                                1      2         4           4           100%

Skipping automatic variable ordering: only one variable present.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variables):              true
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p1.l0
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        p1.l0
Initial   (uncontrolled system):             p1.l0
Initial   (system, combined init/plant inv): p1.l0
Initial   (system, combined init/state inv): p1.l0

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p1.l0
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      p1.l0
Marked    (uncontrolled system):             p1.l0
Marked    (system, combined mark/plant inv): p1.l0
Marked    (system, combined mark/state inv): p1.l0

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c1) (guard: p1.l0) (assignments: p1 := p1.l1)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.l0 [marker predicate]
Backward reachability: iteration 1.
Controlled behavior: true -> p1.l0.

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p1.l1 [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p1.l0 [initialization predicate]
Forward reachability: iteration 1.

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c1) (guard: p1.l0) (assignments: p1 := p1.l1): guard: p1.l0 -> false.

Final synthesis result:
  State: (controlled-behavior: p1.l0)
    Edge: (event: c1) (guard: p1.l0 -> false) (assignments: p1 := p1.l1)

Controlled system:                     exactly 1 state.

Initial (synthesis result):            p1.l0
Initial (uncontrolled system):         p1.l0
Initial (controlled system):           p1.l0
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event c2: guard: false -> true [assume false].

Constructing output CIF specification.
Writing output CIF file "datasynth/plant_alphabet.ctrlsys.real.cif".
