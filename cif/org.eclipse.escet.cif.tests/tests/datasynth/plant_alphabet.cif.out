Reading CIF file "datasynth/plant_alphabet.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind              Type  Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   p1    0      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
        Total                                1      2         4           4           100%

    Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p1.l0
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        p1.l0
    Initial   (uncontrolled system):             p1.l0
    Initial   (system, combined init/plant inv): p1.l0
    Initial   (system, combined init/state inv): p1.l0

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p1.l0
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      p1.l0
    Marked    (uncontrolled system):             p1.l0
    Marked    (system, combined mark/plant inv): p1.l0
    Marked    (system, combined mark/state inv): p1.l0

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c1) (guard: p1.l0) (assignments: p1 := p1.l1)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p1.l0.

Restricting behavior using state requirements:
    Controlled behavior not changed.

<<<<<<< HEAD
Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p1.l0 [marker predicate]
Controlled behavior: true -> p1.l0.
=======
Extending controlled-behavior predicate using variable ranges:
    Controlled behavior not changed.
>>>>>>> refs/remotes/origin/develop

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

<<<<<<< HEAD
Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p1.l0 [initialization predicate]
=======
Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.
>>>>>>> refs/remotes/origin/develop

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p1.l0 [marker predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior: true -> p1.l0.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: p1.l1 [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p1.l0 [initialization predicate]

        Forward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: c1) (guard: p1.l0) (assignments: p1 := p1.l1): guard: p1.l0 -> false.

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: p1.l0)
        Edge: (event: c1) (guard: p1.l0 -> false) (assignments: p1 := p1.l1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 1 state.

Determining initialization predicate for output model:
    Initial (synthesis result):            p1.l0
    Initial (uncontrolled system):         p1.l0
    Initial (controlled system):           p1.l0
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event c1: guard: false.
    Event c2: guard: false.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Event c2: guard: false -> true [assume false].

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/plant_alphabet.ctrlsys.real.cif".
