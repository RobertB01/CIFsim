Reading CIF file "datasynth/mutex2.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind              Type  Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   machine1  0      2 * 2     3 * 2       4 * 2       75%
        2      location pointer  n/a   machine2  1      2 * 2     3 * 2       4 * 2       75%
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        Total                                    2      8         12          16          75%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 7

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [before]
                    Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [before]
                    Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [before]
                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 7

                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [before]
                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [before]
                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 7

                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [before]
                        Total span:   1 (total)   0.14 (avg/edge) / WES:   0.357143 (total)   0.051020 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Maximum number of iterations: 10

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Window length: 2

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (component state req invariant):   not machine1.Producing or not machine2.Producing
    Invariant (components state req invariant):  not machine1.Producing or not machine2.Producing
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      not machine1.Producing or not machine2.Producing

    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         machine1.Idle
    Initial   (aut/locs init predicate):         machine2.Idle
    Initial   (auts/locs init predicate):        machine1.Idle and machine2.Idle
    Initial   (uncontrolled system):             machine1.Idle and machine2.Idle
    Initial   (system, combined init/plant inv): machine1.Idle and machine2.Idle
    Initial   (system, combined init/state inv): machine1.Idle and machine2.Idle

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       machine1.Idle
    Marked    (aut/locs marker predicate):       machine2.Idle
    Marked    (auts/locs marker predicate):      machine1.Idle and machine2.Idle
    Marked    (uncontrolled system):             machine1.Idle and machine2.Idle
    Marked    (system, combined mark/plant inv): machine1.Idle and machine2.Idle
    Marked    (system, combined mark/state inv): machine1.Idle and machine2.Idle

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: machine1.c_start) (guard: machine1.Idle) (assignments: machine1 := machine1.Producing)
            Edge: (event: machine1.u_waiting) (guard: machine1.Producing) (assignments: machine1 := machine1.CoolDown)
            Edge: (event: machine1.u_finished) (guard: machine1.CoolDown) (assignments: machine1 := machine1.Idle)
            Edge: (event: machine2.c_start) (guard: machine2.Idle) (assignments: machine2 := machine2.Producing)
            Edge: (event: machine2.u_waiting) (guard: machine2.Producing) (assignments: machine2 := machine2.CoolDown)
            Edge: (event: machine2.u_finished) (guard: machine2.CoolDown) (assignments: machine2 := machine2.Idle)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: machine1.Idle and machine2.Idle.

Restricting behavior using state requirements:
    Controlled behavior: true -> not machine1.Producing or not machine2.Producing [state requirements: not machine1.Producing or not machine2.Producing].

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: not machine1.Producing or not machine2.Producing -> not machine1.Producing or not machine2.Producing [range: true, variable: location pointer for automaton "machine1" (group: 0, domain: 0+1, BDD variables: 2, CIF/BDD values: 3/4)].
    Controlled behavior: not machine1.Producing or not machine2.Producing -> not machine1.Producing or not machine2.Producing [range: true, variable: location pointer for automaton "machine2" (group: 1, domain: 2+3, BDD variables: 2, CIF/BDD values: 3/4)].

    Extended controlled-behavior predicate using variable ranges: not machine1.Producing or not machine2.Producing.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: machine1.Idle and machine2.Idle [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: machine1.Idle and machine2.Idle -> not machine1.Producing and machine2.Idle [backward reach with edge: (event: machine1.u_finished) (guard: machine1.CoolDown) (assignments: machine1 := machine1.Idle), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]
            Backward controlled-behavior: not machine1.Producing and machine2.Idle -> not machine1.Producing and not machine2.Producing [backward reach with edge: (event: machine2.u_finished) (guard: machine2.CoolDown) (assignments: machine2 := machine2.Idle), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]

        Backward reachability iteration 2:
            Backward controlled-behavior: not machine1.Producing and not machine2.Producing -> (machine1.Producing or not machine2.Producing) and (not machine1.Producing or not machine2.Producing) [backward reach with edge: (event: machine1.u_waiting) (guard: machine1.Producing) (assignments: machine1 := machine1.CoolDown), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]
            Backward controlled-behavior: (machine1.Producing or not machine2.Producing) and (not machine1.Producing or not machine2.Producing) -> not machine1.Producing or not machine2.Producing [backward reach with edge: (event: machine2.u_waiting) (guard: machine2.Producing) (assignments: machine2 := machine2.CoolDown), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]

        Backward reachability iteration 3:
            No change this iteration.

        Backward controlled-behavior: not machine1.Producing or not machine2.Producing [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: machine1.Producing and machine2.Producing [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: machine1.Idle and machine2.Idle [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: machine1.Idle and machine2.Idle -> not machine1.CoolDown and machine2.Idle [forward reach with edge: (event: machine1.c_start) (guard: machine1.Idle) (assignments: machine1 := machine1.Producing), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]
            Forward controlled-behavior: not machine1.CoolDown and machine2.Idle -> not machine1.Producing and machine2.Idle or machine1.Producing and machine2.Idle [forward reach with edge: (event: machine1.u_waiting) (guard: machine1.Producing) (assignments: machine1 := machine1.CoolDown), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]
            Forward controlled-behavior: not machine1.Producing and machine2.Idle or machine1.Producing and machine2.Idle -> not machine1.Producing and not machine2.CoolDown or machine1.Producing and machine2.Idle [forward reach with edge: (event: machine2.c_start) (guard: machine2.Idle) (assignments: machine2 := machine2.Producing), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]
            Forward controlled-behavior: not machine1.Producing and not machine2.CoolDown or machine1.Producing and machine2.Idle -> (not machine1.Producing or not machine2.CoolDown) and (not machine1.Producing or not machine2.Producing) [forward reach with edge: (event: machine2.u_waiting) (guard: machine2.Producing) (assignments: machine2 := machine2.CoolDown), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]

        Forward reachability iteration 2:
            Forward controlled-behavior: (not machine1.Producing or not machine2.CoolDown) and (not machine1.Producing or not machine2.Producing) -> not machine1.Producing or not machine2.Producing [forward reach with edge: (event: machine1.c_start) (guard: machine1.Idle) (assignments: machine1 := machine1.Producing), restricted to current/previous controlled-behavior predicate: not machine1.Producing or not machine2.Producing]

        Forward reachability iteration 3:
            No change this iteration.

        Forward controlled-behavior: not machine1.Producing or not machine2.Producing [fixed point].

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: machine1.c_start) (guard: machine1.Idle) (assignments: machine1 := machine1.Producing): guard: machine1.Idle -> machine1.Idle and not machine2.Producing.
    Edge (event: machine2.c_start) (guard: machine2.Idle) (assignments: machine2 := machine2.Producing): guard: machine2.Idle -> not machine1.Producing and machine2.Idle.

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: not machine1.Producing or not machine2.Producing)
        Edge: (event: machine1.c_start) (guard: machine1.Idle -> machine1.Idle and not machine2.Producing) (assignments: machine1 := machine1.Producing)
        Edge: (event: machine1.u_waiting) (guard: machine1.Producing) (assignments: machine1 := machine1.CoolDown)
        Edge: (event: machine1.u_finished) (guard: machine1.CoolDown) (assignments: machine1 := machine1.Idle)
        Edge: (event: machine2.c_start) (guard: machine2.Idle -> not machine1.Producing and machine2.Idle) (assignments: machine2 := machine2.Producing)
        Edge: (event: machine2.u_waiting) (guard: machine2.Producing) (assignments: machine2 := machine2.CoolDown)
        Edge: (event: machine2.u_finished) (guard: machine2.CoolDown) (assignments: machine2 := machine2.Idle)

Computing initialization predicate of the controlled system.

Controlled system: exactly 8 states.

Initial (synthesis result):            not machine1.Producing or not machine2.Producing
Initial (uncontrolled system):         machine1.Idle and machine2.Idle
Initial (controlled system):           machine1.Idle and machine2.Idle
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Checking post-synthesis for events that are never enabled.

Simplification of controlled system under the assumption of the plants:
    Event machine1.c_start: guard: machine1.Idle and not machine2.Producing -> not machine2.Producing [assume machine1.Idle].
    Event machine2.c_start: guard: not machine1.Producing and machine2.Idle -> not machine1.Producing [assume machine2.Idle].

Constructing output CIF specification.
Writing output CIF file "datasynth/mutex2.ctrlsys.real.cif".
