Reading CIF file "datasynth/switch_preds.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  p.x   1      2 * 2     4 * 2       4 * 2       100%
  3      discrete variable  int[0..3]  p.y   2      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      3      10        20          20          100%

Applying variable ordering:
  Applying 4 orderers, sequentially:
    Applying model variable order:
      Effect: both

    Applying DCSH algorithm:
      Metric: wes
      Relations: legacy
      Effect: var-order
      Number of hyper-edges: 5

      Applying Weighted Cuthill-McKee algorithm:
        Node finder: george-liu
        Relations: legacy
        Effect: var-order
        Number of graph edges: 2

        Total span:   3 (total)   0.60 (avg/edge) / WES:   0.488889 (total)   0.097778 (avg/edge) [before]
        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

      Found new best variable order.

      Applying Sloan algorithm:
        Relations: legacy
        Effect: var-order
        Number of graph edges: 2

        Total span:   3 (total)   0.60 (avg/edge) / WES:   0.488889 (total)   0.097778 (avg/edge) [before]
        Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

      Applying 2 orderers, sequentially:
        Applying Weighted Cuthill-McKee algorithm:
          Node finder: george-liu
          Relations: legacy
          Effect: var-order
          Number of graph edges: 2

          Total span:   3 (total)   0.60 (avg/edge) / WES:   0.488889 (total)   0.097778 (avg/edge) [before]
          Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 5

          Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
          Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [reversed]

      Applying 2 orderers, sequentially:
        Applying Sloan algorithm:
          Relations: legacy
          Effect: var-order
          Number of graph edges: 2

          Total span:   3 (total)   0.60 (avg/edge) / WES:   0.488889 (total)   0.097778 (avg/edge) [before]
          Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [after]

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 5

          Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [before]
          Total span:   2 (total)   0.40 (avg/edge) / WES:   0.400000 (total)   0.080000 (avg/edge) [reversed]

    Applying FORCE algorithm:
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 3
      Maximum number of iterations: 20

      Total span:   2 (total)   0.67 (avg/edge) / WES:   0.518519 (total)   0.172840 (avg/edge) [before]
      Total span:   2 (total)   0.67 (avg/edge) / WES:   0.518519 (total)   0.172840 (avg/edge) [iteration 1]
      Total span:   2 (total)   0.67 (avg/edge) / WES:   0.518519 (total)   0.172840 (avg/edge) [after]

    Applying sliding window algorithm:
      Size: 4
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 3
      Window length: 3

      Total span:   2 (total)   0.67 (avg/edge) / WES:   0.518519 (total)   0.172840 (avg/edge) [before]
      Total span:   2 (total)   0.67 (avg/edge) / WES:   0.518519 (total)   0.172840 (avg/edge) [after]

Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..3]  p.x   0      2 * 2     4 * 2       4 * 2       100%
  2      location pointer   n/a        p     1      1 * 2     2 * 2       2 * 2       100%
  3      discrete variable  int[0..3]  p.y   2      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      3      10        20          20          100%

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             p.x = 0
Initial   (discrete variable 2):             p.y = 0
Initial   (discrete variables):              p.x = 0 and p.y = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p.a
Initial   (auts/locs init predicate):        p.a
Initial   (uncontrolled system):             p.x = 0 and (p.a and p.y = 0)
Initial   (system, combined init/plant inv): p.x = 0 and (p.a and p.y = 0)
Initial   (system, combined init/state inv): p.x = 0 and (p.a and p.y = 0)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p.x = 0 and (p.b and p.y = 1) or p.x = 2 and (p.b and p.y = 2) or (p.x = 1 and (p.b and p.y = 2) or p.x = 3 and (p.b and p.y = 3))
Marked    (auts/locs marker predicate):      p.x = 0 and (p.b and p.y = 1) or p.x = 2 and (p.b and p.y = 2) or (p.x = 1 and (p.b and p.y = 2) or p.x = 3 and (p.b and p.y = 3))
Marked    (uncontrolled system):             p.x = 0 and (p.b and p.y = 1) or p.x = 2 and (p.b and p.y = 2) or (p.x = 1 and (p.b and p.y = 2) or p.x = 3 and (p.b and p.y = 3))
Marked    (system, combined mark/plant inv): p.x = 0 and (p.b and p.y = 1) or p.x = 2 and (p.b and p.y = 2) or (p.x = 1 and (p.b and p.y = 2) or p.x = 3 and (p.b and p.y = 3))
Marked    (system, combined mark/state inv): p.x = 0 and (p.b and p.y = 1) or p.x = 2 and (p.b and p.y = 2) or (p.x = 1 and (p.b and p.y = 2) or p.x = 3 and (p.b and p.y = 3))

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: inc_x) (guard: p.a) (assignments: p.x := p.x + 1)
    Edge: (event: inc_y) (guard: p.a) (assignments: p.y := p.y + 1)
    Edge: (event: done) (guard: p.a) (assignments: p := p.b)

Restricting edge guards to prevent runtime errors:
  Edge: (event: inc_x) (guard: p.a -> (p.x = 0 or p.x = 2) and p.a or p.x = 1 and p.a) (assignments: p.x := p.x + 1)
  Edge: (event: inc_y) (guard: p.a -> (p.b or p.y != 3) and p.a) (assignments: p.y := p.y + 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p.x = 0 and (p.a and p.y = 0).

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.x = 0 and (p.b and p.y = 1) or p.x = 2 and (p.b and p.y = 2) or (p.x = 1 and (p.b and p.y = 2) or p.x = 3 and (p.b and p.y = 3)) [marker predicate]
Backward controlled-behavior: p.x = 0 and p.a or p.x = 0 and (p.b and p.y = 1) or (p.x = 2 and p.a or p.x = 2 and (p.b and p.y = 2)) or (p.x = 1 and p.a or p.x = 1 and (p.b and p.y = 2) or (p.x = 3 and p.a or p.x = 3 and (p.b and p.y = 3))) [fixed point].
Controlled behavior: true -> p.x = 0 and p.a or p.x = 0 and (p.b and p.y = 1) or (p.x = 2 and p.a or p.x = 2 and (p.b and p.y = 2)) or (p.x = 1 and p.a or p.x = 1 and (p.b and p.y = 2) or (p.x = 3 and p.a or p.x = 3 and (p.b and p.y = 3))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.x != 0 or p.b) and (p.x != 0 or (p.a or p.y != 1)) and ((p.x != 2 or p.b) and (p.x != 2 or (p.a or p.y != 2))) and ((p.x != 1 or p.b) and (p.x != 1 or (p.a or p.y != 2)) and ((p.x != 3 or p.b) and (p.x != 3 or (p.a or p.y != 3)))) [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.x = 0 and (p.a and p.y = 0) [initialization predicate]
Forward controlled-behavior: p.x = 0 and p.a or p.x = 0 and (p.b and p.y = 1) or (p.x = 2 and p.a or p.x = 2 and (p.b and p.y = 2)) or (p.x = 1 and p.a or p.x = 1 and (p.b and p.y = 2) or (p.x = 3 and p.a or p.x = 3 and (p.b and p.y = 3))) [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: done) (guard: p.a) (assignments: p := p.b): guard: p.a -> p.x = 0 and (p.a and p.y = 1) or p.x = 2 and (p.a and p.y = 2) or (p.x = 1 and (p.a and p.y = 2) or p.x = 3 and (p.a and p.y = 3)).

Final synthesis result:
  State: (controlled-behavior: p.x = 0 and p.a or p.x = 0 and (p.b and p.y = 1) or (p.x = 2 and p.a or p.x = 2 and (p.b and p.y = 2)) or (p.x = 1 and p.a or p.x = 1 and (p.b and p.y = 2) or (p.x = 3 and p.a or p.x = 3 and (p.b and p.y = 3))))
    Edge: (event: inc_x) (guard: p.a -> (p.x = 0 or p.x = 2) and p.a or p.x = 1 and p.a) (assignments: p.x := p.x + 1)
    Edge: (event: inc_y) (guard: p.a -> (p.b or p.y != 3) and p.a) (assignments: p.y := p.y + 1)
    Edge: (event: done) (guard: p.a -> p.x = 0 and (p.a and p.y = 1) or p.x = 2 and (p.a and p.y = 2) or (p.x = 1 and (p.a and p.y = 2) or p.x = 3 and (p.a and p.y = 3))) (assignments: p := p.b)

Controlled system: exactly 20 states.

Initial (synthesis result):            p.x = 0 and p.a or p.x = 0 and (p.b and p.y = 1) or (p.x = 2 and p.a or p.x = 2 and (p.b and p.y = 2)) or (p.x = 1 and p.a or p.x = 1 and (p.b and p.y = 2) or (p.x = 3 and p.a or p.x = 3 and (p.b and p.y = 3)))
Initial (uncontrolled system):         p.x = 0 and (p.a and p.y = 0)
Initial (controlled system):           p.x = 0 and (p.a and p.y = 0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event inc_x: guard: (p.x = 0 or p.x = 2) and p.a or p.x = 1 and p.a -> p.x != 3 [assume p.a].
  Event inc_y: guard: (p.b or p.y != 3) and p.a -> p.y != 3 [assume p.a].
  Event done: guard: p.x = 0 and (p.a and p.y = 1) or p.x = 2 and (p.a and p.y = 2) or (p.x = 1 and (p.a and p.y = 2) or p.x = 3 and (p.a and p.y = 3)) -> p.x = 0 and p.y = 1 or p.x = 2 and p.y = 2 or (p.x = 1 and p.y = 2 or p.x = 3 and p.y = 3) [assume p.a].

Constructing output CIF specification.
Writing output CIF file "datasynth/switch_preds.ctrlsys.real.cif".
