Reading CIF file "datasynth/stats.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        buffer1        0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  buffer1.count  1      2 * 2     4 * 2       4 * 2       100%
  3      location pointer   n/a        buffer3        2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..3]  buffer3.count  3      2 * 2     4 * 2       4 * 2       100%
  5      location pointer   n/a        buffer2        4      1 * 2     2 * 2       2 * 2       100%
  6      discrete variable  int[0..3]  buffer2.count  5      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  Total                                               6      18        36          36          100%

Applying automatic variable ordering:
  Number of hyperedges: 22

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                   13 (total)                 0.59 (avg/edge) [before]
    Total span:                   13 (total)                 0.59 (avg/edge) [iteration 1]
    Total span:                   13 (total)                 0.59 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   13 (total)                 0.59 (avg/edge) [before]
    Total span:                   12 (total)                 0.55 (avg/edge) [window 2..5]
    Total span:                   12 (total)                 0.55 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        buffer1        0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  buffer1.count  1      2 * 2     4 * 2       4 * 2       100%
  3      discrete variable  int[0..3]  buffer3.count  2      2 * 2     4 * 2       4 * 2       100%
  4      location pointer   n/a        buffer3        3      1 * 2     2 * 2       2 * 2       100%
  5      discrete variable  int[0..3]  buffer2.count  4      2 * 2     4 * 2       4 * 2       100%
  6      location pointer   n/a        buffer2        5      1 * 2     2 * 2       2 * 2       100%
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  Total                                               6      18        36          36          100%

Starting data-based synthesis.

Invariant (component state req invariant):   buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)
Invariant (components state req invariant):  buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)

Initial   (discrete variable 1):             buffer1.count = 0
Initial   (discrete variable 2):             buffer3.count = 0
Initial   (discrete variable 4):             buffer2.count = 0
Initial   (discrete variables):              buffer1.count = 0 and (buffer3.count = 0 and buffer2.count = 0)
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         buffer1.add
Initial   (aut/locs init predicate):         buffer3.add
Initial   (aut/locs init predicate):         buffer2.add
Initial   (auts/locs init predicate):        buffer1.add and (buffer3.add and buffer2.add)
Initial   (uncontrolled system):             buffer1.add and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add))
Initial   (system, combined init/req inv):   buffer1.add and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add))

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined marked/req inv): buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove)
    Edge: (event: buffer1.u_switch_loc) (guard: buffer1.remove and (buffer1.add or buffer1.count != 0)) (assignments: buffer1 := buffer1.add)
    Edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove)
    Edge: (event: buffer3.u_switch_loc) (guard: buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3 := buffer3.add)
    Edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
    Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
    Edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove) (assignments: buffer2.count := buffer2.count - 1)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3).

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) [restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Backward reachability: iteration 1.
Backward controlled-behavior: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: buffer1.count = 3 and (buffer3.count = 3 and buffer2.count = 3) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) -> buffer1.count = 0 and buffer3.count = 0 and (buffer3.add and (buffer2.count = 0 and buffer2.add)) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.count = 0 and buffer3.count = 0 and (buffer3.add and (buffer2.count = 0 and buffer2.add)) -> buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 and buffer3.count = 1) and (buffer3.add and (buffer2.count = 0 and buffer2.add))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 0 and buffer2.add)) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 and buffer3.count = 1) and (buffer3.add and (buffer2.count = 0 and buffer2.add))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and buffer2.count = 0) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and buffer2.count = 0) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add))) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and buffer2.count = 0) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or buffer1.remove and (buffer1.count = 0 and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add)))) [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 2.
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add))) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and buffer2.count = 0) or buffer1.remove and buffer1.count = 0 and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and buffer1.count = 0 and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or buffer1.remove and (buffer1.count = 0 and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add)))) -> (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 0 and (buffer2.count = 1 and buffer2.add) or ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1 and (buffer3.add and buffer2.count = 0) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1 and (buffer3.add and (buffer2.count = 1 and buffer2.add))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 0 and (buffer2.count = 1 and buffer2.add) or ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1 and (buffer3.add and buffer2.count = 0) or (buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1 and (buffer3.add and (buffer2.count = 1 and buffer2.add))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and buffer2.count = 0) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)))) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or (buffer1.add and (buffer1.count = 1 and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add))))) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and buffer2.count = 0) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0))) or (buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)))) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or (buffer1.add and (buffer1.count = 1 and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer3.add and buffer2.count = 0)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 1) and (buffer3.add and (buffer2.count = 1 and buffer2.add))))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 1 and buffer2.add)) or buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0)) or (buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 1 and buffer2.add)))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 1 and buffer2.add)) or buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0)) or (buffer1.add and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and buffer2.count = 0) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and ((buffer3.count = 0 or buffer3.count = 1) and (buffer2.count = 1 and buffer2.add)))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 2 and (buffer3.add and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 2) and (buffer3.add and (buffer2.count = 1 and buffer2.add))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and buffer2.count = 0) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer1.add and buffer1.count = 1 and (buffer3.count = 2 and (buffer3.add and buffer2.count = 0))))) or (buffer1.add and (buffer1.count = 1 and buffer3.count = 2) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and buffer2.count = 0) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 1 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 2 and (buffer3.add and buffer2.count = 0)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 2) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and buffer2.count = 0) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer2.count = 1 and buffer2.add)))))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 2 and (buffer3.add and buffer2.count = 0)) or buffer1.add and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 2) and (buffer3.add and (buffer2.count = 1 and buffer2.add))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and buffer2.count = 0) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 1 and buffer2.add)) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and buffer2.count = 0) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer1.add and buffer1.count = 1 and (buffer3.count = 2 and (buffer3.add and buffer2.count = 0))))) or (buffer1.add and (buffer1.count = 1 and buffer3.count = 2) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and buffer2.count = 0) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 1 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and buffer2.count = 0)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 2 and (buffer3.add and buffer2.count = 0)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 1) and buffer3.count = 2) and (buffer3.add and (buffer2.count = 1 and buffer2.add)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and buffer2.count = 0) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer2.count = 1 and buffer2.add)))))) -> buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 2 and (buffer3.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 2 and (buffer3.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 2 and (buffer3.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 2 and (buffer3.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or buffer1.add and buffer1.count = 1 and (buffer3.count = 0 and (buffer2.count = 0 or buffer2.count = 1))) or (buffer1.add and buffer1.count = 1 and (buffer3.count = 2 and (buffer3.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.add and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 2 and (buffer3.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 1) and (buffer3.count = 1 and (buffer2.count = 0 or buffer2.count = 1))))) -> <bdd 11n 27p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 11n 27p> -> (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 0 or (buffer2.count != 2 or buffer2.add))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 0 or buffer2.count != 3)) and ((buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 2) or (buffer3.remove or (buffer2.count != 2 or buffer2.add))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 2 or (buffer3.remove or buffer2.count != 3)))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 2 or buffer3.add)) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 1 or (buffer2.count != 2 or buffer2.add))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 3)) and (buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 3)))) and ((buffer1.count != 1 or buffer3.count != 0 or (buffer2.count != 2 or buffer2.add)) and (buffer1.count != 1 or (buffer3.count != 0 or buffer2.count != 3)) and ((buffer1.count != 1 or buffer3.count != 2 or (buffer3.remove or (buffer2.count != 2 or buffer2.add))) and (buffer1.count != 1 or buffer3.count != 2 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.count != 1 or (buffer3.count != 2 or buffer3.add)) and (buffer1.count != 1 or buffer3.count != 1 or (buffer2.count != 2 or buffer2.add)) and ((buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 3)) and ((buffer1.count != 1 or buffer3.count != 3) and buffer1.count != 3)))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 0 or (buffer2.count != 2 or buffer2.add))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 0 or buffer2.count != 3)) and ((buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 2) or (buffer3.remove or (buffer2.count != 2 or buffer2.add))) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 2 or (buffer3.remove or buffer2.count != 3)))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 2 or buffer3.add)) and (buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 1 or (buffer2.count != 2 or buffer2.add))) and ((buffer1.count = 1 or buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 3)) and (buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 3)))) and ((buffer1.count != 1 or buffer3.count != 0 or (buffer2.count != 2 or buffer2.add)) and (buffer1.count != 1 or (buffer3.count != 0 or buffer2.count != 3)) and ((buffer1.count != 1 or buffer3.count != 2 or (buffer3.remove or (buffer2.count != 2 or buffer2.add))) and (buffer1.count != 1 or buffer3.count != 2 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.count != 1 or (buffer3.count != 2 or buffer3.add)) and (buffer1.count != 1 or buffer3.count != 1 or (buffer2.count != 2 or buffer2.add)) and ((buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 3)) and ((buffer1.count != 1 or buffer3.count != 3) and buffer1.count != 3)))) -> <bdd 11n 27p> [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: <bdd 11n 27p> -> (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)) and ((buffer1.remove or buffer3.count != 1 or (buffer2.count != 2 or buffer2.add)) and (buffer1.remove or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.remove or buffer3.count != 3) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.count != 2 or buffer2.add))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 1 or (buffer2.count != 2 or buffer2.add))))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 3))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 3)) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or (buffer2.count != 2 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 3)) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)) and ((buffer1.remove or buffer3.count != 1 or (buffer2.count != 2 or buffer2.add)) and (buffer1.remove or (buffer3.count != 1 or buffer2.count != 3))) and ((buffer1.remove or buffer3.count != 3) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.count != 2 or buffer2.add))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 1 or (buffer2.count != 2 or buffer2.add))))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 3))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 3)) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or (buffer2.count != 2 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 3)) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 3)) and (buffer1.add or buffer1.count != 3)))) -> <bdd 10n 27p> [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: <bdd 10n 27p> -> (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)) and ((buffer1.remove or (buffer3.count != 1 or buffer2.count != 3)) and (buffer1.remove or buffer3.count != 3 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.remove or (buffer3.count != 3 or buffer3.add)) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 3 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 3 or buffer3.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 3)) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 3 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 3 or buffer3.add)) and (buffer1.add or buffer1.count != 3)))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)) and ((buffer1.remove or (buffer3.count != 1 or buffer2.count != 3)) and (buffer1.remove or buffer3.count != 3 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.remove or (buffer3.count != 3 or buffer3.add)) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 3))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 3 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 3 or buffer3.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 3)) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 3 or (buffer3.remove or buffer2.count != 3))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 3 or buffer3.add)) and (buffer1.add or buffer1.count != 3)))) -> <bdd 16n 44p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 16n 44p> [fixed point].
Controlled behavior: buffer1.count != 3 or (buffer3.count != 3 or buffer2.count != 3) -> <bdd 16n 44p>.

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> <bdd 16n 44p> [restricted to current/previous controlled-behavior predicate: <bdd 16n 44p>]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 16n 44p> [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 16n 21p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: buffer1.c_add) (guard: buffer1.add) (assignments: buffer1.count := buffer1.count + 1): guard: buffer1.add -> <bdd 15n 26p>.
Edge (event: buffer1.c_remove) (guard: buffer1.remove) (assignments: buffer1.count := buffer1.count - 1): guard: buffer1.remove -> buffer1.remove and (buffer1.add or buffer1.count != 0) and ((buffer1.add or (buffer1.count != 2 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or buffer1.count != 2 or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or (buffer1.count != 2 or buffer3.count != 3) or (buffer3.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or buffer1.count != 2 or (buffer3.count != 3 or buffer3.add)) and (buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count != 3 or buffer3.remove or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or (buffer3.count != 3 or buffer3.add)))))).
Edge (event: buffer3.c_add) (guard: buffer3.add) (assignments: buffer3.count := buffer3.count + 1): guard: buffer3.add -> <bdd 16n 32p>.
Edge (event: buffer3.c_remove) (guard: buffer3.remove) (assignments: buffer3.count := buffer3.count - 1): guard: buffer3.remove -> (buffer1.remove or buffer3.count != 0) and (buffer1.remove or (buffer3.count != 2 or buffer3.remove)) and ((buffer1.remove or buffer3.count != 2 or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.remove or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer1.remove or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 0)) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 2 or buffer3.remove))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 0)) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 2 or buffer3.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 2) or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 3)))).
Edge (event: buffer2.c_add) (guard: buffer2.add) (assignments: buffer2.count := buffer2.count + 1): guard: buffer2.add -> <bdd 14n 29p>.
Edge (event: buffer2.c_remove) (guard: buffer2.remove) (assignments: buffer2.count := buffer2.count - 1): guard: buffer2.remove -> buffer1.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove) or buffer1.add and (buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) or (buffer1.add and buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove) or buffer1.add and buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.add and buffer3.count = 3 and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or buffer1.add and buffer3.count = 3 and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove))))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 3) and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 3) and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove))) or (buffer1.remove and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and buffer1.count = 1 and (buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.remove and (buffer1.count = 1 and buffer3.count = 3) and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or buffer1.remove and (buffer1.count = 1 and buffer3.count = 3) and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)))))).

Final synthesis result:
  State: (controlled-behavior: <bdd 16n 44p>)
    Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.remove or buffer1.count != 3) and buffer1.add) (assignments: buffer1 := buffer1.remove)
    Edge: (event: buffer1.u_switch_loc) (guard: buffer1.remove and (buffer1.add or buffer1.count != 0)) (assignments: buffer1 := buffer1.add)
    Edge: (event: buffer1.c_add) (guard: buffer1.add -> <bdd 15n 26p>) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.remove and (buffer1.add or buffer1.count != 0) and ((buffer1.add or (buffer1.count != 2 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or buffer1.count != 2 or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or (buffer1.count != 2 or buffer3.count != 3) or (buffer3.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or buffer1.count != 2 or (buffer3.count != 3 or buffer3.add)) and (buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count != 3 or buffer3.remove or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or (buffer3.count != 3 or buffer3.add))))))) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.count = 0 or buffer3.count = 2) and buffer3.add or buffer3.count = 1 and buffer3.add) (assignments: buffer3 := buffer3.remove)
    Edge: (event: buffer3.u_switch_loc) (guard: buffer3.count = 2 and buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) and buffer3.remove) (assignments: buffer3 := buffer3.add)
    Edge: (event: buffer3.c_add) (guard: buffer3.add -> <bdd 16n 32p>) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> (buffer1.remove or buffer3.count != 0) and (buffer1.remove or (buffer3.count != 2 or buffer3.remove)) and ((buffer1.remove or buffer3.count != 2 or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.remove or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer1.remove or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 0)) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 2 or buffer3.remove))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 0)) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 2 or buffer3.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 2) or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 3))))) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
    Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
    Edge: (event: buffer2.c_add) (guard: buffer2.add -> <bdd 14n 29p>) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> buffer1.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove) or buffer1.add and (buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) or (buffer1.add and buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove) or buffer1.add and buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.add and buffer3.count = 3 and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or buffer1.add and buffer3.count = 3 and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove))))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 3) and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 3) and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove))) or (buffer1.remove and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and buffer1.count = 1 and (buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.remove and (buffer1.count = 1 and buffer3.count = 3) and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or buffer1.remove and (buffer1.count = 1 and buffer3.count = 3) and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove))))))) (assignments: buffer2.count := buffer2.count - 1)

Controlled system:                     exactly 342 states.

Initial (synthesis result):            <bdd 16n 44p>
Initial (uncontrolled system):         buffer1.add and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add))
Initial (controlled system):           buffer1.add and (buffer1.count = 0 and buffer3.count = 0) and (buffer3.add and (buffer2.count = 0 and buffer2.add))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event buffer1.c_add: guard: <bdd 15n 26p> -> <bdd 14n 26p> [assume buffer1.add].
  Event buffer1.c_remove: guard: buffer1.remove and (buffer1.add or buffer1.count != 0) and ((buffer1.add or (buffer1.count != 2 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or buffer1.count != 2 or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or (buffer1.count != 2 or buffer3.count != 3) or (buffer3.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or buffer1.count != 2 or (buffer3.count != 3 or buffer3.add)) and (buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count = 1 or buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count = 0 or buffer1.count = 2) or (buffer3.count != 3 or buffer3.remove or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count = 0 or (buffer1.count = 2 or (buffer3.count != 3 or buffer3.add)))))) -> buffer1.count != 0 and (buffer1.count != 2 or buffer3.count = 1 or (buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.count != 2 or buffer3.count != 1 or (buffer2.count != 3 or buffer2.add)) and (buffer1.count != 2 or buffer3.count != 3 or (buffer3.remove or (buffer2.count != 3 or buffer2.add)))) and ((buffer1.count != 2 or (buffer3.count != 3 or buffer3.add)) and (buffer1.count = 0 or (buffer1.count = 2 or buffer3.count = 1) or (buffer3.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.count = 0 or buffer1.count = 2 or (buffer3.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.count = 0 or (buffer1.count = 2 or buffer3.count != 3) or (buffer3.remove or (buffer2.count != 3 or buffer2.add))) and (buffer1.count = 0 or buffer1.count = 2 or (buffer3.count != 3 or buffer3.add))))) [assume buffer1.remove].
  Event buffer3.c_add: guard: <bdd 16n 32p> -> <bdd 14n 32p> [assume buffer3.add].
  Event buffer3.c_remove: guard: (buffer1.remove or buffer3.count != 0) and (buffer1.remove or (buffer3.count != 2 or buffer3.remove)) and ((buffer1.remove or buffer3.count != 2 or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.remove or buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer1.remove or (buffer3.count = 0 or buffer3.count = 2) or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 0)) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 2 or buffer3.remove))) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 0)) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 2 or buffer3.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count != 2) or (buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 0 or (buffer3.count = 2 or buffer3.remove))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 0) or (buffer3.count = 2 or buffer3.add or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 3)))) -> (buffer1.remove or buffer3.count != 0) and (buffer1.remove or buffer3.count != 2 or (buffer2.count != 3 or buffer2.add)) and ((buffer1.remove or buffer3.count = 0 or (buffer3.count = 2 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or buffer3.count != 0)) and (buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 2 or (buffer2.count != 3 or buffer2.add))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 0 or buffer3.count = 2 or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or (buffer1.count != 1 or buffer3.count != 0)) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 2 or (buffer2.count != 3 or buffer2.add))) and ((buffer1.add or (buffer1.count != 1 or buffer3.count = 0) or (buffer3.count = 2 or (buffer2.count != 3 or buffer2.add))) and (buffer1.add or buffer1.count != 3)))) [assume buffer3.remove].
  Event buffer2.c_add: guard: <bdd 14n 29p> -> <bdd 13n 29p> [assume buffer2.add].
  Event buffer2.c_remove: guard: buffer1.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove) or buffer1.add and (buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) or (buffer1.add and buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove) or buffer1.add and buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.add and buffer3.count = 3 and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or buffer1.add and buffer3.count = 3 and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove))))) or (buffer1.remove and (buffer1.count = 0 or buffer1.count = 2) and (buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 3) and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and ((buffer1.count = 0 or buffer1.count = 2) and buffer3.count = 3) and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and (buffer2.count = 2 and buffer2.remove))) or (buffer1.remove and buffer1.count = 1 and ((buffer3.count = 0 or buffer3.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer1.remove and buffer1.count = 1 and (buffer3.count = 1 and (buffer2.count = 2 and buffer2.remove)) or (buffer1.remove and buffer1.count = 1 and (buffer3.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer1.remove and (buffer1.count = 1 and buffer3.count = 3) and (buffer3.add and (buffer2.count = 2 and buffer2.remove)) or buffer1.remove and (buffer1.count = 1 and buffer3.count = 3) and (buffer3.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)))))) -> (buffer1.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 0)) and ((buffer1.remove or (buffer3.count != 1 or buffer2.count != 0)) and (buffer1.remove or buffer3.count != 3 or (buffer3.remove or buffer2.count != 0))) and ((buffer1.remove or (buffer3.count != 3 or buffer3.add)) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 0))) and (buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 1 or buffer2.count != 0))))) and ((buffer1.add or (buffer1.count = 1 or buffer1.count = 3) or (buffer3.count != 3 or (buffer3.remove or buffer2.count != 0))) and ((buffer1.add or buffer1.count = 1 or (buffer1.count = 3 or (buffer3.count != 3 or buffer3.add))) and (buffer1.add or buffer1.count != 1 or (buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 0)))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 1 or buffer2.count != 0)) and (buffer1.add or buffer1.count != 1 or (buffer3.count != 3 or (buffer3.remove or buffer2.count != 0))) and ((buffer1.add or buffer1.count != 1 or (buffer3.count != 3 or buffer3.add)) and (buffer1.add or buffer1.count != 3)))) [assume buffer2.remove].

Constructing output CIF specification.

Continuous node statistics
--------------------------
Operations Used BDD nodes
0          6
0          6
0          14
1          15
1          15
2          16
2          24
3          25
3          25
4          26
4          30
4          30
4          38
5          39
5          39
6          40
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
6          44
7          45
8          46
9          47
10         48
11         49
12         50
13         51
14         52
14         52
15         53
16         54
17         55
18         56
19         57
20         58
21         59
22         60
23         60
23         60
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
25         61
26         61
26         61
28         62
28         62
28         62
28         62
28         62
28         62
28         62
28         62
30         64
30         64
30         64
30         64
30         64
30         64
31         65
31         65
32         65
32         65
34         66
34         66
34         66
34         66
34         66
34         66
34         66
34         66
38         70
38         68
38         68
38         68
38         68
38         68
40         70
40         69
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
48         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
49         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
50         77
51         77
51         77
51         77
51         77
53         78
53         78
55         80
55         80
55         79
55         79
63         84
63         84
68         88
68         87
71         89
71         89
71         87
71         87
71         87
71         87
71         87
71         87
71         87
71         87
71         87
71         87
71         87
71         87
76         90
76         90
82         96
82         96
82         93
82         93
104        107
104        104
132        131
132        128
146        135
146        132
167        130
167        130
188        136
188        120
188        120
188        120
188        120
188        120
188        120
188        120
188        120
188        120
188        120
188        119
188        116
188        113
188        113
188        113
188        113
188        113
198        114
198        114
198        114
198        114
242        130
242        127
242        126
242        126
287        141
287        131
287        119
287        119
310        126
310        126
320        125
320        122
320        117
320        114
320        101
320        89
320        82
320        82
320        82
320        82
320        82
320        82
322        82
322        82
323        82
323        82
323        82
323        82
326        83
326        83
328        84
328        84
328        83
328        83
328        83
328        83
329        84
329        84
329        84
329        84
330        84
330        84
330        84
330        84
330        84
330        84
330        84
330        84
333        85
333        85
339        89
339        88
340        89
340        89
340        89
340        89
340        89
340        89
343        90
343        90
349        94
349        93
356        100
356        95
356        95
356        95
356        95
356        95
359        96
359        96
372        109
372        98
372        98
372        98
375        99
375        99
381        103
381        102
397        118
397        104
397        104
397        104
397        104
397        104
400        105
400        105
422        127
422        107
422        107
422        107
422        107
422        107
424        107
424        107
424        107
424        107
426        107
426        107
426        107
426        107
428        108
428        108
428        108
428        108
428        108
429        109
429        109
429        109
429        109
430        109
430        109
430        109
430        109
430        109
430        109
430        109
430        109
430        110
430        110
430        114
430        113
431        114
431        114
431        114
431        114
431        114
431        114
431        115
431        115
431        119
431        118
432        125
432        120
432        120
432        120
432        120
432        120
432        121
432        121
434        134
434        123
434        123
434        123
434        124
434        124
434        128
434        127
435        143
435        129
435        129
435        129
435        129
435        129
435        129
435        129
436        130
436        110
436        110
436        110
436        110
436        110
436        110
436        110
437        110
437        110
437        110
437        110
437        110
437        110
439        111
439        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
440        111
443        112
443        112
450        118
450        117
455        119
455        116
455        116
455        116
455        116
455        116
455        116
455        116
455        116
455        115
455        115
455        115
455        115
455        115
458        116
458        116
461        119
461        119
461        118
461        118
461        119
461        119
461        123
461        122
467        132
467        124
467        124
467        124
467        124
467        124
467        125
467        125
473        141
473        127
473        127
473        127
473        128
473        128
473        132
473        131
479        150
479        133
479        133
479        133
479        133
479        133
479        133
479        133
485        139
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
485        116
486        117
486        117
487        117
487        117
487        117
487        117
487        117
487        117
487        117
487        117
487        117
487        118
487        118
490        124
490        123
490        122
490        122
490        122
490        122
490        121
490        121
490        121
490        121
490        122
490        122
493        125
493        125
493        124
493        124
493        125
493        125
493        129
493        128
499        138
499        130
499        130
499        130
499        130
499        130
499        131
499        131
505        147
505        133
505        133
505        133
505        134
505        134
505        138
505        137
511        156
511        139
511        139
511        139
511        139
511        139
511        139
511        139
517        145
517        122
517        122
517        122
517        122
517        122
518        122
518        122
518        122
518        122
521        123
521        123
523        124
523        124
523        123
523        123
523        123
523        123
525        125
525        125
525        124
525        124
526        124
526        124
526        124
526        124
526        124
526        124
526        124
526        124
526        125
526        125
529        128
529        128
529        127
529        127
529        128
529        128
529        132
529        131
538        140
538        137
538        133
538        133
538        133
538        133
538        134
538        134
538        138
538        137
553        152
553        143
553        139
553        139
553        139
553        139
553        140
553        140
553        144
553        143
568        159
568        144
568        144
568        144
568        144
568        144
568        144
568        144
583        159
583        139
583        139
583        139
583        139
583        139
585        139
585        139
585        139
585        139
587        139
587        139
587        139
587        139
589        140
589        140
589        140
589        140
589        140
591        142
591        142
591        141
591        141
592        141
592        141
592        141
592        141
592        141
592        141
592        141
592        141
592        142
592        142
595        145
595        145
595        144
595        144
595        145
595        145
595        149
595        148
604        157
604        154
604        150
604        150
604        150
604        150
604        151
604        151
604        155
604        154
619        169
619        160
619        156
619        156
619        156
619        156
619        157
619        157
619        161
619        160
634        176
634        161
634        161
634        161
634        161
634        161
634        161
634        161
649        176
649        156
649        156
649        156
649        156
649        156
649        156
649        156
650        156
650        156
650        156
650        156
650        156
650        156
652        157
652        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
653        157
656        158
656        158
663        164
663        163
668        166
668        163
668        162
668        162
668        162
668        162
668        162
668        162
668        162
668        161
668        161
668        161
668        161
668        161
668        162
668        162
671        165
671        165
671        164
671        164
671        165
671        165
671        169
671        168
680        177
680        174
680        170
680        170
680        170
680        170
680        171
680        171
692        187
692        173
692        173
692        173
692        174
692        174
692        178
692        177
704        196
704        179
704        179
704        179
704        179
704        179
704        179
704        179
716        191
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
716        168
717        169
717        169
718        169
718        169
718        169
718        169
718        169
718        169
718        169
718        169
718        169
718        170
718        170
721        176
721        175
721        174
721        174
721        174
721        174
721        173
721        173
721        173
721        173
721        174
721        174
724        177
724        177
724        176
724        176
724        177
724        177
724        181
724        180
733        189
733        186
733        182
733        182
733        182
733        182
733        183
733        183
745        199
745        185
745        185
745        185
745        186
745        186
745        190
745        189
757        208
757        191
757        191
757        191
757        191
757        191
757        191
757        191
769        203
769        180
769        180
769        180
769        180
769        180
770        180
770        180
770        180
770        180
770        181
770        181
770        181
770        181
770        180
770        180
770        180
770        180
772        181
772        181
772        181
772        181
773        181
773        181
773        181
773        181
773        181
773        181
773        181
773        181
773        182
773        182
776        185
776        185
776        184
776        184
776        185
776        185
776        189
776        188
785        197
785        194
785        190
785        190
785        190
785        190
785        191
785        191
785        195
785        194
800        209
800        200
800        196
800        196
800        196
800        196
800        197
800        197
818        215
818        200
818        199
818        199
818        200
818        200
818        204
818        203
841        226
841        208
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
841        204
843        205
843        205
843        205
843        205
843        205
844        206
844        206
844        205
844        205
845        205
845        205
845        205
845        205
845        205
845        205
845        205
845        205
845        206
845        206
848        209
848        209
848        208
848        208
848        209
848        209
848        213
848        212
857        221
857        218
857        214
857        214
857        214
857        214
857        215
857        215
857        219
857        218
872        233
872        224
872        220
872        220
872        220
872        220
872        221
872        221
890        239
890        224
890        223
890        223
890        224
890        224
890        228
890        227
914        251
914        233
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        229
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
914        230
917        231
917        231
924        237
924        236
929        238
929        235
929        235
929        235
929        235
929        235
929        235
929        235
929        235
929        234
929        234
929        234
929        234
929        234
929        235
929        235
932        238
932        238
932        237
932        237
932        238
932        238
932        242
932        241
941        250
941        247
941        243
941        243
941        243
941        243
941        244
941        244
941        248
941        247
956        262
956        253
956        249
956        249
956        249
956        249
956        250
956        250
974        268
974        253
974        252
974        252
974        252
974        252
996        273
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
996        250
997        251
997        251
998        251
998        251
998        251
998        251
998        251
998        251
998        251
998        251
998        251
998        252
998        252
1001       258
1001       257
1001       256
1001       256
1001       256
1001       256
1001       255
1001       255
1001       255
1001       255
1001       256
1001       256
1004       259
1004       259
1004       258
1004       258
1004       259
1004       259
1004       263
1004       262
1013       271
1013       268
1013       264
1013       264
1013       264
1013       264
1013       265
1013       265
1013       269
1013       268
1028       283
1028       274
1028       270
1028       270
1028       270
1028       270
1028       271
1028       271
1046       289
1046       274
1046       273
1046       273
1046       273
1046       273
1067       294
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       271
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1067       269
1068       270
1068       270
1069       270
1069       270
1069       269
1069       269
1070       270
1070       270
1070       270
1070       270
1070       269
1070       269
1070       269
1070       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1071       269
1072       270
1072       270
1073       270
1073       270
1073       269
1073       269
1074       270
1074       270
1074       271
1074       271
1074       270
1074       270
1074       270
1074       270
1075       270
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       269
1075       270
1075       270
1076       270
1076       270
1076       269
1076       269
1077       270
1077       270
1077       270
1077       270
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1077       269
1080       269
1081       270
1082       270
1086       269
1091       274
1096       274
1102       269
1106       273
1112       275
1117       274
1122       278
1125       277
1132       277
1155       298
1172       300
1191       303
1222       311
1262       339
1288       342
1316       344
1365       352
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1387       354
1393       359
1421       359
1421       354
1421       354
1421       354
1421       354
1424       354
1424       354
1424       354
1424       359
1447       361
1447       356
1447       356
1449       356
1449       356
1451       356
1451       356
1451       354
1451       359
1456       361
1458       356
1458       356
1460       356
1460       356
1462       356
1462       356
1462       354
1462       359
1467       362
1470       357
1470       354
1472       356
1472       356
1472       356
1472       356
1472       354
1472       359
1497       359
1497       354
1497       354
1497       354
1497       354
1501       354
1501       354
1501       354
1501       359
1528       364
1528       359
1528       359
1533       359
1533       359
1538       359
1538       359
1538       354
1538       359
1565       364
1570       359
1570       359
1573       359
1573       359
1576       359
1576       359
1576       354
1576       359
1603       364
1607       359
1607       354
1610       359
1610       359
1610       359
1610       359
1610       354
1610       359
1653       359
1653       354
1653       354
1653       354
1653       354
1659       354
1659       354
1659       354
1659       359
1703       364
1703       359
1703       359
1709       359
1709       359
1715       359
1715       359
1715       354
1715       359
1759       363
1764       358
1764       358
1768       358
1768       358
1773       358
1773       358
1773       354
1773       359
1817       363
1823       358
1823       354
1828       359
1828       359
1828       359
1828       359
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1828       354
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1833       358
1839       362
1846       362
1846       358
1846       358
1846       358
1846       358
1846       358
1846       362
1868       363
1868       359
1868       359
1869       359
1869       359
1869       358
1869       362
1883       362
1883       358
1883       358
1883       358
1883       358
1883       358
1883       362
1899       367
1899       363
1899       363
1904       363
1904       363
1904       358
1904       362
1927       362
1927       358
1927       358
1927       358
1927       358
1927       358
1927       362
1951       366
1951       362
1951       362
1957       362
1957       362
1957       358
1957       358
1961       358
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1961       354
1968       359
1990       375
1994       378
1999       378
2013       378
2029       390
2045       402
2059       402
2082       402
2106       419
2130       436
2153       436
2170       439
2179       440
2180       432
2180       432
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2180       431
2185       431
2185       431
2185       431
2185       431
2185       431
2190       439
2192       441
2194       434
2194       434
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2194       432
2199       432
2199       432
2199       432
2199       432
2199       432
2216       440
2222       446
2228       443
2228       443
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2228       437
2241       436
2241       436
2241       436
2241       436
2241       436
2258       444
2262       448
2266       444
2266       444
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2266       440
2282       436
2282       436
2282       436
2282       436
2282       436
2311       445
2321       452
2330       449
2330       449
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2330       442
2354       437
2354       437
2354       437
2354       437
2354       437
2384       446
2392       454
2400       453
2400       453
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2400       445
2427       439
2427       439
2427       439
2427       439
2427       439
2427       439
2457       447
2465       448
2467       440
2467       440
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2467       439
2474       448
2476       450
2478       441
2478       441
2478       439
2485       449
2488       452
2491       444
2491       444
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2491       441
2496       450
2498       451
2500       442
2500       442
2500       441
2526       448
2531       453
2539       449
2539       449
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2539       444
2563       450
2567       454
2573       446
2573       446
2573       442
2599       451
2604       456
2609       452
2609       452
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2609       447
2634       452
2638       458
2643       450
2643       450
2643       444
2681       452
2688       459
2696       458
2696       458
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2696       451
2731       455
2736       463
2744       454
2744       454
2744       446
2780       456
2789       464
2798       463
2798       463
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2798       455
2834       457
2839       464
2848       455
2848       455
2848       448
2848       448
2880       449
2889       450
2892       441
2892       441
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2892       440
2900       450
2903       453
2906       443
2906       443
2906       440
2918       449
2920       452
2922       444
2922       444
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2922       441
2930       449
2931       450
2934       442
2934       442
2934       441
2961       449
2967       455
2975       451
2975       451
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
2975       445
3005       453
3011       459
3018       450
3018       450
3018       444
3055       452
3059       457
3064       453
3064       453
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3064       448
3090       451
3093       456
3099       449
3099       449
3099       444
3139       452
3146       459
3154       457
3154       457
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3154       450
3200       455
3204       462
3211       453
3211       453
3211       446
3262       461
3273       474
3285       470
3285       470
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3285       457
3331       459
3335       465
3348       458
3348       458
3348       452
3348       452
3382       452
3389       453
3390       445
3390       445
3390       444
3398       453
3401       456
3405       447
3405       447
3405       444
3427       457
3434       460
3436       447
3436       447
3436       444
3444       451
3445       452
3448       445
3448       445
3448       444
3479       452
3485       458
3495       450
3495       450
3495       444
3529       453
3535       459
3546       450
3546       450
3546       444
3584       458
3592       467
3601       453
3601       453
3601       444
3634       451
3637       456
3645       449
3645       449
3645       444
3684       452
3684       459
3697       451
3697       451
3697       444
3731       453
3731       460
3743       451
3743       451
3743       444
3775       459
3775       472
3787       457
3787       457
3787       444
3787       451
3787       457
3787       450
3787       450
3787       444
3787       444
3787       444
3787       444
3787       441
3787       429
3787       429
3787       429
3787       417
3787       401
3787       401
3787       401
3787       384
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3787       367
3801       381
3838       382
3838       368
3838       368
3841       368
3841       368
3843       368
3843       368
3843       367
3843       381
3861       384
3861       370
3861       370
3865       372
3865       370
3867       370
3867       370
3867       367
3867       381
3872       383
3875       369
3875       369
3883       369
3883       369
3891       369
3891       369
3891       367
3891       381
3897       384
3900       370
3900       370
3903       372
3903       370
3903       370
3903       370
3903       367
3903       381
3935       386
3935       372
3935       372
3945       372
3945       372
3952       372
3952       372
3952       367
3952       381
3987       392
3987       378
3987       378
4000       383
4000       374
4008       374
4008       374
4008       367
4008       381
4043       390
4051       376
4051       376
4057       376
4057       376
4063       376
4063       376
4063       367
4063       381
4099       387
4104       373
4104       373
4110       378
4110       374
4110       374
4110       374
4110       367
4110       381
4161       387
4161       373
4161       373
4174       373
4174       373
4186       373
4186       373
4186       367
4186       381
4238       393
4238       379
4238       379
4252       384
4252       374
4264       374
4264       374
4264       367
4264       381
4314       392
4325       378
4325       378
4331       378
4331       378
4337       378
4337       378
4337       367
4337       381
4387       387
4393       373
4393       373
4399       380
4399       374
4399       374
4399       374
4399       367
4399       367
4399       367
4427       389
4460       392
4460       381
4460       381
4463       381
4463       381
4463       378
4463       389
4481       392
4481       381
4481       381
4485       381
4485       381
4485       378
4485       389
4517       395
4517       384
4517       384
4527       384
4527       384
4527       378
4527       389
4562       398
4562       387
4562       387
4575       387
4575       387
4575       378
4575       389
4622       395
4622       384
4622       384
4633       384
4633       384
4633       378
4633       389
4682       400
4682       389
4682       389
4693       389
4693       389
4693       378
4693       378
4707       378
4707       367
4707       381
4707       383
4707       369
4707       369
4707       369
4707       369
4707       369
4707       368
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       363
4708       377
4708       380
4708       366
4708       366
4708       366
4708       366
4708       361
4708       360
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       355
4709       369
4709       378
4709       364
4709       364
4709       364
4709       363
4709       363
4709       361
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       344
4720       358
4720       364
4720       350
4720       350
4720       350
4720       349
4720       337
4720       335
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       318
4726       332
4726       343
4726       329
4726       329
4726       329
4726       329
4726       329
4726       327
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       301
4739       315
4739       321
4739       307
4739       307
4739       307
4739       306
4739       285
4739       283
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       257
4747       251
4747       251
4747       251
4747       251
4747       235
4747       235
4747       235
4747       235
4747       217
4747       217
4747       217
4747       217
4747       192
4747       192
4747       192
4747       192
4747       166
4747       166
4747       166
4747       166
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4747       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4754       140
4771       148
4771       148
4771       140
4771       140
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4771       133
4772       134
4772       134
4772       134
4772       134
4775       137
4775       137
4775       137
4775       137
4778       140
4778       140
4778       140
4778       142
4778       140
4778       145
4778       140
4778       148
4783       142
4796       146
4811       147
4811       140
4811       139
4811       136
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4811       133
4812       129
4812       129
4812       129
4812       129
4812       129
4812       129
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4813       128
4824       136
4824       136
4824       136
4824       136
4824       136
4824       136
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4830       132
4843       136
4843       136
4843       136
4843       136
4843       136
4843       136
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       132
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126
4851       126

Maximum used BDD nodes: 474.
Writing output CIF file "datasynth/stats.ctrlsys.real.cif".
