Reading CIF file "datasynth/edge_order_forward_random_off.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs).
    CIF variables and location pointers:
        Nr     Kind              Type  Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   Counter   0      3 * 2     6 * 2       8 * 2       75%
        2      location pointer  n/a   Actuator  1      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        Total                                    2      8         16          20          80%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 6

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.166667 (total)   0.027778 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.166667 (total)   0.027778 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.166667 (total)   0.027778 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.166667 (total)   0.027778 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 12
                Maximum number of iterations: 10

                Total span:   2 (total)   0.17 (avg/edge) / WES:   0.166667 (total)   0.013889 (avg/edge) [before]
                Total span:   2 (total)   0.17 (avg/edge) / WES:   0.166667 (total)   0.013889 (avg/edge) [iteration 1]
                Total span:   2 (total)   0.17 (avg/edge) / WES:   0.166667 (total)   0.013889 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 12
                Window length: 2

                Total span:   2 (total)   0.17 (avg/edge) / WES:   0.166667 (total)   0.013889 (avg/edge) [before]
                Total span:   2 (total)   0.17 (avg/edge) / WES:   0.166667 (total)   0.013889 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variables):              true
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         Counter.zero
Initial   (aut/locs init predicate):         Actuator.Off
Initial   (auts/locs init predicate):        Counter.zero and Actuator.Off
Initial   (uncontrolled system):             Counter.zero and Actuator.Off
Initial   (system, combined init/plant inv): Counter.zero and Actuator.Off
Initial   (system, combined init/state inv): Counter.zero and Actuator.Off

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       Counter.zero
Marked    (aut/locs marker predicate):       Actuator.Off
Marked    (auts/locs marker predicate):      Counter.zero and Actuator.Off
Marked    (uncontrolled system):             Counter.zero and Actuator.Off
Marked    (system, combined mark/plant inv): Counter.zero and Actuator.Off
Marked    (system, combined mark/state inv): Counter.zero and Actuator.Off

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "Actuator.on" needs:
    Counter.zero
  Event "Actuator.off" needs:
    Counter.five

Uncontrolled system:
    State: (controlled-behavior: ?)
        Edge: (event: Counter.inc) (guard: Counter.zero) (assignments: Counter := Counter.one)
        Edge: (event: Counter.inc) (guard: Counter.one) (assignments: Counter := Counter.two)
        Edge: (event: Counter.inc) (guard: Counter.two) (assignments: Counter := Counter.three)
        Edge: (event: Counter.inc) (guard: Counter.three) (assignments: Counter := Counter.four)
        Edge: (event: Counter.inc) (guard: Counter.four) (assignments: Counter := Counter.five)
        Edge: (event: Counter.dec) (guard: Counter.one) (assignments: Counter := Counter.zero)
        Edge: (event: Counter.dec) (guard: Counter.two) (assignments: Counter := Counter.one)
        Edge: (event: Counter.dec) (guard: Counter.three) (assignments: Counter := Counter.two)
        Edge: (event: Counter.dec) (guard: Counter.four) (assignments: Counter := Counter.three)
        Edge: (event: Counter.dec) (guard: Counter.five) (assignments: Counter := Counter.four)
        Edge: (event: Actuator.on) (guard: Actuator.Off) (assignments: Actuator := Actuator.On)
        Edge: (event: Actuator.off) (guard: Actuator.On) (assignments: Actuator := Actuator.Off)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: Counter.zero and Actuator.Off.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "Counter" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: Actuator.on) (guard: Actuator.Off) (assignments: Actuator := Actuator.On): guard: Actuator.Off -> Counter.zero and Actuator.Off [state/event exclusion requirement: Counter.zero].
Edge (event: Actuator.off) (guard: Actuator.On) (assignments: Actuator := Actuator.Off): guard: Actuator.On -> Counter.five and Actuator.On [state/event exclusion requirement: Counter.five].

Restricted behavior using state/event exclusion requirements:
    State: (controlled-behavior: true)
        Edge: (event: Counter.inc) (guard: Counter.zero) (assignments: Counter := Counter.one)
        Edge: (event: Counter.inc) (guard: Counter.one) (assignments: Counter := Counter.two)
        Edge: (event: Counter.inc) (guard: Counter.two) (assignments: Counter := Counter.three)
        Edge: (event: Counter.inc) (guard: Counter.three) (assignments: Counter := Counter.four)
        Edge: (event: Counter.inc) (guard: Counter.four) (assignments: Counter := Counter.five)
        Edge: (event: Counter.dec) (guard: Counter.one) (assignments: Counter := Counter.zero)
        Edge: (event: Counter.dec) (guard: Counter.two) (assignments: Counter := Counter.one)
        Edge: (event: Counter.dec) (guard: Counter.three) (assignments: Counter := Counter.two)
        Edge: (event: Counter.dec) (guard: Counter.four) (assignments: Counter := Counter.three)
        Edge: (event: Counter.dec) (guard: Counter.five) (assignments: Counter := Counter.four)
        Edge: (event: Actuator.on) (guard: Actuator.Off -> Counter.zero and Actuator.Off) (assignments: Actuator := Actuator.On)
        Edge: (event: Actuator.off) (guard: Actuator.On -> Counter.five and Actuator.On) (assignments: Actuator := Actuator.Off)

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: Counter.zero and Actuator.Off [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: Counter.zero and Actuator.Off -> (Counter.zero or Counter.one) and Actuator.Off [backward reach with edge: (event: Counter.dec) (guard: Counter.one) (assignments: Counter := Counter.zero), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (Counter.zero or Counter.one) and Actuator.Off -> (Counter.zero or Counter.two) and Actuator.Off or Counter.one and Actuator.Off [backward reach with edge: (event: Counter.dec) (guard: Counter.two) (assignments: Counter := Counter.one), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (Counter.zero or Counter.two) and Actuator.Off or Counter.one and Actuator.Off -> not Counter.four and (not Counter.five and Actuator.Off) [backward reach with edge: (event: Counter.dec) (guard: Counter.three) (assignments: Counter := Counter.two), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: not Counter.four and (not Counter.five and Actuator.Off) -> (Counter.zero or Counter.four) and Actuator.Off or (Counter.two and Actuator.Off or (Counter.one or Counter.three) and Actuator.Off) [backward reach with edge: (event: Counter.dec) (guard: Counter.four) (assignments: Counter := Counter.three), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (Counter.zero or Counter.four) and Actuator.Off or (Counter.two and Actuator.Off or (Counter.one or Counter.three) and Actuator.Off) -> (Counter.two or (Counter.three or Actuator.Off)) and (not Counter.two and not Counter.three or Actuator.Off) [backward reach with edge: (event: Counter.dec) (guard: Counter.five) (assignments: Counter := Counter.four), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (Counter.two or (Counter.three or Actuator.Off)) and (not Counter.two and not Counter.three or Actuator.Off) -> (Counter.zero or Counter.four) and Actuator.Off or Counter.two and Actuator.Off or (Counter.one and Actuator.Off or (Counter.five or Counter.three and Actuator.Off)) [backward reach with edge: (event: Actuator.off) (guard: Actuator.On -> Counter.five and Actuator.On) (assignments: Actuator := Actuator.Off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (Counter.zero or Counter.four) and Actuator.Off or Counter.two and Actuator.Off or (Counter.one and Actuator.Off or (Counter.five or Counter.three and Actuator.Off)) -> (not Counter.zero and not Counter.one or Actuator.Off) and (not Counter.two and not Counter.three or Actuator.Off) [backward reach with edge: (event: Counter.inc) (guard: Counter.four) (assignments: Counter := Counter.five), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: (not Counter.zero and not Counter.one or Actuator.Off) and (not Counter.two and not Counter.three or Actuator.Off) -> (not Counter.zero or Actuator.Off) and ((not Counter.two or Actuator.Off) and (not Counter.one or Actuator.Off)) [backward reach with edge: (event: Counter.inc) (guard: Counter.three) (assignments: Counter := Counter.four), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 4.
Backward controlled-behavior: (not Counter.zero or Actuator.Off) and ((not Counter.two or Actuator.Off) and (not Counter.one or Actuator.Off)) -> not Counter.zero and not Counter.one or Actuator.Off [backward reach with edge: (event: Counter.inc) (guard: Counter.two) (assignments: Counter := Counter.three), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 5.
Backward controlled-behavior: not Counter.zero and not Counter.one or Actuator.Off -> not Counter.zero or Actuator.Off [backward reach with edge: (event: Counter.inc) (guard: Counter.one) (assignments: Counter := Counter.two), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 6.
Backward controlled-behavior: not Counter.zero or Actuator.Off -> true [backward reach with edge: (event: Counter.inc) (guard: Counter.zero) (assignments: Counter := Counter.one), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 7.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
    State: (controlled-behavior: true)
        Edge: (event: Counter.inc) (guard: Counter.zero) (assignments: Counter := Counter.one)
        Edge: (event: Counter.inc) (guard: Counter.one) (assignments: Counter := Counter.two)
        Edge: (event: Counter.inc) (guard: Counter.two) (assignments: Counter := Counter.three)
        Edge: (event: Counter.inc) (guard: Counter.three) (assignments: Counter := Counter.four)
        Edge: (event: Counter.inc) (guard: Counter.four) (assignments: Counter := Counter.five)
        Edge: (event: Counter.dec) (guard: Counter.one) (assignments: Counter := Counter.zero)
        Edge: (event: Counter.dec) (guard: Counter.two) (assignments: Counter := Counter.one)
        Edge: (event: Counter.dec) (guard: Counter.three) (assignments: Counter := Counter.two)
        Edge: (event: Counter.dec) (guard: Counter.four) (assignments: Counter := Counter.three)
        Edge: (event: Counter.dec) (guard: Counter.five) (assignments: Counter := Counter.four)
        Edge: (event: Actuator.on) (guard: Actuator.Off -> Counter.zero and Actuator.Off) (assignments: Actuator := Actuator.On)
        Edge: (event: Actuator.off) (guard: Actuator.On -> Counter.five and Actuator.On) (assignments: Actuator := Actuator.Off)

Controlled system: at most 12 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         Counter.zero and Actuator.Off
Initial (controlled system):           Counter.zero and Actuator.Off
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event Counter.inc: guard: not Counter.five -> true [assume not Counter.five].
  Event Counter.dec: guard: not Counter.zero -> true [assume not Counter.zero].
  Event Actuator.on: guard: Counter.zero and Actuator.Off -> Counter.zero [assume Actuator.Off].
  Event Actuator.off: guard: Counter.five and Actuator.On -> Counter.five [assume Actuator.On].

Constructing output CIF specification.
Writing output CIF file "datasynth/edge_order_forward_random_off.ctrlsys.real.cif".
