Reading CIF file "datasynth/req_aut_disc_var.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[1..10]  r.x   0      4 * 2     10 * 2      16 * 2      ~63%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       1      8         20          32          ~63%

Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             r.x = 5
Initial   (discrete variables):              r.x = 5
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             r.x = 5
Initial   (system, combined init/plant inv): r.x = 5
Initial   (system, combined init/state inv): r.x = 5

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): true

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "c" needs:
    r.x = 5

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c) (guard: r.x = 5)
    Edge: (event: c) (guard: r.x != 5)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: r.x = 5.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "r.x" of type "int[1..10]" (group: 0, domain: 0+1, BDD variables: 4, CIF/BDD values: 10/16)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: c) (guard: r.x != 5): guard: r.x != 5 -> false [state/event exclusion requirement: r.x = 5].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: c) (guard: r.x = 5)
    Edge: (event: c) (guard: r.x != 5 -> false)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: r.x = 5 [initialization predicate]
Forward reachability: iteration 1.
Controlled behavior: true -> r.x = 5.

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> r.x = 5 [restricted to current/previous controlled-behavior predicate: r.x = 5]
Backward reachability: iteration 1.
Backward controlled-behavior: r.x = 5 [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: r.x != 5 [current/previous controlled behavior predicate]

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: r.x = 5)
    Edge: (event: c) (guard: r.x = 5)
    Edge: (event: c) (guard: r.x != 5 -> false)

Controlled system: exactly 1 state.

Initial (synthesis result):            r.x = 5
Initial (uncontrolled system):         r.x = 5
Initial (controlled system):           r.x = 5
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/req_aut_disc_var.ctrlsys.real.cif".
