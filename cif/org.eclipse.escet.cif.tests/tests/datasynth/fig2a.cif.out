Reading CIF file "datasynth/fig2a.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..9]  p.x   1      4 * 2     10 * 2      16 * 2      ~63%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      10        24          36          ~67%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 8

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [before]
                    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [before]
                    Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [before]
                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [before]
                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [before]
                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [before]
                        Total span:   2 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.078125 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Maximum number of iterations: 10

                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [before]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [iteration 1]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Window length: 2

                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [before]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..9]  p.x   0      4 * 2     10 * 2      16 * 2      ~63%
        2      location pointer   n/a        p     1      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      10        24          36          ~67%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p.x = 2
    Initial   (discrete variables):              p.x = 2
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.L0
    Initial   (auts/locs init predicate):        p.L0
    Initial   (uncontrolled system):             p.x = 2 and p.L0
    Initial   (system, combined init/plant inv): p.x = 2 and p.L0
    Initial   (system, combined init/state inv): p.x = 2 and p.L0

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p.L0
    Marked    (auts/locs marker predicate):      p.L0
    Marked    (uncontrolled system):             p.L0
    Marked    (system, combined mark/plant inv): p.L0
    Marked    (system, combined mark/state inv): p.L0

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        Event "e1" needs:
            p.x != 8 and (p.x != 9 and p.x != 7)
        Event "e2" needs:
            0 <= p.x and (p.x <= 7 and not(p.x = 6 or p.x = 7))

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: e1) (guard: 0 <= p.x and (p.x <= 7 and p.L0)) (assignments: p.x := p.x + 2, p := p.L1)
            Edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.x = 2 and p.L0.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..9]" (group: 0, domain: 0+1, BDD variables: 4, CIF/BDD values: 10/16)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Edge (event: e1) (guard: 0 <= p.x and (p.x <= 7 and p.L0)) (assignments: p.x := p.x + 2, p := p.L1): guard: 0 <= p.x and (p.x <= 7 and p.L0) -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and p.L0 or ((p.x = 1 or p.x = 5) and p.L0 or p.x = 3 and p.L0) [state/event exclusion requirement: p.x != 8 and (p.x != 9 and p.x != 7)].
    Controlled behavior: true -> (p.x != 8 or p.L0) and ((p.x != 6 or p.L0) and (p.x != 7 or p.L0)) [state/event exclusion requirement: 0 <= p.x and (p.x <= 7 and not(p.x = 6 or p.x = 7)), edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0)].

    Restricted behavior using state/event exclusion requirements:
        State: (controlled-behavior: (p.x != 8 or p.L0) and ((p.x != 6 or p.L0) and (p.x != 7 or p.L0)))
            Edge: (event: e1) (guard: 0 <= p.x and (p.x <= 7 and p.L0) -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and p.L0 or ((p.x = 1 or p.x = 5) and p.L0 or p.x = 3 and p.L0)) (assignments: p.x := p.x + 2, p := p.L1)
            Edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0)

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.L0 [marker predicate]
        Backward controlled-behavior: p.L0 -> not(2 <= p.x and p.x <= 7) and p.L0 or ((p.x = 4 or p.x = 5) and p.L0 or (p.x = 2 or p.x = 3 or (p.x = 6 or p.x = 7)) and p.L0) [restricted to current/previous controlled-behavior predicate: (p.x != 8 or p.L0) and ((p.x != 6 or p.L0) and (p.x != 7 or p.L0))]
        Backward reachability: iteration 1.
        Backward controlled-behavior: not(2 <= p.x and p.x <= 7) and p.L0 or ((p.x = 4 or p.x = 5) and p.L0 or (p.x = 2 or p.x = 3 or (p.x = 6 or p.x = 7)) and p.L0) -> (0 <= p.x and p.x <= 7 or p.L0) and (not(p.x = 6 or p.x = 7) or p.L0) [backward reach with edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0), restricted to current/previous controlled-behavior predicate: (p.x != 8 or p.L0) and ((p.x != 6 or p.L0) and (p.x != 7 or p.L0))]
        Backward reachability: iteration 2.
        Backward controlled-behavior: (0 <= p.x and p.x <= 7 or p.L0) and (not(p.x = 6 or p.x = 7) or p.L0) [fixed point].

        Controlled behavior: (p.x != 8 or p.L0) and ((p.x != 6 or p.L0) and (p.x != 7 or p.L0)) -> (0 <= p.x and p.x <= 7 or p.L0) and (not(p.x = 6 or p.x = 7) or p.L0).

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (p.x = 8 or p.x = 9) and p.L1 or (p.x = 6 or p.x = 7) and p.L1 [current/previous controlled behavior predicate]
        Backward reachability: iteration 1.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.x = 2 and p.L0 [initialization predicate]
        Forward reachability: iteration 1.
        Forward controlled-behavior: p.x = 2 and p.L0 -> p.x = 4 and p.L1 or p.x = 2 and p.L0 [forward reach with edge: (event: e1) (guard: 0 <= p.x and (p.x <= 7 and p.L0) -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and p.L0 or ((p.x = 1 or p.x = 5) and p.L0 or p.x = 3 and p.L0)) (assignments: p.x := p.x + 2, p := p.L1), restricted to current/previous controlled-behavior predicate: (0 <= p.x and p.x <= 7 or p.L0) and (not(p.x = 6 or p.x = 7) or p.L0)]
        Forward controlled-behavior: p.x = 4 and p.L1 or p.x = 2 and p.L0 -> p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0) [forward reach with edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0), restricted to current/previous controlled-behavior predicate: (0 <= p.x and p.x <= 7 or p.L0) and (not(p.x = 6 or p.x = 7) or p.L0)]
        Forward reachability: iteration 2.
        Forward controlled-behavior: p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0) [fixed point].

        Controlled behavior: (0 <= p.x and p.x <= 7 or p.L0) and (not(p.x = 6 or p.x = 7) or p.L0) -> p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0).

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.L0 [marker predicate]
        Backward controlled-behavior: p.L0 -> p.x = 2 and p.L0 or p.x = 5 and p.L0 [restricted to current/previous controlled-behavior predicate: p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0)]
        Backward reachability: iteration 1.
        Backward controlled-behavior: p.x = 2 and p.L0 or p.x = 5 and p.L0 -> p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0) [backward reach with edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0), restricted to current/previous controlled-behavior predicate: p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0)]
        Backward reachability: iteration 2.
        Backward controlled-behavior: p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0) [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (p.x != 4 or p.L0) and ((p.x != 2 or p.L1) and (p.x != 5 or p.L1)) [current/previous controlled behavior predicate]
        Backward reachability: iteration 1.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing controlled system guards.

Edge (event: e1) (guard: 0 <= p.x and (p.x <= 7 and p.L0) -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and p.L0 or ((p.x = 1 or p.x = 5) and p.L0 or p.x = 3 and p.L0)) (assignments: p.x := p.x + 2, p := p.L1): guard: (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and p.L0 or ((p.x = 1 or p.x = 5) and p.L0 or p.x = 3 and p.L0) -> p.x = 2 and p.L0.

Final synthesis result:
    State: (controlled-behavior: p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0))
        Edge: (event: e1) (guard: 0 <= p.x and (p.x <= 7 and p.L0) -> p.x = 2 and p.L0) (assignments: p.x := p.x + 2, p := p.L1)
        Edge: (event: e2) (guard: (p.x = 0 or p.x = 8) and p.L1 or p.x = 4 and p.L1 or ((p.x = 2 or p.x = 6) and p.L1 or (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) and p.L1)) (assignments: p.x := p.x + 1, p := p.L0)

Controlled system: exactly 3 states.

Initial (synthesis result):            p.x = 4 and p.L1 or (p.x = 2 and p.L0 or p.x = 5 and p.L0)
Initial (uncontrolled system):         p.x = 2 and p.L0
Initial (controlled system):           p.x = 2 and p.L0
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Checking post-synthesis for events that are never enabled.

Simplification of controlled system under the assumption of the plants:
    Event e1: guard: p.x = 2 and p.L0 -> p.x = 2 [assume 0 <= p.x and (p.x <= 7 and p.L0)].

Constructing output CIF specification.
Writing output CIF file "datasynth/fig2a.ctrlsys.real.cif".
