Reading CIF file "datasynth/range.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  --------  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  buffer.x  0      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  --------  -----  --------  ----------  ----------  -----------
        Total                                          1      6         12          16          75%

    Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             buffer.x = 2
    Initial   (discrete variables):              buffer.x = 2
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             buffer.x = 2
    Initial   (system, combined init/plant inv): buffer.x = 2
    Initial   (system, combined init/state inv): buffer.x = 2

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): true

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: buffer.add) (guard: true) (assignments: buffer.x := buffer.x + 1)
            Edge: (event: buffer.remove) (guard: true) (assignments: buffer.x := buffer.x - 1)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    Edge: (event: buffer.add) (guard: true -> true) (assignments: buffer.x := buffer.x + 1)
    Edge: (event: buffer.remove) (guard: true -> buffer.x != 0) (assignments: buffer.x := buffer.x - 1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: buffer.add) (guard: true -> true) (assignments: buffer.x := buffer.x + 1)
            Edge: (event: buffer.remove) (guard: true -> buffer.x != 0) (assignments: buffer.x := buffer.x - 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: buffer.x = 2.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "buffer.x" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

<<<<<<< HEAD
Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: true [fixed point].
=======
Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.
>>>>>>> refs/remotes/origin/develop

Re-initializing edges for being applied.

<<<<<<< HEAD
Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: buffer.x = 2 [initialization predicate]
Forward controlled-behavior: true [fixed point].
=======
Checking pre-synthesis for events that are never enabled.
>>>>>>> refs/remotes/origin/develop

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: buffer.x = 2 [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: buffer.x = 2 -> buffer.x = 2 or buffer.x = 3 [forward reach with edge: (event: buffer.add) (guard: true -> true) (assignments: buffer.x := buffer.x + 1), restricted to current/previous controlled-behavior predicate: true]
            Forward controlled-behavior: buffer.x = 2 or buffer.x = 3 -> buffer.x = 2 or (buffer.x = 1 or buffer.x = 3) [forward reach with edge: (event: buffer.remove) (guard: true -> buffer.x != 0) (assignments: buffer.x := buffer.x - 1), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 2:
            Forward controlled-behavior: buffer.x = 2 or (buffer.x = 1 or buffer.x = 3) -> buffer.x != 0 and buffer.x != 5 [forward reach with edge: (event: buffer.add) (guard: true -> true) (assignments: buffer.x := buffer.x + 1), restricted to current/previous controlled-behavior predicate: true]
            Forward controlled-behavior: buffer.x != 0 and buffer.x != 5 -> buffer.x != 5 [forward reach with edge: (event: buffer.remove) (guard: true -> buffer.x != 0) (assignments: buffer.x := buffer.x - 1), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 3:
            Forward controlled-behavior: buffer.x != 5 -> true [forward reach with edge: (event: buffer.add) (guard: true -> true) (assignments: buffer.x := buffer.x + 1), restricted to current/previous controlled-behavior predicate: true]

        Forward reachability iteration 4:
            No change this iteration.

        Forward controlled-behavior: true [fixed point].

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: buffer.add) (guard: true -> true) (assignments: buffer.x := buffer.x + 1): guard: true -> buffer.x != 5.
    Edge (event: buffer.remove) (guard: true -> buffer.x != 0) (assignments: buffer.x := buffer.x - 1): guard: buffer.x != 0 -> buffer.x != 0.

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: true)
        Edge: (event: buffer.add) (guard: true -> buffer.x != 5) (assignments: buffer.x := buffer.x + 1)
        Edge: (event: buffer.remove) (guard: true -> buffer.x != 0) (assignments: buffer.x := buffer.x - 1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 6 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            true
    Initial (uncontrolled system):         buffer.x = 2
    Initial (controlled system):           buffer.x = 2
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event buffer.add: guard: buffer.x != 5.
    Event buffer.remove: guard: buffer.x != 0.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/range.ctrlsys.real.cif".
