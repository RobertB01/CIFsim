Reading CIF file "datasynth/edge_granularity_errors13_per_edge.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..7]  p.x   1      3 * 2     8 * 2       8 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      8         20          20          100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 4

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [before]
                    Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [before]
                    Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [before]
                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [before]
                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [before]
                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [before]
                        Total span:   1 (total)   0.25 (avg/edge) / WES:   0.625000 (total)   0.156250 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Maximum number of iterations: 10

                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [before]
                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [iteration 1]
                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Window length: 2

                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [before]
                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..7]  p.x   0      3 * 2     8 * 2       8 * 2       100%
        2      location pointer   n/a        p     1      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      8         20          20          100%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             true
    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.l1
    Initial   (auts/locs init predicate):        p.l1
    Initial   (uncontrolled system):             p.l1
    Initial   (system, combined init/plant inv): p.l1
    Initial   (system, combined init/state inv): p.l1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p.l2
    Marked    (auts/locs marker predicate):      p.l2
    Marked    (uncontrolled system):             p.l2
    Marked    (system, combined mark/plant inv): p.l2
    Marked    (system, combined mark/state inv): p.l2

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: e) (guard: p.l1) (assignments: p.x := p.x + p.x, p := p.l2)
            Edge: (event: e) (guard: p.l1) (assignments: p.x := p.x + p.x + p.x, p := p.l2)
            Edge: (event: e) (guard: p.l1) (assignments: p.x := p.x + p.x + p.x + p.x, p := p.l2)

Restricting edge guards to prevent runtime errors:
    Edge: (event: e) (guard: p.l1 -> 0 <= p.x and (p.x <= 3 and p.l1)) (assignments: p.x := p.x + p.x, p := p.l2)
    Edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 2) and p.l1 or p.x = 1 and p.l1) (assignments: p.x := p.x + p.x + p.x, p := p.l2)
    Edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 1) and p.l1) (assignments: p.x := p.x + p.x + p.x + p.x, p := p.l2)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: e) (guard: p.l1 -> 0 <= p.x and (p.x <= 3 and p.l1)) (assignments: p.x := p.x + p.x, p := p.l2)
            Edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 2) and p.l1 or p.x = 1 and p.l1) (assignments: p.x := p.x + p.x + p.x, p := p.l2)
            Edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 1) and p.l1) (assignments: p.x := p.x + p.x + p.x + p.x, p := p.l2)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p.l1.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.
Controlled behavior: true -> 0 <= p.x and p.x <= 3 or p.l2 [runtime error requirement (event: e): 0 <= p.x and p.x <= 3 or p.l2].
Controlled behavior: 0 <= p.x and p.x <= 3 or p.l2 -> (not(p.x = 4 or p.x = 6) or p.l2) and ((p.x != 5 or p.l2) and (not(p.x = 3 or p.x = 7) or p.l2)) [runtime error requirement (event: e): (not(p.x = 4 or p.x = 6) or p.l2) and ((p.x != 5 or p.l2) and (not(p.x = 3 or p.x = 7) or p.l2))].
Controlled behavior: (not(p.x = 4 or p.x = 6) or p.l2) and ((p.x != 5 or p.l2) and (not(p.x = 3 or p.x = 7) or p.l2)) -> (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2))) [runtime error requirement (event: e): (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))].

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l2 [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l2 -> (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2))) [backward reach with edge: (event: e) (guard: p.l1 -> 0 <= p.x and (p.x <= 3 and p.l1)) (assignments: p.x := p.x + p.x, p := p.l2), restricted to current/previous controlled-behavior predicate: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))]
Backward reachability: iteration 2.
Backward controlled-behavior: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2))) [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.x = 4 or p.x = 5) and p.l1 or (p.x = 2 or p.x = 3 or (p.x = 6 or p.x = 7)) and p.l1 [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l1 [initialization predicate]
Forward controlled-behavior: p.l1 -> (p.x = 0 or p.x = 1) and p.l1 [restricted to current/previous controlled-behavior predicate: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))]
Forward reachability: iteration 1.
Forward controlled-behavior: (p.x = 0 or p.x = 1) and p.l1 -> p.x = 0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1) [forward reach with edge: (event: e) (guard: p.l1 -> 0 <= p.x and (p.x <= 3 and p.l1)) (assignments: p.x := p.x + p.x, p := p.l2), restricted to current/previous controlled-behavior predicate: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))]
Forward controlled-behavior: p.x = 0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1) -> p.x = 0 or p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2) [forward reach with edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 2) and p.l1 or p.x = 1 and p.l1) (assignments: p.x := p.x + p.x + p.x, p := p.l2), restricted to current/previous controlled-behavior predicate: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))]
Forward controlled-behavior: p.x = 0 or p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2) -> p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2)) [forward reach with edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 1) and p.l1) (assignments: p.x := p.x + p.x + p.x + p.x, p := p.l2), restricted to current/previous controlled-behavior predicate: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2)) [fixed point].
Controlled behavior: (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2))) -> p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2)).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l2 [marker predicate]
Backward controlled-behavior: p.l2 -> (p.x = 0 or p.x = 4) and p.l2 or (p.x = 2 and p.l2 or p.x = 3 and p.l2) [restricted to current/previous controlled-behavior predicate: p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2))]
Backward reachability: iteration 1.
Backward controlled-behavior: (p.x = 0 or p.x = 4) and p.l2 or (p.x = 2 and p.l2 or p.x = 3 and p.l2) -> p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2)) [backward reach with edge: (event: e) (guard: p.l1 -> 0 <= p.x and (p.x <= 3 and p.l1)) (assignments: p.x := p.x + p.x, p := p.l2), restricted to current/previous controlled-behavior predicate: p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2)) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: p.x != 0 and (p.x != 4 or p.l1) and ((p.x != 2 or p.l1) and ((p.x != 1 or p.l2) and (p.x != 3 or p.l1))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
    State: (controlled-behavior: p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2)))
        Edge: (event: e) (guard: p.l1 -> 0 <= p.x and (p.x <= 3 and p.l1)) (assignments: p.x := p.x + p.x, p := p.l2)
        Edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 2) and p.l1 or p.x = 1 and p.l1) (assignments: p.x := p.x + p.x + p.x, p := p.l2)
        Edge: (event: e) (guard: p.l1 -> (p.x = 0 or p.x = 1) and p.l1) (assignments: p.x := p.x + p.x + p.x + p.x, p := p.l2)

Controlled system: exactly 6 states.

Initial (synthesis result):            p.x = 0 or p.x = 4 and p.l2 or (p.x = 2 and p.l2 or (p.x = 1 and p.l1 or p.x = 3 and p.l2))
Initial (uncontrolled system):         p.l1
Initial (controlled system):           (p.x = 0 or p.x = 1) and p.l1
Initial (removed by supervisor):       (p.x = 4 or p.x = 5) and p.l1 or (p.x = 2 or p.x = 3 or (p.x = 6 or p.x = 7)) and p.l1
Initial (added by supervisor):         (not(p.x = 4 or p.x = 5) or p.l2) and (p.x = 0 or p.x = 1 or (p.x = 4 or (p.x = 5 or p.l2)))

Simplification of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
    Initial: (p.x = 0 or p.x = 1) and p.l1 -> p.x = 0 or p.x = 1 [assume p.l1].

Constructing output CIF specification.
Writing output CIF file "datasynth/edge_granularity_errors13_per_edge.ctrlsys.real.cif".
