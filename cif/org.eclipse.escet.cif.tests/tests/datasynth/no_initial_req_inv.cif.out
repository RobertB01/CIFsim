Reading CIF file "datasynth/no_initial_req_inv.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..5]  p.x   0      3 * 2     6 * 2       8 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      1      6         12          16          75%

Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (component state req invariant):   p.x = 0 or p.x = 1
Invariant (components state req invariant):  p.x = 0 or p.x = 1
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      p.x = 0 or p.x = 1

Initial   (discrete variable 0):             p.x = 2 or p.x = 3
Initial   (discrete variables):              p.x = 2 or p.x = 3
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             p.x = 2 or p.x = 3
Initial   (system, combined init/plant inv): p.x = 2 or p.x = 3
Initial   (system, combined init/state inv): false

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): p.x = 0 or p.x = 1

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)

Restricting uncontrolled system behavior using state/event exclusion plants invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p.x = 2 or p.x = 3.

Restricting behavior using state requirements.
Controlled behavior: true -> p.x = 0 or p.x = 1 [state requirements: p.x = 0 or p.x = 1].

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> p.x = 0 or p.x = 1 [restricted to current/previous controlled-behavior predicate: p.x = 0 or p.x = 1]
Backward controlled-behavior: p.x = 0 or p.x = 1 [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: 2 <= p.x and p.x <= 5 [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.x = 2 or p.x = 3 [initialization predicate]
Forward controlled-behavior: p.x = 2 or p.x = 3 -> false [restricted to current/previous controlled-behavior predicate: p.x = 0 or p.x = 1]
Forward controlled-behavior: false [fixed point].
Controlled behavior: p.x = 0 or p.x = 1 -> false.

Round 1: finished, all states are bad.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: false)

Controlled system: exactly 0 states.

Initial (synthesis result):            false
Initial (uncontrolled system):         p.x = 2 or p.x = 3
Initial (controlled system):           false
Initial (removed by supervisor):       p.x = 2 or p.x = 3
Initial (added by supervisor):         not(p.x = 2 or p.x = 3)
