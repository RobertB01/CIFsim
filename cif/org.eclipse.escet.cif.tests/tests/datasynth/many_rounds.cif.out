Reading CIF file "datasynth/many_rounds.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a         p     0      3 * 2     7 * 2       8 * 2       ~88%
  2      discrete variable  int[0..15]  p.x   1      4 * 2     16 * 2      16 * 2      100%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       2      14        46          48          ~96%

Applying variable ordering:
  Applying model variable order.

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm:
      Metric: total-span
      Relations: configured
      Number of hyper-edges: 19
      Maximum number of iterations: 10

      Total span:   7 (total)   0.37 (avg/edge) / WES:   0.684211 (total)   0.036011 (avg/edge) [before]
      Total span:   7 (total)   0.37 (avg/edge) / WES:   0.684211 (total)   0.036011 (avg/edge) [iteration 1]
      Total span:   7 (total)   0.37 (avg/edge) / WES:   0.684211 (total)   0.036011 (avg/edge) [after]

    Applying sliding window algorithm:
      Size: 4
      Metric: total-span
      Relations: configured
      Number of hyper-edges: 19
      Window length: 2

      Total span:   7 (total)   0.37 (avg/edge) / WES:   0.684211 (total)   0.036011 (avg/edge) [before]
      Total span:   7 (total)   0.37 (avg/edge) / WES:   0.684211 (total)   0.036011 (avg/edge) [after]

Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):             true
Initial   (discrete variables):              true
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p.l0
Initial   (auts/locs init predicate):        p.l0
Initial   (uncontrolled system):             p.l0
Initial   (system, combined init/plant inv): p.l0
Initial   (system, combined init/state inv): p.l0

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       <bdd 24n 6p>
Marked    (auts/locs marker predicate):      <bdd 24n 6p>
Marked    (uncontrolled system):             <bdd 24n 6p>
Marked    (system, combined mark/plant inv): <bdd 24n 6p>
Marked    (system, combined mark/state inv): <bdd 24n 6p>

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1)
    Edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2)
    Edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3)
    Edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4)
    Edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5)
    Edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6)
    Edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p.l0.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 7/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 24n 6p> -> <bdd 25n 7p> [backward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 25n 7p> -> <bdd 25n 7p> [backward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 25n 7p> -> <bdd 26n 8p> [backward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 26n 8p> -> <bdd 25n 7p> [backward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 25n 7p> -> <bdd 27n 9p> [backward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 27n 9p> -> <bdd 26n 8p> [backward reach with edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 26n 8p> -> <bdd 26n 10p> [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 26n 10p> -> <bdd 23n 12p> [backward reach with edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 23n 12p> -> <bdd 21n 14p> [backward reach with edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 21n 14p> -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or p.l4 and p.x = 5) or (p.l4 and (p.x = 3 or p.x = 7) or p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7))) or (p.l6 and p.x = 11 or p.l1 and (p.x = 1 or p.x = 9) or (p.l1 and p.x = 5 or p.l1 and (p.x = 3 or p.x = 7)) or (p.l5 and p.x = 9 or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [backward reach with edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or p.l4 and p.x = 5) or (p.l4 and (p.x = 3 or p.x = 7) or p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7))) or (p.l6 and p.x = 11 or p.l1 and (p.x = 1 or p.x = 9) or (p.l1 and p.x = 5 or p.l1 and (p.x = 3 or p.x = 7)) or (p.l5 and p.x = 9 or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5)) or (p.l2 and (p.x = 3 or p.x = 7) or p.l6 and p.x = 11 or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [backward reach with edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5)) or (p.l2 and (p.x = 3 or p.x = 7) or p.l6 and p.x = 11 or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or p.l4 and p.x = 5) or (p.l4 and (p.x = 3 or p.x = 7) or p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7))) or (p.l6 and (p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) or p.l6 and (p.x = 5 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [backward reach with edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or p.l4 and p.x = 5) or (p.l4 and (p.x = 3 or p.x = 7) or p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7))) or (p.l6 and (p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) or p.l6 and (p.x = 5 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [fixed point].
Controlled behavior: true -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or p.l4 and p.x = 5) or (p.l4 and (p.x = 3 or p.x = 7) or p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7))) or (p.l6 and (p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) or p.l6 and (p.x = 5 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10))) and (not p.l0 or not(p.x = 4 or p.x = 6)) and ((not p.l4 or not(p.x = 1 or p.x = 9)) and (not p.l4 or p.x != 5)) and ((not p.l4 or not(p.x = 3 or p.x = 7)) and (not p.l2 or not(p.x = 1 or p.x = 9)) and ((not p.l2 or p.x != 5) and (not p.l2 or not(p.x = 3 or p.x = 7)))) and ((not p.l6 or not(p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11))) and (not p.l6 or not(p.x = 5 or p.x = 7)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 9)) and (not p.l1 and not p.l5 or p.x != 5)) and ((not p.l1 and not p.l5 or not(p.x = 3 or p.x = 7)) and (not p.l3 or not(p.x = 1 or p.x = 9)) and ((not p.l3 or p.x != 5) and (not p.l3 or not(p.x = 3 or p.x = 7))))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10))) and (not p.l0 or not(p.x = 4 or p.x = 6)) and ((not p.l4 or not(p.x = 1 or p.x = 9)) and (not p.l4 or p.x != 5)) and ((not p.l4 or not(p.x = 3 or p.x = 7)) and (not p.l2 or not(p.x = 1 or p.x = 9)) and ((not p.l2 or p.x != 5) and (not p.l2 or not(p.x = 3 or p.x = 7)))) and ((not p.l6 or not(p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11))) and (not p.l6 or not(p.x = 5 or p.x = 7)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 9)) and (not p.l1 and not p.l5 or p.x != 5)) and ((not p.l1 and not p.l5 or not(p.x = 3 or p.x = 7)) and (not p.l3 or not(p.x = 1 or p.x = 9)) and ((not p.l3 or p.x != 5) and (not p.l3 or not(p.x = 3 or p.x = 7))))) -> (not p.l0 or not(p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10))) and ((not p.l0 or not(p.x = 4 or p.x = 6)) and (not p.l4 or not(p.x = 1 or p.x = 9))) and ((not p.l4 or p.x != 5) and (not p.l4 or not(p.x = 3 or p.x = 7)) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 9)) and (not p.l2 and not p.l6 or p.x != 5))) and ((not p.l2 and not p.l6 or not(p.x = 3 or p.x = 7)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 9)) and (not p.l1 and not p.l5 or p.x != 5)) and ((not p.l1 and not p.l5 or not(p.x = 3 or p.x = 7)) and (not p.l3 or not(p.x = 1 or p.x = 9)) and ((not p.l3 or p.x != 5) and (not p.l3 or not(p.x = 3 or p.x = 7))))) [backward reach with edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10))) and ((not p.l0 or not(p.x = 4 or p.x = 6)) and (not p.l4 or not(p.x = 1 or p.x = 9))) and ((not p.l4 or p.x != 5) and (not p.l4 or not(p.x = 3 or p.x = 7)) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 9)) and (not p.l2 and not p.l6 or p.x != 5))) and ((not p.l2 and not p.l6 or not(p.x = 3 or p.x = 7)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 9)) and (not p.l1 and not p.l5 or p.x != 5)) and ((not p.l1 and not p.l5 or not(p.x = 3 or p.x = 7)) and (not p.l3 or not(p.x = 1 or p.x = 9)) and ((not p.l3 or p.x != 5) and (not p.l3 or not(p.x = 3 or p.x = 7))))) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or p.l4 and p.x = 5) or (p.l4 and (p.x = 3 or p.x = 7) or p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7))) or (p.l6 and (p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) or p.l6 and (p.x = 5 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))).

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 [initialization predicate]
Forward controlled-behavior: p.l0 -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l1 and (p.x = 1 or p.x = 9) or (p.l1 and p.x = 5 or p.l1 and (p.x = 3 or p.x = 7))) [forward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l1 and (p.x = 1 or p.x = 9) or (p.l1 and p.x = 5 or p.l1 and (p.x = 3 or p.x = 7))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5) or (p.l2 and (p.x = 3 or p.x = 7) or p.l1 and (p.x = 1 or p.x = 9) or (p.l1 and p.x = 5 or p.l1 and (p.x = 3 or p.x = 7))) [forward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5) or (p.l2 and (p.x = 3 or p.x = 7) or p.l1 and (p.x = 1 or p.x = 9) or (p.l1 and p.x = 5 or p.l1 and (p.x = 3 or p.x = 7))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5) or (p.l2 and (p.x = 3 or p.x = 7) or (p.l1 or p.l3) and (p.x = 1 or p.x = 9) or ((p.l1 or p.l3) and p.x = 5 or (p.l1 or p.l3) and (p.x = 3 or p.x = 7))) [forward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5) or (p.l2 and (p.x = 3 or p.x = 7) or (p.l1 or p.l3) and (p.x = 1 or p.x = 9) or ((p.l1 or p.l3) and p.x = 5 or (p.l1 or p.l3) and (p.x = 3 or p.x = 7))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7))) or (p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7)) or ((p.l1 or p.l3) and (p.x = 1 or p.x = 9) or ((p.l1 or p.l3) and p.x = 5 or (p.l1 or p.l3) and (p.x = 3 or p.x = 7)))) [forward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or p.l0 and (p.x = 4 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 9) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7))) or (p.l2 and (p.x = 1 or p.x = 9) or (p.l2 and p.x = 5 or p.l2 and (p.x = 3 or p.x = 7)) or ((p.l1 or p.l3) and (p.x = 1 or p.x = 9) or ((p.l1 or p.l3) and p.x = 5 or (p.l1 or p.l3) and (p.x = 3 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5)) or (p.l2 and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [forward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or (p.l2 and (p.x = 1 or p.x = 9) or p.l2 and p.x = 5)) or (p.l2 and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [forward reach with edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) [fixed point].

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward controlled-behavior: <bdd 24n 6p> -> <bdd 22n 5p> [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 22n 5p> -> <bdd 23n 6p> [backward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 23n 6p> -> <bdd 23n 6p> [backward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 23n 6p> -> <bdd 24n 7p> [backward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 24n 7p> -> <bdd 23n 6p> [backward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 23n 6p> -> <bdd 25n 8p> [backward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 25n 8p> -> <bdd 24n 8p> [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 24n 8p> -> <bdd 21n 8p> [backward reach with edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: <bdd 21n 8p> -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or p.l4 and p.x = 7) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l5 and p.x = 9 or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [backward reach with edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or p.l4 and p.x = 7) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l5 and p.x = 9 or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l5 and p.x = 9 or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [backward reach with edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l5 and p.x = 9 or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) or (p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l5 and (p.x = 1 or p.x = 9) or (p.l5 and p.x = 5 or (p.l5 and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) [backward reach with edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) or (p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l5 and (p.x = 1 or p.x = 9) or (p.l5 and p.x = 5 or (p.l5 and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) or (p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l5 and (p.x = 1 or p.x = 9) or (p.l5 and p.x = 5 or (p.l5 and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) [backward reach with edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7))))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) or (p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l5 and (p.x = 1 or p.x = 9) or (p.l5 and p.x = 5 or (p.l5 and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 8 or p.x = 10)) or (p.l0 and (p.x = 4 or p.x = 6) or p.l4 and (p.x = 1 or p.x = 9)) or (p.l4 and p.x = 5 or p.l4 and (p.x = 3 or p.x = 7) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 9) or (p.l2 or p.l6) and p.x = 5)) or ((p.l2 or p.l6) and (p.x = 3 or p.x = 7) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 9) or (p.l1 or p.l5) and p.x = 5) or ((p.l1 or p.l5) and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 9) or (p.l3 and p.x = 5 or p.l3 and (p.x = 3 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) or (p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l5 and (p.x = 1 or p.x = 9) or (p.l5 and p.x = 5 or (p.l5 and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))).

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 8)) and (not p.l0 or p.x != 4) and ((not p.l0 or not(p.x = 2 or p.x = 6)) and ((not p.l4 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) and ((not p.l1 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l5 or not(p.x = 1 or p.x = 9)) and ((not p.l5 or p.x != 5) and ((not p.l5 or not(p.x = 3 or p.x = 7)) and (not p.l3 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 8)) and (not p.l0 or p.x != 4) and ((not p.l0 or not(p.x = 2 or p.x = 6)) and ((not p.l4 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) and ((not p.l1 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l5 or not(p.x = 1 or p.x = 9)) and ((not p.l5 or p.x != 5) and ((not p.l5 or not(p.x = 3 or p.x = 7)) and (not p.l3 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))))) -> (not p.l0 or not(p.x = 0 or p.x = 8)) and ((not p.l0 or p.x != 4) and (not p.l0 or not(p.x = 2 or p.x = 6))) and ((not p.l4 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l3 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) [backward reach with edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 8)) and ((not p.l0 or p.x != 4) and (not p.l0 or not(p.x = 2 or p.x = 6))) and ((not p.l4 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and (not p.l3 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) or (p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l5 and (p.x = 1 or p.x = 9) or (p.l5 and p.x = 5 or (p.l5 and (p.x = 3 or p.x = 7) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))) -> p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))).

Round 2: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 [initialization predicate]
Forward controlled-behavior: p.l0 -> p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) [forward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [forward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l1 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [forward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or p.l0 and p.x = 4 or (p.l0 and (p.x = 2 or p.x = 6) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [forward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [forward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l2 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [forward reach with edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) [fixed point].

Round 2: finished, need another round.

Round 3: started.

Round 3: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward controlled-behavior: <bdd 24n 6p> -> p.l4 and p.x = 7 or p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l4 and p.x = 7 or p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) -> p.l0 and p.x = 0 or p.l4 and p.x = 7 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) [backward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and p.x = 0 or p.l4 and p.x = 7 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 7 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) [backward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 7 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and p.x = 7) or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) [backward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and p.x = 7) or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and p.x = 7 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) [backward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and p.x = 7 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and p.x = 7 or p.l2 and p.x = 3) or (p.l1 and (p.x = 1 or p.x = 5) or (p.l1 and p.x = 3 or p.l3 and p.x = 5)) [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and p.x = 7 or p.l2 and p.x = 3) or (p.l1 and (p.x = 1 or p.x = 5) or (p.l1 and p.x = 3 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and p.x = 7 or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or p.l1 and (p.x = 1 or p.x = 5) or (p.l1 and p.x = 3 or p.l3 and p.x = 5)) [backward reach with edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and p.x = 7 or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or p.l1 and (p.x = 1 or p.x = 5) or (p.l1 and p.x = 3 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and p.x = 7 or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and p.x = 7 or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 and (p.x = 1 or p.x = 5) or p.l2 and p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 5) or (p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 and (p.x = 1 or p.x = 5) or p.l2 and p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 5) or (p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 5) or (p.l2 or p.l6) and p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 5) or (p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 5) or (p.l2 or p.l6) and p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 5) or (p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 8) or (p.l0 and p.x = 4 or p.l0 and (p.x = 2 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or (p.l2 or p.l6) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or p.l3 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 5) or (p.l2 or p.l6) and p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 5) or (p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)).

Round 3: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (not p.l0 or p.x = 1 or (p.x = 3 or (p.x = 5 or 7 <= p.x and p.x <= 15))) and (not p.l4 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 5)) and (not p.l2 and not p.l6 or p.x != 3)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 5)) and (not p.l1 and not p.l5 or p.x != 3) and ((not p.l3 or not(p.x = 1 or p.x = 5)) and (not p.l3 or p.x != 3))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: (not p.l0 or p.x = 1 or (p.x = 3 or (p.x = 5 or 7 <= p.x and p.x <= 15))) and (not p.l4 or not(p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7))) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 5)) and (not p.l2 and not p.l6 or p.x != 3)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 5)) and (not p.l1 and not p.l5 or p.x != 3) and ((not p.l3 or not(p.x = 1 or p.x = 5)) and (not p.l3 or p.x != 3))) -> (not p.l0 or p.x = 1 or (p.x = 3 or (p.x = 5 or 7 <= p.x and p.x <= 15))) and (not p.l4 or not(p.x = 1 or p.x = 5)) and ((not p.l4 or p.x != 3) and (not p.l2 and not p.l6 or not(p.x = 1 or p.x = 5))) and ((not p.l2 and not p.l6 or p.x != 3) and (not p.l1 and not p.l5 or not(p.x = 1 or p.x = 5)) and ((not p.l1 and not p.l5 or p.x != 3) and ((not p.l3 or not(p.x = 1 or p.x = 5)) and (not p.l3 or p.x != 3)))) [backward reach with edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: (not p.l0 or p.x = 1 or (p.x = 3 or (p.x = 5 or 7 <= p.x and p.x <= 15))) and (not p.l4 or not(p.x = 1 or p.x = 5)) and ((not p.l4 or p.x != 3) and (not p.l2 and not p.l6 or not(p.x = 1 or p.x = 5))) and ((not p.l2 and not p.l6 or p.x != 3) and (not p.l1 and not p.l5 or not(p.x = 1 or p.x = 5)) and ((not p.l1 and not p.l5 or p.x != 3) and ((not p.l3 or not(p.x = 1 or p.x = 5)) and (not p.l3 or p.x != 3)))) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 3 or (p.x = 5 or p.x = 7)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 5) or (p.l2 or p.l6) and p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 5) or (p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3))).

Round 3: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 [initialization predicate]
Forward controlled-behavior: p.l0 -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l1 and (p.x = 1 or p.x = 5) or p.l1 and p.x = 3) [forward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l1 and (p.x = 1 or p.x = 5) or p.l1 and p.x = 3) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l2 and (p.x = 1 or p.x = 5) or (p.l2 and p.x = 3 or (p.l1 and (p.x = 1 or p.x = 5) or p.l1 and p.x = 3)) [forward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l2 and (p.x = 1 or p.x = 5) or (p.l2 and p.x = 3 or (p.l1 and (p.x = 1 or p.x = 5) or p.l1 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l2 and (p.x = 1 or p.x = 5) or (p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) [forward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l2 and (p.x = 1 or p.x = 5) or (p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 5) or p.l4 and p.x = 3) or (p.l2 and (p.x = 1 or p.x = 5) or p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) [forward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or (p.l4 and (p.x = 1 or p.x = 5) or p.l4 and p.x = 3) or (p.l2 and (p.x = 1 or p.x = 5) or p.l2 and p.x = 3 or ((p.l1 or p.l3) and (p.x = 1 or p.x = 5) or (p.l1 or p.l3) and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3))) [forward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or p.l2 and (p.x = 1 or p.x = 5)) or (p.l2 and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3))) -> p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3))) [forward reach with edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3))) [fixed point].

Round 3: finished, need another round.

Round 4: started.

Round 4: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward controlled-behavior: <bdd 24n 6p> -> p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) -> p.l0 and p.x = 0 or p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) [backward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and p.x = 0 or p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) -> p.l0 and (p.x = 0 or p.x = 2) or p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) [backward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5) -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) [backward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and p.x = 3 or (p.l1 and p.x = 1 or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and p.x = 3 or (p.l1 and (p.x = 1 or p.x = 3) or p.l3 and p.x = 5)) [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and p.x = 3 or (p.l1 and (p.x = 1 or p.x = 3) or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 and (p.x = 1 or p.x = 3) or p.l3 and p.x = 5)) [backward reach with edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 and (p.x = 1 or p.x = 3) or p.l3 and p.x = 5)) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l2 and (p.x = 1 or p.x = 3)) or (p.l1 and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l2 and (p.x = 1 or p.x = 3)) or (p.l1 and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or (p.l2 and (p.x = 1 or p.x = 3) or p.l1 and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or (p.l2 and (p.x = 1 or p.x = 3) or p.l1 and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l5) and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l5) and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or (p.l1 or p.l5) and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [backward reach with edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or (p.l1 or p.l5) and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) or p.l4 and (p.x = 1 or p.x = 5) or (p.l4 and p.x = 3 or (p.l2 or p.l6) and (p.x = 1 or p.x = 5)) or ((p.l2 or p.l6) and p.x = 3 or (p.l1 or p.l5) and (p.x = 1 or p.x = 5) or ((p.l1 or p.l5) and p.x = 3 or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3))) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or (p.l1 or p.l5) and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)).

Round 4: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 4)) and ((not p.l0 or p.x != 2) and (not p.l4 or not(p.x = 1 or p.x = 3))) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3)) and (not p.l1 and not p.l5 or not(p.x = 1 or p.x = 3)) and ((not p.l3 or not(p.x = 1 or p.x = 5)) and (not p.l3 or p.x != 3))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 4)) and ((not p.l0 or p.x != 2) and (not p.l4 or not(p.x = 1 or p.x = 3))) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3)) and (not p.l1 and not p.l5 or not(p.x = 1 or p.x = 3)) and ((not p.l3 or not(p.x = 1 or p.x = 5)) and (not p.l3 or p.x != 3))) -> (not p.l0 or not(p.x = 0 or p.x = 4)) and ((not p.l0 or p.x != 2) and (not p.l4 or not(p.x = 1 or p.x = 3))) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 3)) and (not p.l3 or not(p.x = 1 or p.x = 3)))) [backward reach with edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: (not p.l0 or not(p.x = 0 or p.x = 4)) and ((not p.l0 or p.x != 2) and (not p.l4 or not(p.x = 1 or p.x = 3))) and ((not p.l2 and not p.l6 or not(p.x = 1 or p.x = 3)) and ((not p.l1 and not p.l5 or not(p.x = 1 or p.x = 3)) and (not p.l3 or not(p.x = 1 or p.x = 3)))) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or (p.l1 or p.l5) and (p.x = 1 or p.x = 3) or (p.l3 and (p.x = 1 or p.x = 5) or p.l3 and p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3))).

Round 4: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 [initialization predicate]
Forward controlled-behavior: p.l0 -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l1 and (p.x = 1 or p.x = 3)) [forward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l1 and (p.x = 1 or p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and (p.x = 1 or p.x = 3) or p.l1 and (p.x = 1 or p.x = 3)) [forward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and (p.x = 1 or p.x = 3) or p.l1 and (p.x = 1 or p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3)) [forward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3)) -> p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l4 and (p.x = 1 or p.x = 3) or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3))) [forward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or p.l0 and p.x = 2 or (p.l4 and (p.x = 1 or p.x = 3) or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and (p.x = 1 or p.x = 3))) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or (p.l2 and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3))) [forward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or (p.l2 and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3))) -> p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3))) [forward reach with edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3))) [fixed point].

Round 4: finished, need another round.

Round 5: started.

Round 5: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward controlled-behavior: <bdd 24n 6p> -> p.l2 and p.x = 3 or p.l1 and p.x = 1 [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l2 and p.x = 3 or p.l1 and p.x = 1 -> p.l0 and p.x = 0 or (p.l2 and p.x = 3 or p.l1 and p.x = 1) [backward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward controlled-behavior: p.l0 and p.x = 0 or (p.l2 and p.x = 3 or p.l1 and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and p.x = 3 or p.l1 and p.x = 1) [backward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and p.x = 3 or p.l1 and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and (p.x = 1 or p.x = 3) or p.l1 and p.x = 1) [backward reach with edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and (p.x = 1 or p.x = 3) or p.l1 and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and p.x = 1) [backward reach with edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and p.x = 1) [backward reach with edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and (p.x = 1 or p.x = 3) or (p.l1 or p.l3) and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) [backward reach with edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) -> p.l0 and (p.x = 0 or p.x = 2) or (p.l4 and p.x = 1 or p.l2 and (p.x = 1 or p.x = 3)) or (p.l6 and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) [backward reach with edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3)))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l4 and p.x = 1 or p.l2 and (p.x = 1 or p.x = 3)) or (p.l6 and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 4) or (p.l0 and p.x = 2 or p.l4 and (p.x = 1 or p.x = 3)) or ((p.l2 or p.l6) and (p.x = 1 or p.x = 3) or ((p.l1 or p.l5) and (p.x = 1 or p.x = 3) or p.l3 and (p.x = 1 or p.x = 3))) -> p.l0 and (p.x = 0 or p.x = 2) or (p.l4 and p.x = 1 or p.l2 and (p.x = 1 or p.x = 3)) or (p.l6 and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)).

Round 5: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 12n 23p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: <bdd 12n 23p> -> (not p.l0 or (p.x = 1 or 3 <= p.x and p.x <= 15)) and (not p.l4 or p.x != 1) and ((not p.l2 and not p.l6 or p.x != 1) and ((not p.l1 and not p.l5 or p.x != 1) and (not p.l3 or p.x != 1))) [backward reach with edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: (not p.l0 or (p.x = 1 or 3 <= p.x and p.x <= 15)) and (not p.l4 or p.x != 1) and ((not p.l2 and not p.l6 or p.x != 1) and ((not p.l1 and not p.l5 or p.x != 1) and (not p.l3 or p.x != 1))) [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l4 and p.x = 1 or p.l2 and (p.x = 1 or p.x = 3)) or (p.l6 and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)).

Round 5: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 [initialization predicate]
Forward controlled-behavior: p.l0 -> p.l0 and (p.x = 0 or p.x = 2) [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) -> p.l0 and (p.x = 0 or p.x = 2) or p.l1 and p.x = 1 [forward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l1 and p.x = 1 -> p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and p.x = 1 or p.l1 and p.x = 1) [forward reach with edge: (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and p.x = 1 or p.l1 and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and p.x = 1 or (p.l1 or p.l3) and p.x = 1) [forward reach with edge: (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or (p.l2 and p.x = 1 or (p.l1 or p.l3) and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and p.x = 1 or (p.l1 or p.l3) and p.x = 1) [forward reach with edge: (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and p.x = 1 or (p.l1 or p.l3) and p.x = 1) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) [forward reach with edge: (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or (p.l2 and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) -> p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) [forward reach with edge: (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) [fixed point].

Round 5: finished, need another round.

Round 6: started.

Round 6: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward controlled-behavior: <bdd 24n 6p> -> p.l1 and p.x = 1 [restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l1 and p.x = 1 -> p.l0 and p.x = 0 or p.l1 and p.x = 1 [backward reach with edge: (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1), restricted to current/previous controlled-behavior predicate: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.l0 and p.x = 0 or p.l1 and p.x = 1 [fixed point].
Controlled behavior: p.l0 and (p.x = 0 or p.x = 2) or p.l4 and p.x = 1 or ((p.l2 or p.l6) and p.x = 1 or ((p.l1 or p.l5) and p.x = 1 or p.l3 and p.x = 1)) -> p.l0 and p.x = 0 or p.l1 and p.x = 1.

Round 6: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (not p.l0 or p.x != 0) and (not p.l1 or p.x != 1) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: (not p.l0 or p.x != 0) and (not p.l1 or p.x != 1) -> not p.l0 or p.x != 0 [backward reach with edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: not p.l0 or p.x != 0 [fixed point].
Controlled behavior: p.l0 and p.x = 0 or p.l1 and p.x = 1 -> p.l0 and p.x = 0.

Round 6: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 [initialization predicate]
Forward controlled-behavior: p.l0 -> p.l0 and p.x = 0 [restricted to current/previous controlled-behavior predicate: p.l0 and p.x = 0]
Forward reachability: iteration 1.
Forward controlled-behavior: p.l0 and p.x = 0 [fixed point].

Round 6: finished, need another round.

Round 7: started.

Round 7: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 24n 6p> [marker predicate]
Backward controlled-behavior: <bdd 24n 6p> -> false [restricted to current/previous controlled-behavior predicate: p.l0 and p.x = 0]
Backward reachability: iteration 1.
Backward controlled-behavior: false [fixed point].
Controlled behavior: p.l0 and p.x = 0 -> false.

Round 7: finished, all states are bad.

Computing controlled system guards.

Edge (event: c1) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l1): guard: p.l0 -> false.
Edge (event: c2) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l2): guard: p.l0 -> false.
Edge (event: c3) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l3): guard: p.l0 -> false.
Edge (event: c4) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l4): guard: p.l0 -> false.
Edge (event: c5) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l5): guard: p.l0 -> false.
Edge (event: c6) (guard: p.l0) (assignments: p.x := p.x + 1, p := p.l6): guard: p.l0 -> false.

Final synthesis result:
  State: (controlled-behavior: false)
    Edge: (event: c1) (guard: p.l0 -> false) (assignments: p.x := p.x + 1, p := p.l1)
    Edge: (event: c2) (guard: p.l0 -> false) (assignments: p.x := p.x + 1, p := p.l2)
    Edge: (event: c3) (guard: p.l0 -> false) (assignments: p.x := p.x + 1, p := p.l3)
    Edge: (event: c4) (guard: p.l0 -> false) (assignments: p.x := p.x + 1, p := p.l4)
    Edge: (event: c5) (guard: p.l0 -> false) (assignments: p.x := p.x + 1, p := p.l5)
    Edge: (event: c6) (guard: p.l0 -> false) (assignments: p.x := p.x + 1, p := p.l6)
    Edge: (event: u) (guard: p.l1) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l2) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l3) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l4) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l5) (assignments: p.x := p.x + 1, p := p.l0)
    Edge: (event: u) (guard: p.l6) (assignments: p.x := p.x + 1, p := p.l0)

Controlled system:                     exactly 0 states.

Initial (synthesis result):            false
Initial (uncontrolled system):         p.l0
Initial (controlled system):           false
Initial (removed by supervisor):       p.l0
Initial (added by supervisor):         not p.l0
