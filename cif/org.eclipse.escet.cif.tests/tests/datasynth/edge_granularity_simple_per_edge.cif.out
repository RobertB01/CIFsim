Reading CIF file "datasynth/edge_granularity_simple_per_edge.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p1    0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer   n/a        p2    1      2 * 2     3 * 2       4 * 2       75%
        3      discrete variable  int[0..3]  p2.x  2      2 * 2     4 * 2       4 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      10        18          20          90%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 6

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [before]
                    Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [before]
                    Total span:   2 (total)   0.33 (avg/edge) / WES:   0.481481 (total)   0.080247 (avg/edge) [after]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [before]
                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [before]
                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.518519 (total)   0.086420 (avg/edge) [before]
                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.481481 (total)   0.080247 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.481481 (total)   0.080247 (avg/edge) [before]
                        Total span:   2 (total)   0.33 (avg/edge) / WES:   0.481481 (total)   0.080247 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 8
                Maximum number of iterations: 20

                Total span:   12 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.131944 (avg/edge) [before]
                Total span:   12 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.131944 (avg/edge) [iteration 1]
                Total span:   12 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.131944 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 8
                Window length: 3

                Total span:   12 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.131944 (avg/edge) [before]
                Total span:   12 (total)   1.50 (avg/edge) / WES:   1.055556 (total)   0.131944 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..3]  p2.x  0      2 * 2     4 * 2       4 * 2       100%
        2      location pointer   n/a        p2    1      2 * 2     3 * 2       4 * 2       75%
        3      location pointer   n/a        p1    2      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      10        18          20          90%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             true
    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p1.l1
    Initial   (aut/locs init predicate):         p2.l1
    Initial   (auts/locs init predicate):        p2.l1 and p1.l1
    Initial   (uncontrolled system):             p2.l1 and p1.l1
    Initial   (system, combined init/plant inv): p2.l1 and p1.l1
    Initial   (system, combined init/state inv): p2.l1 and p1.l1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p1.l1
    Marked    (aut/locs marker predicate):       p2.l1
    Marked    (auts/locs marker predicate):      p2.l1 and p1.l1
    Marked    (uncontrolled system):             p2.l1 and p1.l1
    Marked    (system, combined mark/plant inv): p2.l1 and p1.l1
    Marked    (system, combined mark/state inv): p2.l1 and p1.l1

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        Event "b" needs:
            false

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2)
            Edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l2)
            Edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l3)
            Edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1)
            Edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l2)
            Edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l3)
            Edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1)
            Edge: (event: b) (guard: p2.l3) (assignments: p2 := p2.l1)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p2.l1 and p1.l1.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p2" (group: 1, domain: 2+3, BDD variables: 2, CIF/BDD values: 3/4)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Edge (event: b) (guard: p2.l3) (assignments: p2 := p2.l1): guard: p2.l3 -> false [state/event exclusion requirement: false].

    Restricted behavior using state/event exclusion requirements:
        State: (controlled-behavior: true)
            Edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2)
            Edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l2)
            Edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l3)
            Edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1)
            Edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l2)
            Edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l3)
            Edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1)
            Edge: (event: b) (guard: p2.l3 -> false) (assignments: p2 := p2.l1)

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p2.l1 and p1.l1 [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: p2.l1 and p1.l1 -> (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or (p2.x = 1 and p2.l1 or p2.x = 3 and (p2.l1 and p1.l1)) [backward reach with edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1), restricted to current/previous controlled-behavior predicate: true]
            Backward controlled-behavior: (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or (p2.x = 1 and p2.l1 or p2.x = 3 and (p2.l1 and p1.l1)) -> (p2.x = 0 or p2.x = 2) and (not p2.l3 and p1.l1) or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1)) [backward reach with edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 2:
            Backward controlled-behavior: (p2.x = 0 or p2.x = 2) and (not p2.l3 and p1.l1) or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1)) -> p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and p2.l1 or (p2.x = 2 and (p2.l2 and p1.l1) or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1))) [backward reach with edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: true]
            Backward controlled-behavior: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and p2.l1 or (p2.x = 2 and (p2.l2 and p1.l1) or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1))) -> p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1)) [backward reach with edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 3:
            No change this iteration.

        Backward controlled-behavior: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1)) [fixed point].

        Controlled behavior: true -> p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1)).

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (p2.x != 0 or (p2.l3 or p1.l2)) and (p2.x != 2 or p2.l3) and ((p2.x != 1 or p2.l3) and (p2.x != 3 or (p2.l3 or p1.l2))) [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            Backward uncontrolled bad-state: (p2.x != 0 or (p2.l3 or p1.l2)) and (p2.x != 2 or p2.l3) and ((p2.x != 1 or p2.l3) and (p2.x != 3 or (p2.l3 or p1.l2))) -> (p2.x != 0 or (p2.l3 or p1.l2)) and (p2.x != 2 or p2.l3) and ((p2.x != 1 or p2.l3) and (p2.x != 3 or (not p2.l2 or p1.l2))) [backward reach with edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l3)]

        Backward reachability iteration 2:
            No change this iteration.

        Backward uncontrolled bad-state: (p2.x != 0 or (p2.l3 or p1.l2)) and (p2.x != 2 or p2.l3) and ((p2.x != 1 or p2.l3) and (p2.x != 3 or (not p2.l2 or p1.l2))) [fixed point].

        Controlled behavior: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (not p2.l3 and p1.l1)) -> p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1)).

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p2.l1 and p1.l1 [initialization predicate]
        Forward controlled-behavior: p2.l1 and p1.l1 -> (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and (p2.l1 and p1.l1) [restricted to current/previous controlled-behavior predicate: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1))]

        Forward reachability iteration 1:
            Forward controlled-behavior: (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and (p2.l1 and p1.l1) -> (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and p2.l1 [forward reach with edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1))]
            Forward controlled-behavior: (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and p2.l1 -> p2.x = 0 and (p2.l1 and p1.l1) or p2.x = 2 and (p2.l1 and p1.l1) or (p2.x = 2 and (p2.l2 and p1.l2) or p2.x = 1 and p2.l1) [forward reach with edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1))]
            Forward controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or p2.x = 2 and (p2.l1 and p1.l1) or (p2.x = 2 and (p2.l2 and p1.l2) or p2.x = 1 and p2.l1) -> p2.x = 0 and (p2.l1 and p1.l1) or p2.x = 2 and p2.l1 or (p2.x = 2 and (p2.l2 and p1.l2) or p2.x = 1 and p2.l1) [forward reach with edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1))]

        Forward reachability iteration 2:
            Forward controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or p2.x = 2 and p2.l1 or (p2.x = 2 and (p2.l2 and p1.l2) or p2.x = 1 and p2.l1) -> p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1) [forward reach with edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1))]

        Forward reachability iteration 3:
            No change this iteration.

        Forward controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1) [fixed point].

        Controlled behavior: p2.x = 0 and (not p2.l3 and p1.l1) or p2.x = 2 and not p2.l3 or (p2.x = 1 and not p2.l3 or p2.x = 3 and (p2.l2 and p1.l1)) -> p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1).

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p2.l1 and p1.l1 [marker predicate]
        Backward controlled-behavior: p2.l1 and p1.l1 -> (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and (p2.l1 and p1.l1) [restricted to current/previous controlled-behavior predicate: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1)]

        Backward reachability iteration 1:
            Backward controlled-behavior: (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and (p2.l1 and p1.l1) -> (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and p2.l1 [backward reach with edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1)]
            Backward controlled-behavior: (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and p2.l1 -> p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and (not p2.l3 and p1.l1) or p2.x = 1 and p2.l1) [backward reach with edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1)]

        Backward reachability iteration 2:
            Backward controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and (not p2.l3 and p1.l1) or p2.x = 1 and p2.l1) -> p2.x = 0 and (p2.l1 and p1.l1) or p2.x = 2 and p2.l1 or (p2.x = 2 and (p2.l2 and p1.l1) or p2.x = 1 and p2.l1) [backward reach with edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l2), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1)]
            Backward controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or p2.x = 2 and p2.l1 or (p2.x = 2 and (p2.l2 and p1.l1) or p2.x = 1 and p2.l1) -> p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1) [backward reach with edge: (event: a) (guard: p2.l2) (assignments: p2 := p2.l1), restricted to current/previous controlled-behavior predicate: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1)]

        Backward reachability iteration 3:
            No change this iteration.

        Backward controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1) [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (p2.x != 0 or (not p2.l1 or p1.l2)) and ((p2.x != 2 or p2.l3) and (p2.x != 1 or not p2.l1)) [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: a) (guard: p2.l2) (assignments: p2 := p2.l1): guard: p2.l2 -> p2.x = 0 and (p2.l2 and p1.l1) or (p2.x = 2 and p2.l2 or p2.x = 1 and p2.l2).

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1))
        Edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2)
        Edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l2)
        Edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l1)) (assignments: p1 := p1.l2, p2 := p2.l3)
        Edge: (event: e) (guard: p2.x = 1 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1)
        Edge: (event: e) (guard: p2.x = 2 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l2)
        Edge: (event: e) (guard: p2.x = 3 and (p2.l1 and p1.l2)) (assignments: p1 := p1.l1, p2 := p2.l3)
        Edge: (event: a) (guard: p2.l2 -> p2.x = 0 and (p2.l2 and p1.l1) or (p2.x = 2 and p2.l2 or p2.x = 1 and p2.l2)) (assignments: p2 := p2.l1)
        Edge: (event: b) (guard: p2.l3 -> false) (assignments: p2 := p2.l1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 7 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            p2.x = 0 and (p2.l1 and p1.l1) or (p2.x = 2 and not p2.l3 or p2.x = 1 and p2.l1)
    Initial (uncontrolled system):         p2.l1 and p1.l1
    Initial (controlled system):           (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and (p2.l1 and p1.l1)
    Initial (removed by supervisor):       p2.x = 3 and (p2.l1 and p1.l1)
    Initial (added by supervisor):         p2.x != 3 or (not p2.l1 or p1.l2)

    Simplifying of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
        Initial: (p2.x = 0 or p2.x = 2) and (p2.l1 and p1.l1) or p2.x = 1 and (p2.l1 and p1.l1) -> p2.x != 3 [assume p2.l1 and p1.l1].

    Initial (output model):                p2.x != 3

Determining supervisor guards for output model:
    Event a: guard: p2.x = 0 and (p2.l2 and p1.l1) or (p2.x = 2 and p2.l2 or p2.x = 1 and p2.l2).
    Event b: guard: false.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Event a: guard: p2.x = 0 and (p2.l2 and p1.l1) or (p2.x = 2 and p2.l2 or p2.x = 1 and p2.l2) -> (p2.x != 0 or p1.l1) and p2.x != 3 [assume p2.l2].

Constructing output CIF specification.

Writing output CIF file "datasynth/edge_granularity_simple_per_edge.ctrlsys.real.cif".
