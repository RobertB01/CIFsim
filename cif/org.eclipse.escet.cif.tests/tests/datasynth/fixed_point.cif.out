Reading CIF file "datasynth/fixed_point.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[1..2]  p.x   1      2 * 2     2 * 2       4 * 2       50%
        3      discrete variable  int[1..2]  p.y   2      2 * 2     2 * 2       4 * 2       50%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      3      10        12          20          60%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 1

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 1

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 1

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 1
                Maximum number of iterations: 20

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 1
                Window length: 3

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 1):             p.x = 1
    Initial   (discrete variable 2):             p.y = 1
    Initial   (discrete variables):              p.x = 1 and p.y = 1
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.l0
    Initial   (auts/locs init predicate):        p.l0
    Initial   (uncontrolled system):             p.l0 and (p.x = 1 and p.y = 1)
    Initial   (system, combined init/plant inv): p.l0 and (p.x = 1 and p.y = 1)
    Initial   (system, combined init/state inv): p.l0 and (p.x = 1 and p.y = 1)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1)
    Marked    (auts/locs marker predicate):      p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1)
    Marked    (uncontrolled system):             p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1)
    Marked    (system, combined mark/plant inv): p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1)
    Marked    (system, combined mark/state inv): p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1)

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c) (guard: p.l0) (assignments: p := p.l1)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.l0 and (p.x = 1 and p.y = 1).

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[1..2]" (group: 1, domain: 2+3, BDD variables: 2, CIF/BDD values: 2/4)].
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.y" of type "int[1..2]" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 2/4)].

    Extended controlled-behavior predicate using variable ranges: true.

<<<<<<< HEAD
Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) [marker predicate]
Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) -> (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))) [restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))) [fixed point].
Controlled behavior: true -> (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))).
=======
Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.
>>>>>>> refs/remotes/origin/develop

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

<<<<<<< HEAD
Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.l0 and (p.x = 1 and p.y = 1) [initialization predicate]
Forward controlled-behavior: p.x = 1 and p.y = 1 [fixed point].
Controlled behavior: (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))) -> p.x = 1 and p.y = 1.
=======
Re-initializing edges for being applied.
>>>>>>> refs/remotes/origin/develop

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) [marker predicate]
        Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) -> (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))) [restricted to current/previous controlled-behavior predicate: true]

<<<<<<< HEAD
Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) [marker predicate]
Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) -> p.x = 1 and p.y = 1 [restricted to current/previous controlled-behavior predicate: p.x = 1 and p.y = 1]
Backward controlled-behavior: p.x = 1 and p.y = 1 [fixed point].
=======
        Backward reachability iteration 1:
            No change this iteration.
>>>>>>> refs/remotes/origin/develop

        Backward controlled-behavior: (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))) [fixed point].

        Controlled behavior: true -> (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))).

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: p.l0 and p.x = 2 or (p.l1 and p.x = 2 or p.l1 and (p.x = 1 and p.y = 2)) [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.l0 and (p.x = 1 and p.y = 1) [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: p.l0 and (p.x = 1 and p.y = 1) -> p.x = 1 and p.y = 1 [forward reach with edge: (event: c) (guard: p.l0) (assignments: p := p.l1), restricted to current/previous controlled-behavior predicate: (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1)))]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: p.x = 1 and p.y = 1 [fixed point].

        Controlled behavior: (p.l1 or p.x = 1) and ((p.l0 or p.x = 1) and (p.l0 or (p.x = 2 or p.y = 1))) -> p.x = 1 and p.y = 1.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) [marker predicate]
        Backward controlled-behavior: p.l0 and p.x = 1 or p.l1 and (p.x = 1 and p.y = 1) -> p.x = 1 and p.y = 1 [restricted to current/previous controlled-behavior predicate: p.x = 1 and p.y = 1]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: p.x = 1 and p.y = 1 [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: p.x = 2 or p.y = 2 [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: c) (guard: p.l0) (assignments: p := p.l1): guard: p.l0 -> p.l0 and (p.x = 1 and p.y = 1).

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: p.x = 1 and p.y = 1)
        Edge: (event: c) (guard: p.l0 -> p.l0 and (p.x = 1 and p.y = 1)) (assignments: p := p.l1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 2 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            p.x = 1 and p.y = 1
    Initial (uncontrolled system):         p.l0 and (p.x = 1 and p.y = 1)
    Initial (controlled system):           p.l0 and (p.x = 1 and p.y = 1)
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event c: guard: p.l0 and (p.x = 1 and p.y = 1).

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Event c: guard: p.l0 and (p.x = 1 and p.y = 1) -> p.x = 1 and p.y = 1 [assume p.l0].

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/fixed_point.ctrlsys.real.cif".
