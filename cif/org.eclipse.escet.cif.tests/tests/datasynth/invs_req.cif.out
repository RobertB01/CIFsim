Reading CIF file "datasynth/invs_req.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..3]  p.x   1      2 * 2     4 * 2       4 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      6         12          12          100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 4

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 0
                Maximum number of iterations: 10

                Skipping algorithm: no hyper-edges.

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 0
                Window length: 2

                Skipping algorithm: no hyper-edges.

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..3]  p.x   0      2 * 2     4 * 2       4 * 2       100%
        2      location pointer   n/a        p     1      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      6         12          12          100%

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (component state req invariant):   p.x != 1
    Invariant (component state req invariant):   p.x != 2
    Invariant (components state req invariant):  p.x != 2 and p.x != 1
    Invariant (location state req invariant):    p.x != 0 or p.l2
    Invariant (location state req invariant):    p.x != 3 or p.l1
    Invariant (locations state req invariant):   (p.x != 0 or p.l2) and (p.x != 3 or p.l1)
    Invariant (system state req invariant):      p.x = 0 and p.l2 or p.x = 3 and p.l1

    Initial   (discrete variable 0):             true
    Initial   (discrete variables):              true
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             true
    Initial   (system, combined init/plant inv): true
    Initial   (system, combined init/state inv): p.x = 0 and p.l2 or p.x = 3 and p.l1

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): p.x = 0 and p.l2 or p.x = 3 and p.l1

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: true.

Restricting behavior using state requirements:
    Controlled behavior: true -> p.x = 0 and p.l2 or p.x = 3 and p.l1 [state requirements: p.x = 0 and p.l2 or p.x = 3 and p.l1].

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior not changed.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> p.x = 0 and p.l2 or p.x = 3 and p.l1 [restricted to current/previous controlled-behavior predicate: p.x = 0 and p.l2 or p.x = 3 and p.l1]

        Backward controlled-behavior: p.x = 0 and p.l2 or p.x = 3 and p.l1 [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (p.x != 0 or p.l1) and (p.x != 3 or p.l2) [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: true [initialization predicate]
        Forward controlled-behavior: true -> p.x = 0 and p.l2 or p.x = 3 and p.l1 [restricted to current/previous controlled-behavior predicate: p.x = 0 and p.l2 or p.x = 3 and p.l1]

        Forward controlled-behavior: p.x = 0 and p.l2 or p.x = 3 and p.l1 [fixed point].

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    No guards changed.

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: p.x = 0 and p.l2 or p.x = 3 and p.l1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 2 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            p.x = 0 and p.l2 or p.x = 3 and p.l1
    Initial (uncontrolled system):         true
    Initial (controlled system):           p.x = 0 and p.l2 or p.x = 3 and p.l1
    Initial (removed by supervisor):       (p.x != 0 or p.l1) and (p.x != 3 or p.l2)
    Initial (added by supervisor):         p.x = 0 and p.l2 or p.x = 3 and p.l1

    Simplifying of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
        Predicate not changed.

    Initial (output model):                p.x = 0 and p.l2 or p.x = 3 and p.l1

Determining supervisor guards for output model:
    No controllable events.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/invs_req.ctrlsys.real.cif".
