Reading CIF file "datasynth/multi_req_auts.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..13]  p.x   0      4 * 2     14 * 2      16 * 2      ~88%
        2      location pointer   n/a         r2    1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer   n/a         r3    2      2 * 2     3 * 2       4 * 2       75%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       3      14        38          44          ~86%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 4

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [before]
                    Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [before]
                    Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [before]
                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [before]
                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [before]
                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [before]
                        Total span:   3 (total)   0.75 (avg/edge) / WES:   0.555556 (total)   0.138889 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 7
                Maximum number of iterations: 20

                Total span:   13 (total)   1.86 (avg/edge) / WES:   1.269841 (total)   0.181406 (avg/edge) [before]
                Total span:   13 (total)   1.86 (avg/edge) / WES:   1.269841 (total)   0.181406 (avg/edge) [iteration 1]
                Total span:   13 (total)   1.86 (avg/edge) / WES:   1.269841 (total)   0.181406 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 7
                Window length: 3

                Total span:   13 (total)   1.86 (avg/edge) / WES:   1.269841 (total)   0.181406 (avg/edge) [before]
                Total span:   13 (total)   1.86 (avg/edge) / WES:   1.269841 (total)   0.181406 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p.x = 0
    Initial   (discrete variables):              p.x = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (aut/locs init predicate):         r2.l1
    Initial   (aut/locs init predicate):         r3.l1
    Initial   (auts/locs init predicate):        r2.l1 and r3.l1
    Initial   (uncontrolled system):             p.x = 0 and (r2.l1 and r3.l1)
    Initial   (system, combined init/plant inv): p.x = 0 and (r2.l1 and r3.l1)
    Initial   (system, combined init/state inv): p.x = 0 and (r2.l1 and r3.l1)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       r2.l1
    Marked    (aut/locs marker predicate):       r3.l1
    Marked    (auts/locs marker predicate):      r2.l1 and r3.l1
    Marked    (uncontrolled system):             r2.l1 and r3.l1
    Marked    (system, combined mark/plant inv): r2.l1 and r3.l1
    Marked    (system, combined mark/state inv): r2.l1 and r3.l1

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        Event "a" needs:
            true
            true
        Event "b" needs:
            r2.l2
            r3.l3

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l1) or (p.x = 6 and (r2.l1 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l1)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l2)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l2) or (p.x = 6 and (r2.l1 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l2)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l3)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l3) or (p.x = 6 and (r2.l1 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l3)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l1)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l1) or (p.x = 6 and (r2.l2 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l1)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l2)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l2) or (p.x = 6 and (r2.l2 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l2)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l3)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l3) or (p.x = 6 and (r2.l2 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l3)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l1)
            Edge: (event: b) (guard: r2.l2 and r3.l3)
            Edge: (event: b) (guard: r2.l2 and not r3.l3)
            Edge: (event: b) (guard: r2.l1 and r3.l3)
            Edge: (event: b) (guard: r2.l1 and not r3.l3)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.x = 0 and (r2.l1 and r3.l1).

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..13]" (group: 0, domain: 0+1, BDD variables: 4, CIF/BDD values: 14/16)].
    Controlled behavior: true -> true [range: true, variable: location pointer for automaton "r3" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 3/4)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Edge (event: b) (guard: r2.l2 and not r3.l3): guard: r2.l2 and not r3.l3 -> false [state/event exclusion requirement: r2.l2 and r3.l3].
    Edge (event: b) (guard: r2.l1 and r3.l3): guard: r2.l1 and r3.l3 -> false [state/event exclusion requirement: r2.l2 and r3.l3].
    Edge (event: b) (guard: r2.l1 and not r3.l3): guard: r2.l1 and not r3.l3 -> false [state/event exclusion requirement: r2.l2 and r3.l3].

    Restricted behavior using state/event exclusion requirements:
        State: (controlled-behavior: true)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l1) or (p.x = 6 and (r2.l1 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l1)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l2)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l2) or (p.x = 6 and (r2.l1 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l2)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l3)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l3) or (p.x = 6 and (r2.l1 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l3)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l1)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l1) or (p.x = 6 and (r2.l2 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l1)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l2)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l2) or (p.x = 6 and (r2.l2 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l2)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l3)
            Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l3) or (p.x = 6 and (r2.l2 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l3)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l1)
            Edge: (event: b) (guard: r2.l2 and r3.l3)
            Edge: (event: b) (guard: r2.l2 and not r3.l3 -> false)
            Edge: (event: b) (guard: r2.l1 and r3.l3 -> false)
            Edge: (event: b) (guard: r2.l1 and not r3.l3 -> false)

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: r2.l1 and r3.l1 [marker predicate]
        Backward controlled-behavior: r2.l1 and r3.l1 -> not(p.x = 2 or (p.x = 3 or p.x = 6) or (p.x = 7 or (p.x = 10 or p.x = 11))) and (r2.l1 and r3.l1) or ((p.x = 2 or p.x = 3 or (p.x = 10 or p.x = 11)) and (r2.l1 and r3.l1) or (p.x = 6 or p.x = 7) and (r2.l1 and r3.l1)) [restricted to current/previous controlled-behavior predicate: true]

        Backward controlled-behavior: <bdd 24n 26p> [fixed point].

        Controlled behavior: true -> <bdd 24n 26p>.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 24n 24p> [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.x = 0 and (r2.l1 and r3.l1) [initialization predicate]

        Forward controlled-behavior: <bdd 26n 13p> [fixed point].

        Controlled behavior: <bdd 24n 26p> -> <bdd 26n 13p>.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: r2.l1 and r3.l1 [marker predicate]
        Backward controlled-behavior: r2.l1 and r3.l1 -> p.x = 0 and (r2.l1 and r3.l1) or (p.x = 12 and (r2.l1 and r3.l1) or p.x = 6 and (r2.l1 and r3.l1)) [restricted to current/previous controlled-behavior predicate: <bdd 26n 13p>]

        Backward controlled-behavior: <bdd 26n 13p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 26n 42p> [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l1) or (p.x = 6 and (r2.l1 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l1)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l2): guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l1) or (p.x = 6 and (r2.l1 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l1))) -> p.x = 0 and (r2.l1 and r3.l1) or p.x = 6 and (r2.l1 and r3.l1).
    Edge (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l2) or (p.x = 6 and (r2.l1 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l2)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l3): guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l2) or (p.x = 6 and (r2.l1 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l2))) -> p.x = 4 and (r2.l1 and r3.l2) or p.x = 10 and (r2.l1 and r3.l2).
    Edge (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l3) or (p.x = 6 and (r2.l1 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l3)))) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l1): guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l3) or (p.x = 6 and (r2.l1 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l3))) -> p.x = 8 and (r2.l1 and r3.l3) or p.x = 2 and (r2.l1 and r3.l3).
    Edge (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l1) or (p.x = 6 and (r2.l2 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l1)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l2): guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l1) or (p.x = 6 and (r2.l2 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l1))) -> p.x = 9 and (r2.l2 and r3.l1) or p.x = 3 and (r2.l2 and r3.l1).
    Edge (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l2) or (p.x = 6 and (r2.l2 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l2)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l3): guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l2) or (p.x = 6 and (r2.l2 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l2))) -> p.x = 1 and (r2.l2 and r3.l2) or p.x = 7 and (r2.l2 and r3.l2).
    Edge (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l3) or (p.x = 6 and (r2.l2 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l3)))) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l1): guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l3) or (p.x = 6 and (r2.l2 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l3))) -> p.x = 5 and (r2.l2 and r3.l3) or p.x = 11 and (r2.l2 and r3.l3).
    Edge (event: b) (guard: r2.l2 and r3.l3): guard: r2.l2 and r3.l3 -> p.x = 5 and (r2.l2 and r3.l3) or p.x = 11 and (r2.l2 and r3.l3).

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: <bdd 26n 13p>)
        Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l1) or (p.x = 6 and (r2.l1 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l1))) -> p.x = 0 and (r2.l1 and r3.l1) or p.x = 6 and (r2.l1 and r3.l1)) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l2)
        Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l2) or (p.x = 6 and (r2.l1 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l2))) -> p.x = 4 and (r2.l1 and r3.l2) or p.x = 10 and (r2.l1 and r3.l2)) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l3)
        Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l1 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l1 and r3.l3) or (p.x = 6 and (r2.l1 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l1 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l1 and r3.l3))) -> p.x = 8 and (r2.l1 and r3.l3) or p.x = 2 and (r2.l1 and r3.l3)) (assignments: p.x := p.x + 1, r2 := r2.l2, r3 := r3.l1)
        Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l1) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l1) or (p.x = 6 and (r2.l2 and r3.l1) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l1) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l1))) -> p.x = 9 and (r2.l2 and r3.l1) or p.x = 3 and (r2.l2 and r3.l1)) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l2)
        Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l2) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l2) or (p.x = 6 and (r2.l2 and r3.l2) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l2) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l2))) -> p.x = 1 and (r2.l2 and r3.l2) or p.x = 7 and (r2.l2 and r3.l2)) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l3)
        Edge: (event: a) (guard: (p.x = 0 or p.x = 4 or (p.x = 8 or p.x = 12)) and (r2.l2 and r3.l3) or (p.x = 2 or p.x = 10) and (r2.l2 and r3.l3) or (p.x = 6 and (r2.l2 and r3.l3) or ((p.x = 1 or p.x = 3 or (p.x = 9 or p.x = 11)) and (r2.l2 and r3.l3) or (p.x = 5 or p.x = 7) and (r2.l2 and r3.l3))) -> p.x = 5 and (r2.l2 and r3.l3) or p.x = 11 and (r2.l2 and r3.l3)) (assignments: p.x := p.x + 1, r2 := r2.l1, r3 := r3.l1)
        Edge: (event: b) (guard: r2.l2 and r3.l3 -> p.x = 5 and (r2.l2 and r3.l3) or p.x = 11 and (r2.l2 and r3.l3))
        Edge: (event: b) (guard: r2.l2 and not r3.l3 -> false)
        Edge: (event: b) (guard: r2.l1 and r3.l3 -> false)
        Edge: (event: b) (guard: r2.l1 and not r3.l3 -> false)

Computing initialization predicate of the controlled system.

Controlled system: exactly 13 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            <bdd 26n 13p>
    Initial (uncontrolled system):         p.x = 0 and (r2.l1 and r3.l1)
    Initial (controlled system):           p.x = 0 and (r2.l1 and r3.l1)
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event a: guard: <bdd 26n 12p>.
    Event b: guard: p.x = 5 and (r2.l2 and r3.l3) or p.x = 11 and (r2.l2 and r3.l3).

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Event a: guard: <bdd 26n 12p> -> <bdd 23n 12p> [assume p.x != 13].

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/multi_req_auts.ctrlsys.real.cif".
