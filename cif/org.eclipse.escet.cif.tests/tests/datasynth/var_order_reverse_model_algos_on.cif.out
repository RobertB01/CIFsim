Reading CIF file "datasynth/var_order_reverse_model_algos_on.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        buffer1        0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  buffer1.count  1      2 * 2     4 * 2       4 * 2       100%
  3      location pointer   n/a        buffer3        2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..3]  buffer3.count  3      2 * 2     4 * 2       4 * 2       100%
  5      location pointer   n/a        buffer2        4      1 * 2     2 * 2       2 * 2       100%
  6      discrete variable  int[0..3]  buffer2.count  5      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  Total                                               6      18        36          36          100%

Applying variable ordering:
  Applying 4 orderers, sequentially:
    Applying 2 orderers, sequentially:
      Applying model variable order:
        Effect: var-order

      Reversing the variable order:
        Relations: legacy
        Effect: both
        Number of hyper-edges: 22

        Total span:   13 (total)   0.59 (avg/edge) / WES:   0.290404 (total)   0.013200 (avg/edge) [before]
        Total span:   13 (total)   0.59 (avg/edge) / WES:   0.290404 (total)   0.013200 (avg/edge) [reversed]

    Applying DCSH algorithm:
      Metric: wes
      Relations: legacy
      Effect: var-order
      Number of hyper-edges: 22

      Applying Weighted Cuthill-McKee algorithm:
        Node finder: george-liu
        Relations: legacy
        Effect: var-order
        Number of graph edges: 6

        Total span:   13 (total)   0.59 (avg/edge) / WES:   0.247475 (total)   0.011249 (avg/edge) [before]
        Total span:   17 (total)   0.77 (avg/edge) / WES:   0.303030 (total)   0.013774 (avg/edge) [after]

      Found new best variable order.

      Applying Sloan algorithm:
        Relations: legacy
        Effect: var-order
        Number of graph edges: 6

        Total span:   13 (total)   0.59 (avg/edge) / WES:   0.247475 (total)   0.011249 (avg/edge) [before]
        Total span:   12 (total)   0.55 (avg/edge) / WES:   0.257576 (total)   0.011708 (avg/edge) [after]

      Found new best variable order.

      Applying 2 orderers, sequentially:
        Applying Weighted Cuthill-McKee algorithm:
          Node finder: george-liu
          Relations: legacy
          Effect: var-order
          Number of graph edges: 6

          Total span:   13 (total)   0.59 (avg/edge) / WES:   0.247475 (total)   0.011249 (avg/edge) [before]
          Total span:   17 (total)   0.77 (avg/edge) / WES:   0.303030 (total)   0.013774 (avg/edge) [after]

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 22

          Total span:   17 (total)   0.77 (avg/edge) / WES:   0.303030 (total)   0.013774 (avg/edge) [before]
          Total span:   17 (total)   0.77 (avg/edge) / WES:   0.303030 (total)   0.013774 (avg/edge) [reversed]

      Applying 2 orderers, sequentially:
        Applying Sloan algorithm:
          Relations: legacy
          Effect: var-order
          Number of graph edges: 6

          Total span:   13 (total)   0.59 (avg/edge) / WES:   0.247475 (total)   0.011249 (avg/edge) [before]
          Total span:   12 (total)   0.55 (avg/edge) / WES:   0.257576 (total)   0.011708 (avg/edge) [after]

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 22

          Total span:   12 (total)   0.55 (avg/edge) / WES:   0.257576 (total)   0.011708 (avg/edge) [before]
          Total span:   12 (total)   0.55 (avg/edge) / WES:   0.257576 (total)   0.011708 (avg/edge) [reversed]

      Found new best variable order.

    Applying FORCE algorithm:
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 12
      Maximum number of iterations: 20

      Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [before]
      Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [iteration 1]
      Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [after]

    Applying sliding window algorithm:
      Size: 4
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 12
      Window length: 4

      Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [before]
      Total span:   12 (total)   1.00 (avg/edge) / WES:   0.333333 (total)   0.027778 (avg/edge) [after]

Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type       Name           Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        buffer3        0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  buffer3.count  1      2 * 2     4 * 2       4 * 2       100%
  3      discrete variable  int[0..3]  buffer1.count  2      2 * 2     4 * 2       4 * 2       100%
  4      location pointer   n/a        buffer1        3      1 * 2     2 * 2       2 * 2       100%
  5      discrete variable  int[0..3]  buffer2.count  4      2 * 2     4 * 2       4 * 2       100%
  6      location pointer   n/a        buffer2        5      1 * 2     2 * 2       2 * 2       100%
  -----  -----------------  ---------  -------------  -----  --------  ----------  ----------  -----------
  Total                                               6      18        36          36          100%

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (component state req invariant):   buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)
Invariant (components state req invariant):  buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)

Initial   (discrete variable 1):             buffer3.count = 0
Initial   (discrete variable 2):             buffer1.count = 0
Initial   (discrete variable 4):             buffer2.count = 0
Initial   (discrete variables):              buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0)
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         buffer1.add
Initial   (aut/locs init predicate):         buffer3.add
Initial   (aut/locs init predicate):         buffer2.add
Initial   (auts/locs init predicate):        buffer3.add and (buffer1.add and buffer2.add)
Initial   (uncontrolled system):             buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add))
Initial   (system, combined init/plant inv): buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add))
Initial   (system, combined init/state inv): buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add))

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove)
    Edge: (event: buffer1.u_switch_loc) (guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1 := buffer1.add)
    Edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove)
    Edge: (event: buffer3.u_switch_loc) (guard: buffer3.remove and (buffer3.add or buffer3.count != 0)) (assignments: buffer3 := buffer3.add)
    Edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> buffer3.remove and (buffer3.add or buffer3.count != 0)) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
    Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
    Edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2.count := buffer2.count - 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add)).

Restricting behavior using state requirements.
Controlled behavior: true -> buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3) [state requirements: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)].

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3) [restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Backward reachability: iteration 1.
Backward controlled-behavior: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3) [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: buffer3.count = 3 and (buffer1.count = 3 and buffer2.count = 3) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add)) -> buffer3.add and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) -> buffer3.add and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer3.add and (buffer3.count = 0 and buffer1.count = 1) and (buffer1.add and (buffer2.count = 0 and buffer2.add)) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer3.add and (buffer3.count = 0 and buffer1.count = 1) and (buffer1.add and (buffer2.count = 0 and buffer2.add)) -> buffer3.count = 0 and buffer1.count = 0 and (buffer2.count = 0 and buffer2.add) or buffer3.count = 0 and buffer1.count = 1 and (buffer1.add and (buffer2.count = 0 and buffer2.add)) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.count = 0 and buffer1.count = 0 and (buffer2.count = 0 and buffer2.add) or buffer3.count = 0 and buffer1.count = 1 and (buffer1.add and (buffer2.count = 0 and buffer2.add)) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1) and (buffer1.add and (buffer2.count = 0 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer3.remove and (buffer3.count = 0 and buffer1.count = 1) and (buffer1.add and (buffer2.count = 0 and buffer2.add))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1) and (buffer1.add and (buffer2.count = 0 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 0 and buffer2.add)) or buffer3.remove and (buffer3.count = 0 and buffer1.count = 1) and (buffer1.add and (buffer2.count = 0 and buffer2.add))) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0))) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0)) or buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1) and (buffer1.add and (buffer2.count = 1 and buffer2.add))) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0)) or buffer3.remove and (buffer3.count = 0 and buffer1.count = 1) and (buffer1.add and (buffer2.count = 1 and buffer2.add)))) [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 2.
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0)) or buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1) and (buffer1.add and (buffer2.count = 1 and buffer2.add))) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and (buffer1.add and buffer2.count = 0)) or buffer3.remove and (buffer3.count = 0 and buffer1.count = 1) and (buffer1.add and (buffer2.count = 1 and buffer2.add)))) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and ((buffer1.count = 0 or buffer1.count = 1) and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and ((buffer1.count = 0 or buffer1.count = 1) and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and ((buffer1.count = 0 or buffer1.count = 1) and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and ((buffer1.count = 0 or buffer1.count = 1) and (buffer2.count = 1 and buffer2.add))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and ((buffer1.count = 0 or buffer1.count = 1) and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and ((buffer1.count = 0 or buffer1.count = 1) and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and ((buffer1.count = 0 or buffer1.count = 1) and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and ((buffer1.count = 0 or buffer1.count = 1) and (buffer2.count = 1 and buffer2.add))) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0))) or (buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)))) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0))) or (buffer3.remove and (buffer3.count = 0 and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add))))) [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0))) or (buffer3.add and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)))) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and buffer2.count = 0) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0))) or (buffer3.remove and (buffer3.count = 0 and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and buffer2.count = 0) or buffer3.remove and buffer3.count = 0 and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add))))) -> (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 0 and (buffer2.count = 1 and buffer2.add) or (buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2 and (buffer1.add and buffer2.count = 0)) or ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2 and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or ((buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and buffer2.count = 0) or (buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1 and (buffer2.count = 1 and buffer2.add))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0) or ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 0 and (buffer2.count = 1 and buffer2.add) or (buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2 and (buffer1.add and buffer2.count = 0)) or ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2 and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or ((buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and buffer2.count = 0) or (buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 1 and (buffer2.count = 1 and buffer2.add))) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 0 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0)) or buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add))) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 0 and buffer2.count = 0) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.add and buffer3.count = 1 and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0))))) or (buffer3.add and (buffer3.count = 1 and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and buffer2.count = 0) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0)) or (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and buffer2.count = 0) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)))))) [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 0 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0)) or buffer3.add and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add))) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer2.count = 0) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 0 and buffer2.count = 0) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.add and buffer3.count = 1 and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0))))) or (buffer3.add and (buffer3.count = 1 and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and buffer2.count = 0) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and buffer2.count = 0)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 1 and buffer2.add)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and (buffer1.add and buffer2.count = 0)) or (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 1) and buffer1.count = 2) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and buffer2.count = 0) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.add)))))) -> buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and (buffer1.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or buffer3.add and buffer3.count = 1 and (buffer1.count = 0 and (buffer2.count = 0 or buffer2.count = 1))) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 2 and (buffer1.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and (buffer1.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer2.count = 0 or buffer2.count = 1))))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 2 and (buffer1.add and (buffer2.count = 0 or buffer2.count = 1))) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or buffer3.add and buffer3.count = 1 and (buffer1.count = 0 and (buffer2.count = 0 or buffer2.count = 1))) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 2 and (buffer1.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 0 and (buffer2.count = 0 or buffer2.count = 1)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 2 and (buffer1.add and (buffer2.count = 0 or buffer2.count = 1))) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 1) and (buffer1.count = 1 and (buffer2.count = 0 or buffer2.count = 1))))) -> <bdd 11n 27p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 11n 27p> -> (buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and ((buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add))) and (buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3)))) and ((buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3)) and (buffer3.remove or (buffer3.count != 1 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and ((buffer3.remove or buffer3.count != 1 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.remove or buffer3.count != 1 or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add))))) and ((buffer3.remove or buffer3.count != 1 or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.remove or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer3.remove or buffer3.count != 3) and (buffer3.add or (buffer3.count = 2 or buffer3.count = 3) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 2 or buffer2.add)))) and ((buffer3.add or (buffer3.count = 2 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.add or (buffer3.count = 2 or buffer3.count = 3) or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add))) and ((buffer3.add or buffer3.count = 2 or (buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3))) and ((buffer3.add or buffer3.count = 2 or (buffer3.count = 3 or buffer1.count != 3)) and (buffer3.add or (buffer3.count = 0 or buffer3.count = 1)))))) [forward reach with edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and ((buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add))) and (buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3)))) and ((buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3)) and (buffer3.remove or (buffer3.count != 1 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and ((buffer3.remove or buffer3.count != 1 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.remove or buffer3.count != 1 or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add))))) and ((buffer3.remove or buffer3.count != 1 or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.remove or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer3.remove or buffer3.count != 3) and (buffer3.add or (buffer3.count = 2 or buffer3.count = 3) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 2 or buffer2.add)))) and ((buffer3.add or (buffer3.count = 2 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.add or (buffer3.count = 2 or buffer3.count = 3) or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add))) and ((buffer3.add or buffer3.count = 2 or (buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3))) and ((buffer3.add or buffer3.count = 2 or (buffer3.count = 3 or buffer1.count != 3)) and (buffer3.add or (buffer3.count = 0 or buffer3.count = 1)))))) -> <bdd 10n 27p> [forward reach with edge: (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: <bdd 10n 27p> -> (buffer3.count = 1 or (buffer3.count = 3 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and ((buffer3.count = 1 or buffer3.count = 3 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add)))) and ((buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3) or (buffer1.remove or (buffer2.count != 2 or buffer2.add))) and ((buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer3.count != 1 or buffer1.count = 1 or (buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer3.count != 1 or buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)) and ((buffer3.count != 1 or buffer1.count != 1 or (buffer2.count != 2 or buffer2.add)) and (buffer3.count != 1 or (buffer1.count != 1 or buffer2.count != 3))) and ((buffer3.count != 1 or buffer1.count != 3 or (buffer1.remove or (buffer2.count != 2 or buffer2.add))) and (buffer3.count != 1 or buffer1.count != 3 or (buffer1.remove or buffer2.count != 3)) and ((buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and buffer3.count != 3))) [forward reach with edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer3.count = 1 or (buffer3.count = 3 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and ((buffer3.count = 1 or buffer3.count = 3 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 1 or (buffer2.count != 2 or buffer2.add)))) and ((buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3) or (buffer1.remove or (buffer2.count != 2 or buffer2.add))) and ((buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and (buffer3.count = 1 or buffer3.count = 3 or (buffer1.count != 3 or buffer1.add)))) and ((buffer3.count != 1 or buffer1.count = 1 or (buffer1.count = 3 or (buffer2.count != 2 or buffer2.add))) and (buffer3.count != 1 or buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)) and ((buffer3.count != 1 or buffer1.count != 1 or (buffer2.count != 2 or buffer2.add)) and (buffer3.count != 1 or (buffer1.count != 1 or buffer2.count != 3))) and ((buffer3.count != 1 or buffer1.count != 3 or (buffer1.remove or (buffer2.count != 2 or buffer2.add))) and (buffer3.count != 1 or buffer1.count != 3 or (buffer1.remove or buffer2.count != 3)) and ((buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and buffer3.count != 3))) -> <bdd 10n 27p> [forward reach with edge: (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3.count := buffer3.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: <bdd 10n 27p> -> (buffer3.remove or buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)) and ((buffer3.remove or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.remove or buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.remove or (buffer1.count != 3 or buffer1.add)) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3))))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer3.add or buffer3.count != 1 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)))) and ((buffer3.add or buffer3.count != 1 or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.add or buffer3.count != 1 or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.add or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or buffer3.count != 3)))) [forward reach with edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward controlled-behavior: (buffer3.remove or buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)) and ((buffer3.remove or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.remove or buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.remove or (buffer1.count != 3 or buffer1.add)) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 1 or buffer2.count != 3))))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))) and (buffer3.add or buffer3.count != 1 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)))) and ((buffer3.add or buffer3.count != 1 or (buffer1.count != 1 or buffer2.count != 3)) and (buffer3.add or buffer3.count != 1 or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.add or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or buffer3.count != 3)))) -> <bdd 16n 44p> [forward reach with edge: (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1), restricted to current/previous controlled-behavior predicate: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3)]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 16n 44p> [fixed point].
Controlled behavior: buffer3.count != 3 or (buffer1.count != 3 or buffer2.count != 3) -> <bdd 16n 44p>.

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> <bdd 16n 44p> [restricted to current/previous controlled-behavior predicate: <bdd 16n 44p>]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 16n 44p> [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 16n 21p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: buffer1.c_add) (guard: buffer1.add -> (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1.count := buffer1.count + 1): guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add -> <bdd 16n 32p>.
Edge (event: buffer1.c_remove) (guard: buffer1.remove -> buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1.count := buffer1.count - 1): guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove -> (buffer3.remove or buffer1.count != 0) and (buffer3.remove or (buffer1.count != 2 or buffer1.remove)) and ((buffer3.remove or buffer1.count != 2 or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.remove or buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and ((buffer3.remove or (buffer1.count = 0 or buffer1.count = 2) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 0)) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 2 or buffer1.remove))) and (buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count = 0) or (buffer1.count = 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 0)) and (buffer3.add or buffer3.count != 1 or (buffer1.count != 2 or buffer1.remove))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 2) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 1 or (buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count = 0) or (buffer1.count = 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 3)))).
Edge (event: buffer3.c_add) (guard: buffer3.add -> (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3.count := buffer3.count + 1): guard: (buffer3.remove or buffer3.count != 3) and buffer3.add -> <bdd 15n 26p>.
Edge (event: buffer3.c_remove) (guard: buffer3.remove -> buffer3.remove and (buffer3.add or buffer3.count != 0)) (assignments: buffer3.count := buffer3.count - 1): guard: buffer3.remove and (buffer3.add or buffer3.count != 0) -> buffer3.remove and (buffer3.add or buffer3.count != 0) and ((buffer3.add or (buffer3.count != 2 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or buffer3.count != 2 or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or (buffer3.count != 2 or buffer1.count != 3) or (buffer1.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.add or buffer3.count != 2 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count != 3 or buffer1.remove or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 0 or (buffer3.count = 2 or (buffer1.count != 3 or buffer1.add)))))).
Edge (event: buffer2.c_add) (guard: buffer2.add -> (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2.count := buffer2.count + 1): guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add -> <bdd 14n 29p>.
Edge (event: buffer2.c_remove) (guard: buffer2.remove -> buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2.count := buffer2.count - 1): guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove -> buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove) or buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) or (buffer3.add and buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove) or buffer3.add and buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.add and buffer1.count = 3 and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or buffer3.add and buffer1.count = 3 and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove))))) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove))) or (buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)))))).

Final synthesis result:
  State: (controlled-behavior: <bdd 16n 44p>)
    Edge: (event: buffer1.u_switch_loc) (guard: (buffer1.count = 0 or buffer1.count = 2) and buffer1.add or buffer1.count = 1 and buffer1.add) (assignments: buffer1 := buffer1.remove)
    Edge: (event: buffer1.u_switch_loc) (guard: buffer1.count = 2 and buffer1.remove or (buffer1.count = 1 or buffer1.count = 3) and buffer1.remove) (assignments: buffer1 := buffer1.add)
    Edge: (event: buffer1.c_add) (guard: buffer1.add -> <bdd 16n 32p>) (assignments: buffer1.count := buffer1.count + 1)
    Edge: (event: buffer1.c_remove) (guard: buffer1.remove -> (buffer3.remove or buffer1.count != 0) and (buffer3.remove or (buffer1.count != 2 or buffer1.remove)) and ((buffer3.remove or buffer1.count != 2 or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.remove or buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and ((buffer3.remove or (buffer1.count = 0 or buffer1.count = 2) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 0)) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 2 or buffer1.remove))) and (buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count = 0) or (buffer1.count = 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 0)) and (buffer3.add or buffer3.count != 1 or (buffer1.count != 2 or buffer1.remove))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 2) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 1 or (buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count = 0) or (buffer1.count = 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 3))))) (assignments: buffer1.count := buffer1.count - 1)
    Edge: (event: buffer3.u_switch_loc) (guard: (buffer3.remove or buffer3.count != 3) and buffer3.add) (assignments: buffer3 := buffer3.remove)
    Edge: (event: buffer3.u_switch_loc) (guard: buffer3.remove and (buffer3.add or buffer3.count != 0)) (assignments: buffer3 := buffer3.add)
    Edge: (event: buffer3.c_add) (guard: buffer3.add -> <bdd 15n 26p>) (assignments: buffer3.count := buffer3.count + 1)
    Edge: (event: buffer3.c_remove) (guard: buffer3.remove -> buffer3.remove and (buffer3.add or buffer3.count != 0) and ((buffer3.add or (buffer3.count != 2 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or buffer3.count != 2 or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or (buffer3.count != 2 or buffer1.count != 3) or (buffer1.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.add or buffer3.count != 2 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count != 3 or buffer1.remove or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 0 or (buffer3.count = 2 or (buffer1.count != 3 or buffer1.add))))))) (assignments: buffer3.count := buffer3.count - 1)
    Edge: (event: buffer2.u_switch_loc) (guard: (buffer2.count = 0 or buffer2.count = 2) and buffer2.add or buffer2.count = 1 and buffer2.add) (assignments: buffer2 := buffer2.remove)
    Edge: (event: buffer2.u_switch_loc) (guard: buffer2.count = 2 and buffer2.remove or (buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) (assignments: buffer2 := buffer2.add)
    Edge: (event: buffer2.c_add) (guard: buffer2.add -> <bdd 14n 29p>) (assignments: buffer2.count := buffer2.count + 1)
    Edge: (event: buffer2.c_remove) (guard: buffer2.remove -> buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove) or buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) or (buffer3.add and buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove) or buffer3.add and buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.add and buffer1.count = 3 and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or buffer3.add and buffer1.count = 3 and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove))))) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove))) or (buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove))))))) (assignments: buffer2.count := buffer2.count - 1)

Controlled system: exactly 342 states.

Initial (synthesis result):            <bdd 16n 44p>
Initial (uncontrolled system):         buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add))
Initial (controlled system):           buffer3.add and (buffer3.count = 0 and buffer1.count = 0) and (buffer1.add and (buffer2.count = 0 and buffer2.add))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion plant invariants, state/event exclusion requirement invariants, state plant invariants, state requirement invariants, and controlled behavior:
  Event buffer1.c_add: guard: <bdd 16n 32p> -> (buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3)) and (buffer3.remove or (buffer3.count != 1 or buffer1.count != 3)) and ((buffer3.remove or buffer3.count != 3 or (buffer1.count != 2 or buffer2.count != 3)) and ((buffer3.remove or (buffer3.count != 3 or buffer1.count != 3)) and (buffer3.add or buffer1.count != 3))) [assume (buffer3.remove or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.remove or (buffer2.count != 3 or buffer2.add))) and ((buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer1.add)) and (buffer3.remove or buffer3.count != 1 or (buffer1.remove or (buffer2.count != 3 or buffer2.add)))) and ((buffer3.remove or (buffer3.count != 1 or buffer1.add)) and (buffer3.remove or (buffer3.count != 3 or buffer1.count = 1) or (buffer1.count = 3 or buffer1.remove or (buffer2.count != 3 or buffer2.add))) and ((buffer3.remove or buffer3.count != 3 or (buffer1.count = 1 or (buffer1.count = 3 or buffer1.add))) and (buffer3.remove or (buffer3.count != 3 or buffer1.count != 1) or (buffer1.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.remove or buffer3.count != 3 or (buffer1.count != 1 or buffer1.add)) and (buffer3.remove or buffer3.count != 3 or (buffer1.count != 3 or (buffer1.remove or buffer2.count != 3))) and ((buffer3.remove or buffer3.count != 3 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.remove or (buffer2.count != 3 or buffer2.add)))) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.add)) and (buffer3.add or buffer3.count != 1 or (buffer1.remove or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count != 1 or buffer1.add)) and (buffer3.add or buffer3.count != 3))))].
  Event buffer1.c_remove: guard: (buffer3.remove or buffer1.count != 0) and (buffer3.remove or (buffer1.count != 2 or buffer1.remove)) and ((buffer3.remove or buffer1.count != 2 or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.remove or buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and ((buffer3.remove or (buffer1.count = 0 or buffer1.count = 2) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 0)) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 2 or buffer1.remove))) and (buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count = 0) or (buffer1.count = 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 0)) and (buffer3.add or buffer3.count != 1 or (buffer1.count != 2 or buffer1.remove))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 2) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 1 or (buffer1.count = 0 or (buffer1.count = 2 or buffer1.remove))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count = 0) or (buffer1.count = 2 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 3)))) -> buffer1.count != 0 [assume (buffer3.remove or buffer1.count = 1 or (buffer1.count = 3 or buffer1.remove)) and (buffer3.remove or (buffer1.count = 1 or buffer1.count = 3) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and ((buffer3.remove or (buffer1.count != 1 or buffer1.remove)) and (buffer3.remove or buffer1.count != 1 or (buffer1.add or (buffer2.count != 3 or buffer2.add)))) and ((buffer3.remove or buffer1.count != 3) and (buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or (buffer1.count = 3 or buffer1.remove))) and ((buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count = 1) or (buffer1.count = 3 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 1 or buffer1.remove))))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 1 or buffer1.add or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or buffer1.count != 3)) and ((buffer3.add or buffer3.count != 1 or (buffer1.count = 1 or (buffer1.count = 3 or buffer1.remove))) and (buffer3.add or (buffer3.count != 1 or buffer1.count = 1) or (buffer1.count = 3 or buffer1.add or (buffer2.count != 3 or buffer2.add)))) and ((buffer3.add or buffer3.count != 1 or (buffer1.count != 1 or buffer1.remove)) and (buffer3.add or (buffer3.count != 1 or buffer1.count != 1) or (buffer1.add or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 3)) and (buffer3.add or buffer3.count != 3))))].
  Event buffer3.c_add: guard: <bdd 15n 26p> -> (buffer3.count != 2 or (buffer1.count != 3 or buffer2.count != 3)) and buffer3.count != 3 [assume <bdd 14n 26p>].
  Event buffer3.c_remove: guard: buffer3.remove and (buffer3.add or buffer3.count != 0) and ((buffer3.add or (buffer3.count != 2 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or buffer3.count != 2 or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or (buffer3.count != 2 or buffer1.count != 3) or (buffer1.remove or (buffer2.count != 3 or buffer2.add))))) and ((buffer3.add or buffer3.count != 2 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 0 or buffer3.count = 2) or (buffer1.count != 3 or buffer1.remove or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 0 or (buffer3.count = 2 or (buffer1.count != 3 or buffer1.add)))))) -> buffer3.count != 0 [assume buffer3.remove and (buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count = 1 or buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count = 1 or buffer3.count = 3) or (buffer1.count != 3 or buffer1.remove or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count = 1 or (buffer3.count = 3 or (buffer1.count != 3 or buffer1.add))))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count = 1) or (buffer1.count = 3 or (buffer2.count != 3 or buffer2.add))) and (buffer3.add or buffer3.count != 1 or (buffer1.count != 1 or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or (buffer3.count != 1 or buffer1.count != 3) or (buffer1.remove or (buffer2.count != 3 or buffer2.add))) and ((buffer3.add or buffer3.count != 1 or (buffer1.count != 3 or buffer1.add)) and (buffer3.add or buffer3.count != 3))))].
  Event buffer2.c_add: guard: <bdd 14n 29p> -> (buffer3.remove or buffer3.count = 1 or (buffer3.count = 3 or buffer2.count != 3)) and ((buffer3.remove or (buffer3.count != 1 or buffer2.count != 3)) and (buffer3.remove or buffer3.count != 3 or (buffer1.count = 1 or (buffer1.count = 3 or buffer2.count != 3)))) and ((buffer3.remove or buffer3.count != 3 or (buffer1.count != 1 or buffer2.count != 3)) and ((buffer3.remove or buffer3.count != 3 or (buffer1.count != 3 or (buffer2.count = 0 or buffer2.count = 1))) and (buffer3.add or buffer2.count != 3))) [assume buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer2.add) or buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer2.add) or (buffer3.add and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 3 and (buffer1.add and buffer2.add)) or buffer3.add and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer2.add)) or (buffer3.add and buffer3.count = 1 and (buffer1.count = 1 and buffer2.add) or buffer3.add and buffer3.count = 1 and (buffer1.count = 3 and (buffer1.add and buffer2.add)) or (buffer3.add and buffer3.count = 3 and ((buffer1.count = 0 or buffer1.count = 2) and buffer2.add) or buffer3.add and buffer3.count = 3 and (buffer1.count = 1 and buffer2.add))) or (buffer3.add and (buffer3.count = 3 and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.add)) or buffer3.add and (buffer3.count = 3 and buffer1.count = 3) and (buffer1.add and (buffer2.count = 1 and buffer2.add)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and buffer2.add) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and buffer2.add)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 3 and (buffer1.add and buffer2.add)) or buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and buffer2.add) or (buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and buffer2.add) or buffer3.remove and buffer3.count = 1 and (buffer1.count = 3 and (buffer1.add and buffer2.add)))))].
  Event buffer2.c_remove: guard: buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove) or buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove) or (buffer3.add and buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove) or buffer3.add and buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.add and buffer1.count = 3 and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or buffer3.add and buffer1.count = 3 and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove))))) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 2 and buffer2.remove))) or (buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 2 and buffer2.remove)) or (buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and (buffer2.count = 2 and buffer2.remove)) or buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 1 or buffer2.count = 3) and buffer2.remove)))))) -> buffer2.count != 0 [assume buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove) or buffer3.add and (buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 1 and buffer2.remove) or (buffer3.add and buffer1.count = 1 and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove) or buffer3.add and buffer1.count = 1 and (buffer2.count = 1 and buffer2.remove)) or (buffer3.add and buffer1.count = 3 and (buffer1.add and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove)) or buffer3.add and buffer1.count = 3 and (buffer1.add and (buffer2.count = 1 and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove)) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 1 and buffer2.remove)) or buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove))))) or (buffer3.remove and (buffer3.count = 0 or buffer3.count = 2) and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.remove)) or buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove)) or (buffer3.remove and ((buffer3.count = 0 or buffer3.count = 2) and buffer1.count = 3) and (buffer1.add and (buffer2.count = 1 and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove))) or (buffer3.remove and buffer3.count = 1 and ((buffer1.count = 0 or buffer1.count = 2) and (buffer2.count = 1 and buffer2.remove)) or buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove)) or (buffer3.remove and buffer3.count = 1 and (buffer1.count = 1 and (buffer2.count = 1 and buffer2.remove)) or (buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and ((buffer2.count = 0 or buffer2.count = 2) and buffer2.remove)) or buffer3.remove and (buffer3.count = 1 and buffer1.count = 3) and (buffer1.add and (buffer2.count = 1 and buffer2.remove))))))].

Constructing output CIF specification.
Writing output CIF file "datasynth/var_order_reverse_model_algos_on.ctrlsys.real.cif".
