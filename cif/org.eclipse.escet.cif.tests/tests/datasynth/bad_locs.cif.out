Reading CIF file "datasynth/bad_locs.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p     0      3 * 2     7 * 2       8 * 2       ~88%
  2      discrete variable  int[0..9]  p.x   1      4 * 2     10 * 2      16 * 2      ~63%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      2      14        34          48          ~71%

Applying variable ordering:
  Applying 4 orderers, sequentially:
    Applying model variable order:
      Effect: both

    Applying DCSH algorithm:
      Metric: wes
      Relations: legacy
      Effect: var-order
      Number of hyper-edges: 9

      Applying Weighted Cuthill-McKee algorithm:
        Node finder: george-liu
        Relations: legacy
        Effect: var-order
        Number of graph edges: 1

        Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
        Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

      Found new best variable order.

      Applying Sloan algorithm:
        Relations: legacy
        Effect: var-order
        Number of graph edges: 1

        Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
        Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

      Applying 2 orderers, sequentially:
        Applying Weighted Cuthill-McKee algorithm:
          Node finder: george-liu
          Relations: legacy
          Effect: var-order
          Number of graph edges: 1

          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 9

          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [reversed]

      Found new best variable order.

      Applying 2 orderers, sequentially:
        Applying Sloan algorithm:
          Relations: legacy
          Effect: var-order
          Number of graph edges: 1

          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 9

          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
          Total span:   2 (total)   0.22 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [reversed]

    Applying FORCE algorithm:
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 6
      Maximum number of iterations: 10

      Total span:   6 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.166667 (avg/edge) [before]
      Total span:   6 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.166667 (avg/edge) [iteration 1]
      Total span:   6 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.166667 (avg/edge) [after]

    Applying sliding window algorithm:
      Size: 4
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 6
      Window length: 2

      Total span:   6 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.166667 (avg/edge) [before]
      Total span:   6 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.166667 (avg/edge) [after]

Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..9]  p.x   0      4 * 2     10 * 2      16 * 2      ~63%
  2      location pointer   n/a        p     1      3 * 2     7 * 2       8 * 2       ~88%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      2      14        34          48          ~71%

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             p.x = 0
Initial   (discrete variables):              p.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p.l0
Initial   (auts/locs init predicate):        p.l0
Initial   (uncontrolled system):             p.x = 0 and p.l0
Initial   (system, combined init/plant inv): p.x = 0 and p.l0
Initial   (system, combined init/state inv): p.x = 0 and p.l0

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       not p.l4 and (not p.l5 and not p.l6)
Marked    (auts/locs marker predicate):      not p.l4 and (not p.l5 and not p.l6)
Marked    (uncontrolled system):             not p.l4 and (not p.l5 and not p.l6)
Marked    (system, combined mark/plant inv): not p.l4 and (not p.l5 and not p.l6)
Marked    (system, combined mark/state inv): not p.l4 and (not p.l5 and not p.l6)

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "u" needs:
    p.x != 5

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c) (guard: p.l0) (assignments: p.x := 1, p := p.l1)
    Edge: (event: c) (guard: p.l2) (assignments: p.x := 3, p := p.l3)
    Edge: (event: c) (guard: p.l4) (assignments: p.x := 5, p := p.l5)
    Edge: (event: u) (guard: p.l1) (assignments: p.x := 2, p := p.l2)
    Edge: (event: u) (guard: p.l3) (assignments: p.x := 4, p := p.l4)
    Edge: (event: u) (guard: p.l5) (assignments: p.x := 6, p := p.l6)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: p.x = 0 and p.l0.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..9]" (group: 0, domain: 0+1, BDD variables: 4, CIF/BDD values: 10/16)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 7/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Controlled behavior: true -> p.x != 5 or not p.l1 [state/event exclusion requirement: p.x != 5, edge: (event: u) (guard: p.l1) (assignments: p.x := 2, p := p.l2)].
Controlled behavior: p.x != 5 or not p.l1 -> (p.x != 5 or not p.l1) and (p.x != 5 or not p.l3) [state/event exclusion requirement: p.x != 5, edge: (event: u) (guard: p.l3) (assignments: p.x := 4, p := p.l4)].
Controlled behavior: (p.x != 5 or not p.l1) and (p.x != 5 or not p.l3) -> p.x != 5 or not p.l1 and (not p.l3 and not p.l5) [state/event exclusion requirement: p.x != 5, edge: (event: u) (guard: p.l5) (assignments: p.x := 6, p := p.l6)].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: p.x != 5 or not p.l1 and (not p.l3 and not p.l5))

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: not p.l4 and (not p.l5 and not p.l6) [marker predicate]
Backward controlled-behavior: not p.l4 and (not p.l5 and not p.l6) -> (p.x = 0 or p.x = 8) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 4 and not p.l4 and (not p.l5 and not p.l6) or (p.x = 2 or p.x = 6) and not p.l4 and (not p.l5 and not p.l6)) or ((p.x = 1 or p.x = 9) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 5 and (p.l0 or p.l2) or (p.x = 3 or p.x = 7) and not p.l4 and (not p.l5 and not p.l6))) [restricted to current/previous controlled-behavior predicate: p.x != 5 or not p.l1 and (not p.l3 and not p.l5)]
Backward controlled-behavior: (p.x = 0 or p.x = 8) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 4 and not p.l4 and (not p.l5 and not p.l6) or (p.x = 2 or p.x = 6) and not p.l4 and (not p.l5 and not p.l6)) or ((p.x = 1 or p.x = 9) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 5 and (p.l0 or p.l2) or (p.x = 3 or p.x = 7) and not p.l4 and (not p.l5 and not p.l6))) [fixed point].
Controlled behavior: p.x != 5 or not p.l1 and (not p.l3 and not p.l5) -> (p.x = 0 or p.x = 8) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 4 and not p.l4 and (not p.l5 and not p.l6) or (p.x = 2 or p.x = 6) and not p.l4 and (not p.l5 and not p.l6)) or ((p.x = 1 or p.x = 9) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 5 and (p.l0 or p.l2) or (p.x = 3 or p.x = 7) and not p.l4 and (not p.l5 and not p.l6))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.x = 0 or p.x = 8) and (p.l4 or (p.l5 or p.l6)) or (p.x = 4 and (p.l4 or (p.l5 or p.l6)) or (p.x = 2 or p.x = 6) and (p.l4 or (p.l5 or p.l6))) or ((p.x = 1 or p.x = 9) and (p.l4 or (p.l5 or p.l6)) or p.x = 5 and (p.l4 or p.l6) or (p.x = 5 and (p.l1 or (p.l3 or p.l5)) or (p.x = 3 or p.x = 7) and (p.l4 or (p.l5 or p.l6)))) [current/previous controlled behavior predicate]
Backward uncontrolled bad-state: <bdd 11n 21p> [fixed point].
Controlled behavior: (p.x = 0 or p.x = 8) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 4 and not p.l4 and (not p.l5 and not p.l6) or (p.x = 2 or p.x = 6) and not p.l4 and (not p.l5 and not p.l6)) or ((p.x = 1 or p.x = 9) and not p.l4 and (not p.l5 and not p.l6) or (p.x = 5 and (p.l0 or p.l2) or (p.x = 3 or p.x = 7) and not p.l4 and (not p.l5 and not p.l6))) -> (p.x = 0 or p.x = 8) and (p.l0 or p.l2) or (p.x = 0 or p.x = 8) and p.l1 or (p.x = 4 and (p.l0 or p.l2) or (p.x = 4 and p.l1 or (p.x = 2 or p.x = 6) and (p.l0 or p.l2))) or ((p.x = 2 or p.x = 6) and p.l1 or ((p.x = 1 or p.x = 9) and (p.l0 or p.l2) or (p.x = 1 or p.x = 9) and p.l1) or (p.x = 5 and (p.l0 or p.l2) or ((p.x = 3 or p.x = 7) and (p.l0 or p.l2) or (p.x = 3 or p.x = 7) and p.l1))).

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.x = 0 and p.l0 [initialization predicate]
Forward controlled-behavior: p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1) [fixed point].
Controlled behavior: (p.x = 0 or p.x = 8) and (p.l0 or p.l2) or (p.x = 0 or p.x = 8) and p.l1 or (p.x = 4 and (p.l0 or p.l2) or (p.x = 4 and p.l1 or (p.x = 2 or p.x = 6) and (p.l0 or p.l2))) or ((p.x = 2 or p.x = 6) and p.l1 or ((p.x = 1 or p.x = 9) and (p.l0 or p.l2) or (p.x = 1 or p.x = 9) and p.l1) or (p.x = 5 and (p.l0 or p.l2) or ((p.x = 3 or p.x = 7) and (p.l0 or p.l2) or (p.x = 3 or p.x = 7) and p.l1))) -> p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: not p.l4 and (not p.l5 and not p.l6) [marker predicate]
Backward controlled-behavior: not p.l4 and (not p.l5 and not p.l6) -> p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1) [restricted to current/previous controlled-behavior predicate: p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1)]
Backward controlled-behavior: p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (p.x != 0 or not p.l0) and ((p.x != 2 or not p.l2) and (p.x != 1 or not p.l1)) [current/previous controlled behavior predicate]

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c) (guard: p.l2) (assignments: p.x := 3, p := p.l3): guard: p.l2 -> false.
Edge (event: c) (guard: p.l4) (assignments: p.x := 5, p := p.l5): guard: p.l4 -> false.

Final synthesis result:
  State: (controlled-behavior: p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1))
    Edge: (event: c) (guard: p.l0) (assignments: p.x := 1, p := p.l1)
    Edge: (event: c) (guard: p.l2 -> false) (assignments: p.x := 3, p := p.l3)
    Edge: (event: c) (guard: p.l4 -> false) (assignments: p.x := 5, p := p.l5)
    Edge: (event: u) (guard: p.l1) (assignments: p.x := 2, p := p.l2)
    Edge: (event: u) (guard: p.l3) (assignments: p.x := 4, p := p.l4)
    Edge: (event: u) (guard: p.l5) (assignments: p.x := 6, p := p.l6)

Controlled system: exactly 3 states.

Initial (synthesis result):            p.x = 0 and p.l0 or (p.x = 2 and p.l2 or p.x = 1 and p.l1)
Initial (uncontrolled system):         p.x = 0 and p.l0
Initial (controlled system):           p.x = 0 and p.l0
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event c: guard: p.l0 -> p.l0 or p.l1 [assume p.l0 or (p.l4 or p.l2)].

Constructing output CIF specification.
Writing output CIF file "datasynth/bad_locs.ctrlsys.real.cif".
