Reading CIF file "datasynth/marking2.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..5]  p.x   1      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      8         16          20          80%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 1

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 1

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 1

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 1
                Maximum number of iterations: 10

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 1
                Window length: 2

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Synthesis input:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 1):             p.x = 0
    Initial   (discrete variables):              p.x = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.l1
    Initial   (auts/locs init predicate):        p.l1
    Initial   (uncontrolled system):             p.l1 and p.x = 0
    Initial   (system, combined init/plant inv): p.l1 and p.x = 0
    Initial   (system, combined init/state inv): p.l1 and p.x = 0

    Marked    (component marker predicate):      p.x != 4
    Marked    (component marker predicate):      p.x != 5
    Marked    (components marker predicate):     0 <= p.x and p.x <= 3
    Marked    (aut/locs marker predicate):       (p.l2 or 2 <= p.x and p.x <= 5) and ((p.l1 or (p.x = 1 or 3 <= p.x and p.x <= 5)) and (p.l1 or p.x != 1))
    Marked    (auts/locs marker predicate):      (p.l2 or 2 <= p.x and p.x <= 5) and ((p.l1 or (p.x = 1 or 3 <= p.x and p.x <= 5)) and (p.l1 or p.x != 1))
    Marked    (uncontrolled system):             p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3
    Marked    (system, combined mark/plant inv): p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3
    Marked    (system, combined mark/state inv): p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: p.c) (guard: p.l1) (assignments: p := p.l2)

Checking input for potential problems.

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.l1 and p.x = 0.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].

    Extended controlled-behavior predicate using variable ranges: true.

<<<<<<< HEAD
Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [marker predicate]
Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 -> p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [fixed point].
Controlled behavior: true -> p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3.
=======
Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.
>>>>>>> refs/remotes/origin/develop

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [marker predicate]
        Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 -> p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [fixed point].

        Controlled behavior: true -> p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3.

    Finished: no initialization possible.

Computing final controlled system guards:
    Edge (event: p.c) (guard: p.l1) (assignments: p := p.l2): guard: p.l1 -> p.l1 and p.x = 3.

Cleaning up cached predicate of edges that were used when applying edges.

Final synthesis result:
    State: (controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3)
        Edge: (event: p.c) (guard: p.l1 -> p.l1 and p.x = 3) (assignments: p := p.l2)

Computing initialization predicate of the controlled system.

Controlled system: exactly 0 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3
    Initial (uncontrolled system):         p.l1 and p.x = 0
    Initial (controlled system):           false
    Initial (removed by supervisor):       p.l1 and p.x = 0
    Initial (added by supervisor):         p.l2 or p.x != 0

    Simplifying of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
        Predicate not changed.

    Initial (output model):                false

