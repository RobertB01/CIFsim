Reading CIF file "datasynth/marking2.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        p     0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..5]  p.x   1      3 * 2     6 * 2       8 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      2      8         16          20          80%

Applying automatic variable ordering:
  Number of hyperedges: 1

  Applying FORCE algorithm:
    Maximum number of iterations: 10

    Total span:                    0 (total)                 0.00 (avg/edge) [before]
    Total span:                    0 (total)                 0.00 (avg/edge) [iteration 1]
    Total span:                    0 (total)                 0.00 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 2

    Total span:                    0 (total)                 0.00 (avg/edge) [before]
    Total span:                    0 (total)                 0.00 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):             p.x = 0
Initial   (discrete variables):              p.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p.l1
Initial   (auts/locs init predicate):        p.l1
Initial   (uncontrolled system):             p.l1 and p.x = 0
Initial   (system, combined init/plant inv): p.l1 and p.x = 0
Initial   (system, combined init/state inv): p.l1 and p.x = 0

Marked    (component marker predicate):      p.x != 4
Marked    (component marker predicate):      p.x != 5
Marked    (components marker predicate):     0 <= p.x and p.x <= 3
Marked    (aut/locs marker predicate):       (p.l2 or 2 <= p.x and p.x <= 5) and ((p.l1 or (p.x = 1 or 3 <= p.x and p.x <= 5)) and (p.l1 or p.x != 1))
Marked    (auts/locs marker predicate):      (p.l2 or 2 <= p.x and p.x <= 5) and ((p.l1 or (p.x = 1 or 3 <= p.x and p.x <= 5)) and (p.l1 or p.x != 1))
Marked    (uncontrolled system):             p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3
Marked    (system, combined mark/plant inv): p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3
Marked    (system, combined mark/state inv): p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: p.c) (guard: p.l1) (assignments: p := p.l2)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [marker predicate]
Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 -> p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3 [fixed point].
Controlled behavior: true -> p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3.

Round 1: finished, no initialization possible.

Computing controlled system guards.

Edge (event: p.c) (guard: p.l1) (assignments: p := p.l2): guard: p.l1 -> p.l1 and p.x = 3.

Final synthesis result:
  State: (controlled-behavior: p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3)
    Edge: (event: p.c) (guard: p.l1 -> p.l1 and p.x = 3) (assignments: p := p.l2)

Controlled system:                     exactly 0 states.

Initial (synthesis result):            p.l1 and (p.x = 2 or p.x = 3) or p.l2 and p.x = 3
Initial (uncontrolled system):         p.l1 and p.x = 0
Initial (controlled system):           false
Initial (removed by supervisor):       p.l1 and p.x = 0
Initial (added by supervisor):         p.l2 or p.x != 0
