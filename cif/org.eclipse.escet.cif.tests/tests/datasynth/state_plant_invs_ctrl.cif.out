Reading CIF file "datasynth/state_plant_invs_ctrl.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name   Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  -----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  A.Vc1  0      3 * 2     6 * 2       8 * 2       75%
        2      discrete variable  int[0..5]  A.Vc2  1      3 * 2     6 * 2       8 * 2       75%
        3      discrete variable  int[0..5]  A.Vc3  2      3 * 2     6 * 2       8 * 2       75%
        4      discrete variable  int[0..5]  A.Vc4  3      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  -----  -----  --------  ----------  ----------  -----------
        Total                                       4      24        48          64          75%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 11

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 11

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.170455 (total)   0.015496 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.170455 (total)   0.015496 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 11

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.170455 (total)   0.015496 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.170455 (total)   0.015496 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Maximum number of iterations: 20

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.187500 (total)   0.046875 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.187500 (total)   0.046875 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.187500 (total)   0.046875 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Window length: 4

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.187500 (total)   0.046875 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.187500 (total)   0.046875 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (component state plant invariant): A.Vc2 != 3
    Invariant (component state plant invariant): A.Vc3 != 4
    Invariant (components state plant inv):      (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and A.Vc2 != 3)
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and A.Vc2 != 3)

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             A.Vc1 = 0
    Initial   (discrete variable 1):             A.Vc2 = 0
    Initial   (discrete variable 2):             A.Vc3 = 0
    Initial   (discrete variable 3):             A.Vc4 = 0
    Initial   (discrete variables):              A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0)
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0)
    Initial   (system, combined init/plant inv): A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0)
    Initial   (system, combined init/state inv): A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and A.Vc2 != 3)
    Marked    (system, combined mark/state inv): (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and A.Vc2 != 3)

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c0) (guard: true)
            Edge: (event: c1) (guard: A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1)
            Edge: (event: c2) (guard: true) (assignments: A.Vc2 := A.Vc2 + 1)
            Edge: (event: c3) (guard: true) (assignments: A.Vc3 := A.Vc3 + 1)
            Edge: (event: c4) (guard: true) (assignments: A.Vc4 := A.Vc4 + 1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: c1) (guard: A.Vc1 != 4 -> A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1)
    Edge: (event: c2) (guard: true -> true) (assignments: A.Vc2 := A.Vc2 + 1)
    Edge: (event: c3) (guard: true -> true) (assignments: A.Vc3 := A.Vc3 + 1)
    Edge: (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants.

Restricting uncontrolled system behavior using state plant invariants.

Edge (event: c2) (guard: true -> true) (assignments: A.Vc2 := A.Vc2 + 1): guard: true -> (1 <= A.Vc2 and A.Vc2 <= 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and A.Vc2 != 2 and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and (A.Vc2 != 3 or A.Vc3 != 4)).
Edge (event: c3) (guard: true -> true) (assignments: A.Vc3 := A.Vc3 + 1): guard: true -> (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 3)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 3)) and A.Vc2 != 3).

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0).

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vc1" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vc2" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vc3" of type "int[0..5]" (group: 2, domain: 4+5, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "A.Vc4" of type "int[0..5]" (group: 3, domain: 6+7, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Restricting behavior using implicit runtime error requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0) -> (A.Vc1 = 0 or A.Vc1 = 1) and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0) [forward reach with edge: (event: c1) (guard: A.Vc1 != 4 -> A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 1) and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0) -> (A.Vc1 = 0 or A.Vc1 = 1) and (A.Vc2 = 0 or A.Vc2 = 1) and (A.Vc3 = 0 and A.Vc4 = 0) [forward reach with edge: (event: c2) (guard: true -> (1 <= A.Vc2 and A.Vc2 <= 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and A.Vc2 != 2 and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and (A.Vc2 != 3 or A.Vc3 != 4))) (assignments: A.Vc2 := A.Vc2 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 1) and (A.Vc2 = 0 or A.Vc2 = 1) and (A.Vc3 = 0 and A.Vc4 = 0) -> (A.Vc1 = 0 or A.Vc1 = 1) and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and A.Vc4 = 0) [forward reach with edge: (event: c3) (guard: true -> (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 3)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 3)) and A.Vc2 != 3)) (assignments: A.Vc3 := A.Vc3 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 1) and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and A.Vc4 = 0) -> (A.Vc1 = 0 or A.Vc1 = 1) and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) [forward reach with edge: (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 1) and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) -> (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) [forward reach with edge: (event: c1) (guard: A.Vc1 != 4 -> A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 1) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) -> (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1))) [forward reach with edge: (event: c2) (guard: true -> (1 <= A.Vc2 and A.Vc2 <= 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and A.Vc2 != 2 and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and (A.Vc2 != 3 or A.Vc3 != 4))) (assignments: A.Vc2 := A.Vc2 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 1) and (A.Vc4 = 0 or A.Vc4 = 1))) -> (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1)) or ((A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1))) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1)))) [forward reach with edge: (event: c3) (guard: true -> (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 3)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 3)) and A.Vc2 != 3)) (assignments: A.Vc3 := A.Vc3 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1)) or ((A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1))) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1)) or (A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 1)) or A.Vc1 = 1 and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 1)))) -> (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or ((A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and A.Vc4 = 1)) or ((A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or ((A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and (A.Vc3 = 1 and A.Vc4 = 1))) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and A.Vc4 = 1)) or (A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or (A.Vc1 = 1 and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and A.Vc2 = 1 and (A.Vc3 = 1 and A.Vc4 = 1)))) [forward reach with edge: (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or ((A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and A.Vc4 = 1)) or ((A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or ((A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or (A.Vc1 = 0 or A.Vc1 = 2) and A.Vc2 = 1 and (A.Vc3 = 1 and A.Vc4 = 1))) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or (A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and (A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and A.Vc4 = 1)) or (A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1) or (A.Vc1 = 1 and A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2)) or A.Vc1 = 1 and A.Vc2 = 1 and (A.Vc3 = 1 and A.Vc4 = 1)))) -> 0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1)) or (0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and A.Vc4 = 1))) or (0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1)) or (0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and (A.Vc3 = 1 and A.Vc4 = 1)))) [forward reach with edge: (event: c1) (guard: A.Vc1 != 4 -> A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: 0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1)) or (0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and ((A.Vc2 = 0 or A.Vc2 = 2) and (A.Vc3 = 1 and A.Vc4 = 1))) or (0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and ((A.Vc3 = 0 or A.Vc3 = 2) and A.Vc4 = 1)) or (0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and (A.Vc3 = 1 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and A.Vc1 <= 3 and (A.Vc2 = 1 and (A.Vc3 = 1 and A.Vc4 = 1)))) -> 0 <= A.Vc1 and (A.Vc1 <= 3 and (A.Vc2 = 0 or A.Vc2 = 2)) and (0 <= A.Vc3 and (A.Vc3 <= 3 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and (A.Vc1 <= 3 and (A.Vc2 = 0 or A.Vc2 = 2)) and (0 <= A.Vc3 and (A.Vc3 <= 3 and A.Vc4 = 1)) or (0 <= A.Vc1 and (A.Vc1 <= 3 and A.Vc2 = 1) and (0 <= A.Vc3 and (A.Vc3 <= 3 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and (A.Vc1 <= 3 and A.Vc2 = 1) and (0 <= A.Vc3 and (A.Vc3 <= 3 and A.Vc4 = 1))) [forward reach with edge: (event: c3) (guard: true -> (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 3)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 3)) and A.Vc2 != 3)) (assignments: A.Vc3 := A.Vc3 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: 0 <= A.Vc1 and (A.Vc1 <= 3 and (A.Vc2 = 0 or A.Vc2 = 2)) and (0 <= A.Vc3 and (A.Vc3 <= 3 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and (A.Vc1 <= 3 and (A.Vc2 = 0 or A.Vc2 = 2)) and (0 <= A.Vc3 and (A.Vc3 <= 3 and A.Vc4 = 1)) or (0 <= A.Vc1 and (A.Vc1 <= 3 and A.Vc2 = 1) and (0 <= A.Vc3 and (A.Vc3 <= 3 and (A.Vc4 = 0 or A.Vc4 = 2))) or 0 <= A.Vc1 and (A.Vc1 <= 3 and A.Vc2 = 1) and (0 <= A.Vc3 and (A.Vc3 <= 3 and A.Vc4 = 1))) -> 0 <= A.Vc1 and (A.Vc1 <= 3 and (A.Vc2 = 0 or A.Vc2 = 2)) and (0 <= A.Vc3 and A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or 0 <= A.Vc1 and (A.Vc1 <= 3 and A.Vc2 = 1) and (0 <= A.Vc3 and A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) [forward reach with edge: (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: 0 <= A.Vc1 and (A.Vc1 <= 3 and (A.Vc2 = 0 or A.Vc2 = 2)) and (0 <= A.Vc3 and A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or 0 <= A.Vc1 and (A.Vc1 <= 3 and A.Vc2 = 1) and (0 <= A.Vc3 and A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) -> (A.Vc1 = 0 or A.Vc1 = 4) and ((A.Vc2 = 0 or A.Vc2 = 2) and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or ((A.Vc1 = 0 or A.Vc1 = 4) and (A.Vc2 = 1 and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or A.Vc1 = 2 and ((A.Vc2 = 0 or A.Vc2 = 2) and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3))) or (A.Vc1 = 2 and (A.Vc2 = 1 and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or ((A.Vc1 = 1 or A.Vc1 = 3) and ((A.Vc2 = 0 or A.Vc2 = 2) and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or (A.Vc1 = 1 or A.Vc1 = 3) and (A.Vc2 = 1 and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)))) [forward reach with edge: (event: c1) (guard: A.Vc1 != 4 -> A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: (A.Vc1 = 0 or A.Vc1 = 4) and ((A.Vc2 = 0 or A.Vc2 = 2) and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or ((A.Vc1 = 0 or A.Vc1 = 4) and (A.Vc2 = 1 and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or A.Vc1 = 2 and ((A.Vc2 = 0 or A.Vc2 = 2) and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3))) or (A.Vc1 = 2 and (A.Vc2 = 1 and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or ((A.Vc1 = 1 or A.Vc1 = 3) and ((A.Vc2 = 0 or A.Vc2 = 2) and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)) or (A.Vc1 = 1 or A.Vc1 = 3) and (A.Vc2 = 1 and 0 <= A.Vc3) and (A.Vc3 <= 3 and (0 <= A.Vc4 and A.Vc4 <= 3)))) -> (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 = 1) or (3 <= A.Vc2 and A.Vc2 <= 5 or A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 1) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))) and ((A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))))) and ((A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or A.Vc2 != 5) and ((A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))) [forward reach with edge: (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 5.
Forward controlled-behavior: (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 = 1) or (3 <= A.Vc2 and A.Vc2 <= 5 or A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 1) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))) and ((A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))))) and ((A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or A.Vc2 != 5) and ((A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))) -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))) [forward reach with edge: (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 6.
Forward controlled-behavior: (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))) [fixed point].
Controlled behavior: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))) [restricted to current/previous controlled-behavior predicate: (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))]
Backward reachability: iteration 1.
Backward controlled-behavior: (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 9n 23p> [current/previous controlled behavior predicate]

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c0) (guard: true): guard: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))).
Edge (event: c1) (guard: A.Vc1 != 4 -> A.Vc1 != 4) (assignments: A.Vc1 := A.Vc1 + 1): guard: A.Vc1 != 4 -> (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 4)) and (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 5)) and (A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 3)) and (0 <= A.Vc1 and A.Vc1 <= 3)).
Edge (event: c2) (guard: true -> (1 <= A.Vc2 and A.Vc2 <= 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and A.Vc2 != 2 and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and (A.Vc2 != 3 or A.Vc3 != 4))) (assignments: A.Vc2 := A.Vc2 + 1): guard: (1 <= A.Vc2 and A.Vc2 <= 3 or (A.Vc2 = 5 or A.Vc3 != 4)) and A.Vc2 != 2 and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 4)) and (A.Vc2 != 3 or A.Vc3 != 4)) -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or 0 <= A.Vc2 and A.Vc2 <= 3)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or not(A.Vc2 = 2 or A.Vc2 = 3))) and ((A.Vc1 != 2 or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or 0 <= A.Vc2 and A.Vc2 <= 3))) and ((A.Vc1 != 2 or not(A.Vc2 = 2 or A.Vc2 = 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or 0 <= A.Vc2 and A.Vc2 <= 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or not(A.Vc2 = 2 or A.Vc2 = 3)) and A.Vc1 != 5))).
Edge (event: c3) (guard: true -> (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 3)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 3)) and A.Vc2 != 3)) (assignments: A.Vc3 := A.Vc3 + 1): guard: (A.Vc2 = 1 or A.Vc2 = 3 or (A.Vc2 = 5 or A.Vc3 != 3)) and ((A.Vc2 = 0 or (2 <= A.Vc2 and A.Vc2 <= 4 or A.Vc3 != 3)) and A.Vc2 != 3) -> <bdd 11n 24p>.
Edge (event: c4) (guard: true -> true) (assignments: A.Vc4 := A.Vc4 + 1): guard: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 = 1) or (3 <= A.Vc2 and A.Vc2 <= 5 or A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 1) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))) and ((A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))))) and ((A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or A.Vc2 != 5) and ((A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))).

Final synthesis result:
    State: (controlled-behavior: (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))))
        Edge: (event: c0) (guard: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))))
        Edge: (event: c1) (guard: A.Vc1 != 4 -> (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 4)) and (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 5)) and (A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 3)) and (0 <= A.Vc1 and A.Vc1 <= 3))) (assignments: A.Vc1 := A.Vc1 + 1)
        Edge: (event: c2) (guard: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or 0 <= A.Vc2 and A.Vc2 <= 3)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or not(A.Vc2 = 2 or A.Vc2 = 3))) and ((A.Vc1 != 2 or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or 0 <= A.Vc2 and A.Vc2 <= 3))) and ((A.Vc1 != 2 or not(A.Vc2 = 2 or A.Vc2 = 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or 0 <= A.Vc2 and A.Vc2 <= 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or not(A.Vc2 = 2 or A.Vc2 = 3)) and A.Vc1 != 5)))) (assignments: A.Vc2 := A.Vc2 + 1)
        Edge: (event: c3) (guard: true -> <bdd 11n 24p>) (assignments: A.Vc3 := A.Vc3 + 1)
        Edge: (event: c4) (guard: true -> (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 = 1) or (3 <= A.Vc2 and A.Vc2 <= 5 or A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 1) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))) and ((A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))))) and ((A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or A.Vc2 != 5) and ((A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))))) (assignments: A.Vc4 := A.Vc4 + 1)

Controlled system: exactly 360 states.

Initial (synthesis result):            (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))
Initial (uncontrolled system):         A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0)
Initial (controlled system):           A.Vc1 = 0 and A.Vc2 = 0 and (A.Vc3 = 0 and A.Vc4 = 0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion plant invariants, state/event exclusion requirement invariants, state plant invariants, state requirement invariants, and controlled behavior:
    Event c0: guard: (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5))) -> true [assume (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))].
    Event c1: guard: (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 4)) and (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 5)) and (A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 3)) and (0 <= A.Vc1 and A.Vc1 <= 3)) -> true [assume (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 4)) and (A.Vc1 = 4 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 5)) and (A.Vc1 = 4 or (A.Vc1 = 5 or A.Vc2 != 3)) and (0 <= A.Vc1 and A.Vc1 <= 3))].
    Event c2: guard: (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or 0 <= A.Vc2 and A.Vc2 <= 3)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or not(A.Vc2 = 2 or A.Vc2 = 3))) and ((A.Vc1 != 2 or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or 0 <= A.Vc2 and A.Vc2 <= 3))) and ((A.Vc1 != 2 or not(A.Vc2 = 2 or A.Vc2 = 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (2 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or 0 <= A.Vc2 and A.Vc2 <= 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or not(A.Vc2 = 2 or A.Vc2 = 3)) and A.Vc1 != 5))) -> not(A.Vc2 = 2 or A.Vc2 = 3) [assume (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))].
    Event c3: guard: <bdd 11n 24p> -> A.Vc3 != 3 [assume (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))].
    Event c4: guard: (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 = 1) or (3 <= A.Vc2 and A.Vc2 <= 5 or A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 1) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))) and ((A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5)))))) and ((A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (A.Vc1 != 2 or A.Vc2 != 5) and ((A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 = 1 or 3 <= A.Vc2 and A.Vc2 <= 5) or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 1 or (A.Vc3 = 4 or (A.Vc3 = 5 or A.Vc4 != 5))) and (not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3))) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))) -> A.Vc4 != 5 [assume (1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3))) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 4)) and ((1 <= A.Vc1 and A.Vc1 <= 3 or A.Vc1 = 5 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 5))) and ((1 <= A.Vc1 and A.Vc1 <= 3 or (A.Vc1 = 5 or A.Vc2 != 3)) and (A.Vc1 != 2 or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and ((A.Vc1 != 2 or A.Vc2 != 4) and (A.Vc1 != 2 or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)))) and ((A.Vc1 != 2 or A.Vc2 != 5) and (A.Vc1 != 2 or A.Vc2 != 3) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 = 1 or (3 <= A.Vc2 and A.Vc2 <= 5 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 4)) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or (A.Vc2 != 1 or 0 <= A.Vc3 and A.Vc3 <= 3)) and (not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 5) and ((not(A.Vc1 = 1 or A.Vc1 = 3) or A.Vc2 != 3) and A.Vc1 != 5)))].

Constructing output CIF specification.
Writing output CIF file "datasynth/state_plant_invs_ctrl.ctrlsys.real.cif".
