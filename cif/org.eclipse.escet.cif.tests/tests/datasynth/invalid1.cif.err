WARNING: File "datasynth/invalid1.cif": Semantic warning at line 69, column 3: Duplicate state invariant.
WARNING: File "datasynth/invalid1.cif": Semantic warning at line 83, column 9: Duplicate state invariant.
WARNING: File "datasynth/invalid1.cif": Semantic warning at line 97, column 14: Duplicate state invariant.
ERROR: Data-based supervisory controller synthesis failed due to unsatisfied preconditions:

  ---------------------------------------------
  (1/22) A negative integer value is used (-1).
  ---------------------------------------------
   * In automaton "r5":
     - requirement invariant v = -1;
                                 ^
     - requirement invariant [-1][0] = 1;
                                 ^
     - requirement invariant evt needs v = -1;
                                           ^
     - requirement invariant v = -1 disables evt;
                                 ^

  ----------------------------------------
  (2/22) A value of type "string" is used.
  ----------------------------------------
   * In automaton "p7":
     - edge e when s = "x" and b do s := "y";
                                         ^
   * In discrete variable "p7.s":
     - disc string s in {"a", "b", "c"};
                         ^    ^    ^

  --------------------------------------------------------------------------------------
  (3/22) Automaton is a kindless automaton rather than a plant or requirement automaton.
  --------------------------------------------------------------------------------------
   * In the top-level scope of the specification:
     - automaton aut:
                 ^

  ----------------------------------------------------------------------------------------
  (4/22) Automaton is a supervisor automaton rather than a plant or requirement automaton.
  ----------------------------------------------------------------------------------------
   * In the top-level scope of the specification:
     - supervisor automaton sup:
                            ^

  -----------------------------------------------------------------------------
  (5/22) Binary operator "<" is used on values of types "int[0..5]" and "real".
  -----------------------------------------------------------------------------
   * In automaton "r5":
     - requirement invariant v < 5.0;
                               ^

  ----------------------------------------------------------------------------
  (6/22) Binary operator "=" is used on values of types "string" and "string".
  ----------------------------------------------------------------------------
   * In automaton "p7":
     - edge e when s = "x" and b do s := "y";
                     ^
   * In automaton "r5":
     - requirement invariant "a" = "b";
                                 ^

  -----------------------------------------------------------------------------
  (7/22) Binary operator ">" is used on values of types "real" and "int[0..0]".
  -----------------------------------------------------------------------------
   * In automaton "p1":
     - initial v1 > 0;
                  ^

  ------------------------------------------------------------------------------
  (8/22) Discrete variable does not have a boolean, integer or enumeration type.
  ------------------------------------------------------------------------------
   * In discrete variable "p1.v1":
     - disc real v1;
            ^
   * In discrete variable "p7.s":
     - disc string s in {"a", "b", "c"};
            ^

  ------------------------------------------------------
  (9/22) Discrete variable has a rangeless integer type.
  ------------------------------------------------------
   * In discrete variable "p1.v2":
     - disc int v2;
            ^

  -----------------------------------------------
  (10/22) Division by a negative value for "div".
  -----------------------------------------------
   * In automaton "r5":
     - requirement invariant v = v div -2;
                                       ^

  -----------------------------------------------
  (11/22) Division by a negative value for "mod".
  -----------------------------------------------
   * In automaton "r5":
     - requirement invariant v = v mod -3;
                                       ^

  -----------------------------------
  (12/22) Division by zero for "div".
  -----------------------------------
   * In automaton "r5":
     - requirement invariant v = v div zero;
                                       ^

  -----------------------------------
  (13/22) Division by zero for "mod".
  -----------------------------------
   * In automaton "r5":
     - requirement invariant v = v mod zero;
                                       ^

  --------------------------------------------------------------------------------------
  (14/22) Edge has an explicit 'tau' event, which is not controllable or uncontrollable.
  --------------------------------------------------------------------------------------
   * In automaton "p4":
     - edge tau when true;
            ^
   * In location "r1.l1":
     - edge tau when true;
            ^
   * In automaton "r2":
     - edge tau when true;
            ^

  --------------------------------------------------------------------------------------
  (15/22) Edge has an implicit 'tau' event, which is not controllable or uncontrollable.
  --------------------------------------------------------------------------------------
   * In automaton "p4":
     - edge when true;
       ^
   * In location "r1.l1":
     - edge when true;
       ^
   * In automaton "r2":
     - edge when true;
       ^

  ----------------------------------------------------------------
  (16/22) Event is not declared as controllable or uncontrollable.
  ----------------------------------------------------------------
   * In group "g":
     - event evt;
             ^

  ----------------------------------------------------
  (17/22) Failed to statically evaluate an expression.
  ----------------------------------------------------
   * In discrete variable "p7.b":
     - disc bool b in {ii - ii > 0, floor(sqrt(-1.0)) > 0};
                                              ^

  ------------------------------------------
  (18/22) Invariant is a kindless invariant.
  ------------------------------------------
   * In group "g2a":
     - invariant false;
       ^
   * In group "g2b":
     - invariant evt needs true;
       ^
   * In group "g2c":
     - invariant false disables evt;
       ^

  --------------------------------------------
  (19/22) Invariant is a supervisor invariant.
  --------------------------------------------
   * In group "g4a":
     - supervisor invariant false;
                  ^
   * In group "g4b":
     - supervisor invariant evt needs true;
                  ^
   * In group "g4c":
     - supervisor invariant false disables evt;
                  ^

  ------------------------------------------------------
  (20/22) Requirement automaton receives from a channel.
  ------------------------------------------------------
   * In automaton "req":
     - edge g.chan2?;
                   ^

  ---------------------------------------------------
  (21/22) Requirement automaton sends over a channel.
  ---------------------------------------------------
   * In automaton "req":
     - edge g.chan1!1;
                   ^

  --------------------------------------------------------------------------------------------------
  (22/22) Value is too complex to be statically evaluated, or evaluation results in a runtime error.
  --------------------------------------------------------------------------------------------------
   * In the top-level scope of the specification:
     - initial false and [true][r5.v2];
                                ^
     - marked true and [true][r5.v2];
                              ^
   * In automaton "p6s":
     - edge chan![true][v];
                        ^
   * In discrete variable "p7.b":
     - disc bool b in {ii - ii > 0, floor(sqrt(-1.0)) > 0};
                       ^
   * In automaton "r5":
     - requirement invariant {v} sub {2};
                              ^
     - requirement invariant v = v * 2;
                                 ^
     - requirement invariant [true][v];
                                    ^
     - requirement invariant v = v div r1.x;
                                       ^
     - requirement invariant v = v mod r1.x;
                                       ^
     - edge c_evt when [true][v];
                              ^
