Reading CIF file "datasynth/predicates.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a         p     0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  bool        p.bt  1      1 * 2     2 * 2       2 * 2       100%
  3      discrete variable  bool        p.bf  2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..20]  p.x1  3      5 * 2     21 * 2      32 * 2      ~66%
  5      discrete variable  int[0..20]  p.x2  4      5 * 2     21 * 2      32 * 2      ~66%
  6      discrete variable  int[0..4]   p.x3  5      3 * 2     5 * 2       8 * 2       ~63%
  7      discrete variable  int[2..8]   p.x4  6      4 * 2     7 * 2       16 * 2      ~44%
  8      discrete variable  E           p.v1  7      1 * 2     2 * 2       2 * 2       100%
  9      discrete variable  E           p.v2  8      1 * 2     2 * 2       2 * 2       100%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       9      44        128         196         ~65%

Applying automatic variable ordering:
  Number of hyper-edges: 105
  Number of graph edges: 12

  Applying 2 algorithms, sequentially:
    Applying FORCE algorithm.
    Maximum number of iterations: 30
    Total span:   183 (total)   1.74 (avg/edge) [before]
    Total span:   103 (total)   0.98 (avg/edge) [iteration 1]
    Total span:    92 (total)   0.88 (avg/edge) [iteration 2]
    Total span:    92 (total)   0.88 (avg/edge) [iteration 3]
    Total span:    92 (total)   0.88 (avg/edge) [after]

    Applying sliding window algorithm.
    Window length: 4
    Total span:    92 (total)   0.88 (avg/edge) [before]
    Total span:    88 (total)   0.84 (avg/edge) [window 3..6]
    Total span:    88 (total)   0.84 (avg/edge) [after]

Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  bool        p.bt  0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  bool        p.bf  1      1 * 2     2 * 2       2 * 2       100%
  3      discrete variable  int[0..20]  p.x1  2      5 * 2     21 * 2      32 * 2      ~66%
  4      location pointer   n/a         p     3      1 * 2     2 * 2       2 * 2       100%
  5      discrete variable  int[0..4]   p.x3  4      3 * 2     5 * 2       8 * 2       ~63%
  6      discrete variable  int[2..8]   p.x4  5      4 * 2     7 * 2       16 * 2      ~44%
  7      discrete variable  int[0..20]  p.x2  6      5 * 2     21 * 2      32 * 2      ~66%
  8      discrete variable  E           p.v1  7      1 * 2     2 * 2       2 * 2       100%
  9      discrete variable  E           p.v2  8      1 * 2     2 * 2       2 * 2       100%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       9      44        128         196         ~65%

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             p.bt
Initial   (discrete variable 1):             not p.bf
Initial   (discrete variable 2):             p.x1 = 10
Initial   (discrete variable 4):             p.x3 = 2
Initial   (discrete variable 5):             p.x4 = 3
Initial   (discrete variable 6):             p.x2 = 10
Initial   (discrete variable 7):             p.v1 = X
Initial   (discrete variable 8):             p.v2 = Y
Initial   (discrete variables):              <bdd 21n 1p>
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         p.l0
Initial   (auts/locs init predicate):        p.l0
Initial   (uncontrolled system):             <bdd 22n 1p>
Initial   (system, combined init/plant inv): <bdd 22n 1p>
Initial   (system, combined init/state inv): <bdd 22n 1p>

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       p.l0
Marked    (auts/locs marker predicate):      p.l0
Marked    (uncontrolled system):             p.l0
Marked    (system, combined mark/plant inv): p.l0
Marked    (system, combined mark/state inv): p.l0

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: e01) (guard: p.l0)
    Edge: (event: e02) (guard: false) (assignments: p := p.l1)
    Edge: (event: e03) (guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0)))
    Edge: (event: e04) (guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0)))
    Edge: (event: e05) (guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0))
    Edge: (event: e06) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0)))
    Edge: (event: e07) (guard: p.x1 = 11 and p.l0)
    Edge: (event: e08) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0))
    Edge: (event: e09) (guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0)))
    Edge: (event: e10) (guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0)))
    Edge: (event: e11) (guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0))
    Edge: (event: e12) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0)))
    Edge: (event: e13) (guard: p.x1 = 11 and p.l0)
    Edge: (event: e14) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0))
    Edge: (event: e15) (guard: p.x1 = 17 and p.l0)
    Edge: (event: e16) (guard: p.x1 = 16 and p.l0)
    Edge: (event: e17) (guard: p.x1 = 11 and p.l0)
    Edge: (event: e18) (guard: p.l0)
    Edge: (event: e19) (guard: p.l0)
    Edge: (event: e20) (guard: false)
    Edge: (event: e21) (guard: false)
    Edge: (event: e22) (guard: (p.x1 = 12 or p.x1 = 13) and p.l0 or (p.x1 = 10 or p.x1 = 11) and p.l0)
    Edge: (event: e23) (guard: (p.x1 = 0 or p.x1 = 4 or (p.x1 = 16 or p.x1 = 20)) and p.l0 or (p.x1 = 2 or p.x1 = 18) and p.l0 or ((p.x1 = 1 or (p.x1 = 5 or p.x1 = 17)) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or p.x1 = 15 and p.l0)))
    Edge: (event: e24) (guard: (p.x1 = 0 or p.x1 = 1) and p.l0 or (p.x1 = 8 or p.x1 = 9) and p.l0 or ((p.x1 = 4 or p.x1 = 5 or (p.x1 = 12 or (p.x1 = 13 or p.x1 = 20))) and p.l0 or (p.x1 = 2 or p.x1 = 3 or (p.x1 = 6 or (p.x1 = 7 or p.x1 = 10)) or (p.x1 = 11 or p.x1 = 14 or (p.x1 = 15 or (p.x1 = 18 or p.x1 = 19)))) and p.l0))
    Edge: (event: e25) (guard: (p.x1 = 8 or p.x1 = 12) and p.l0 or (p.x1 = 10 and p.l0 or p.x1 = 17 and p.l0) or (p.x1 = 9 and p.l0 or p.x1 = 13 and p.l0 or ((p.x1 = 3 or p.x1 = 11) and p.l0 or p.x1 = 7 and p.l0)))
    Edge: (event: e26) (guard: <bdd 11n 32p>)
    Edge: (event: e27) (guard: <bdd 12n 28p>)
    Edge: (event: e28) (guard: <bdd 17n 55p>)
    Edge: (event: e29) (guard: not p.bt and (not p.bf and p.l0) or p.bt and (p.bf and p.l0))
    Edge: (event: e30) (guard: not p.bt and (p.bf and p.l0) or p.bt and (not p.bf and p.l0))
    Edge: (event: e31) (guard: not p.bt and p.l0 or p.bt and (not p.bf and p.l0))
    Edge: (event: e32) (guard: p.l0 and (p.v1 = X and p.v2 = X) or p.l0 and (p.v1 = Y and p.v2 = Y))
    Edge: (event: e33) (guard: p.l0 and (p.v1 = X and p.v2 = Y) or p.l0 and (p.v1 = Y and p.v2 = X))
    Edge: (event: e34) (guard: p.l0 and p.v1 = X)
    Edge: (event: e35) (guard: p.l0 and p.v2 = X)
    Edge: (event: e36) (guard: <bdd 23n 8p>)
    Edge: (event: e37) (guard: <bdd 23n 8p>)
    Edge: (event: e38) (guard: <bdd 23n 8p>)
    Edge: (event: e39) (guard: <bdd 23n 32p>)
    Edge: (event: e40) (guard: false)
    Edge: (event: e41) (guard: p.l0 and (p.x3 = 0 and p.x4 = 5) or p.l0 and (p.x3 = 2 and p.x4 = 3) or (p.l0 and (p.x3 = 1 and p.x4 = 4) or p.l0 and (p.x3 = 3 and p.x4 = 2)))
    Edge: (event: e42) (guard: p.l0 and (p.x3 = 2 or p.x3 = 3))
    Edge: (event: e43) (guard: p.l0 and (p.x3 = 1 or p.x3 = 3))
    Edge: (event: e44) (guard: p.l0 and p.x3 = 2 or p.l0 and p.x3 = 1)
    Edge: (event: e45) (guard: p.l0 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4)))
    Edge: (event: e46) (guard: p.l0)
    Edge: (event: e47) (guard: false)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p.x1" of type "int[0..20]" (group: 2, domain: 4+5, BDD variables: 5, CIF/BDD values: 21/32)].
Controlled behavior: true -> <bdd 8n 24p> [range: true, variable: discrete variable "p.x3" of type "int[0..4]" (group: 4, domain: 8+9, BDD variables: 3, CIF/BDD values: 5/8)].
Controlled behavior: <bdd 8n 24p> -> <bdd 15n 120p> [range: true, variable: discrete variable "p.x4" of type "int[2..8]" (group: 5, domain: 10+11, BDD variables: 4, CIF/BDD values: 7/16)].
Controlled behavior: <bdd 15n 120p> -> <bdd 20n 960p> [range: true, variable: discrete variable "p.x2" of type "int[0..20]" (group: 6, domain: 12+13, BDD variables: 5, CIF/BDD values: 21/32)].

Extended controlled-behavior predicate using variable ranges: <bdd 20n 960p>.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l0 [marker predicate]
Backward controlled-behavior: p.l0 -> <bdd 21n 960p> [restricted to current/previous controlled-behavior predicate: <bdd 20n 960p>]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 21n 960p> [fixed point].
Controlled behavior: <bdd 20n 960p> -> <bdd 21n 960p>.

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 21n 773p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: <bdd 22n 1p> [initialization predicate]
Forward reachability: iteration 1.
Controlled behavior: <bdd 21n 960p> -> <bdd 22n 1p>.

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.l0 [marker predicate]
Backward controlled-behavior: p.l0 -> <bdd 22n 1p> [restricted to current/previous controlled-behavior predicate: <bdd 22n 1p>]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 22n 1p> [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 22n 22p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: e01) (guard: p.l0): guard: p.l0 -> <bdd 22n 1p>.
Edge (event: e03) (guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0))): guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0)) -> false.
Edge (event: e04) (guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0))): guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0)) -> false.
Edge (event: e05) (guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0)): guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0) -> <bdd 22n 1p>.
Edge (event: e06) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0))): guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0)) -> <bdd 22n 1p>.
Edge (event: e07) (guard: p.x1 = 11 and p.l0): guard: p.x1 = 11 and p.l0 -> false.
Edge (event: e08) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0)): guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0) -> <bdd 22n 1p>.
Edge (event: e09) (guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0))): guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0)) -> false.
Edge (event: e10) (guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0))): guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0)) -> false.
Edge (event: e11) (guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0)): guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0) -> <bdd 22n 1p>.
Edge (event: e12) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0))): guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0)) -> <bdd 22n 1p>.
Edge (event: e13) (guard: p.x1 = 11 and p.l0): guard: p.x1 = 11 and p.l0 -> false.
Edge (event: e14) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0)): guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0) -> <bdd 22n 1p>.
Edge (event: e15) (guard: p.x1 = 17 and p.l0): guard: p.x1 = 17 and p.l0 -> false.
Edge (event: e16) (guard: p.x1 = 16 and p.l0): guard: p.x1 = 16 and p.l0 -> false.
Edge (event: e17) (guard: p.x1 = 11 and p.l0): guard: p.x1 = 11 and p.l0 -> false.
Edge (event: e18) (guard: p.l0): guard: p.l0 -> <bdd 22n 1p>.
Edge (event: e19) (guard: p.l0): guard: p.l0 -> <bdd 22n 1p>.
Edge (event: e22) (guard: (p.x1 = 12 or p.x1 = 13) and p.l0 or (p.x1 = 10 or p.x1 = 11) and p.l0): guard: (p.x1 = 12 or p.x1 = 13) and p.l0 or (p.x1 = 10 or p.x1 = 11) and p.l0 -> <bdd 22n 1p>.
Edge (event: e23) (guard: (p.x1 = 0 or p.x1 = 4 or (p.x1 = 16 or p.x1 = 20)) and p.l0 or (p.x1 = 2 or p.x1 = 18) and p.l0 or ((p.x1 = 1 or (p.x1 = 5 or p.x1 = 17)) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or p.x1 = 15 and p.l0))): guard: (p.x1 = 0 or p.x1 = 4 or (p.x1 = 16 or p.x1 = 20)) and p.l0 or (p.x1 = 2 or p.x1 = 18) and p.l0 or ((p.x1 = 1 or (p.x1 = 5 or p.x1 = 17)) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or p.x1 = 15 and p.l0)) -> false.
Edge (event: e24) (guard: (p.x1 = 0 or p.x1 = 1) and p.l0 or (p.x1 = 8 or p.x1 = 9) and p.l0 or ((p.x1 = 4 or p.x1 = 5 or (p.x1 = 12 or (p.x1 = 13 or p.x1 = 20))) and p.l0 or (p.x1 = 2 or p.x1 = 3 or (p.x1 = 6 or (p.x1 = 7 or p.x1 = 10)) or (p.x1 = 11 or p.x1 = 14 or (p.x1 = 15 or (p.x1 = 18 or p.x1 = 19)))) and p.l0)): guard: (p.x1 = 0 or p.x1 = 1) and p.l0 or (p.x1 = 8 or p.x1 = 9) and p.l0 or ((p.x1 = 4 or p.x1 = 5 or (p.x1 = 12 or (p.x1 = 13 or p.x1 = 20))) and p.l0 or (p.x1 = 2 or p.x1 = 3 or (p.x1 = 6 or (p.x1 = 7 or p.x1 = 10)) or (p.x1 = 11 or p.x1 = 14 or (p.x1 = 15 or (p.x1 = 18 or p.x1 = 19)))) and p.l0) -> <bdd 22n 1p>.
Edge (event: e25) (guard: (p.x1 = 8 or p.x1 = 12) and p.l0 or (p.x1 = 10 and p.l0 or p.x1 = 17 and p.l0) or (p.x1 = 9 and p.l0 or p.x1 = 13 and p.l0 or ((p.x1 = 3 or p.x1 = 11) and p.l0 or p.x1 = 7 and p.l0))): guard: (p.x1 = 8 or p.x1 = 12) and p.l0 or (p.x1 = 10 and p.l0 or p.x1 = 17 and p.l0) or (p.x1 = 9 and p.l0 or p.x1 = 13 and p.l0 or ((p.x1 = 3 or p.x1 = 11) and p.l0 or p.x1 = 7 and p.l0)) -> <bdd 22n 1p>.
Edge (event: e26) (guard: <bdd 11n 32p>): guard: <bdd 11n 32p> -> false.
Edge (event: e27) (guard: <bdd 12n 28p>): guard: <bdd 12n 28p> -> <bdd 22n 1p>.
Edge (event: e28) (guard: <bdd 17n 55p>): guard: <bdd 17n 55p> -> false.
Edge (event: e29) (guard: not p.bt and (not p.bf and p.l0) or p.bt and (p.bf and p.l0)): guard: not p.bt and (not p.bf and p.l0) or p.bt and (p.bf and p.l0) -> false.
Edge (event: e30) (guard: not p.bt and (p.bf and p.l0) or p.bt and (not p.bf and p.l0)): guard: not p.bt and (p.bf and p.l0) or p.bt and (not p.bf and p.l0) -> <bdd 22n 1p>.
Edge (event: e31) (guard: not p.bt and p.l0 or p.bt and (not p.bf and p.l0)): guard: not p.bt and p.l0 or p.bt and (not p.bf and p.l0) -> <bdd 22n 1p>.
Edge (event: e32) (guard: p.l0 and (p.v1 = X and p.v2 = X) or p.l0 and (p.v1 = Y and p.v2 = Y)): guard: p.l0 and (p.v1 = X and p.v2 = X) or p.l0 and (p.v1 = Y and p.v2 = Y) -> false.
Edge (event: e33) (guard: p.l0 and (p.v1 = X and p.v2 = Y) or p.l0 and (p.v1 = Y and p.v2 = X)): guard: p.l0 and (p.v1 = X and p.v2 = Y) or p.l0 and (p.v1 = Y and p.v2 = X) -> <bdd 22n 1p>.
Edge (event: e34) (guard: p.l0 and p.v1 = X): guard: p.l0 and p.v1 = X -> <bdd 22n 1p>.
Edge (event: e35) (guard: p.l0 and p.v2 = X): guard: p.l0 and p.v2 = X -> false.
Edge (event: e36) (guard: <bdd 23n 8p>): guard: <bdd 23n 8p> -> false.
Edge (event: e37) (guard: <bdd 23n 8p>): guard: <bdd 23n 8p> -> false.
Edge (event: e38) (guard: <bdd 23n 8p>): guard: <bdd 23n 8p> -> false.
Edge (event: e39) (guard: <bdd 23n 32p>): guard: <bdd 23n 32p> -> <bdd 22n 1p>.
Edge (event: e41) (guard: p.l0 and (p.x3 = 0 and p.x4 = 5) or p.l0 and (p.x3 = 2 and p.x4 = 3) or (p.l0 and (p.x3 = 1 and p.x4 = 4) or p.l0 and (p.x3 = 3 and p.x4 = 2))): guard: p.l0 and (p.x3 = 0 and p.x4 = 5) or p.l0 and (p.x3 = 2 and p.x4 = 3) or (p.l0 and (p.x3 = 1 and p.x4 = 4) or p.l0 and (p.x3 = 3 and p.x4 = 2)) -> <bdd 22n 1p>.
Edge (event: e42) (guard: p.l0 and (p.x3 = 2 or p.x3 = 3)): guard: p.l0 and (p.x3 = 2 or p.x3 = 3) -> <bdd 22n 1p>.
Edge (event: e43) (guard: p.l0 and (p.x3 = 1 or p.x3 = 3)): guard: p.l0 and (p.x3 = 1 or p.x3 = 3) -> false.
Edge (event: e44) (guard: p.l0 and p.x3 = 2 or p.l0 and p.x3 = 1): guard: p.l0 and p.x3 = 2 or p.l0 and p.x3 = 1 -> <bdd 22n 1p>.
Edge (event: e45) (guard: p.l0 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4))): guard: p.l0 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4)) -> <bdd 22n 1p>.
Edge (event: e46) (guard: p.l0): guard: p.l0 -> <bdd 22n 1p>.

Final synthesis result:
  State: (controlled-behavior: <bdd 22n 1p>)
    Edge: (event: e01) (guard: p.l0 -> <bdd 22n 1p>)
    Edge: (event: e02) (guard: false) (assignments: p := p.l1)
    Edge: (event: e03) (guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0)) -> false)
    Edge: (event: e04) (guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0)) -> false)
    Edge: (event: e05) (guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e06) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0)) -> <bdd 22n 1p>)
    Edge: (event: e07) (guard: p.x1 = 11 and p.l0 -> false)
    Edge: (event: e08) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e09) (guard: (p.x1 = 16 or p.x1 = 18) and p.l0 or (p.x1 = 20 and p.l0 or (p.x1 = 12 or p.x1 = 14) and p.l0) or (p.x1 = 17 and p.l0 or p.x1 = 13 and p.l0 or (p.x1 = 19 and p.l0 or (p.x1 = 11 or p.x1 = 15) and p.l0)) -> false)
    Edge: (event: e10) (guard: 16 <= p.x1 and (p.x1 <= 19 and p.l0) or (p.x1 = 20 and p.l0 or 12 <= p.x1 and (p.x1 <= 15 and p.l0)) -> false)
    Edge: (event: e11) (guard: (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e12) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0)) -> <bdd 22n 1p>)
    Edge: (event: e13) (guard: p.x1 = 11 and p.l0 -> false)
    Edge: (event: e14) (guard: (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e15) (guard: p.x1 = 17 and p.l0 -> false)
    Edge: (event: e16) (guard: p.x1 = 16 and p.l0 -> false)
    Edge: (event: e17) (guard: p.x1 = 11 and p.l0 -> false)
    Edge: (event: e18) (guard: p.l0 -> <bdd 22n 1p>)
    Edge: (event: e19) (guard: p.l0 -> <bdd 22n 1p>)
    Edge: (event: e20) (guard: false)
    Edge: (event: e21) (guard: false)
    Edge: (event: e22) (guard: (p.x1 = 12 or p.x1 = 13) and p.l0 or (p.x1 = 10 or p.x1 = 11) and p.l0 -> <bdd 22n 1p>)
    Edge: (event: e23) (guard: (p.x1 = 0 or p.x1 = 4 or (p.x1 = 16 or p.x1 = 20)) and p.l0 or (p.x1 = 2 or p.x1 = 18) and p.l0 or ((p.x1 = 1 or (p.x1 = 5 or p.x1 = 17)) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or p.x1 = 15 and p.l0)) -> false)
    Edge: (event: e24) (guard: (p.x1 = 0 or p.x1 = 1) and p.l0 or (p.x1 = 8 or p.x1 = 9) and p.l0 or ((p.x1 = 4 or p.x1 = 5 or (p.x1 = 12 or (p.x1 = 13 or p.x1 = 20))) and p.l0 or (p.x1 = 2 or p.x1 = 3 or (p.x1 = 6 or (p.x1 = 7 or p.x1 = 10)) or (p.x1 = 11 or p.x1 = 14 or (p.x1 = 15 or (p.x1 = 18 or p.x1 = 19)))) and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e25) (guard: (p.x1 = 8 or p.x1 = 12) and p.l0 or (p.x1 = 10 and p.l0 or p.x1 = 17 and p.l0) or (p.x1 = 9 and p.l0 or p.x1 = 13 and p.l0 or ((p.x1 = 3 or p.x1 = 11) and p.l0 or p.x1 = 7 and p.l0)) -> <bdd 22n 1p>)
    Edge: (event: e26) (guard: <bdd 11n 32p> -> false)
    Edge: (event: e27) (guard: <bdd 12n 28p> -> <bdd 22n 1p>)
    Edge: (event: e28) (guard: <bdd 17n 55p> -> false)
    Edge: (event: e29) (guard: not p.bt and (not p.bf and p.l0) or p.bt and (p.bf and p.l0) -> false)
    Edge: (event: e30) (guard: not p.bt and (p.bf and p.l0) or p.bt and (not p.bf and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e31) (guard: not p.bt and p.l0 or p.bt and (not p.bf and p.l0) -> <bdd 22n 1p>)
    Edge: (event: e32) (guard: p.l0 and (p.v1 = X and p.v2 = X) or p.l0 and (p.v1 = Y and p.v2 = Y) -> false)
    Edge: (event: e33) (guard: p.l0 and (p.v1 = X and p.v2 = Y) or p.l0 and (p.v1 = Y and p.v2 = X) -> <bdd 22n 1p>)
    Edge: (event: e34) (guard: p.l0 and p.v1 = X -> <bdd 22n 1p>)
    Edge: (event: e35) (guard: p.l0 and p.v2 = X -> false)
    Edge: (event: e36) (guard: <bdd 23n 8p> -> false)
    Edge: (event: e37) (guard: <bdd 23n 8p> -> false)
    Edge: (event: e38) (guard: <bdd 23n 8p> -> false)
    Edge: (event: e39) (guard: <bdd 23n 32p> -> <bdd 22n 1p>)
    Edge: (event: e40) (guard: false)
    Edge: (event: e41) (guard: p.l0 and (p.x3 = 0 and p.x4 = 5) or p.l0 and (p.x3 = 2 and p.x4 = 3) or (p.l0 and (p.x3 = 1 and p.x4 = 4) or p.l0 and (p.x3 = 3 and p.x4 = 2)) -> <bdd 22n 1p>)
    Edge: (event: e42) (guard: p.l0 and (p.x3 = 2 or p.x3 = 3) -> <bdd 22n 1p>)
    Edge: (event: e43) (guard: p.l0 and (p.x3 = 1 or p.x3 = 3) -> false)
    Edge: (event: e44) (guard: p.l0 and p.x3 = 2 or p.l0 and p.x3 = 1 -> <bdd 22n 1p>)
    Edge: (event: e45) (guard: p.l0 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4)) -> <bdd 22n 1p>)
    Edge: (event: e46) (guard: p.l0 -> <bdd 22n 1p>)
    Edge: (event: e47) (guard: false)

Controlled system:                     exactly 1 state.

Initial (synthesis result):            <bdd 22n 1p>
Initial (uncontrolled system):         <bdd 22n 1p>
Initial (controlled system):           <bdd 22n 1p>
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants:
  Event e01: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume p.l0].
  Event e02: guard: false -> true [assume false].
  Event e05: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0)].
  Event e06: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0))].
  Event e08: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0)].
  Event e11: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume (0 <= p.x1 and p.x1 <= 3 or 8 <= p.x1 and p.x1 <= 11) and p.l0 or 4 <= p.x1 and (p.x1 <= 7 and p.l0)].
  Event e12: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume (p.x1 = 0 or p.x1 = 2 or (p.x1 = 8 or p.x1 = 10)) and p.l0 or (p.x1 = 4 or p.x1 = 6) and p.l0 or ((p.x1 = 1 or p.x1 = 9) and p.l0 or (p.x1 = 5 and p.l0 or (p.x1 = 3 or p.x1 = 7) and p.l0))].
  Event e14: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume (p.x1 = 0 or p.x1 = 2 or (p.x1 = 4 or (p.x1 = 6 or p.x1 = 8)) or (p.x1 = 10 or (p.x1 = 12 or p.x1 = 14) or (p.x1 = 16 or (p.x1 = 18 or p.x1 = 20)))) and p.l0 or (p.x1 = 1 or p.x1 = 5 or (p.x1 = 9 or (p.x1 = 13 or p.x1 = 17))) and p.l0 or ((p.x1 = 3 or p.x1 = 19) and p.l0 or (p.x1 = 7 or p.x1 = 15) and p.l0)].
  Event e18: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume p.l0].
  Event e19: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume p.l0].
  Event e20: guard: false -> true [assume false].
  Event e21: guard: false -> true [assume false].
  Event e22: guard: <bdd 22n 1p> -> p.bt and not p.bf and ((p.x1 = 2 or p.x1 = 6 or (p.x1 = 10 or (p.x1 = 14 or p.x1 = 18))) and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume (p.x1 = 12 or p.x1 = 13) and p.l0 or (p.x1 = 10 or p.x1 = 11) and p.l0].
  Event e24: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume (p.x1 = 0 or p.x1 = 1) and p.l0 or (p.x1 = 8 or p.x1 = 9) and p.l0 or ((p.x1 = 4 or p.x1 = 5 or (p.x1 = 12 or (p.x1 = 13 or p.x1 = 20))) and p.l0 or (p.x1 = 2 or p.x1 = 3 or (p.x1 = 6 or (p.x1 = 7 or p.x1 = 10)) or (p.x1 = 11 or p.x1 = 14 or (p.x1 = 15 or (p.x1 = 18 or p.x1 = 19)))) and p.l0)].
  Event e25: guard: <bdd 22n 1p> -> p.bt and not p.bf and ((p.x1 = 2 or p.x1 = 6 or (p.x1 = 10 or (p.x1 = 14 or p.x1 = 18))) and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume (p.x1 = 8 or p.x1 = 12) and p.l0 or (p.x1 = 10 and p.l0 or p.x1 = 17 and p.l0) or (p.x1 = 9 and p.l0 or p.x1 = 13 and p.l0 or ((p.x1 = 3 or p.x1 = 11) and p.l0 or p.x1 = 7 and p.l0))].
  Event e27: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume <bdd 12n 28p>].
  Event e30: guard: <bdd 22n 1p> -> p.bt and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume not p.bt and (p.bf and p.l0) or p.bt and (not p.bf and p.l0)].
  Event e31: guard: <bdd 22n 1p> -> p.bt and (p.x1 = 10 and p.x3 = 2) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume not p.bt and p.l0 or p.bt and (not p.bf and p.l0)].
  Event e33: guard: <bdd 22n 1p> -> p.bt and (not p.bf and p.x1 = 10) and (p.x3 = 2 and p.x4 = 3 and (p.x2 = 10 and p.v1 = X)) [assume p.l0 and (p.v1 = X and p.v2 = Y) or p.l0 and (p.v1 = Y and p.v2 = X)].
  Event e34: guard: <bdd 22n 1p> -> p.bt and (not p.bf and p.x1 = 10) and (p.x3 = 2 and p.x4 = 3 and (p.x2 = 10 and p.v2 = Y)) [assume p.l0 and p.v1 = X].
  Event e39: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume <bdd 23n 32p>].
  Event e40: guard: false -> true [assume false].
  Event e41: guard: <bdd 22n 1p> -> p.bt and (not p.bf and p.x1 = 10) and (p.x3 = 2 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume p.l0 and (p.x3 = 0 and p.x4 = 5) or p.l0 and (p.x3 = 2 and p.x4 = 3) or (p.l0 and (p.x3 = 1 and p.x4 = 4) or p.l0 and (p.x3 = 3 and p.x4 = 2))].
  Event e42: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4))) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume p.l0 and (p.x3 = 2 or p.x3 = 3)].
  Event e44: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4))) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume p.l0 and p.x3 = 2 or p.l0 and p.x3 = 1].
  Event e45: guard: <bdd 22n 1p> -> p.bt and not p.bf and (p.x1 = 10 and (p.x3 = 2 or p.x3 = 3)) and (p.x4 = 3 and p.x2 = 10 and (p.v1 = X and p.v2 = Y)) [assume p.l0 and (p.x3 = 0 or (p.x3 = 2 or p.x3 = 4))].
  Event e46: guard: <bdd 22n 1p> -> <bdd 21n 1p> [assume p.l0].
  Event e47: guard: false -> true [assume false].

Constructing output CIF specification.
Writing output CIF file "datasynth/predicates.ctrlsys.real.cif".
