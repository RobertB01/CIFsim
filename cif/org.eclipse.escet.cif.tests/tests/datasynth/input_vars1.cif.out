Reading CIF file "datasynth/input_vars1.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind            Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  --------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      input variable  bool       io.b  0      1 * 2     2 * 2       2 * 2       100%
  2      input variable  int[0..3]  io.i  1      2 * 2     4 * 2       4 * 2       100%
  3      input variable  E          io.e  2      1 * 2     2 * 2       2 * 2       100%
  -----  --------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                   3      8         16          16          100%

Applying automatic variable ordering:
  Number of hyperedges: 1

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    2 (total)                 2.00 (avg/edge) [before]
    Total span:                    2 (total)                 2.00 (avg/edge) [iteration 1]
    Total span:                    2 (total)                 2.00 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 3

    Total span:                    2 (total)                 2.00 (avg/edge) [before]
    Total span:                    2 (total)                 2.00 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (component state req invariant):   io.b and (io.i = 3 and io.e = A)
Invariant (components state req invariant):  io.b and (io.i = 3 and io.e = A)
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      io.b and (io.i = 3 and io.e = A)

Initial   (discrete variables):              true
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             true
Initial   (system, combined init/plant inv): true
Initial   (system, combined init/state inv): io.b and (io.i = 3 and io.e = A)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): io.b and (io.i = 3 and io.e = A)

State/event exclusion plants:
  None

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: io.b) (guard: true) (assignments: io.b+ != io.b)
    Edge: (event: io.i) (guard: true) (assignments: io.i+ != io.i)
    Edge: (event: io.e) (guard: true) (assignments: io.e+ != io.e)

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: io.b and (io.i = 3 and io.e = A).

Extending controlled-behavior predicate using variable ranges.

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> io.b and (io.i = 3 and io.e = A) [restricted to current/previous controlled-behavior predicate: io.b and (io.i = 3 and io.e = A)]
Backward reachability: iteration 1.
Backward controlled-behavior: io.b and (io.i = 3 and io.e = A) [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: not io.b or (io.i != 3 or io.e = B) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.
Backward uncontrolled bad-state: not io.b or (io.i != 3 or io.e = B) -> true [backward reach with edge: (event: io.b) (guard: true) (assignments: io.b+ != io.b)]
Backward reachability: iteration 2.
Backward uncontrolled bad-state: true [fixed point].
Controlled behavior: io.b and (io.i = 3 and io.e = A) -> false.

Round 1: finished, all states are bad.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: false)
    Edge: (event: io.b) (guard: true) (assignments: io.b+ != io.b)
    Edge: (event: io.i) (guard: true) (assignments: io.i+ != io.i)
    Edge: (event: io.e) (guard: true) (assignments: io.e+ != io.e)

Controlled system:                     exactly 0 states.

Initial (synthesis result):            false
Initial (uncontrolled system):         true
Initial (controlled system):           false
Initial (removed by supervisor):       true
Initial (added by supervisor):         false
