Reading CIF file "datasynth/bdd_out_nodes.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      input variable     int[0..1]  io.i  0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer   n/a        p     1      1 * 2     2 * 2       2 * 2       100%
  3      discrete variable  bool       p.b   2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..3]  p.x   3      2 * 2     4 * 2       4 * 2       100%
  5      discrete variable  int[2..5]  p.y   4      3 * 2     4 * 2       8 * 2       50%
  6      discrete variable  p.E        p.v   5      2 * 2     3 * 2       4 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      6      20        34          44          ~77%

Applying automatic variable ordering:
  Number of hyperedges: 8

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    6 (total)                 0.75 (avg/edge) [before]
    Total span:                    6 (total)                 0.75 (avg/edge) [iteration 1]
    Total span:                    6 (total)                 0.75 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    6 (total)                 0.75 (avg/edge) [before]
    Total span:                    3 (total)                 0.38 (avg/edge) [window 0..3]
    Total span:                    3 (total)                 0.38 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  bool       p.b   0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..3]  p.x   1      2 * 2     4 * 2       4 * 2       100%
  3      location pointer   n/a        p     2      1 * 2     2 * 2       2 * 2       100%
  4      input variable     int[0..1]  io.i  3      1 * 2     2 * 2       2 * 2       100%
  5      discrete variable  int[2..5]  p.y   4      3 * 2     4 * 2       8 * 2       50%
  6      discrete variable  p.E        p.v   5      2 * 2     3 * 2       4 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      6      20        34          44          ~77%

Starting data-based synthesis.

Invariant (component state invariant):   p.b
Invariant (components state invariant):  p.b
Invariant (location state invariant):    p.L1 or p.v != p.Q
Invariant (locations state invariant):   p.L1 or p.v != p.Q
Invariant (system state invariant):      p.b and (not p.b or (p.L1 or p.v != p.Q))

Initial   (discrete variable 0):         true
Initial   (discrete variable 1):         true
Initial   (discrete variable 4):         true
Initial   (discrete variable 5):         true
Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     (p.x = 2 or p.x = 3) and p.L1
Initial   (auts/locs init predicate):    (p.x = 2 or p.x = 3) and p.L1
Initial   (uncontrolled system):         (p.x = 2 or p.x = 3) and (p.x = 0 or (p.x = 1 or p.L1))
Initial   (system, combined init/inv):   p.b and ((not p.b or (p.x = 2 or p.x = 3)) and (not p.b or p.x = 0 or (p.x = 1 or p.L1)))

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   p.L2 and (p.L1 or p.y != 5)
Marked    (auts/locs marker predicate):  p.L2 and (p.L1 or p.y != 5)
Marked    (uncontrolled system):         p.L2 and (p.L1 or p.y != 5)
Marked    (system, combined marked/inv): p.b and p.L2 and ((p.y = 2 or p.y = 4) and p.v != p.Q) or p.b and p.L2 and (p.y = 3 and p.v != p.Q)

State/event exclusion requirements:
  None

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: p.e1) (guard: p.x = 2 and p.L1) (assignments: p := p.L2)
    Edge: (event: p.e2) (guard: p.L2 and (io.i = 0 and p.y = 2) or p.L2 and io.i = 1) (assignments: p := p.L1)
    Edge: (event: io.i) (guard: true) (assignments: io.i+ != io.i)

Initialized controlled-behavior predicate using invariants: p.b and (not p.b or (p.L1 or p.v != p.Q)).

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: p.b and (not p.b or (p.L1 or p.v != p.Q)) -> p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q)))) [range: true, variable: discrete variable "p.y" of type "int[2..5]" (group: 4, domain: 8+9, BDD variables: 3, CIF/BDD values: 4/8)].
Controlled behavior: p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q)))) -> p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q)))) [range: true, variable: discrete variable "p.v" of type "p.E" (group: 5, domain: 10+11, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q)))).

Restricting behavior using state/event exclusion requirements.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.L2 and (p.L1 or p.y != 5) [marker predicate]
Backward controlled-behavior: p.L2 and (p.L1 or p.y != 5) -> p.b and p.L2 and (p.y = 4 and p.v != p.Q) or (p.b and p.L2 and (p.y = 2 and p.v != p.Q) or p.b and p.L2 and (p.y = 3 and p.v != p.Q)) [restricted to current/previous controlled-behavior predicate: p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q))))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.b and p.L2 and (p.y = 4 and p.v != p.Q) or (p.b and p.L2 and (p.y = 2 and p.v != p.Q) or p.b and p.L2 and (p.y = 3 and p.v != p.Q)) -> p.b and p.x = 0 and (p.L2 and (p.y = 4 and p.v != p.Q)) or p.b and p.x = 0 and (p.L2 and (p.y = 2 and p.v != p.Q)) or (p.b and p.x = 0 and (p.L2 and (p.y = 3 and p.v != p.Q)) or p.b and p.x = 2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 3 and p.v != p.Q))))) [backward reach with edge: (event: p.e1) (guard: p.x = 2 and p.L1) (assignments: p := p.L2), restricted to current/previous controlled-behavior predicate: p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q))))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.b and p.x = 0 and (p.L2 and (p.y = 4 and p.v != p.Q)) or p.b and p.x = 0 and (p.L2 and (p.y = 2 and p.v != p.Q)) or (p.b and p.x = 0 and (p.L2 and (p.y = 3 and p.v != p.Q)) or p.b and p.x = 2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 3 and p.v != p.Q))))) [fixed point].
Controlled behavior: p.b and ((not p.b or p.L1 or (p.y = 2 or (p.y = 3 or p.v != p.Q))) and (not p.b or p.L1 or (p.y = 4 or (p.y = 5 or p.v != p.Q)))) -> p.b and p.x = 0 and (p.L2 and (p.y = 4 and p.v != p.Q)) or p.b and p.x = 0 and (p.L2 and (p.y = 2 and p.v != p.Q)) or (p.b and p.x = 0 and (p.L2 and (p.y = 3 and p.v != p.Q)) or p.b and p.x = 2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 3 and p.v != p.Q))))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 10n 24p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: (p.x = 2 or p.x = 3) and (p.x = 0 or (p.x = 1 or p.L1)) [initialization predicate]
Forward controlled-behavior: (p.x = 2 or p.x = 3) and (p.x = 0 or (p.x = 1 or p.L1)) -> p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q))) [restricted to current/previous controlled-behavior predicate: p.b and p.x = 0 and (p.L2 and (p.y = 4 and p.v != p.Q)) or p.b and p.x = 0 and (p.L2 and (p.y = 2 and p.v != p.Q)) or (p.b and p.x = 0 and (p.L2 and (p.y = 3 and p.v != p.Q)) or p.b and p.x = 2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 3 and p.v != p.Q)))))]
Forward reachability: iteration 1.
Forward controlled-behavior: p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q))) -> p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q)) [forward reach with edge: (event: p.e1) (guard: p.x = 2 and p.L1) (assignments: p := p.L2), restricted to current/previous controlled-behavior predicate: p.b and p.x = 0 and (p.L2 and (p.y = 4 and p.v != p.Q)) or p.b and p.x = 0 and (p.L2 and (p.y = 2 and p.v != p.Q)) or (p.b and p.x = 0 and (p.L2 and (p.y = 3 and p.v != p.Q)) or p.b and p.x = 2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 3 and p.v != p.Q)))))]
Forward reachability: iteration 2.
Forward controlled-behavior: p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q)) [fixed point].
Controlled behavior: p.b and p.x = 0 and (p.L2 and (p.y = 4 and p.v != p.Q)) or p.b and p.x = 0 and (p.L2 and (p.y = 2 and p.v != p.Q)) or (p.b and p.x = 0 and (p.L2 and (p.y = 3 and p.v != p.Q)) or p.b and p.x = 2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 1 or p.x = 3) and (p.L2 and (p.y = 3 and p.v != p.Q))))) -> p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q)).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: p.L2 and (p.L1 or p.y != 5) [marker predicate]
Backward controlled-behavior: p.L2 and (p.L1 or p.y != 5) -> p.b and p.x = 2 and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L2 and (p.y = 3 and p.v != p.Q))) [restricted to current/previous controlled-behavior predicate: p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q))]
Backward reachability: iteration 1.
Backward controlled-behavior: p.b and p.x = 2 and (p.L2 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L2 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L2 and (p.y = 3 and p.v != p.Q))) -> p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q)) [backward reach with edge: (event: p.e1) (guard: p.x = 2 and p.L1) (assignments: p := p.L2), restricted to current/previous controlled-behavior predicate: p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q))]
Backward reachability: iteration 2.
Backward controlled-behavior: p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q)) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (not p.b or p.x != 2 or (p.y != 4 or p.v = p.Q)) and ((not p.b or p.x != 2 or (p.y != 2 or p.v = p.Q)) and (not p.b or p.x != 2 or (p.y != 3 or p.v = p.Q))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: p.e1) (guard: p.x = 2 and p.L1) (assignments: p := p.L2): guard: p.x = 2 and p.L1 -> p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q))).
Edge (event: p.e2) (guard: p.L2 and (io.i = 0 and p.y = 2) or p.L2 and io.i = 1) (assignments: p := p.L1): guard: p.L2 and (io.i = 0 and p.y = 2) or p.L2 and io.i = 1 -> p.b and (p.x = 2 and p.L2) and (io.i = 0 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 3 and p.v != p.Q))).

Final synthesis result:
  State: (controlled-behavior: p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q)))
    Edge: (event: p.e1) (guard: p.x = 2 and p.L1 -> p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q)))) (assignments: p := p.L2)
    Edge: (event: p.e2) (guard: p.L2 and (io.i = 0 and p.y = 2) or p.L2 and io.i = 1 -> p.b and (p.x = 2 and p.L2) and (io.i = 0 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 3 and p.v != p.Q)))) (assignments: p := p.L1)
    Edge: (event: io.i) (guard: true) (assignments: io.i+ != io.i)

Controlled system:                     exactly 24 states.

Initial (synthesis result):            p.b and p.x = 2 and (p.y = 4 and p.v != p.Q) or (p.b and p.x = 2 and (p.y = 2 and p.v != p.Q) or p.b and p.x = 2 and (p.y = 3 and p.v != p.Q))
Initial (uncontrolled system):         (p.x = 2 or p.x = 3) and (p.x = 0 or (p.x = 1 or p.L1))
Initial (controlled system):           p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q)))
Initial (removed by supervisor):       (p.b or (p.x = 2 or p.x = 3)) and (p.b or p.x = 0 or (p.x = 1 or p.L1)) and ((not p.b or p.x != 0) and (not p.b or p.x != 2 or (p.L2 or (p.y != 4 or p.v = p.Q)))) and ((not p.b or p.x != 2 or (p.L2 or (p.y != 2 or p.v = p.Q))) and (not p.b or p.x != 2 or (p.L2 or (p.y != 3 or p.v = p.Q))) and ((not p.b or (p.x != 2 or p.L1)) and ((not p.b or p.x != 1) and (not p.b or (p.x != 3 or p.L1)))))
Initial (added by supervisor):         <bdd 17n 25p>

Simplification of controlled system under the assumption of the uncontrolled system:
  Initial: p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q))) -> p.b and (p.x = 0 or p.x = 2) and ((p.y = 2 or p.y = 4) and p.v != p.Q) or p.b and (p.x = 0 or p.x = 2) and (p.y = 3 and p.v != p.Q) [assume (p.x = 2 or p.x = 3) and (p.x = 0 or (p.x = 1 or p.L1))].

Simplification of controlled system under the assumption of the plants:
  Event p.e1: guard: p.b and p.x = 2 and (p.L1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (p.L1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (p.L1 and (p.y = 3 and p.v != p.Q))) -> p.b and (p.y = 4 and p.v != p.Q) or (p.b and (p.y = 2 and p.v != p.Q) or p.b and (p.y = 3 and p.v != p.Q)) [assume p.x = 2 and p.L1].
  Event p.e2: guard: p.b and (p.x = 2 and p.L2) and (io.i = 0 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 4 and p.v != p.Q)) or (p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 2 and p.v != p.Q)) or p.b and (p.x = 2 and p.L2) and (io.i = 1 and (p.y = 3 and p.v != p.Q))) -> p.b and p.x = 2 and (io.i = 0 and p.v != p.Q) or p.b and p.x = 2 and (io.i = 1 and (p.y = 4 and p.v != p.Q)) or (p.b and p.x = 2 and (io.i = 1 and (p.y = 2 and p.v != p.Q)) or p.b and p.x = 2 and (io.i = 1 and (p.y = 3 and p.v != p.Q))) [assume p.L2 and (io.i = 0 and p.y = 2) or p.L2 and io.i = 1].

Constructing output CIF specification.
Writing output CIF file "datasynth/bdd_out_nodes.ctrlsys.real.cif".
