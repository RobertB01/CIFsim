Reading CIF file "datasynth/stats_none.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      input variable     int[0..3]   x     0      2 * 2     4 * 2       4 * 2       100%
  2      discrete variable  int[0..25]  a.x   1      5 * 2     26 * 2      32 * 2      ~81%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       2      14        60          72          ~83%

Applying variable ordering:
  Applying 4 orderers, sequentially:
    Applying model variable order:
      Effect: both

    Applying DCSH algorithm:
      Metric: wes
      Relations: legacy
      Effect: var-order
      Number of hyper-edges: 6

      Applying Weighted Cuthill-McKee algorithm:
        Node finder: george-liu
        Relations: legacy
        Effect: var-order
        Number of graph edges: 0

        Skipping algorithm: no graph edges.

      Found new best variable order.

      Applying Sloan algorithm:
        Relations: legacy
        Effect: var-order
        Number of graph edges: 0

        Skipping algorithm: no graph edges.

      Applying 2 orderers, sequentially:
        Applying Weighted Cuthill-McKee algorithm:
          Node finder: george-liu
          Relations: legacy
          Effect: var-order
          Number of graph edges: 0

          Skipping algorithm: no graph edges.

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 6

          Total span:   0 (total)   0.00 (avg/edge) / WES:   0.416667 (total)   0.069444 (avg/edge) [before]
          Total span:   0 (total)   0.00 (avg/edge) / WES:   0.416667 (total)   0.069444 (avg/edge) [reversed]

      Found new best variable order.

      Applying 2 orderers, sequentially:
        Applying Sloan algorithm:
          Relations: legacy
          Effect: var-order
          Number of graph edges: 0

          Skipping algorithm: no graph edges.

        Reversing the variable order:
          Relations: legacy
          Effect: var-order
          Number of hyper-edges: 6

          Total span:   0 (total)   0.00 (avg/edge) / WES:   0.416667 (total)   0.069444 (avg/edge) [before]
          Total span:   0 (total)   0.00 (avg/edge) / WES:   0.416667 (total)   0.069444 (avg/edge) [reversed]

    Applying FORCE algorithm:
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 2
      Maximum number of iterations: 10

      Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
      Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [iteration 1]
      Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [after]

    Applying sliding window algorithm:
      Size: 4
      Metric: total-span
      Relations: linearized
      Effect: var-order
      Number of hyper-edges: 2
      Window length: 2

      Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [before]
      Total span:   0 (total)   0.00 (avg/edge) / WES:   0.000000 (total)   0.000000 (avg/edge) [after]

Variable order changed.

CIF variables and location pointers:
  Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..25]  a.x   0      5 * 2     26 * 2      32 * 2      ~81%
  2      input variable     int[0..3]   x     1      2 * 2     4 * 2       4 * 2       100%
  -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
  Total                                       2      14        60          72          ~83%

Starting data-based synthesis.

Invariant (component state plant invariant): x = 2 or x = 3
Invariant (components state plant inv):      x = 2 or x = 3
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    x = 2 or x = 3

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             a.x = 1
Initial   (discrete variables):              a.x = 1
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             a.x = 1
Initial   (system, combined init/plant inv): a.x = 1 and (x = 2 or x = 3)
Initial   (system, combined init/state inv): a.x = 1 and (x = 2 or x = 3)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): x = 2 or x = 3
Marked    (system, combined mark/state inv): x = 2 or x = 3

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "f" needs:
    (2 <= a.x and a.x <= 7 or 10 <= a.x and a.x <= 25) and (not(a.x = 4 or a.x = 5) and not(a.x = 2 or a.x = 3 or (a.x = 6 or a.x = 7)))
    0 <= a.x and a.x <= 15

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1)
    Edge: (event: f) (guard: true)
    Edge: (event: x) (guard: true) (assignments: x+ != x)

Restricting behavior using state/event exclusion plants.

Restricting uncontrolled behavior using state plant invariants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: a.x = 1 and (x = 2 or x = 3).

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "a.x" of type "int[0..25]" (group: 0, domain: 0+1, BDD variables: 5, CIF/BDD values: 26/32)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: f) (guard: true): guard: true -> a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15)) [state/event exclusion requirement: a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15))].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1)
    Edge: (event: f) (guard: true -> a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: x) (guard: true) (assignments: x+ != x)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: a.x = 1 and (x = 2 or x = 3) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: a.x = 1 and (x = 2 or x = 3) -> a.x = 2 and (x = 2 or x = 3) or a.x = 1 and (x = 2 or x = 3) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: a.x = 2 and (x = 2 or x = 3) or a.x = 1 and (x = 2 or x = 3) -> a.x = 2 or a.x = 1 [forward reach with edge: (event: x) (guard: true) (assignments: x+ != x), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: a.x = 2 or a.x = 1 -> a.x = 2 or (a.x = 1 or a.x = 3) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: a.x = 2 or (a.x = 1 or a.x = 3) -> a.x = 4 or a.x = 2 or (a.x = 1 or a.x = 3) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: a.x = 4 or a.x = 2 or (a.x = 1 or a.x = 3) -> a.x = 4 or a.x = 2 or (a.x = 1 or (a.x = 5 or a.x = 3)) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 5.
Forward controlled-behavior: a.x = 4 or a.x = 2 or (a.x = 1 or (a.x = 5 or a.x = 3)) -> a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or (a.x = 5 or a.x = 3)) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 6.
Forward controlled-behavior: a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or (a.x = 5 or a.x = 3)) -> a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or a.x = 3 or (a.x = 5 or a.x = 7)) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 7.
Forward controlled-behavior: a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or a.x = 3 or (a.x = 5 or a.x = 7)) -> a.x = 8 or a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or a.x = 3 or (a.x = 5 or a.x = 7)) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 8.
Forward controlled-behavior: a.x = 8 or a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or a.x = 3 or (a.x = 5 or a.x = 7)) -> a.x = 8 or a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or a.x = 9 or (a.x = 5 or (a.x = 3 or a.x = 7))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 9.
Forward controlled-behavior: a.x = 8 or a.x = 4 or (a.x = 2 or a.x = 6) or (a.x = 1 or a.x = 9 or (a.x = 5 or (a.x = 3 or a.x = 7))) -> a.x = 8 or a.x = 4 or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or a.x = 9 or (a.x = 5 or (a.x = 3 or a.x = 7))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 10.
Forward controlled-behavior: a.x = 8 or a.x = 4 or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or a.x = 9 or (a.x = 5 or (a.x = 3 or a.x = 7))) -> a.x = 8 or a.x = 4 or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or (a.x = 3 or a.x = 9) or (a.x = 11 or (a.x = 5 or a.x = 7))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 11.
Forward controlled-behavior: a.x = 8 or a.x = 4 or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or (a.x = 3 or a.x = 9) or (a.x = 11 or (a.x = 5 or a.x = 7))) -> a.x = 8 or (a.x = 4 or a.x = 12) or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or (a.x = 3 or a.x = 9) or (a.x = 11 or (a.x = 5 or a.x = 7))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 12.
Forward controlled-behavior: a.x = 8 or (a.x = 4 or a.x = 12) or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or (a.x = 3 or a.x = 9) or (a.x = 11 or (a.x = 5 or a.x = 7))) -> a.x = 8 or (a.x = 4 or a.x = 12) or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or (a.x = 5 or a.x = 9) or (a.x = 13 or a.x = 3 or (a.x = 11 or a.x = 7))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 13.
Forward controlled-behavior: a.x = 8 or (a.x = 4 or a.x = 12) or (a.x = 2 or (a.x = 10 or a.x = 6)) or (a.x = 1 or (a.x = 5 or a.x = 9) or (a.x = 13 or a.x = 3 or (a.x = 11 or a.x = 7))) -> not(a.x = 0 or a.x = 16) and a.x != 24 and (a.x != 20 and not(a.x = 18 or a.x = 22)) and (not(a.x = 17 or (a.x = 21 or a.x = 25)) and a.x != 19 and (a.x != 23 and a.x != 15)) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 14.
Forward controlled-behavior: not(a.x = 0 or a.x = 16) and a.x != 24 and (a.x != 20 and not(a.x = 18 or a.x = 22)) and (not(a.x = 17 or (a.x = 21 or a.x = 25)) and a.x != 19 and (a.x != 23 and a.x != 15)) -> not(a.x = 0 or a.x = 16) and a.x != 24 and (a.x != 20 and (not(a.x = 18 or a.x = 22) and (0 <= a.x and a.x <= 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 15.
Forward controlled-behavior: not(a.x = 0 or a.x = 16) and a.x != 24 and (a.x != 20 and (not(a.x = 18 or a.x = 22) and (0 <= a.x and a.x <= 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))))) -> a.x != 0 and a.x != 24 and (a.x != 20 and (not(a.x = 18 or a.x = 22) and (0 <= a.x and a.x <= 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 16.
Forward controlled-behavior: a.x != 0 and a.x != 24 and (a.x != 20 and (not(a.x = 18 or a.x = 22) and (0 <= a.x and a.x <= 16 or a.x = 18 or (a.x = 20 or (a.x = 22 or a.x = 24))))) -> a.x != 0 and (a.x != 24 and a.x != 20) and (not(a.x = 18 or a.x = 22) and a.x != 25 and (a.x != 21 and not(a.x = 19 or a.x = 23))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 17.
Forward controlled-behavior: a.x != 0 and (a.x != 24 and a.x != 20) and (not(a.x = 18 or a.x = 22) and a.x != 25 and (a.x != 21 and not(a.x = 19 or a.x = 23))) -> a.x != 0 and (a.x != 24 and a.x != 20) and (a.x != 22 and a.x != 25 and (a.x != 21 and not(a.x = 19 or a.x = 23))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 18.
Forward controlled-behavior: a.x != 0 and (a.x != 24 and a.x != 20) and (a.x != 22 and a.x != 25 and (a.x != 21 and not(a.x = 19 or a.x = 23))) -> a.x != 0 and (a.x != 24 and a.x != 20) and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 19.
Forward controlled-behavior: a.x != 0 and (a.x != 24 and a.x != 20) and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))) -> a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))) [forward reach with edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 20.
Forward controlled-behavior: a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))) [fixed point].
Controlled behavior: true -> a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))) [restricted to current/previous controlled-behavior predicate: a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23)))]
Backward reachability: iteration 1.
Backward controlled-behavior: a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: a.x = 0 or (a.x = 24 or a.x = 22) or (a.x = 25 or (a.x = 21 or a.x = 23)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
  State: (controlled-behavior: a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23))))
    Edge: (event: e) (guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))) (assignments: a.x := a.x + 1)
    Edge: (event: f) (guard: true -> a.x = 12 or (a.x = 13 or a.x = 10) or (a.x = 11 or (a.x = 14 or a.x = 15)))
    Edge: (event: x) (guard: true) (assignments: x+ != x)

Initial (synthesis result):            a.x != 0 and a.x != 24 and (a.x != 22 and (a.x != 25 and not(a.x = 21 or a.x = 23)))
Initial (uncontrolled system):         a.x = 1
Initial (controlled system):           a.x = 1 and (x = 2 or x = 3)
Initial (removed by supervisor):       a.x = 1 and (x = 0 or x = 1)
Initial (added by supervisor):         a.x != 1 or (x = 2 or x = 3)

Simplification of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
  Initial: a.x = 1 and (x = 2 or x = 3) -> x = 2 or x = 3 [assume a.x = 1].

Simplification of controlled system under the assumption of the plants:
  Event e: guard: 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23)) -> true [assume 0 <= a.x and (a.x <= 23 and not(20 <= a.x and a.x <= 23))].

Constructing output CIF specification.
Writing output CIF file "datasynth/stats_none.ctrlsys.real.cif".
