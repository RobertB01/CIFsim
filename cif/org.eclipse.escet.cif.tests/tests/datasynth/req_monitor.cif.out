Reading CIF file "datasynth/req_monitor.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        r1    0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..5]  r1.x  1      3 * 2     6 * 2       8 * 2       75%
        3      location pointer   n/a        r2    2      1 * 2     2 * 2       2 * 2       100%
        4      discrete variable  int[0..5]  r2.x  3      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      4      16        32          40          80%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 8

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 6

                    Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [before]
                    Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 6

                    Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [before]
                    Total span:   6 (total)   0.75 (avg/edge) / WES:   0.609375 (total)   0.076172 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 6

                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [before]
                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [before]
                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 6

                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.562500 (total)   0.070313 (avg/edge) [before]
                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.609375 (total)   0.076172 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.609375 (total)   0.076172 (avg/edge) [before]
                        Total span:   6 (total)   0.75 (avg/edge) / WES:   0.609375 (total)   0.076172 (avg/edge) [reversed]

                Found new best variable order.

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 11
                Maximum number of iterations: 20

                Total span:   33 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.136364 (avg/edge) [before]
                Total span:   33 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.136364 (avg/edge) [iteration 1]
                Total span:   33 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.136364 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 11
                Window length: 4

                Total span:   33 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.136364 (avg/edge) [before]
                Total span:   33 (total)   3.00 (avg/edge) / WES:   1.500000 (total)   0.136364 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..5]  r1.x  0      3 * 2     6 * 2       8 * 2       75%
        2      discrete variable  int[0..5]  r2.x  1      3 * 2     6 * 2       8 * 2       75%
        3      location pointer   n/a        r2    2      1 * 2     2 * 2       2 * 2       100%
        4      location pointer   n/a        r1    3      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      4      16        32          40          80%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             r1.x = 0
    Initial   (discrete variable 1):             r2.x = 0
    Initial   (discrete variables):              r1.x = 0 and r2.x = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (aut/locs init predicate):         r1.l1
    Initial   (aut/locs init predicate):         r2.l1
    Initial   (auts/locs init predicate):        r2.l1 and r1.l1
    Initial   (uncontrolled system):             r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1)
    Initial   (system, combined init/plant inv): r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1)
    Initial   (system, combined init/state inv): r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1)

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       r1.l2
    Marked    (aut/locs marker predicate):       r2.l2
    Marked    (auts/locs marker predicate):      r2.l2 and r1.l2
    Marked    (uncontrolled system):             r2.l2 and r1.l2
    Marked    (system, combined mark/plant inv): r2.l2 and r1.l2
    Marked    (system, combined mark/state inv): r2.l2 and r1.l2

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        Event "p.e2" needs:
            (r1.x = 0 or r1.x = 2) and r1.l1 or r1.x = 1 and r1.l1

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: p.e1) (guard: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1))
            Edge: (event: p.e1) (guard: r1.x = 0 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l1 and r1.l1)))
            Edge: (event: p.e1) (guard: r1.x = 0 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 0 and (r2.x = 2 and r1.l1) or (r1.x = 0 and (r2.x = 1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l2 and r1.l1))))
            Edge: (event: p.e1) (guard: r1.x = 4 and r2.x = 0 and (r2.l1 and r1.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l1)))
            Edge: (event: p.e1) (guard: r1.x = 4 and r2.x = 4 and (r2.l1 and r1.l1) or r1.x = 4 and r2.x = 5 and (r2.l1 and r1.l1) or (r1.x = 4 and r2.x = 3 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l1)) or (r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l1)))))
            Edge: (event: p.e1) (guard: r1.x = 4 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or (r1.x = 4 and (r2.x = 2 and r1.l1) or r1.x = 4 and (r2.x = 1 and r1.l1)) or (r1.x = 4 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 4 and r2.x = 3 and (r2.l2 and r1.l1) or (r1.x = 5 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 5 and (r2.x = 2 and r1.l1))) or (r1.x = 5 and (r2.x = 1 and r1.l1) or r1.x = 5 and r2.x = 5 and (r2.l2 and r1.l1) or (r1.x = 5 and r2.x = 3 and (r2.l2 and r1.l1) or r1.x = 3 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1)) or (r1.x = 3 and (r2.x = 2 and r1.l1) or r1.x = 3 and (r2.x = 1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l2 and r1.l1)))))
            Edge: (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 2 and (r2.x = 0 and r2.l1) or (r1.x = 1 and (r2.x = 0 and r2.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l2))))
            Edge: (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 4 and (r2.l1 and r1.l2) or ((r1.x = 0 or r1.x = 4) and r2.x = 5 and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 4) and r2.x = 3 and (r2.l1 and r1.l2)) or (r1.x = 2 and (r2.x = 4 and r2.l1) or r1.x = 2 and (r2.x = 5 and r2.l1) or (r1.x = 2 and (r2.x = 3 and r2.l1) or r1.x = 1 and (r2.x = 4 and r2.l1))) or (r1.x = 1 and (r2.x = 5 and r2.l1) or r1.x = 1 and (r2.x = 3 and r2.l1) or (r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l2) or r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l2)) or (r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l2) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l2)))))
            Edge: (event: p.e1) (guard: <bdd 15n 36p>)
            Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1))) (assignments: r1 := r1.l2, r2 := r2.l2)
            Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 4 and r1.l1) or ((r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l2 and r1.l1) or ((r1.x = 0 or r1.x = 2) and (r2.x = 5 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 3 and r1.l1))) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or r1.x = 1 and (r2.x = 4 and r1.l1) or (r1.x = 1 and r2.x = 1 and (r2.l2 and r1.l1) or (r1.x = 1 and (r2.x = 5 and r1.l1) or r1.x = 1 and (r2.x = 3 and r1.l1))))) (assignments: r1 := r1.l2)
            Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l2) or (r1.x = 4 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 4 and (r2.x = 1 and r2.l1) or r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2))) or (r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l2) or r1.x = 5 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 5 and (r2.x = 1 and r2.l1) or (r1.x = 3 and ((r2.x = 0 or r2.x = 2) and r2.l1) or r1.x = 3 and (r2.x = 1 and r2.l1))))) (assignments: r2 := r2.l2)
            Edge: (event: p.e2) (guard: <bdd 12n 25p>)

Restricting edge guards to prevent runtime errors:
    No guards changed.

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1).

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "r1.x" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].
    Controlled behavior: true -> true [range: true, variable: discrete variable "r2.x" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Edge (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l2) or (r1.x = 4 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 4 and (r2.x = 1 and r2.l1) or r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2))) or (r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l2) or r1.x = 5 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 5 and (r2.x = 1 and r2.l1) or (r1.x = 3 and ((r2.x = 0 or r2.x = 2) and r2.l1) or r1.x = 3 and (r2.x = 1 and r2.l1))))) (assignments: r2 := r2.l2): guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l2) or (r1.x = 4 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 4 and (r2.x = 1 and r2.l1) or r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2))) or (r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l2) or r1.x = 5 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 5 and (r2.x = 1 and r2.l1) or (r1.x = 3 and ((r2.x = 0 or r2.x = 2) and r2.l1) or r1.x = 3 and (r2.x = 1 and r2.l1)))) -> false [state/event exclusion requirement: (r1.x = 0 or r1.x = 2) and r1.l1 or r1.x = 1 and r1.l1].
    Edge (event: p.e2) (guard: <bdd 12n 25p>): guard: <bdd 12n 25p> -> false [state/event exclusion requirement: (r1.x = 0 or r1.x = 2) and r1.l1 or r1.x = 1 and r1.l1].

    Restricted behavior using state/event exclusion requirements:
        State: (controlled-behavior: true)
            Edge: (event: p.e1) (guard: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1))
            Edge: (event: p.e1) (guard: r1.x = 0 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l1 and r1.l1)))
            Edge: (event: p.e1) (guard: r1.x = 0 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 0 and (r2.x = 2 and r1.l1) or (r1.x = 0 and (r2.x = 1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l2 and r1.l1))))
            Edge: (event: p.e1) (guard: r1.x = 4 and r2.x = 0 and (r2.l1 and r1.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l1)))
            Edge: (event: p.e1) (guard: r1.x = 4 and r2.x = 4 and (r2.l1 and r1.l1) or r1.x = 4 and r2.x = 5 and (r2.l1 and r1.l1) or (r1.x = 4 and r2.x = 3 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l1)) or (r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l1)))))
            Edge: (event: p.e1) (guard: r1.x = 4 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or (r1.x = 4 and (r2.x = 2 and r1.l1) or r1.x = 4 and (r2.x = 1 and r1.l1)) or (r1.x = 4 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 4 and r2.x = 3 and (r2.l2 and r1.l1) or (r1.x = 5 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 5 and (r2.x = 2 and r1.l1))) or (r1.x = 5 and (r2.x = 1 and r1.l1) or r1.x = 5 and r2.x = 5 and (r2.l2 and r1.l1) or (r1.x = 5 and r2.x = 3 and (r2.l2 and r1.l1) or r1.x = 3 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1)) or (r1.x = 3 and (r2.x = 2 and r1.l1) or r1.x = 3 and (r2.x = 1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l2 and r1.l1)))))
            Edge: (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 2 and (r2.x = 0 and r2.l1) or (r1.x = 1 and (r2.x = 0 and r2.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l2))))
            Edge: (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 4 and (r2.l1 and r1.l2) or ((r1.x = 0 or r1.x = 4) and r2.x = 5 and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 4) and r2.x = 3 and (r2.l1 and r1.l2)) or (r1.x = 2 and (r2.x = 4 and r2.l1) or r1.x = 2 and (r2.x = 5 and r2.l1) or (r1.x = 2 and (r2.x = 3 and r2.l1) or r1.x = 1 and (r2.x = 4 and r2.l1))) or (r1.x = 1 and (r2.x = 5 and r2.l1) or r1.x = 1 and (r2.x = 3 and r2.l1) or (r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l2) or r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l2)) or (r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l2) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l2)))))
            Edge: (event: p.e1) (guard: <bdd 15n 36p>)
            Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1))) (assignments: r1 := r1.l2, r2 := r2.l2)
            Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 4 and r1.l1) or ((r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l2 and r1.l1) or ((r1.x = 0 or r1.x = 2) and (r2.x = 5 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 3 and r1.l1))) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or r1.x = 1 and (r2.x = 4 and r1.l1) or (r1.x = 1 and r2.x = 1 and (r2.l2 and r1.l1) or (r1.x = 1 and (r2.x = 5 and r1.l1) or r1.x = 1 and (r2.x = 3 and r1.l1))))) (assignments: r1 := r1.l2)
            Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l2) or (r1.x = 4 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 4 and (r2.x = 1 and r2.l1) or r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2))) or (r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l2) or r1.x = 5 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 5 and (r2.x = 1 and r2.l1) or (r1.x = 3 and ((r2.x = 0 or r2.x = 2) and r2.l1) or r1.x = 3 and (r2.x = 1 and r2.l1)))) -> false) (assignments: r2 := r2.l2)
            Edge: (event: p.e2) (guard: <bdd 12n 25p> -> false)

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: r2.l2 and r1.l2 [marker predicate]
        Backward controlled-behavior: r2.l2 and r1.l2 -> not(r1.x = 2 or r1.x = 3) and not(r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2) or not(r1.x = 2 or r1.x = 3) and (r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2) or ((r1.x = 2 or r1.x = 3) and not(r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2) or (r1.x = 2 or r1.x = 3) and (r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2)) [restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 1:
            Backward controlled-behavior: not(r1.x = 2 or r1.x = 3) and not(r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2) or not(r1.x = 2 or r1.x = 3) and (r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2) or ((r1.x = 2 or r1.x = 3) and not(r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2) or (r1.x = 2 or r1.x = 3) and (r2.x = 2 or r2.x = 3) and (r2.l2 and r1.l2)) -> <bdd 17n 33p> [backward reach with edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1))) (assignments: r1 := r1.l2, r2 := r2.l2), restricted to current/previous controlled-behavior predicate: true]
            Backward controlled-behavior: <bdd 17n 33p> -> <bdd 19n 33p> [backward reach with edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 4 and r1.l1) or ((r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l2 and r1.l1) or ((r1.x = 0 or r1.x = 2) and (r2.x = 5 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 3 and r1.l1))) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or r1.x = 1 and (r2.x = 4 and r1.l1) or (r1.x = 1 and r2.x = 1 and (r2.l2 and r1.l1) or (r1.x = 1 and (r2.x = 5 and r1.l1) or r1.x = 1 and (r2.x = 3 and r1.l1))))) (assignments: r1 := r1.l2), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: <bdd 19n 33p> [fixed point].

        Controlled behavior: true -> <bdd 19n 33p>.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 19n 41p> [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) -> r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2) [forward reach with edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1))) (assignments: r1 := r1.l2, r2 := r2.l2), restricted to current/previous controlled-behavior predicate: <bdd 19n 33p>]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2) [fixed point].

        Controlled behavior: <bdd 19n 33p> -> r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2).

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: r2.l2 and r1.l2 [marker predicate]
        Backward controlled-behavior: r2.l2 and r1.l2 -> r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2) [restricted to current/previous controlled-behavior predicate: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2)]

        Backward reachability iteration 1:
            Backward controlled-behavior: r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2) -> r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2) [backward reach with edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1))) (assignments: r1 := r1.l2, r2 := r2.l2), restricted to current/previous controlled-behavior predicate: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2)]

        Backward reachability iteration 2:
            No change this iteration.

        Backward controlled-behavior: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2) [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: (r1.x != 0 or r2.x != 0 or (r2.l2 or r1.l2)) and (r1.x != 0 or r2.x != 0 or (r2.l1 or r1.l1)) [current/previous controlled behavior predicate]

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: p.e1) (guard: r1.x = 0 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l1 and r1.l1))): guard: r1.x = 0 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l1 and r1.l1)) -> false.
    Edge (event: p.e1) (guard: r1.x = 0 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 0 and (r2.x = 2 and r1.l1) or (r1.x = 0 and (r2.x = 1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l2 and r1.l1)))): guard: r1.x = 0 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 0 and (r2.x = 2 and r1.l1) or (r1.x = 0 and (r2.x = 1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l2 and r1.l1))) -> false.
    Edge (event: p.e1) (guard: r1.x = 4 and r2.x = 0 and (r2.l1 and r1.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l1))): guard: r1.x = 4 and r2.x = 0 and (r2.l1 and r1.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l1)) -> false.
    Edge (event: p.e1) (guard: r1.x = 4 and r2.x = 4 and (r2.l1 and r1.l1) or r1.x = 4 and r2.x = 5 and (r2.l1 and r1.l1) or (r1.x = 4 and r2.x = 3 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l1)) or (r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l1))))): guard: r1.x = 4 and r2.x = 4 and (r2.l1 and r1.l1) or r1.x = 4 and r2.x = 5 and (r2.l1 and r1.l1) or (r1.x = 4 and r2.x = 3 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l1)) or (r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l1)))) -> false.
    Edge (event: p.e1) (guard: r1.x = 4 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or (r1.x = 4 and (r2.x = 2 and r1.l1) or r1.x = 4 and (r2.x = 1 and r1.l1)) or (r1.x = 4 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 4 and r2.x = 3 and (r2.l2 and r1.l1) or (r1.x = 5 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 5 and (r2.x = 2 and r1.l1))) or (r1.x = 5 and (r2.x = 1 and r1.l1) or r1.x = 5 and r2.x = 5 and (r2.l2 and r1.l1) or (r1.x = 5 and r2.x = 3 and (r2.l2 and r1.l1) or r1.x = 3 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1)) or (r1.x = 3 and (r2.x = 2 and r1.l1) or r1.x = 3 and (r2.x = 1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l2 and r1.l1))))): guard: r1.x = 4 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or (r1.x = 4 and (r2.x = 2 and r1.l1) or r1.x = 4 and (r2.x = 1 and r1.l1)) or (r1.x = 4 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 4 and r2.x = 3 and (r2.l2 and r1.l1) or (r1.x = 5 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 5 and (r2.x = 2 and r1.l1))) or (r1.x = 5 and (r2.x = 1 and r1.l1) or r1.x = 5 and r2.x = 5 and (r2.l2 and r1.l1) or (r1.x = 5 and r2.x = 3 and (r2.l2 and r1.l1) or r1.x = 3 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1)) or (r1.x = 3 and (r2.x = 2 and r1.l1) or r1.x = 3 and (r2.x = 1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l2 and r1.l1)))) -> false.
    Edge (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 2 and (r2.x = 0 and r2.l1) or (r1.x = 1 and (r2.x = 0 and r2.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l2)))): guard: (r1.x = 0 or r1.x = 4) and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 2 and (r2.x = 0 and r2.l1) or (r1.x = 1 and (r2.x = 0 and r2.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l2))) -> false.
    Edge (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 4 and (r2.l1 and r1.l2) or ((r1.x = 0 or r1.x = 4) and r2.x = 5 and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 4) and r2.x = 3 and (r2.l1 and r1.l2)) or (r1.x = 2 and (r2.x = 4 and r2.l1) or r1.x = 2 and (r2.x = 5 and r2.l1) or (r1.x = 2 and (r2.x = 3 and r2.l1) or r1.x = 1 and (r2.x = 4 and r2.l1))) or (r1.x = 1 and (r2.x = 5 and r2.l1) or r1.x = 1 and (r2.x = 3 and r2.l1) or (r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l2) or r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l2)) or (r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l2) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l2))))): guard: (r1.x = 0 or r1.x = 4) and r2.x = 4 and (r2.l1 and r1.l2) or ((r1.x = 0 or r1.x = 4) and r2.x = 5 and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 4) and r2.x = 3 and (r2.l1 and r1.l2)) or (r1.x = 2 and (r2.x = 4 and r2.l1) or r1.x = 2 and (r2.x = 5 and r2.l1) or (r1.x = 2 and (r2.x = 3 and r2.l1) or r1.x = 1 and (r2.x = 4 and r2.l1))) or (r1.x = 1 and (r2.x = 5 and r2.l1) or r1.x = 1 and (r2.x = 3 and r2.l1) or (r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l2) or r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l2)) or (r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l2) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l2)))) -> false.
    Edge (event: p.e1) (guard: <bdd 15n 36p>): guard: <bdd 15n 36p> -> r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2).
    Edge (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1))) (assignments: r1 := r1.l2, r2 := r2.l2): guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1)) -> r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1).
    Edge (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 4 and r1.l1) or ((r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l2 and r1.l1) or ((r1.x = 0 or r1.x = 2) and (r2.x = 5 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 3 and r1.l1))) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or r1.x = 1 and (r2.x = 4 and r1.l1) or (r1.x = 1 and r2.x = 1 and (r2.l2 and r1.l1) or (r1.x = 1 and (r2.x = 5 and r1.l1) or r1.x = 1 and (r2.x = 3 and r1.l1))))) (assignments: r1 := r1.l2): guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 4 and r1.l1) or ((r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l2 and r1.l1) or ((r1.x = 0 or r1.x = 2) and (r2.x = 5 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 3 and r1.l1))) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or r1.x = 1 and (r2.x = 4 and r1.l1) or (r1.x = 1 and r2.x = 1 and (r2.l2 and r1.l1) or (r1.x = 1 and (r2.x = 5 and r1.l1) or r1.x = 1 and (r2.x = 3 and r1.l1)))) -> r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l1).

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2))
        Edge: (event: p.e1) (guard: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1))
        Edge: (event: p.e1) (guard: r1.x = 0 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l1 and r1.l1)) -> false)
        Edge: (event: p.e1) (guard: r1.x = 0 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 0 and (r2.x = 2 and r1.l1) or (r1.x = 0 and (r2.x = 1 and r1.l1) or (r1.x = 0 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 0 and r2.x = 3 and (r2.l2 and r1.l1))) -> false)
        Edge: (event: p.e1) (guard: r1.x = 4 and r2.x = 0 and (r2.l1 and r1.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l1)) -> false)
        Edge: (event: p.e1) (guard: r1.x = 4 and r2.x = 4 and (r2.l1 and r1.l1) or r1.x = 4 and r2.x = 5 and (r2.l1 and r1.l1) or (r1.x = 4 and r2.x = 3 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l1)) or (r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l1)))) -> false)
        Edge: (event: p.e1) (guard: r1.x = 4 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or (r1.x = 4 and (r2.x = 2 and r1.l1) or r1.x = 4 and (r2.x = 1 and r1.l1)) or (r1.x = 4 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 4 and r2.x = 3 and (r2.l2 and r1.l1) or (r1.x = 5 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1) or r1.x = 5 and (r2.x = 2 and r1.l1))) or (r1.x = 5 and (r2.x = 1 and r1.l1) or r1.x = 5 and r2.x = 5 and (r2.l2 and r1.l1) or (r1.x = 5 and r2.x = 3 and (r2.l2 and r1.l1) or r1.x = 3 and (r2.x = 0 or r2.x = 4) and (r2.l2 and r1.l1)) or (r1.x = 3 and (r2.x = 2 and r1.l1) or r1.x = 3 and (r2.x = 1 and r1.l1) or (r1.x = 3 and r2.x = 5 and (r2.l2 and r1.l1) or r1.x = 3 and r2.x = 3 and (r2.l2 and r1.l1)))) -> false)
        Edge: (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 2 and (r2.x = 0 and r2.l1) or (r1.x = 1 and (r2.x = 0 and r2.l1) or (r1.x = 5 and r2.x = 0 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 0 and (r2.l1 and r1.l2))) -> false)
        Edge: (event: p.e1) (guard: (r1.x = 0 or r1.x = 4) and r2.x = 4 and (r2.l1 and r1.l2) or ((r1.x = 0 or r1.x = 4) and r2.x = 5 and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 4) and r2.x = 3 and (r2.l1 and r1.l2)) or (r1.x = 2 and (r2.x = 4 and r2.l1) or r1.x = 2 and (r2.x = 5 and r2.l1) or (r1.x = 2 and (r2.x = 3 and r2.l1) or r1.x = 1 and (r2.x = 4 and r2.l1))) or (r1.x = 1 and (r2.x = 5 and r2.l1) or r1.x = 1 and (r2.x = 3 and r2.l1) or (r1.x = 5 and r2.x = 4 and (r2.l1 and r1.l2) or r1.x = 5 and r2.x = 5 and (r2.l1 and r1.l2)) or (r1.x = 5 and r2.x = 3 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 4 and (r2.l1 and r1.l2) or (r1.x = 3 and r2.x = 5 and (r2.l1 and r1.l2) or r1.x = 3 and r2.x = 3 and (r2.l1 and r1.l2)))) -> false)
        Edge: (event: p.e1) (guard: <bdd 15n 36p> -> r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2))
        Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l1) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l1) or r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l1)) -> r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1)) (assignments: r1 := r1.l2, r2 := r2.l2)
        Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 4 and r1.l1) or ((r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l2 and r1.l1) or ((r1.x = 0 or r1.x = 2) and (r2.x = 5 and r1.l1) or (r1.x = 0 or r1.x = 2) and (r2.x = 3 and r1.l1))) or (r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l2 and r1.l1) or r1.x = 1 and (r2.x = 4 and r1.l1) or (r1.x = 1 and r2.x = 1 and (r2.l2 and r1.l1) or (r1.x = 1 and (r2.x = 5 and r1.l1) or r1.x = 1 and (r2.x = 3 and r1.l1)))) -> r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l1)) (assignments: r1 := r1.l2)
        Edge: (event: p.e2) (guard: (r1.x = 0 or r1.x = 2) and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2) or (r1.x = 0 or r1.x = 2) and r2.x = 1 and (r2.l1 and r1.l2) or (r1.x = 4 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 4 and (r2.x = 1 and r2.l1) or r1.x = 1 and (r2.x = 0 or r2.x = 2) and (r2.l1 and r1.l2))) or (r1.x = 1 and r2.x = 1 and (r2.l1 and r1.l2) or r1.x = 5 and ((r2.x = 0 or r2.x = 2) and r2.l1) or (r1.x = 5 and (r2.x = 1 and r2.l1) or (r1.x = 3 and ((r2.x = 0 or r2.x = 2) and r2.l1) or r1.x = 3 and (r2.x = 1 and r2.l1)))) -> false) (assignments: r2 := r2.l2)
        Edge: (event: p.e2) (guard: <bdd 12n 25p> -> false)

Computing initialization predicate of the controlled system.

Controlled system: exactly 2 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2)
    Initial (uncontrolled system):         r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1)
    Initial (controlled system):           r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1)
    Initial (removed by supervisor):       false
    Initial (added by supervisor):         true

    Initial (output model):                n/a

Determining supervisor guards for output model:
    Event p.e1: guard: r1.x = 0 and r2.x = 0 and (r2.l1 and r1.l1) or r1.x = 0 and r2.x = 0 and (r2.l2 and r1.l2).
    Event p.e2: guard: r1.x = 0 and (r2.x = 0 and r1.l1).

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/req_monitor.ctrlsys.real.cif".
