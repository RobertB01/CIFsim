Reading CIF file "datasynth/req_monitor.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      location pointer   n/a        r1    0      1 * 2     2 * 2       2 * 2       100%
  2      discrete variable  int[0..5]  r1.x  1      3 * 2     6 * 2       8 * 2       75%
  3      location pointer   n/a        r2    2      1 * 2     2 * 2       2 * 2       100%
  4      discrete variable  int[0..5]  r2.x  3      3 * 2     6 * 2       8 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      4      16        32          40          80%

Applying automatic variable ordering:
  Number of hyperedges: 8

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                    6 (total)                 0.75 (avg/edge) [before]
    Total span:                    6 (total)                 0.75 (avg/edge) [iteration 1]
    Total span:                    6 (total)                 0.75 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                    6 (total)                 0.75 (avg/edge) [before]
    Total span:                    6 (total)                 0.75 (avg/edge) [after]

  Variable order unchanged.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 1):             r1.x = 0
Initial   (discrete variable 3):             r2.x = 0
Initial   (discrete variables):              r1.x = 0 and r2.x = 0
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (aut/locs init predicate):         r1.l1
Initial   (aut/locs init predicate):         r2.l1
Initial   (auts/locs init predicate):        r1.l1 and r2.l1
Initial   (uncontrolled system):             r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0)
Initial   (system, combined init/plant inv): r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0)
Initial   (system, combined init/state inv): r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0)

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (aut/locs marker predicate):       r1.l2
Marked    (aut/locs marker predicate):       r2.l2
Marked    (auts/locs marker predicate):      r1.l2 and r2.l2
Marked    (uncontrolled system):             r1.l2 and r2.l2
Marked    (system, combined mark/plant inv): r1.l2 and r2.l2
Marked    (system, combined mark/state inv): r1.l2 and r2.l2

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "p.e2" needs:
    r1.l1 and (r1.x = 0 or r1.x = 2) or r1.l1 and r1.x = 1

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 3)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 0 and r2.l2)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 0) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 0)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 3) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 3)))))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 4 and r2.l2) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 5 and r2.l2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 3 and r2.l2)))))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 0) or r1.l2 and (r2.l1 and r2.x = 0)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 3) or (r1.l2 and (r2.l1 and r2.x = 4) or (r1.l2 and (r2.l1 and r2.x = 5) or r1.l2 and (r2.l1 and r2.x = 3)))))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 2 and r2.l2) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 1 and r2.l2) or (r1.l2 and (r2.l1 and r2.x = 2) or (r1.l2 and (r2.l1 and r2.x = 1) or r1.l2 and r2.l2))))
    Edge: (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1))) (assignments: r1 := r1.l2, r2 := r2.l2)
    Edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5) or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 1))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 5) and ((r1.l2 or r1.x != 3) and r1.l1))) (assignments: r1 := r1.l2)
    Edge: (event: p.e2) (guard: r1.l1 and r1.x = 4 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 5 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1)) or (r1.l1 and r1.x = 3 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or (r1.l2 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l2 and (r2.l1 and r2.x = 1)))) (assignments: r2 := r2.l2)
    Edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5)) and (r1.l2 or r1.x != 4 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 4 or (r2.l2 or r2.x != 1)) and ((r1.l2 or r1.x != 1) and (r1.l2 or r1.x != 5 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))))) and ((r1.l2 or r1.x != 5 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 3 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 3 or (r2.l2 or r2.x != 1)) and ((r1.l1 or r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)) and (r1.l1 or (r2.l2 or r2.x != 1))))))

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "r1.x" of type "int[0..5]" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].
Controlled behavior: true -> true [range: true, variable: discrete variable "r2.x" of type "int[0..5]" (group: 3, domain: 6+7, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: p.e2) (guard: r1.l1 and r1.x = 4 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 5 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1)) or (r1.l1 and r1.x = 3 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or (r1.l2 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l2 and (r2.l1 and r2.x = 1)))) (assignments: r2 := r2.l2): guard: r1.l1 and r1.x = 4 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 5 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1)) or (r1.l1 and r1.x = 3 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or (r1.l2 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l2 and (r2.l1 and r2.x = 1))) -> false [requirement: r1.l1 and (r1.x = 0 or r1.x = 2) or r1.l1 and r1.x = 1].
Edge (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5)) and (r1.l2 or r1.x != 4 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 4 or (r2.l2 or r2.x != 1)) and ((r1.l2 or r1.x != 1) and (r1.l2 or r1.x != 5 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))))) and ((r1.l2 or r1.x != 5 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 3 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 3 or (r2.l2 or r2.x != 1)) and ((r1.l1 or r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)) and (r1.l1 or (r2.l2 or r2.x != 1)))))): guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5)) and (r1.l2 or r1.x != 4 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 4 or (r2.l2 or r2.x != 1)) and ((r1.l2 or r1.x != 1) and (r1.l2 or r1.x != 5 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))))) and ((r1.l2 or r1.x != 5 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 3 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 3 or (r2.l2 or r2.x != 1)) and ((r1.l1 or r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)) and (r1.l1 or (r2.l2 or r2.x != 1))))) -> false [requirement: r1.l1 and (r1.x = 0 or r1.x = 2) or r1.l1 and r1.x = 1].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 3)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 0 and r2.l2)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 0) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 0)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 3) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 3)))))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 4 and r2.l2) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 5 and r2.l2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 3 and r2.l2)))))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 0) or r1.l2 and (r2.l1 and r2.x = 0)))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 3) or (r1.l2 and (r2.l1 and r2.x = 4) or (r1.l2 and (r2.l1 and r2.x = 5) or r1.l2 and (r2.l1 and r2.x = 3)))))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 2 and r2.l2) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 1 and r2.l2) or (r1.l2 and (r2.l1 and r2.x = 2) or (r1.l2 and (r2.l1 and r2.x = 1) or r1.l2 and r2.l2))))
    Edge: (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1))) (assignments: r1 := r1.l2, r2 := r2.l2)
    Edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5) or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 1))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 5) and ((r1.l2 or r1.x != 3) and r1.l1))) (assignments: r1 := r1.l2)
    Edge: (event: p.e2) (guard: r1.l1 and r1.x = 4 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 5 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1)) or (r1.l1 and r1.x = 3 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or (r1.l2 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l2 and (r2.l1 and r2.x = 1))) -> false) (assignments: r2 := r2.l2)
    Edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5)) and (r1.l2 or r1.x != 4 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 4 or (r2.l2 or r2.x != 1)) and ((r1.l2 or r1.x != 1) and (r1.l2 or r1.x != 5 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))))) and ((r1.l2 or r1.x != 5 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 3 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 3 or (r2.l2 or r2.x != 1)) and ((r1.l1 or r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)) and (r1.l1 or (r2.l2 or r2.x != 1))))) -> false)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: r1.l2 and r2.l2 [marker predicate]
Backward controlled-behavior: r1.l2 and r2.l2 -> r1.l2 and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2))) [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: r1.l2 and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2))) -> r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1)) or (r1.l2 and not(r1.x = 2 or r1.x = 3) and (r2.l2 and not(r2.x = 2 or r2.x = 3)) or r1.l2 and not(r1.x = 2 or r1.x = 3) and (r2.l2 and (r2.x = 2 or r2.x = 3)) or (r1.l2 and (r1.x = 2 or r1.x = 3) and (r2.l2 and not(r2.x = 2 or r2.x = 3)) or r1.l2 and (r1.x = 2 or r1.x = 3) and (r2.l2 and (r2.x = 2 or r2.x = 3)))) [backward reach with edge: (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1))) (assignments: r1 := r1.l2, r2 := r2.l2), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1)) or (r1.l2 and not(r1.x = 2 or r1.x = 3) and (r2.l2 and not(r2.x = 2 or r2.x = 3)) or r1.l2 and not(r1.x = 2 or r1.x = 3) and (r2.l2 and (r2.x = 2 or r2.x = 3)) or (r1.l2 and (r1.x = 2 or r1.x = 3) and (r2.l2 and not(r2.x = 2 or r2.x = 3)) or r1.l2 and (r1.x = 2 or r1.x = 3) and (r2.l2 and (r2.x = 2 or r2.x = 3)))) -> (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 4))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 5))) and ((r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 3))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 4)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 5)) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 3)) and (r1.l2 or r1.x != 5)) and ((r1.l2 or r1.x != 3) and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2))))) [backward reach with edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5) or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 1))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 5) and ((r1.l2 or r1.x != 3) and r1.l1))) (assignments: r1 := r1.l2), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 4))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 5))) and ((r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 3))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 4)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 5)) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 3)) and (r1.l2 or r1.x != 5)) and ((r1.l2 or r1.x != 3) and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2))))) [fixed point].
Controlled behavior: true -> (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 4))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 5))) and ((r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 3))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 4)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 5)) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 3)) and (r1.l2 or r1.x != 5)) and ((r1.l2 or r1.x != 3) and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2))))).

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 4) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 5) or (r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 3) or (r1.l1 and r1.x = 4 or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 4))) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 5) or (r1.l1 and r1.x = 3 or (r1.l2 and (not(r1.x = 2 or r1.x = 3) and r2.l1) or r1.l2 and ((r1.x = 2 or r1.x = 3) and r2.l1)))) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) -> r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0) [forward reach with edge: (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1))) (assignments: r1 := r1.l2, r2 := r2.l2), restricted to current/previous controlled-behavior predicate: (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 4))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 5))) and ((r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 3))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 4)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 5)) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 3)) and (r1.l2 or r1.x != 5)) and ((r1.l2 or r1.x != 3) and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2)))))]
Forward reachability: iteration 2.
Forward controlled-behavior: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0) [fixed point].
Controlled behavior: (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 4))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 5))) and ((r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 3))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 4)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 5)) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 3)) and (r1.l2 or r1.x != 5)) and ((r1.l2 or r1.x != 3) and ((r1.l1 or r1.x = 2 or (r1.x = 3 or r2.l2)) and (r1.l1 or (not(r1.x = 2 or r1.x = 3) or r2.l2))))) -> r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0).

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: r1.l2 and r2.l2 [marker predicate]
Backward controlled-behavior: r1.l2 and r2.l2 -> r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0) [restricted to current/previous controlled-behavior predicate: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0)]
Backward reachability: iteration 1.
Backward controlled-behavior: r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0) -> r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0) [backward reach with edge: (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1))) (assignments: r1 := r1.l2, r2 := r2.l2), restricted to current/previous controlled-behavior predicate: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0)]
Backward reachability: iteration 2.
Backward controlled-behavior: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0) [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: (r1.l2 or r1.x != 0 or (r2.l2 or r2.x != 0)) and (r1.l1 or r1.x != 0 or (r2.l1 or r2.x != 0)) [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 3))): guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 3)) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 0 and r2.l2))): guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 0 and r2.l2)) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 0) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 0))): guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 0) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 0)) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 3) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 3))))): guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 3) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 3)))) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 4 and r2.l2) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 5 and r2.l2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 3 and r2.l2))))): guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 4 and r2.l2) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 5 and r2.l2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 3 and r2.l2)))) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 0) or r1.l2 and (r2.l1 and r2.x = 0))): guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 0) or r1.l2 and (r2.l1 and r2.x = 0)) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 3) or (r1.l2 and (r2.l1 and r2.x = 4) or (r1.l2 and (r2.l1 and r2.x = 5) or r1.l2 and (r2.l1 and r2.x = 3))))): guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 3) or (r1.l2 and (r2.l1 and r2.x = 4) or (r1.l2 and (r2.l1 and r2.x = 5) or r1.l2 and (r2.l1 and r2.x = 3)))) -> false.
Edge (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 2 and r2.l2) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 1 and r2.l2) or (r1.l2 and (r2.l1 and r2.x = 2) or (r1.l2 and (r2.l1 and r2.x = 1) or r1.l2 and r2.l2)))): guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 2 and r2.l2) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 1 and r2.l2) or (r1.l2 and (r2.l1 and r2.x = 2) or (r1.l2 and (r2.l1 and r2.x = 1) or r1.l2 and r2.l2))) -> r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0).
Edge (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1))) (assignments: r1 := r1.l2, r2 := r2.l2): guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1)) -> r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0).
Edge (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5) or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 1))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 5) and ((r1.l2 or r1.x != 3) and r1.l1))) (assignments: r1 := r1.l2): guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5) or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 1))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 5) and ((r1.l2 or r1.x != 3) and r1.l1)) -> r1.l1 and r1.x = 0 and (r2.l2 and r2.x = 0).

Final synthesis result:
  State: (controlled-behavior: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0))
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 3)) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 0 and r2.l2)) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 0) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 0)) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 3) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 4) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 3)))) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 4 and r2.l2) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 5 and r2.l2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 2) or (r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 3 and r2.l2)))) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 0) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 0) or r1.l2 and (r2.l1 and r2.x = 0)) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 4) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 5) or (r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 3) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 4)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 5) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 3) or (r1.l2 and (r2.l1 and r2.x = 4) or (r1.l2 and (r2.l1 and r2.x = 5) or r1.l2 and (r2.l1 and r2.x = 3)))) -> false)
    Edge: (event: p.e1) (guard: r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 2) or r1.l1 and r1.x = 2 and (r2.l1 and r2.x = 1) or (r1.l1 and (r1.x = 2 and r2.l2) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 2)) or (r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1) or r1.l1 and (r1.x = 1 and r2.l2) or (r1.l2 and (r2.l1 and r2.x = 2) or (r1.l2 and (r2.l1 and r2.x = 1) or r1.l2 and r2.l2))) -> r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0))
    Edge: (event: p.e2) (guard: r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and (r1.x = 0 or r1.x = 2) and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 1 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 1 and (r2.l1 and r2.x = 1)) -> r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0)) (assignments: r1 := r1.l2, r2 := r2.l2)
    Edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5) or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and (r1.l2 or r1.x = 1 or (3 <= r1.x and r1.x <= 5 or (r2.l2 or r2.x != 1))) and ((r1.l2 or r1.x != 4) and (r1.l2 or r1.x != 1 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)))) and ((r1.l2 or r1.x != 1 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 5) and ((r1.l2 or r1.x != 3) and r1.l1)) -> r1.l1 and r1.x = 0 and (r2.l2 and r2.x = 0)) (assignments: r1 := r1.l2)
    Edge: (event: p.e2) (guard: r1.l1 and r1.x = 4 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 4 and (r2.l1 and r2.x = 1) or (r1.l1 and r1.x = 5 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 5 and (r2.l1 and r2.x = 1)) or (r1.l1 and r1.x = 3 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l1 and r1.x = 3 and (r2.l1 and r2.x = 1) or (r1.l2 and (r2.l1 and (r2.x = 0 or r2.x = 2)) or r1.l2 and (r2.l1 and r2.x = 1))) -> false) (assignments: r2 := r2.l2)
    Edge: (event: p.e2) (guard: (r1.l2 or (r1.x = 1 or 3 <= r1.x and r1.x <= 5)) and (r1.l2 or r1.x != 4 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 4 or (r2.l2 or r2.x != 1)) and ((r1.l2 or r1.x != 1) and (r1.l2 or r1.x != 5 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))))) and ((r1.l2 or r1.x != 5 or (r2.l2 or r2.x != 1)) and (r1.l2 or r1.x != 3 or (r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5))) and ((r1.l2 or r1.x != 3 or (r2.l2 or r2.x != 1)) and ((r1.l1 or r2.l2 or (r2.x = 1 or 3 <= r2.x and r2.x <= 5)) and (r1.l1 or (r2.l2 or r2.x != 1))))) -> false)

Controlled system:                     exactly 2 states.

Initial (synthesis result):            r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0) or r1.l2 and r1.x = 0 and (r2.l2 and r2.x = 0)
Initial (uncontrolled system):         r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0)
Initial (controlled system):           r1.l1 and r1.x = 0 and (r2.l1 and r2.x = 0)
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Constructing output CIF specification.
Writing output CIF file "datasynth/req_monitor.ctrlsys.real.cif".
