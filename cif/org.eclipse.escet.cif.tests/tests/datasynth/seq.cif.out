Reading CIF file "datasynth/seq.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a        p     0      3 * 2     6 * 2       8 * 2       75%
        2      discrete variable  int[0..9]  p.x   1      4 * 2     10 * 2      16 * 2      ~63%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      14        32          48          ~67%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 9

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
                    Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
                    Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 9

                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 9

                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [before]
                        Total span:   3 (total)   0.33 (avg/edge) / WES:   0.611111 (total)   0.067901 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Maximum number of iterations: 10

                Total span:   5 (total)   0.83 (avg/edge) / WES:   0.916667 (total)   0.152778 (avg/edge) [before]
                Total span:   5 (total)   0.83 (avg/edge) / WES:   0.916667 (total)   0.152778 (avg/edge) [iteration 1]
                Total span:   5 (total)   0.83 (avg/edge) / WES:   0.916667 (total)   0.152778 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Window length: 2

                Total span:   5 (total)   0.83 (avg/edge) / WES:   0.916667 (total)   0.152778 (avg/edge) [before]
                Total span:   5 (total)   0.83 (avg/edge) / WES:   0.916667 (total)   0.152778 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..9]  p.x   0      4 * 2     10 * 2      16 * 2      ~63%
        2      location pointer   n/a        p     1      3 * 2     6 * 2       8 * 2       75%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      14        32          48          ~67%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p.x = 3
    Initial   (discrete variables):              p.x = 3
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.m0
    Initial   (auts/locs init predicate):        p.m0
    Initial   (uncontrolled system):             p.x = 3 and p.m0
    Initial   (system, combined init/plant inv): p.x = 3 and p.m0
    Initial   (system, combined init/state inv): p.x = 3 and p.m0

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       0 <= p.x and (p.x <= 7 and p.m5)
    Marked    (auts/locs marker predicate):      0 <= p.x and (p.x <= 7 and p.m5)
    Marked    (uncontrolled system):             0 <= p.x and (p.x <= 7 and p.m5)
    Marked    (system, combined mark/plant inv): 0 <= p.x and (p.x <= 7 and p.m5)
    Marked    (system, combined mark/state inv): 0 <= p.x and (p.x <= 7 and p.m5)

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c1) (guard: p.m0) (assignments: p := p.m1)
            Edge: (event: u2) (guard: p.m1) (assignments: p.x := p.x + 1, p := p.m2)
            Edge: (event: u1) (guard: p.m2) (assignments: p.x := p.x + 1, p := p.m3)
            Edge: (event: u1) (guard: p.m3) (assignments: p.x := p.x + 1, p := p.m4)
            Edge: (event: u1) (guard: p.m4) (assignments: p.x := p.x + 1, p := p.m5)
            Edge: (event: c2) (guard: p.m2) (assignments: p.x := p.x + 1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: u2) (guard: p.m1 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m1 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m1 or (p.x = 3 and p.m1 or p.x = 7 and p.m1)) (assignments: p.x := p.x + 1, p := p.m2)
    Edge: (event: u1) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1, p := p.m3)
    Edge: (event: u1) (guard: p.m3 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m3 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m3 or (p.x = 3 and p.m3 or p.x = 7 and p.m3)) (assignments: p.x := p.x + 1, p := p.m4)
    Edge: (event: u1) (guard: p.m4 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m4 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m4 or (p.x = 3 and p.m4 or p.x = 7 and p.m4)) (assignments: p.x := p.x + 1, p := p.m5)
    Edge: (event: c2) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: c1) (guard: p.m0) (assignments: p := p.m1)
            Edge: (event: u2) (guard: p.m1 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m1 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m1 or (p.x = 3 and p.m1 or p.x = 7 and p.m1)) (assignments: p.x := p.x + 1, p := p.m2)
            Edge: (event: u1) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1, p := p.m3)
            Edge: (event: u1) (guard: p.m3 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m3 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m3 or (p.x = 3 and p.m3 or p.x = 7 and p.m3)) (assignments: p.x := p.x + 1, p := p.m4)
            Edge: (event: u1) (guard: p.m4 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m4 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m4 or (p.x = 3 and p.m4 or p.x = 7 and p.m4)) (assignments: p.x := p.x + 1, p := p.m5)
            Edge: (event: c2) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.x = 3 and p.m0.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..9]" (group: 0, domain: 0+1, BDD variables: 4, CIF/BDD values: 10/16)].
    Controlled behavior: true -> true [range: true, variable: location pointer for automaton "p" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 6/8)].

    Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: 0 <= p.x and (p.x <= 7 and p.m5) [marker predicate]

        Backward reachability iteration 1:
            Backward controlled-behavior: 0 <= p.x and (p.x <= 7 and p.m5) -> (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.m4 or p.m5) or (p.x = 1 or p.x = 5) and (p.m4 or p.m5) or (p.x = 3 and (p.m4 or p.m5) or p.x = 7 and p.m5) [backward reach with edge: (event: u1) (guard: p.m4 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m4 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m4 or (p.x = 3 and p.m4 or p.x = 7 and p.m4)) (assignments: p.x := p.x + 1, p := p.m5), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 2:
            Backward controlled-behavior: (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6)) and (p.m4 or p.m5) or (p.x = 1 or p.x = 5) and (p.m4 or p.m5) or (p.x = 3 and (p.m4 or p.m5) or p.x = 7 and p.m5) -> (p.x = 0 or p.x = 4) and p.m4 or ((p.x = 0 or p.x = 4) and p.m5 or (p.x = 0 or p.x = 4) and p.m3) or (p.x = 2 and p.m4 or p.x = 2 and p.m5 or (p.x = 2 and p.m3 or p.x = 6 and (p.m4 or p.m5))) or ((p.x = 1 or p.x = 5) and p.m4 or ((p.x = 1 or p.x = 5) and p.m5 or (p.x = 1 or p.x = 5) and p.m3) or (p.x = 3 and p.m4 or p.x = 3 and p.m5 or (p.x = 3 and p.m3 or p.x = 7 and p.m5))) [backward reach with edge: (event: u1) (guard: p.m3 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m3 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m3 or (p.x = 3 and p.m3 or p.x = 7 and p.m3)) (assignments: p.x := p.x + 1, p := p.m4), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 3:
            Backward controlled-behavior: (p.x = 0 or p.x = 4) and p.m4 or ((p.x = 0 or p.x = 4) and p.m5 or (p.x = 0 or p.x = 4) and p.m3) or (p.x = 2 and p.m4 or p.x = 2 and p.m5 or (p.x = 2 and p.m3 or p.x = 6 and (p.m4 or p.m5))) or ((p.x = 1 or p.x = 5) and p.m4 or ((p.x = 1 or p.x = 5) and p.m5 or (p.x = 1 or p.x = 5) and p.m3) or (p.x = 3 and p.m4 or p.x = 3 and p.m5 or (p.x = 3 and p.m3 or p.x = 7 and p.m5))) -> (p.x = 0 or p.x = 4) and (p.m4 or p.m5) or ((p.x = 0 or p.x = 4) and (p.m2 or p.m3) or p.x = 2 and (p.m4 or p.m5)) or (p.x = 2 and (p.m2 or p.m3) or (p.x = 6 and (p.m4 or p.m5) or p.x = 1 and (p.m4 or p.m5))) or (p.x = 1 and (p.m2 or p.m3) or (p.x = 5 and p.m4 or p.x = 5 and p.m5) or (p.x = 5 and p.m3 or p.x = 3 and (p.m4 or p.m5) or (p.x = 3 and (p.m2 or p.m3) or p.x = 7 and p.m5))) [backward reach with edge: (event: u1) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1, p := p.m3), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 4:
            Backward controlled-behavior: (p.x = 0 or p.x = 4) and (p.m4 or p.m5) or ((p.x = 0 or p.x = 4) and (p.m2 or p.m3) or p.x = 2 and (p.m4 or p.m5)) or (p.x = 2 and (p.m2 or p.m3) or (p.x = 6 and (p.m4 or p.m5) or p.x = 1 and (p.m4 or p.m5))) or (p.x = 1 and (p.m2 or p.m3) or (p.x = 5 and p.m4 or p.x = 5 and p.m5) or (p.x = 5 and p.m3 or p.x = 3 and (p.m4 or p.m5) or (p.x = 3 and (p.m2 or p.m3) or p.x = 7 and p.m5))) -> <bdd 20n 23p> [backward reach with edge: (event: u2) (guard: p.m1 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m1 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m1 or (p.x = 3 and p.m1 or p.x = 7 and p.m1)) (assignments: p.x := p.x + 1, p := p.m2), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 5:
            Backward controlled-behavior: <bdd 20n 23p> -> p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3)))) [backward reach with edge: (event: c1) (guard: p.m0) (assignments: p := p.m1), restricted to current/previous controlled-behavior predicate: true]

        Backward reachability iteration 6:
            No change this iteration.

        Backward controlled-behavior: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3)))) [fixed point].

        Controlled behavior: true -> p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3)))).

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 19n 23p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: p.x = 3 and p.m0 [initialization predicate]

        Forward reachability iteration 1:
            Forward controlled-behavior: p.x = 3 and p.m0 -> p.x = 3 and (p.m0 or p.m1) [forward reach with edge: (event: c1) (guard: p.m0) (assignments: p := p.m1), restricted to current/previous controlled-behavior predicate: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3))))]
            Forward controlled-behavior: p.x = 3 and (p.m0 or p.m1) -> p.x = 4 and p.m2 or p.x = 3 and (p.m0 or p.m1) [forward reach with edge: (event: u2) (guard: p.m1 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m1 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m1 or (p.x = 3 and p.m1 or p.x = 7 and p.m1)) (assignments: p.x := p.x + 1, p := p.m2), restricted to current/previous controlled-behavior predicate: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3))))]
            Forward controlled-behavior: p.x = 4 and p.m2 or p.x = 3 and (p.m0 or p.m1) -> p.x = 4 and p.m2 or (p.x = 5 and p.m3 or p.x = 3 and (p.m0 or p.m1)) [forward reach with edge: (event: u1) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1, p := p.m3), restricted to current/previous controlled-behavior predicate: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3))))]
            Forward controlled-behavior: p.x = 4 and p.m2 or (p.x = 5 and p.m3 or p.x = 3 and (p.m0 or p.m1)) -> p.x = 4 and p.m2 or p.x = 6 and p.m4 or (p.x = 5 and p.m3 or p.x = 3 and (p.m0 or p.m1)) [forward reach with edge: (event: u1) (guard: p.m3 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m3 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m3 or (p.x = 3 and p.m3 or p.x = 7 and p.m3)) (assignments: p.x := p.x + 1, p := p.m4), restricted to current/previous controlled-behavior predicate: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3))))]
            Forward controlled-behavior: p.x = 4 and p.m2 or p.x = 6 and p.m4 or (p.x = 5 and p.m3 or p.x = 3 and (p.m0 or p.m1)) -> <bdd 21n 5p> [forward reach with edge: (event: u1) (guard: p.m4 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m4 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m4 or (p.x = 3 and p.m4 or p.x = 7 and p.m4)) (assignments: p.x := p.x + 1, p := p.m5), restricted to current/previous controlled-behavior predicate: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3))))]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: <bdd 21n 5p> [fixed point].

        Controlled behavior: p.x != 8 and (p.x != 4 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m0 and not p.m1) and ((p.x != 6 or not p.m2 and not p.m3) and p.x != 9)) and ((p.x != 5 or not p.m0) and ((p.x != 5 or not p.m2) and (p.x != 5 or not p.m1)) and ((p.x != 7 or p.m1 or (p.m3 or p.m5)) and ((p.x != 7 or not p.m1) and (p.x != 7 or not p.m3)))) -> <bdd 21n 5p>.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: 0 <= p.x and (p.x <= 7 and p.m5) [marker predicate]
        Backward controlled-behavior: 0 <= p.x and (p.x <= 7 and p.m5) -> p.x = 7 and p.m5 [restricted to current/previous controlled-behavior predicate: <bdd 21n 5p>]

        Backward reachability iteration 1:
            Backward controlled-behavior: p.x = 7 and p.m5 -> p.x = 6 and p.m4 or p.x = 7 and p.m5 [backward reach with edge: (event: u1) (guard: p.m4 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m4 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m4 or (p.x = 3 and p.m4 or p.x = 7 and p.m4)) (assignments: p.x := p.x + 1, p := p.m5), restricted to current/previous controlled-behavior predicate: <bdd 21n 5p>]

        Backward reachability iteration 2:
            Backward controlled-behavior: p.x = 6 and p.m4 or p.x = 7 and p.m5 -> p.x = 6 and p.m4 or (p.x = 5 and p.m3 or p.x = 7 and p.m5) [backward reach with edge: (event: u1) (guard: p.m3 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m3 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m3 or (p.x = 3 and p.m3 or p.x = 7 and p.m3)) (assignments: p.x := p.x + 1, p := p.m4), restricted to current/previous controlled-behavior predicate: <bdd 21n 5p>]

        Backward reachability iteration 3:
            Backward controlled-behavior: p.x = 6 and p.m4 or (p.x = 5 and p.m3 or p.x = 7 and p.m5) -> p.x = 4 and p.m2 or p.x = 6 and p.m4 or (p.x = 5 and p.m3 or p.x = 7 and p.m5) [backward reach with edge: (event: u1) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1, p := p.m3), restricted to current/previous controlled-behavior predicate: <bdd 21n 5p>]

        Backward reachability iteration 4:
            Backward controlled-behavior: p.x = 4 and p.m2 or p.x = 6 and p.m4 or (p.x = 5 and p.m3 or p.x = 7 and p.m5) -> <bdd 22n 5p> [backward reach with edge: (event: u2) (guard: p.m1 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m1 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m1 or (p.x = 3 and p.m1 or p.x = 7 and p.m1)) (assignments: p.x := p.x + 1, p := p.m2), restricted to current/previous controlled-behavior predicate: <bdd 21n 5p>]

        Backward reachability iteration 5:
            Backward controlled-behavior: <bdd 22n 5p> -> <bdd 21n 5p> [backward reach with edge: (event: c1) (guard: p.m0) (assignments: p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 21n 5p>]

        Backward reachability iteration 6:
            No change this iteration.

        Backward controlled-behavior: <bdd 21n 5p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 21n 22p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: c1) (guard: p.m0) (assignments: p := p.m1): guard: p.m0 -> p.x = 3 and p.m0.
    Edge (event: c2) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1): guard: (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2) -> p.x = 3 and p.m2.

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: <bdd 21n 5p>)
        Edge: (event: c1) (guard: p.m0 -> p.x = 3 and p.m0) (assignments: p := p.m1)
        Edge: (event: u2) (guard: p.m1 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m1 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m1 or (p.x = 3 and p.m1 or p.x = 7 and p.m1)) (assignments: p.x := p.x + 1, p := p.m2)
        Edge: (event: u1) (guard: p.m2 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m2 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m2 or (p.x = 3 and p.m2 or p.x = 7 and p.m2)) (assignments: p.x := p.x + 1, p := p.m3)
        Edge: (event: u1) (guard: p.m3 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m3 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m3 or (p.x = 3 and p.m3 or p.x = 7 and p.m3)) (assignments: p.x := p.x + 1, p := p.m4)
        Edge: (event: u1) (guard: p.m4 -> (p.x = 0 or p.x = 2 or (p.x = 4 or (p.x = 6 or p.x = 8))) and p.m4 or (p.x = 1 or (p.x = 5 or p.x = 9)) and p.m4 or (p.x = 3 and p.m4 or p.x = 7 and p.m4)) (assignments: p.x := p.x + 1, p := p.m5)
        Edge: (event: c2) (guard: p.m2 -> p.x = 3 and p.m2) (assignments: p.x := p.x + 1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 6 states.

Initial (synthesis result):            <bdd 21n 5p>
Initial (uncontrolled system):         p.x = 3 and p.m0
Initial (controlled system):           p.x = 3 and p.m0
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Checking post-synthesis for events that are never enabled.

Simplification of controlled system under the assumption of the plants:
    Event c1: guard: p.x = 3 and p.m0 -> p.x = 3 [assume p.m0].
    Event c2: guard: p.x = 3 and p.m2 -> p.x = 3 [assume p.m2].

Constructing output CIF specification.
Writing output CIF file "datasynth/seq.ctrlsys.real.cif".
