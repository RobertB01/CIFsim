Reading CIF file "datasynth/double_loop.cif".

Preprocessing CIF specification (includes checking that the specification is supported).

Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a         p     0      4 * 2     13 * 2      16 * 2      ~81%
        2      discrete variable  int[0..20]  p.x   1      5 * 2     21 * 2      32 * 2      ~66%
        3      discrete variable  int[0..20]  p.y   2      5 * 2     21 * 2      32 * 2      ~66%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       3      28        110         160         ~69%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 22

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [before]
                    Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 3

                    Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [before]
                    Total span:   6 (total)   0.27 (avg/edge) / WES:   0.474747 (total)   0.021579 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [before]
                        Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 22

                        Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [before]
                        Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 3

                        Total span:   5 (total)   0.23 (avg/edge) / WES:   0.424242 (total)   0.019284 (avg/edge) [before]
                        Total span:   6 (total)   0.27 (avg/edge) / WES:   0.474747 (total)   0.021579 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 22

                        Total span:   6 (total)   0.27 (avg/edge) / WES:   0.474747 (total)   0.021579 (avg/edge) [before]
                        Total span:   6 (total)   0.27 (avg/edge) / WES:   0.474747 (total)   0.021579 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 14
                Maximum number of iterations: 20

                Total span:   22 (total)   1.57 (avg/edge) / WES:   1.142857 (total)   0.081633 (avg/edge) [before]
                Total span:   22 (total)   1.57 (avg/edge) / WES:   1.142857 (total)   0.081633 (avg/edge) [iteration 1]
                Total span:   22 (total)   1.57 (avg/edge) / WES:   1.142857 (total)   0.081633 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 14
                Window length: 3

                Total span:   22 (total)   1.57 (avg/edge) / WES:   1.142857 (total)   0.081633 (avg/edge) [before]
                Total span:   19 (total)   1.36 (avg/edge) / WES:   0.936508 (total)   0.066893 (avg/edge) [window 0..2]
                Total span:   19 (total)   1.36 (avg/edge) / WES:   0.936508 (total)   0.066893 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..20]  p.y   0      5 * 2     21 * 2      32 * 2      ~66%
        2      location pointer   n/a         p     1      4 * 2     13 * 2      16 * 2      ~81%
        3      discrete variable  int[0..20]  p.x   2      5 * 2     21 * 2      32 * 2      ~66%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       3      28        110         160         ~69%

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             true
    Initial   (discrete variable 2):             true
    Initial   (discrete variables):              <bdd 10n 64p>
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         p.m0
    Initial   (auts/locs init predicate):        p.m0
    Initial   (uncontrolled system):             <bdd 14n 64p>
    Initial   (system, combined init/plant inv): <bdd 14n 64p>
    Initial   (system, combined init/state inv): <bdd 14n 64p>

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7)))))
    Marked    (auts/locs marker predicate):      (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7)))))
    Marked    (uncontrolled system):             (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7)))))
    Marked    (system, combined mark/plant inv): (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7)))))
    Marked    (system, combined mark/state inv): (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7)))))

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: u) (guard: p.m0) (assignments: p := p.m1)
            Edge: (event: u) (guard: p.m1) (assignments: p.x := p.x + 1, p := p.m2)
            Edge: (event: u) (guard: p.m2) (assignments: p.x := p.x + 1, p := p.m3)
            Edge: (event: u) (guard: p.t1) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2)
            Edge: (event: u) (guard: p.t2) (assignments: p.y := p.y - 1, p := p.t3)
            Edge: (event: u) (guard: p.t3) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4)
            Edge: (event: u) (guard: p.t4) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5)
            Edge: (event: u) (guard: p.t5) (assignments: p.y := p.y - 1, p := p.m1)
            Edge: (event: u) (guard: p.b1) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2)
            Edge: (event: u) (guard: p.b2) (assignments: p.x := p.x + 1, p := p.b3)
            Edge: (event: u) (guard: p.b3) (assignments: p.y := p.y - 1, p := p.b4)
            Edge: (event: u) (guard: p.b4) (assignments: p.x := p.x - 4, p.y := p.y + 3, p := p.m1)
            Edge: (event: c1) (guard: p.m2) (assignments: p.x := p.x + 1, p := p.t1)
            Edge: (event: c2) (guard: p.m2) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: u) (guard: p.m1 -> (p.m1 or (p.m3 or p.t2) or (p.t4 or (p.b1 or p.b3))) and (not p.b1 and not p.t2) and (not p.m3 and (not p.t4 and not p.b3))) (assignments: p.x := p.x + 1, p := p.m2)
    Edge: (event: u) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.m3)
    Edge: (event: u) (guard: p.t1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2)
    Edge: (event: u) (guard: p.t2 -> p.y = 16 and p.t2 or p.y = 8 and p.t2 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t2 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t2 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t2))) (assignments: p.y := p.y - 1, p := p.t3)
    Edge: (event: u) (guard: p.t3 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4)
    Edge: (event: u) (guard: p.t4 -> <bdd 14n 25p>) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5)
    Edge: (event: u) (guard: p.t5 -> p.y = 16 and p.t5 or p.y = 8 and p.t5 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t5 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t5 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t5))) (assignments: p.y := p.y - 1, p := p.m1)
    Edge: (event: u) (guard: p.b1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2)
    Edge: (event: u) (guard: p.b2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.m2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.b3)
    Edge: (event: u) (guard: p.b3 -> p.y = 16 and p.b3 or p.y = 8 and p.b3 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.b3 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.b3 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.b3))) (assignments: p.y := p.y - 1, p := p.b4)
    Edge: (event: u) (guard: p.b4 -> <bdd 12n 21p>) (assignments: p.x := p.x - 4, p.y := p.y + 3, p := p.m1)
    Edge: (event: c1) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.t1)
    Edge: (event: c2) (guard: p.m2 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: u) (guard: p.m0) (assignments: p := p.m1)
            Edge: (event: u) (guard: p.m1 -> (p.m1 or (p.m3 or p.t2) or (p.t4 or (p.b1 or p.b3))) and (not p.b1 and not p.t2) and (not p.m3 and (not p.t4 and not p.b3))) (assignments: p.x := p.x + 1, p := p.m2)
            Edge: (event: u) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.m3)
            Edge: (event: u) (guard: p.t1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2)
            Edge: (event: u) (guard: p.t2 -> p.y = 16 and p.t2 or p.y = 8 and p.t2 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t2 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t2 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t2))) (assignments: p.y := p.y - 1, p := p.t3)
            Edge: (event: u) (guard: p.t3 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4)
            Edge: (event: u) (guard: p.t4 -> <bdd 14n 25p>) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5)
            Edge: (event: u) (guard: p.t5 -> p.y = 16 and p.t5 or p.y = 8 and p.t5 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t5 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t5 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t5))) (assignments: p.y := p.y - 1, p := p.m1)
            Edge: (event: u) (guard: p.b1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2)
            Edge: (event: u) (guard: p.b2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.m2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.b3)
            Edge: (event: u) (guard: p.b3 -> p.y = 16 and p.b3 or p.y = 8 and p.b3 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.b3 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.b3 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.b3))) (assignments: p.y := p.y - 1, p := p.b4)
            Edge: (event: u) (guard: p.b4 -> <bdd 12n 21p>) (assignments: p.x := p.x - 4, p.y := p.y + 3, p := p.m1)
            Edge: (event: c1) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.t1)
            Edge: (event: c2) (guard: p.m2 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: <bdd 14n 64p>.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: true -> true [range: true, variable: discrete variable "p.y" of type "int[0..20]" (group: 0, domain: 0+1, BDD variables: 5, CIF/BDD values: 21/32)].
    Controlled behavior: true -> <bdd 9n 40p> [range: true, variable: location pointer for automaton "p" (group: 1, domain: 2+3, BDD variables: 4, CIF/BDD values: 13/16)].
    Controlled behavior: <bdd 9n 40p> -> <bdd 14n 320p> [range: true, variable: discrete variable "p.x" of type "int[0..20]" (group: 2, domain: 4+5, BDD variables: 5, CIF/BDD values: 21/32)].

    Extended controlled-behavior predicate using variable ranges: <bdd 14n 320p>.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior: <bdd 14n 320p> -> <bdd 20n 448p> [runtime error requirement (event: u): p.y != 0 or not p.t2].
    Controlled behavior: <bdd 20n 448p> -> <bdd 21n 440p> [runtime error requirement (event: u): <bdd 18n 49p>].
    Controlled behavior: <bdd 21n 440p> -> <bdd 28n 604p> [runtime error requirement (event: u): <bdd 18n 49p>].
    Controlled behavior: <bdd 28n 604p> -> <bdd 29n 612p> [runtime error requirement (event: u): p.y != 0 or not p.t5].
    Controlled behavior: <bdd 29n 612p> -> <bdd 31n 620p> [runtime error requirement (event: u): <bdd 18n 49p>].
    Controlled behavior: <bdd 31n 620p> -> <bdd 30n 612p> [runtime error requirement (event: u): p.y != 0 or not p.b3].
    Controlled behavior: <bdd 30n 612p> -> <bdd 35n 802p> [runtime error requirement (event: u): <bdd 16n 57p>].

    Restricted behavior using implicit runtime error requirements: <bdd 35n 802p>.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7))))) [marker predicate]
        Backward controlled-behavior: (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7))))) -> <bdd 18n 44p> [restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 1:
            Backward controlled-behavior: <bdd 18n 44p> -> <bdd 21n 77p> [backward reach with edge: (event: u) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.m3), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 2:
            Backward controlled-behavior: <bdd 21n 77p> -> <bdd 24n 132p> [backward reach with edge: (event: u) (guard: p.m1 -> (p.m1 or (p.m3 or p.t2) or (p.t4 or (p.b1 or p.b3))) and (not p.b1 and not p.t2) and (not p.m3 and (not p.t4 and not p.b3))) (assignments: p.x := p.x + 1, p := p.m2), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]
            Backward controlled-behavior: <bdd 24n 132p> -> <bdd 31n 199p> [backward reach with edge: (event: u) (guard: p.t5 -> p.y = 16 and p.t5 or p.y = 8 and p.t5 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t5 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t5 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t5))) (assignments: p.y := p.y - 1, p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]
            Backward controlled-behavior: <bdd 31n 199p> -> <bdd 51n 331p> [backward reach with edge: (event: u) (guard: p.b4 -> <bdd 12n 21p>) (assignments: p.x := p.x - 4, p.y := p.y + 3, p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 3:
            Backward controlled-behavior: <bdd 51n 331p> -> <bdd 51n 336p> [backward reach with edge: (event: u) (guard: p.m0) (assignments: p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]
            Backward controlled-behavior: <bdd 51n 336p> -> <bdd 59n 451p> [backward reach with edge: (event: u) (guard: p.t4 -> <bdd 14n 25p>) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]
            Backward controlled-behavior: <bdd 59n 451p> -> <bdd 68n 556p> [backward reach with edge: (event: u) (guard: p.b3 -> p.y = 16 and p.b3 or p.y = 8 and p.b3 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.b3 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.b3 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.b3))) (assignments: p.y := p.y - 1, p := p.b4), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 4:
            Backward controlled-behavior: <bdd 68n 556p> -> <bdd 73n 616p> [backward reach with edge: (event: u) (guard: p.t3 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]
            Backward controlled-behavior: <bdd 73n 616p> -> <bdd 81n 691p> [backward reach with edge: (event: u) (guard: p.b2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.m2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.b3), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 5:
            Backward controlled-behavior: <bdd 81n 691p> -> <bdd 84n 691p> [backward reach with edge: (event: u) (guard: p.t2 -> p.y = 16 and p.t2 or p.y = 8 and p.t2 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t2 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t2 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t2))) (assignments: p.y := p.y - 1, p := p.t3), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]
            Backward controlled-behavior: <bdd 84n 691p> -> <bdd 93n 846p> [backward reach with edge: (event: u) (guard: p.b1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 6:
            Backward controlled-behavior: <bdd 93n 846p> -> <bdd 98n 868p> [backward reach with edge: (event: u) (guard: p.t1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2), restricted to current/previous controlled-behavior predicate: <bdd 35n 802p>]

        Backward reachability iteration 7:
            No change this iteration.

        Backward controlled-behavior: <bdd 98n 868p> [fixed point].

        Controlled behavior: <bdd 35n 802p> -> <bdd 98n 868p>.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 98n 1,276p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: <bdd 14n 64p> [initialization predicate]
        Forward controlled-behavior: <bdd 14n 64p> -> <bdd 18n 55p> [restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]

        Forward reachability iteration 1:
            Forward controlled-behavior: <bdd 18n 55p> -> <bdd 17n 55p> [forward reach with edge: (event: u) (guard: p.m0) (assignments: p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 17n 55p> -> <bdd 25n 187p> [forward reach with edge: (event: u) (guard: p.m1 -> (p.m1 or (p.m3 or p.t2) or (p.t4 or (p.b1 or p.b3))) and (not p.b1 and not p.t2) and (not p.m3 and (not p.t4 and not p.b3))) (assignments: p.x := p.x + 1, p := p.m2), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 25n 187p> -> <bdd 29n 264p> [forward reach with edge: (event: u) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.m3), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 29n 264p> -> <bdd 41n 404p> [forward reach with edge: (event: c1) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.t1), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 41n 404p> -> <bdd 50n 509p> [forward reach with edge: (event: c2) (guard: p.m2 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b1), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]

        Forward reachability iteration 2:
            Forward controlled-behavior: <bdd 50n 509p> -> <bdd 59n 597p> [forward reach with edge: (event: u) (guard: p.t1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 59n 597p> -> <bdd 60n 685p> [forward reach with edge: (event: u) (guard: p.t2 -> p.y = 16 and p.t2 or p.y = 8 and p.t2 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t2 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t2 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t2))) (assignments: p.y := p.y - 1, p := p.t3), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 60n 685p> -> <bdd 70n 729p> [forward reach with edge: (event: u) (guard: p.t3 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 70n 729p> -> <bdd 80n 817p> [forward reach with edge: (event: u) (guard: p.t4 -> <bdd 14n 25p>) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 80n 817p> -> <bdd 90n 892p> [forward reach with edge: (event: u) (guard: p.b1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 90n 892p> -> <bdd 100n 997p> [forward reach with edge: (event: u) (guard: p.b2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.m2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.b3), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]
            Forward controlled-behavior: <bdd 100n 997p> -> <bdd 105n 1,102p> [forward reach with edge: (event: u) (guard: p.b3 -> p.y = 16 and p.b3 or p.y = 8 and p.b3 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.b3 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.b3 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.b3))) (assignments: p.y := p.y - 1, p := p.b4), restricted to current/previous controlled-behavior predicate: <bdd 98n 868p>]

        Forward reachability iteration 3:
            No change this iteration.

        Forward controlled-behavior: <bdd 105n 1,102p> [fixed point].

        Controlled behavior: <bdd 98n 868p> -> <bdd 105n 1,102p>.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7))))) [marker predicate]
        Backward controlled-behavior: (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 16 or (p.y = 17 or p.y = 20)) and (p.m3 and p.x = 7) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))))) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and (p.x = 3 or p.x = 11)) or ((p.y = 8 or p.y = 9 or (p.y = 12 or p.y = 13)) and (p.m3 and p.x = 7) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or (p.y = 18 or p.y = 19) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13)))))) or ((p.y = 18 or p.y = 19) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 18 or p.y = 19) and (p.m3 and p.x = 7) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 10 or p.y = 11) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or (p.y = 10 or p.y = 11) and (p.m3 and (p.x = 3 or p.x = 11)))) or ((p.y = 10 or p.y = 11) and (p.m3 and p.x = 7) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 0 or p.x = 2 or (p.x = 4 or p.x = 6) or (p.x = 8 or p.x = 10 or (p.x = 12 or p.x = 14)))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 1 or p.x = 5 or (p.x = 9 or p.x = 13))) or ((p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and (p.x = 3 or p.x = 11)) or (p.y = 6 or p.y = 7 or (p.y = 14 or p.y = 15)) and (p.m3 and p.x = 7))))) -> <bdd 21n 77p> [restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 1:
            Backward controlled-behavior: <bdd 21n 77p> -> <bdd 26n 154p> [backward reach with edge: (event: u) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.m3), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 2:
            Backward controlled-behavior: <bdd 26n 154p> -> <bdd 29n 209p> [backward reach with edge: (event: u) (guard: p.m1 -> (p.m1 or (p.m3 or p.t2) or (p.t4 or (p.b1 or p.b3))) and (not p.b1 and not p.t2) and (not p.m3 and (not p.t4 and not p.b3))) (assignments: p.x := p.x + 1, p := p.m2), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]
            Backward controlled-behavior: <bdd 29n 209p> -> <bdd 43n 346p> [backward reach with edge: (event: u) (guard: p.t5 -> p.y = 16 and p.t5 or p.y = 8 and p.t5 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t5 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t5 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t5))) (assignments: p.y := p.y - 1, p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]
            Backward controlled-behavior: <bdd 43n 346p> -> <bdd 57n 444p> [backward reach with edge: (event: u) (guard: p.b4 -> <bdd 12n 21p>) (assignments: p.x := p.x - 4, p.y := p.y + 3, p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 3:
            Backward controlled-behavior: <bdd 57n 444p> -> <bdd 58n 514p> [backward reach with edge: (event: u) (guard: p.m0) (assignments: p := p.m1), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]
            Backward controlled-behavior: <bdd 58n 514p> -> <bdd 65n 597p> [backward reach with edge: (event: u) (guard: p.t4 -> <bdd 14n 25p>) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]
            Backward controlled-behavior: <bdd 65n 597p> -> <bdd 73n 702p> [backward reach with edge: (event: u) (guard: p.b3 -> p.y = 16 and p.b3 or p.y = 8 and p.b3 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.b3 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.b3 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.b3))) (assignments: p.y := p.y - 1, p := p.b4), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 4:
            Backward controlled-behavior: <bdd 73n 702p> -> <bdd 81n 790p> [backward reach with edge: (event: u) (guard: p.t3 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]
            Backward controlled-behavior: <bdd 81n 790p> -> <bdd 89n 865p> [backward reach with edge: (event: u) (guard: p.b2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.m2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.b3), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 5:
            Backward controlled-behavior: <bdd 89n 865p> -> <bdd 93n 953p> [backward reach with edge: (event: u) (guard: p.t2 -> p.y = 16 and p.t2 or p.y = 8 and p.t2 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t2 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t2 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t2))) (assignments: p.y := p.y - 1, p := p.t3), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]
            Backward controlled-behavior: <bdd 93n 953p> -> <bdd 101n 1,058p> [backward reach with edge: (event: u) (guard: p.b1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 6:
            Backward controlled-behavior: <bdd 101n 1,058p> -> <bdd 105n 1,102p> [backward reach with edge: (event: u) (guard: p.t1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2), restricted to current/previous controlled-behavior predicate: <bdd 105n 1,102p>]

        Backward reachability iteration 7:
            No change this iteration.

        Backward controlled-behavior: <bdd 105n 1,102p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 105n 1,744p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: c1) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.t1): guard: not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3))) -> <bdd 21n 56p>.
    Edge (event: c2) (guard: p.m2 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b1): guard: <bdd 14n 25p> -> <bdd 21n 77p>.

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: <bdd 105n 1,102p>)
        Edge: (event: u) (guard: p.m0) (assignments: p := p.m1)
        Edge: (event: u) (guard: p.m1 -> (p.m1 or (p.m3 or p.t2) or (p.t4 or (p.b1 or p.b3))) and (not p.b1 and not p.t2) and (not p.m3 and (not p.t4 and not p.b3))) (assignments: p.x := p.x + 1, p := p.m2)
        Edge: (event: u) (guard: p.m2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.b2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.m3)
        Edge: (event: u) (guard: p.t1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y + 1, p := p.t2)
        Edge: (event: u) (guard: p.t2 -> p.y = 16 and p.t2 or p.y = 8 and p.t2 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t2 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t2 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t2))) (assignments: p.y := p.y - 1, p := p.t3)
        Edge: (event: u) (guard: p.t3 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.t4)
        Edge: (event: u) (guard: p.t4 -> <bdd 14n 25p>) (assignments: p.x := p.x - 1, p.y := p.y - 1, p := p.t5)
        Edge: (event: u) (guard: p.t5 -> p.y = 16 and p.t5 or p.y = 8 and p.t5 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.t5 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.t5 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.t5))) (assignments: p.y := p.y - 1, p := p.m1)
        Edge: (event: u) (guard: p.b1 -> <bdd 14n 25p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b2)
        Edge: (event: u) (guard: p.b2 -> not p.m0 and (not p.t1 and not p.t5) and (not p.b4 and (not p.m2 and not p.t3)) and (not p.m1 and (not p.m3 and not p.t2) and (not p.t4 and (not p.b1 and not p.b3)))) (assignments: p.x := p.x + 1, p := p.b3)
        Edge: (event: u) (guard: p.b3 -> p.y = 16 and p.b3 or p.y = 8 and p.b3 or ((p.y = 4 or (p.y = 12 or p.y = 20)) and p.b3 or ((p.y = 2 or p.y = 6 or (p.y = 10 or (p.y = 14 or p.y = 18))) and p.b3 or (p.y = 1 or p.y = 3 or (p.y = 5 or (p.y = 7 or p.y = 9)) or (p.y = 11 or p.y = 13 or (p.y = 15 or (p.y = 17 or p.y = 19)))) and p.b3))) (assignments: p.y := p.y - 1, p := p.b4)
        Edge: (event: u) (guard: p.b4 -> <bdd 12n 21p>) (assignments: p.x := p.x - 4, p.y := p.y + 3, p := p.m1)
        Edge: (event: c1) (guard: p.m2 -> <bdd 21n 56p>) (assignments: p.x := p.x + 1, p := p.t1)
        Edge: (event: c2) (guard: p.m2 -> <bdd 21n 77p>) (assignments: p.x := p.x + 1, p.y := p.y - 1, p := p.b1)

Computing initialization predicate of the controlled system.

Controlled system: exactly 2,110 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            <bdd 105n 1,102p>
    Initial (uncontrolled system):         <bdd 14n 64p>
    Initial (controlled system):           <bdd 18n 55p>
    Initial (removed by supervisor):       <bdd 29n 95p>
    Initial (added by supervisor):         <bdd 29n 207p>

    Simplifying of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
        Initial: <bdd 18n 55p> -> <bdd 13n 55p> [assume <bdd 14n 64p>].

    Initial (output model):                <bdd 13n 55p>

Determining supervisor guards for output model:
    Event c1: guard: <bdd 21n 56p>.
    Event c2: guard: <bdd 21n 77p>.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Event c1: guard: <bdd 21n 56p> -> <bdd 17n 56p> [assume p.m2].
    Event c2: guard: <bdd 21n 77p> -> <bdd 17n 77p> [assume p.m2].

Constructing output CIF specification.

Checking output CIF specification.

Writing output CIF file "datasynth/double_loop.ctrlsys.real.cif".
