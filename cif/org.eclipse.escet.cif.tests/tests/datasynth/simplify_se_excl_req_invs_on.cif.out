Reading CIF file "datasynth/simplify_se_excl_req_invs_on.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  1      discrete variable  int[0..5]  p.x   0      3 * 2     6 * 2       8 * 2       75%
  -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
  Total                                      1      6         12          16          75%

Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Invariant (components state plant inv):      true
Invariant (locations state plant invariant): true
Invariant (system state plant invariant):    true

Invariant (components state req invariant):  true
Invariant (locations state req invariant):   true
Invariant (system state req invariant):      true

Initial   (discrete variable 0):             true
Initial   (discrete variables):              true
Initial   (components init predicate):       true
Initial   (aut/locs init predicate):         true
Initial   (auts/locs init predicate):        true
Initial   (uncontrolled system):             true
Initial   (system, combined init/plant inv): true
Initial   (system, combined init/state inv): true

Marked    (components marker predicate):     true
Marked    (aut/locs marker predicate):       true
Marked    (auts/locs marker predicate):      true
Marked    (uncontrolled system):             true
Marked    (system, combined mark/plant inv): true
Marked    (system, combined mark/state inv): true

State/event exclusion plants:
  None

State/event exclusion requirements:
  Event "c_b" needs:
    p.x = 4 or (p.x = 5 or p.x = 3)
  Event "c_c" needs:
    p.x != 1
  Event "c_d" needs:
    p.x = 4 or p.x = 5

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: c_a) (guard: true) (assignments: p.x := p.x + 1)
    Edge: (event: c_b) (guard: p.x = 5 or p.x = 3)
    Edge: (event: c_c) (guard: 2 <= p.x and p.x <= 5)
    Edge: (event: c_d) (guard: p.x = 4 or (p.x = 5 or p.x = 3))

Restricting behavior using state/event exclusion plants.

Initialized controlled-behavior predicate: true.
Initialized controlled-initialization predicate: true.

Restricting behavior using state requirements.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: discrete variable "p.x" of type "int[0..5]" (group: 0, domain: 0+1, BDD variables: 3, CIF/BDD values: 6/8)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: c_d) (guard: p.x = 4 or (p.x = 5 or p.x = 3)): guard: p.x = 4 or (p.x = 5 or p.x = 3) -> p.x = 4 or p.x = 5 [state/event exclusion requirement: p.x = 4 or p.x = 5].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: c_a) (guard: true) (assignments: p.x := p.x + 1)
    Edge: (event: c_b) (guard: p.x = 5 or p.x = 3)
    Edge: (event: c_c) (guard: 2 <= p.x and p.x <= 5)
    Edge: (event: c_d) (guard: p.x = 4 or (p.x = 5 or p.x = 3) -> p.x = 4 or p.x = 5)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward controlled-behavior: true -> true [restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 1.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: true [initialization predicate]
Forward reachability: iteration 1.

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: c_a) (guard: true) (assignments: p.x := p.x + 1): guard: true -> p.x != 5.
Edge (event: c_c) (guard: 2 <= p.x and p.x <= 5): guard: 2 <= p.x and p.x <= 5 -> 2 <= p.x and p.x <= 5.
Edge (event: c_d) (guard: p.x = 4 or (p.x = 5 or p.x = 3) -> p.x = 4 or p.x = 5): guard: p.x = 4 or p.x = 5 -> p.x = 4 or p.x = 5.

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: c_a) (guard: true -> p.x != 5) (assignments: p.x := p.x + 1)
    Edge: (event: c_b) (guard: p.x = 5 or p.x = 3)
    Edge: (event: c_c) (guard: 2 <= p.x and p.x <= 5 -> 2 <= p.x and p.x <= 5)
    Edge: (event: c_d) (guard: p.x = 4 or (p.x = 5 or p.x = 3) -> p.x = 4 or p.x = 5)

Controlled system:                     exactly 6 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         true
Initial (controlled system):           true
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the state/event exclusion requirement invariants:
  Event c_b: guard: p.x = 5 or p.x = 3 -> p.x = 1 or (p.x = 3 or p.x = 5) [assume p.x = 4 or (p.x = 5 or p.x = 3)].
  Event c_d: guard: p.x = 4 or p.x = 5 -> not(p.x = 2 or p.x = 3) [assume p.x = 4 or p.x = 5].

Constructing output CIF specification.
Writing output CIF file "datasynth/simplify_se_excl_req_invs_on.ctrlsys.real.cif".
