Reading CIF file "datasynth/state_req_inv_per_edge.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type        Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  bool        p.b   0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  int[0..10]  p.x   1      4 * 2     11 * 2      16 * 2      ~69%
        3      discrete variable  int[0..10]  p.y   2      4 * 2     11 * 2      16 * 2      ~69%
        4      discrete variable  int[0..10]  p.z   3      4 * 2     11 * 2      16 * 2      ~69%
        -----  -----------------  ----------  ----  -----  --------  ----------  ----------  -----------
        Total                                       4      26        70          100         70%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying model variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 8

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [before]
                    Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [before]
                    Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [before]
                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [before]
                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [before]
                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [before]
                        Total span:   1 (total)   0.13 (avg/edge) / WES:   0.203125 (total)   0.025391 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Maximum number of iterations: 20

                Total span:   1 (total)   0.50 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [before]
                Total span:   1 (total)   0.50 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [iteration 1]
                Total span:   1 (total)   0.50 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Window length: 4

                Total span:   1 (total)   0.50 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [before]
                Total span:   1 (total)   0.50 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [after]

    Variable order unchanged.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (component state req invariant):   (0 <= p.x and p.x <= 7 or p.x = 9) and (p.x != 9 and p.x != 7)
    Invariant (component state req invariant):   (0 <= p.y and p.y <= 7 or p.y = 9) and (p.y != 9 and p.y != 7)
    Invariant (component state req invariant):   (0 <= p.z and p.z <= 7 or p.z = 9) and (p.z != 9 and p.z != 7)
    Invariant (components state req invariant):  <bdd 12n 27p>
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      <bdd 12n 27p>

    Initial   (discrete variable 0):             not p.b
    Initial   (discrete variable 1):             true
    Initial   (discrete variable 2):             true
    Initial   (discrete variable 3):             true
    Initial   (discrete variables):              <bdd 13n 125p>
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             <bdd 13n 125p>
    Initial   (system, combined init/plant inv): <bdd 13n 125p>
    Initial   (system, combined init/state inv): <bdd 13n 27p>

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): <bdd 12n 27p>

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: u_e) (guard: not p.b) (assignments: p.x := p.x + 2, p.b := true)
            Edge: (event: c_e) (guard: true) (assignments: p.y := p.y + 2)

Restricting edge guards to prevent runtime errors:
    Edge: (event: u_e) (guard: not p.b -> not p.b) (assignments: p.x := p.x + 2, p.b := true)
    Edge: (event: c_e) (guard: true -> true) (assignments: p.y := p.y + 2)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: u_e) (guard: not p.b -> not p.b) (assignments: p.x := p.x + 2, p.b := true)
            Edge: (event: c_e) (guard: true -> true) (assignments: p.y := p.y + 2)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: <bdd 13n 125p>.

Restricting behavior using state requirements:
    Controlled behavior: true -> not p.b and (p.x = 0 or p.x = 4) or not p.b and p.x = 2 or (not p.b and p.x = 1 or (not p.b and p.x = 3 or p.b)) [state requirement: not p.b and (p.x = 0 or p.x = 4) or (not p.b and p.x = 2 or not p.b and (p.x = 1 or p.x = 3)), edge: (event: u_e) (guard: not p.b -> not p.b) (assignments: p.x := p.x + 2, p.b := true)].
    Edge (event: c_e) (guard: true -> true) (assignments: p.y := p.y + 2): guard: true -> p.y = 0 or p.y = 4 or (p.y = 2 or (p.y = 1 or p.y = 3)) [state requirement: p.y = 0 or p.y = 4 or (p.y = 2 or (p.y = 1 or p.y = 3))].

    Restricted behavior using state requirements:
        State: (controlled-behavior: not p.b and (p.x = 0 or p.x = 4) or not p.b and p.x = 2 or (not p.b and p.x = 1 or (not p.b and p.x = 3 or p.b)))
            Edge: (event: u_e) (guard: not p.b -> not p.b) (assignments: p.x := p.x + 2, p.b := true)
            Edge: (event: c_e) (guard: true -> p.y = 0 or p.y = 4 or (p.y = 2 or (p.y = 1 or p.y = 3))) (assignments: p.y := p.y + 2)
    Controlled initialization: <bdd 13n 125p> -> <bdd 13n 27p> [state requirements: <bdd 12n 27p>].

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior: not p.b and (p.x = 0 or p.x = 4) or not p.b and p.x = 2 or (not p.b and p.x = 1 or (not p.b and p.x = 3 or p.b)) -> (p.b or p.x != 8) and (p.b or p.x != 10) and ((p.b or p.x != 6) and ((p.b or p.x != 9) and (p.b or not(p.x = 5 or p.x = 7)))) [range: true, variable: discrete variable "p.x" of type "int[0..10]" (group: 1, domain: 2+3, BDD variables: 4, CIF/BDD values: 11/16)].
    Controlled behavior: (p.b or p.x != 8) and (p.b or p.x != 10) and ((p.b or p.x != 6) and ((p.b or p.x != 9) and (p.b or not(p.x = 5 or p.x = 7)))) -> <bdd 12n 40p> [range: true, variable: discrete variable "p.y" of type "int[0..10]" (group: 2, domain: 4+5, BDD variables: 4, CIF/BDD values: 11/16)].
    Controlled behavior: <bdd 12n 40p> -> <bdd 16n 200p> [range: true, variable: discrete variable "p.z" of type "int[0..10]" (group: 3, domain: 6+7, BDD variables: 4, CIF/BDD values: 11/16)].

    Extended controlled-behavior predicate using variable ranges: <bdd 16n 200p>.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Synthesis round 1:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> <bdd 16n 200p> [restricted to current/previous controlled-behavior predicate: <bdd 16n 200p>]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: <bdd 16n 200p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 16n 152p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Computing forward controlled-behavior predicate:
        Forward controlled-behavior: <bdd 13n 27p> [initialization predicate]
        Forward controlled-behavior: <bdd 13n 27p> -> <bdd 13n 27p> [restricted to current/previous controlled-behavior predicate: <bdd 16n 200p>]

        Forward reachability iteration 1:
            Forward controlled-behavior: <bdd 13n 27p> -> <bdd 17n 63p> [forward reach with edge: (event: u_e) (guard: not p.b -> not p.b) (assignments: p.x := p.x + 2, p.b := true), restricted to current/previous controlled-behavior predicate: <bdd 16n 200p>]

        Forward reachability iteration 2:
            No change this iteration.

        Forward controlled-behavior: <bdd 17n 63p> [fixed point].

        Controlled behavior: <bdd 16n 200p> -> <bdd 17n 63p>.

    Need another round.

Synthesis round 2:
    Computing backward controlled-behavior predicate:
        Backward controlled-behavior: true [marker predicate]
        Backward controlled-behavior: true -> <bdd 17n 63p> [restricted to current/previous controlled-behavior predicate: <bdd 17n 63p>]

        Backward reachability iteration 1:
            No change this iteration.

        Backward controlled-behavior: <bdd 17n 63p> [fixed point].

        Controlled behavior not changed.

    Computing backward uncontrolled bad-state predicate:
        Backward uncontrolled bad-state: <bdd 17n 124p> [current/previous controlled behavior predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controlled behavior not changed.

    Finished: controlled behavior is stable.

Computing final controlled system guards:
    Edge (event: c_e) (guard: true -> p.y = 0 or p.y = 4 or (p.y = 2 or (p.y = 1 or p.y = 3))) (assignments: p.y := p.y + 2): guard: p.y = 0 or p.y = 4 or (p.y = 2 or (p.y = 1 or p.y = 3)) -> <bdd 17n 63p>.

Cleaning up edges for being applied.

Final synthesis result:
    State: (controlled-behavior: <bdd 17n 63p>)
        Edge: (event: u_e) (guard: not p.b -> not p.b) (assignments: p.x := p.x + 2, p.b := true)
        Edge: (event: c_e) (guard: true -> <bdd 17n 63p>) (assignments: p.y := p.y + 2)

Computing initialization predicate of the controlled system.

Controlled system: exactly 490 states.

Determining initialization predicate for output model:
    Initial (synthesis result):            <bdd 17n 63p>
    Initial (uncontrolled system):         <bdd 13n 125p>
    Initial (controlled system):           <bdd 13n 27p>
    Initial (removed by supervisor):       <bdd 29n 300p>
    Initial (added by supervisor):         <bdd 29n 329p>

    Simplifying of controlled system initialization predicate under the assumption of the uncontrolled system initialization predicates:
        Initial: <bdd 13n 27p> -> <bdd 12n 27p> [assume <bdd 13n 125p>].

    Initial (output model):                <bdd 12n 27p>

Determining supervisor guards for output model.

Checking post-synthesis for events that are never enabled.

Simplifying supervisor guards for output model:
    Simplification under the assumption of the plants.

    Guards not changed.

Constructing output CIF specification.
Writing output CIF file "datasynth/state_req_inv_per_edge.ctrlsys.real.cif".
