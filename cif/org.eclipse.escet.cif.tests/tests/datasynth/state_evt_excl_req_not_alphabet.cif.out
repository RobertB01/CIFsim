Reading CIF file "datasynth/state_evt_excl_req_not_alphabet.cif".
Preprocessing CIF specification (includes checking that the specification is supported).
Converting CIF specification to internal format (BDDs):
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..3]  p.x   0      2 * 2     4 * 2       4 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      1      4         8           8           100%

    Skipping variable ordering: only one variable present.

Starting data-based synthesis.

Showing input and checking for potential problems:
    Invariant (components state plant inv):      true
    Invariant (locations state plant invariant): true
    Invariant (system state plant invariant):    true

    Invariant (components state req invariant):  true
    Invariant (locations state req invariant):   true
    Invariant (system state req invariant):      true

    Initial   (discrete variable 0):             p.x = 0
    Initial   (discrete variables):              p.x = 0
    Initial   (components init predicate):       true
    Initial   (aut/locs init predicate):         true
    Initial   (aut/locs init predicate):         true
    Initial   (auts/locs init predicate):        true
    Initial   (uncontrolled system):             p.x = 0
    Initial   (system, combined init/plant inv): p.x = 0
    Initial   (system, combined init/state inv): p.x = 0

    Marked    (components marker predicate):     true
    Marked    (aut/locs marker predicate):       true
    Marked    (aut/locs marker predicate):       true
    Marked    (auts/locs marker predicate):      true
    Marked    (uncontrolled system):             true
    Marked    (system, combined mark/plant inv): true
    Marked    (system, combined mark/state inv): true

    State/event exclusion plants:
        None

    State/event exclusion requirements:
        None

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: p.inc) (guard: true) (assignments: p.x := p.x + 1)

Restricting edge guards to prevent runtime errors:
    Edge: (event: p.inc) (guard: true -> p.x != 3) (assignments: p.x := p.x + 1)

    Uncontrolled system:
        State: (controlled-behavior: ?)
            Edge: (event: p.inc) (guard: true -> p.x != 3) (assignments: p.x := p.x + 1)

Restricting uncontrolled system behavior using state/event exclusion plant invariants:
    No guards changed.

Initializing edges for being applied.

Restricting uncontrolled system behavior using state plant invariants:
    No restrictions needed.

Initializing controlled behavior:
    Controlled-behavior predicate: true.
    Controlled-initialization predicate: p.x = 0.

Restricting behavior using state requirements:
    Controlled behavior not changed.

Extending controlled-behavior predicate using variable ranges:
    Controlled behavior not changed.

Restricting behavior using state/event exclusion requirements:
    Guards and controlled behavior not changed.

Restricting behavior using implicit runtime error requirements:
    Controlled behavior not changed.

Re-initializing edges for being applied.

Checking pre-synthesis for events that are never enabled.

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: true [marker predicate]
Backward reachability: iteration 1.

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: p.x = 0 [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: p.x = 0 -> p.x = 0 or p.x = 1 [forward reach with edge: (event: p.inc) (guard: true -> p.x != 3) (assignments: p.x := p.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: p.x = 0 or p.x = 1 -> p.x != 3 [forward reach with edge: (event: p.inc) (guard: true -> p.x != 3) (assignments: p.x := p.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: p.x != 3 -> true [forward reach with edge: (event: p.inc) (guard: true -> p.x != 3) (assignments: p.x := p.x + 1), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Final synthesis result:
    State: (controlled-behavior: true)
        Edge: (event: p.inc) (guard: true -> p.x != 3) (assignments: p.x := p.x + 1)

Controlled system: exactly 4 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         p.x = 0
Initial (controlled system):           p.x = 0
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Checking post-synthesis for events that are never enabled.

Constructing output CIF specification.
Writing output CIF file "datasynth/state_evt_excl_req_not_alphabet.ctrlsys.real.cif".
