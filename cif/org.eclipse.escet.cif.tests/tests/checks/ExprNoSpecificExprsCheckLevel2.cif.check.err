WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 15, column 1: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 19, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 25, column 5: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 51, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 56, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 61, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 120, column 13: The switch expression has only one case, which is deprecated.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 127, column 13: The switch expression has only one case, which is deprecated.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 155, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 189, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 218, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 236, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 266, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 276, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificExprsCheckLevel2.cif": Semantic warning at line 346, column 3: Duplicate state invariant.
ERROR: CIF checks tester failed due to unsatisfied preconditions:

  -------------------------------------------
  (1/23) A 'time' variable reference is used.
  -------------------------------------------
   * In group "TIME_VAR_REFS":
     - invariant time > 0;
                 ^

  --------------------------------------------
  (2/23) A component 'self' reference is used.
  --------------------------------------------
   * In automaton "COMP_REFS_SELF":
     - invariant switch self: else true end;
                        ^
   * In location "X.A":
     - invariant "A" = <string>self;
                               ^

  -----------------------------------------------
  (3/23) A continuous variable reference is used.
  -----------------------------------------------
   * In group "CONT_VAR_REFS":
     - invariant c = 1.0;
                 ^
   * In group "CONT_VAR_REFS_DER":
     - invariant c' = 1.0;
                 ^

  --------------------------------------------------
  (4/23) A dictionary projection expression is used.
  --------------------------------------------------
   * In group "DICT_LITS":
     - invariant {true: false}[true];
                              ^
   * In group "PROJECTION_EXPRS_DICTS":
     - invariant {true: false}[true];
                              ^

  ---------------------------------------------
  (5/23) A discrete variable reference is used.
  ---------------------------------------------
   * In automaton "DISC_VAR_REFS":
     - invariant v;
                 ^
   * In automaton "PROJECTION_EXPRS_LISTS_NON_ARRAY":
     - invariant d[0];
                 ^
   * In automaton "PROJECTION_EXPRS_TUPLES_FIELD":
     - edge tau do v[a] := v[b];
                   ^       ^
   * In automaton "RECEIVE_EXPRS":
     - edge e? do v := ?;
                  ^

  --------------------------------------------
  (6/23) A list projection expression is used.
  --------------------------------------------
   * In group "PROJECTION_EXPRS_LISTS":
     - invariant [true, false][0];
                              ^
   * In automaton "PROJECTION_EXPRS_LISTS_NON_ARRAY":
     - invariant d[0];
                  ^
   * In invariant "SLICE_EXPRS.SLICE_EXPRS_LIST":
     - invariant SLICE_EXPRS_LIST: [true, false][:-1][0];
                                                     ^

  ----------------------------------------------
  (7/23) A string projection expression is used.
  ----------------------------------------------
   * In group "PROJECTION_EXPRS_STRINGS":
     - invariant "abc"[0] = "a";
                      ^
   * In invariant "SLICE_EXPRS.SLICE_EXPRS_STRING":
     - invariant SLICE_EXPRS_STRING: "ab"[:-1][0] = "a";
                                              ^

  ---------------------------------------------------
  (8/23) A switch expression is used on an automaton.
  ---------------------------------------------------
   * In automaton "COMP_REFS_EXPLICIT":
     - invariant switch COMP_REFS_EXPLICIT: else true end;
                 ^
   * In automaton "COMP_REFS_SELF":
     - invariant switch self: else true end;
                 ^

  ----------------------------------------------------------------------------
  (9/23) A switch expression is used with a boolean typed (part of its) value.
  ----------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_BOOL":
     - invariant SWITCH_BOOL: switch true: case true: true case false: false end;
                              ^
   * In invariant "SWITCH_EXPRS.SWITCH_LIST_ARRAY":
     - invariant SWITCH_LIST_ARRAY: switch i3: case [true]: true else false end;
                                    ^
   * In invariant "SWITCH_EXPRS.SWITCH_LIST_NON_ARRAY":
     - invariant SWITCH_LIST_NON_ARRAY: switch i4: case [true]: true else false end;
                                        ^
   * In invariant "SWITCH_EXPRS.SWITCH_TUPLE":
     - invariant SWITCH_TUPLE: switch (true, false): case (true, false): true else false end;
                               ^

  --------------------------------------------------------------------------------
  (10/23) A switch expression is used with a dictionary typed (part of its) value.
  --------------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_DICT":
     - invariant SWITCH_DICT: switch {1: 2}: case {1: 2}: true else false end;
                              ^

  --------------------------------------------------------------------------
  (11/23) A switch expression is used with a list typed (part of its) value.
  --------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_LIST_ARRAY":
     - invariant SWITCH_LIST_ARRAY: switch i3: case [true]: true else false end;
                                    ^
   * In invariant "SWITCH_EXPRS.SWITCH_LIST_NON_ARRAY":
     - invariant SWITCH_LIST_NON_ARRAY: switch i4: case [true]: true else false end;
                                        ^

  --------------------------------------------------------------------------
  (12/23) A switch expression is used with a real typed (part of its) value.
  --------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_REAL":
     - invariant SWITCH_REAL: switch i5: case 1.0: true else false end;
                              ^

  -------------------------------------------------------------------------
  (13/23) A switch expression is used with a set typed (part of its) value.
  -------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_SET":
     - invariant SWITCH_SET: switch {1, 2}: case {1, 2}: true else false end;
                             ^

  ----------------------------------------------------------------------------
  (14/23) A switch expression is used with a string typed (part of its) value.
  ----------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_STRING":
     - invariant SWITCH_STRING: switch "a": case "a": true else false end;
                                ^

  ---------------------------------------------------------------------------
  (15/23) A switch expression is used with a tuple typed (part of its) value.
  ---------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_TUPLE":
     - invariant SWITCH_TUPLE: switch (true, false): case (true, false): true else false end;
                               ^

  ----------------------------------------------------------------------------------
  (16/23) A switch expression is used with an enumeration typed (part of its) value.
  ----------------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_ENUM":
     - invariant SWITCH_ENUM: switch ENUM_LIT_REFS.e1: case ENUM_LIT_REFS.e1: true else false end;
                              ^

  ------------------------------------------------------------------------------
  (17/23) A switch expression is used with an integer typed (part of its) value.
  ------------------------------------------------------------------------------
   * In invariant "SWITCH_EXPRS.SWITCH_DICT":
     - invariant SWITCH_DICT: switch {1: 2}: case {1: 2}: true else false end;
                              ^
   * In invariant "SWITCH_EXPRS.SWITCH_INT_RANGED":
     - invariant SWITCH_INT_RANGED: switch i1: case 3: true else false end;
                                    ^
   * In invariant "SWITCH_EXPRS.SWITCH_INT_RANGELESS":
     - invariant SWITCH_INT_RANGELESS: switch i2: case 5: true else false end;
                                       ^
   * In invariant "SWITCH_EXPRS.SWITCH_SET":
     - invariant SWITCH_SET: switch {1, 2}: case {1, 2}: true else false end;
                             ^

  ----------------------------------------
  (18/23) A tuple field reference is used.
  ----------------------------------------
   * In automaton "PROJECTION_EXPRS_TUPLES_FIELD":
     - edge tau do v[a] := v[b];
                     ^       ^
   * In group "TUPLE_FIELD_REFS_NAMED":
     - invariant c[a];
                   ^

  ----------------------------------------------
  (19/23) A tuple projection expression is used.
  ----------------------------------------------
   * In automaton "PROJECTION_EXPRS_TUPLES_FIELD":
     - edge tau do v[a] := v[b];
                    ^       ^
   * In group "PROJECTION_EXPRS_TUPLES_INDEX":
     - invariant (true, false)[0];
                              ^
     - invariant ((true, false), false)[0][0];
                                       ^  ^
   * In group "TUPLE_FIELD_REFS_NAMED":
     - invariant c[a];
                  ^
   * In group "TUPLE_FIELD_REFS_NAMELESS":
     - invariant (true, false)[0];
                              ^
   * In group "TUPLE_LITS":
     - invariant (true, false)[0];
                              ^

  ------------------------------------------------
  (20/23) An algebraic variable reference is used.
  ------------------------------------------------
   * In group "ALG_VAR_REFS":
     - invariant a;
                 ^
   * In group definition "COMP_PARAM_REFS":
     - invariant p;
                 ^

  -------------------------------------------------
  (21/23) An enumeration literal reference is used.
  -------------------------------------------------
   * In group "ENUM_LIT_REFS":
     - invariant e1 = e2;
                 ^    ^
   * In invariant "SWITCH_EXPRS.SWITCH_ENUM":
     - invariant SWITCH_ENUM: switch ENUM_LIT_REFS.e1: case ENUM_LIT_REFS.e1: true else false end;
                                     ^                      ^

  ------------------------------------------------
  (22/23) An explicit component reference is used.
  ------------------------------------------------
   * In group "CAST_EXPRS_AUTOMATON_TO_STRING":
     - invariant "A" = <string>X;
                               ^
   * In automaton "COMP_REFS_EXPLICIT":
     - invariant switch COMP_REFS_EXPLICIT: else true end;
                        ^

  --------------------------------------------
  (23/23) An input variable reference is used.
  --------------------------------------------
   * In group "INPUT_VAR_REFS":
     - invariant i;
                 ^
   * In invariant "SWITCH_EXPRS.SWITCH_INT_RANGED":
     - invariant SWITCH_INT_RANGED: switch i1: case 3: true else false end;
                                           ^
   * In invariant "SWITCH_EXPRS.SWITCH_INT_RANGELESS":
     - invariant SWITCH_INT_RANGELESS: switch i2: case 5: true else false end;
                                              ^
   * In invariant "SWITCH_EXPRS.SWITCH_LIST_ARRAY":
     - invariant SWITCH_LIST_ARRAY: switch i3: case [true]: true else false end;
                                           ^
   * In invariant "SWITCH_EXPRS.SWITCH_LIST_NON_ARRAY":
     - invariant SWITCH_LIST_NON_ARRAY: switch i4: case [true]: true else false end;
                                               ^
   * In invariant "SWITCH_EXPRS.SWITCH_REAL":
     - invariant SWITCH_REAL: switch i5: case 1.0: true else false end;
                                     ^
