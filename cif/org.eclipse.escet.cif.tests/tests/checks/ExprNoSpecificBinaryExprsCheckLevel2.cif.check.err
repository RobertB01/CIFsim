WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 15, column 1: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 19, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 25, column 5: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 32, column 13: The type "int[1..1]" of algebraic variable "type_decl.a" allows only one value. Use a constant instead of the algebraic variable.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 44, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 45, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 203, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel2.cif": Semantic warning at line 204, column 13: Duplicate state invariant.
ERROR: CIF checks tester failed due to unsatisfied preconditions:

  ----------------------------------------------------------------------
  (1/25) Binary operator "!=" is used on a ranged integer typed operand.
  ----------------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant 1 != 2;
                   ^

  -------------------------------------------------------------------
  (2/25) Binary operator "!=" is used on an array list typed operand.
  -------------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant [1, 2, 4] != [1, 2, 3];
                           ^

  ---------------------------------------------------------------------
  (3/25) Binary operator "*" is used on a ranged integer typed operand.
  ---------------------------------------------------------------------
   * In invariant "MULTIPLICATION.GG":
     - invariant GG: 1 * 1 = 0;
                       ^
   * In invariant "MULTIPLICATION.IR":
     - invariant IR: 1 * 1.0 = 0.0;
                       ^
   * In invariant "MULTIPLICATION.RI":
     - invariant RI: 1.0 * 1 = 0.0;
                         ^

  ------------------------------------------------------------------------
  (4/25) Binary operator "*" is used on a rangeless integer typed operand.
  ------------------------------------------------------------------------
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                       ^

  ---------------------------------------------------------------------
  (5/25) Binary operator "+" is used on a ranged integer typed operand.
  ---------------------------------------------------------------------
   * In invariant "ADDITION_NUMBERS.GG":
     - invariant GG: 1 + 1 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.GI":
     - invariant GI: 1 + i > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.IG":
     - invariant IG: i + 1 > 0;
                       ^

  ------------------------------------------------------------------------
  (6/25) Binary operator "+" is used on a rangeless integer typed operand.
  ------------------------------------------------------------------------
   * In invariant "ADDITION_NUMBERS.GI":
     - invariant GI: 1 + i > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.IG":
     - invariant IG: i + 1 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.II":
     - invariant II: i + i > 0;
                       ^

  ---------------------------------------------------------------------
  (7/25) Binary operator "-" is used on a ranged integer typed operand.
  ---------------------------------------------------------------------
   * In invariant "SUBTRACTION_NUMBERS.GG":
     - invariant GG: 1 - 1 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.GI":
     - invariant GI: 1 - i > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.IG":
     - invariant IG: i - 1 > 0;
                       ^

  ------------------------------------------------------------------------
  (8/25) Binary operator "-" is used on a rangeless integer typed operand.
  ------------------------------------------------------------------------
   * In invariant "SUBTRACTION_NUMBERS.GI":
     - invariant GI: 1 - i > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.IG":
     - invariant IG: i - 1 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.II":
     - invariant II: i - i > 0;
                       ^

  -----------------------------------------------------------
  (9/25) Binary operator "<" is used on a real typed operand.
  -----------------------------------------------------------
   * In invariant "LESS_THAN.IR":
     - invariant IR: 1 < 1.0;
                       ^
   * In invariant "LESS_THAN.RI":
     - invariant RI: 1.0 < 1;
                         ^
   * In invariant "LESS_THAN.RR":
     - invariant RR: 1.0 < 1.0;
                         ^

  ----------------------------------------------------------------
  (10/25) Binary operator "<" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In the top-level scope of the specification:
     - invariant 1 < 2;
                   ^
   * In invariant "LESS_THAN.GG":
     - invariant GG: 1 < 1;
                       ^
   * In invariant "LESS_THAN.II":
     - invariant II: i < i;
                       ^
   * In invariant "LESS_THAN.IR":
     - invariant IR: 1 < 1.0;
                       ^
   * In invariant "LESS_THAN.RI":
     - invariant RI: 1.0 < 1;
                         ^
   * In group "grp":
     - invariant 1 < 2;
                   ^
   * In group "nested_grp.nested_grp":
     - invariant 1 < 2;
                   ^
   * In group "type_decl":
     - invariant a < a;
                   ^

  -------------------------------------------------------------
  (11/25) Binary operator "<=" is used on a real typed operand.
  -------------------------------------------------------------
   * In invariant "LESS_EQUAL.IR":
     - invariant IR: 1 <= 1.0;
                       ^
   * In invariant "LESS_EQUAL.RI":
     - invariant RI: 1.0 <= 1;
                         ^
   * In invariant "LESS_EQUAL.RR":
     - invariant RR: 1.0 <= 1.0;
                         ^

  -----------------------------------------------------------------
  (12/25) Binary operator "<=" is used on an integer typed operand.
  -----------------------------------------------------------------
   * In invariant "LESS_EQUAL.GG":
     - invariant GG: 1 <= 1;
                       ^
   * In invariant "LESS_EQUAL.II":
     - invariant II: i <= i;
                       ^
   * In invariant "LESS_EQUAL.IR":
     - invariant IR: 1 <= 1.0;
                       ^
   * In invariant "LESS_EQUAL.RI":
     - invariant RI: 1.0 <= 1;
                         ^

  ----------------------------------------------------------------------
  (13/25) Binary operator "=" is used on a ranged integer typed operand.
  ----------------------------------------------------------------------
   * In group "EQUAL":
     - invariant 1 = 1;
                   ^
   * In invariant "INTEGER_DIVISION.GG":
     - invariant GG: 1 div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.GI":
     - invariant GI: 1 div i = 0;
                             ^
   * In invariant "INTEGER_DIVISION.IG":
     - invariant IG: i div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.II":
     - invariant II: i div i = 0;
                             ^
   * In invariant "MODULUS.GG":
     - invariant GG: 1 mod 1 = 0;
                             ^
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                             ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                             ^
   * In invariant "MODULUS.II":
     - invariant II: i mod i = 0;
                             ^
   * In invariant "MULTIPLICATION.GG":
     - invariant GG: 1 * 1 = 0;
                           ^
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                           ^

  -------------------------------------------------------------------------
  (14/25) Binary operator "=" is used on a rangeless integer typed operand.
  -------------------------------------------------------------------------
   * In invariant "INTEGER_DIVISION.GI":
     - invariant GI: 1 div i = 0;
                             ^
   * In invariant "INTEGER_DIVISION.IG":
     - invariant IG: i div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.II":
     - invariant II: i div i = 0;
                             ^
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                             ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                             ^
   * In invariant "MODULUS.II":
     - invariant II: i mod i = 0;
                             ^
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                           ^

  -------------------------------------------------------------------
  (15/25) Binary operator "=" is used on an array list typed operand.
  -------------------------------------------------------------------
   * In group "EQUAL":
     - invariant [1, 2, 3] = [1, 2, 3];
                           ^

  ------------------------------------------------------------
  (16/25) Binary operator ">" is used on a real typed operand.
  ------------------------------------------------------------
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                             ^
   * In invariant "ADDITION_NUMBERS.RG":
     - invariant RG: 1.0 + 1.0 > 0;
                               ^
   * In invariant "ADDITION_NUMBERS.RR":
     - invariant RR: 1.0 + 1.0 > 0;
                               ^
   * In invariant "GREATER_THAN.IR":
     - invariant IR: 1 > 1.0;
                       ^
   * In invariant "GREATER_THAN.RI":
     - invariant RI: 1.0 > 1;
                         ^
   * In invariant "GREATER_THAN.RR":
     - invariant RR: 1.0 > 1.0;
                         ^
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                             ^
   * In invariant "SUBTRACTION_NUMBERS.RG":
     - invariant RG: 1.0 - 1.0 > 0;
                               ^
   * In invariant "SUBTRACTION_NUMBERS.RR":
     - invariant RR: 1.0 - 1.0 > 0;
                               ^

  ----------------------------------------------------------------
  (17/25) Binary operator ">" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In invariant "ADDITION_NUMBERS.GG":
     - invariant GG: 1 + 1 > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.GI":
     - invariant GI: 1 + i > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                             ^
   * In invariant "ADDITION_NUMBERS.IG":
     - invariant IG: i + 1 > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.II":
     - invariant II: i + i > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.RG":
     - invariant RG: 1.0 + 1.0 > 0;
                               ^
   * In invariant "ADDITION_NUMBERS.RR":
     - invariant RR: 1.0 + 1.0 > 0;
                               ^
   * In invariant "GREATER_THAN.GG":
     - invariant GG: 1 > 1;
                       ^
   * In invariant "GREATER_THAN.II":
     - invariant II: i > i;
                       ^
   * In invariant "GREATER_THAN.IR":
     - invariant IR: 1 > 1.0;
                       ^
   * In invariant "GREATER_THAN.RI":
     - invariant RI: 1.0 > 1;
                         ^
   * In invariant "SUBTRACTION_NUMBERS.GG":
     - invariant GG: 1 - 1 > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.GI":
     - invariant GI: 1 - i > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                             ^
   * In invariant "SUBTRACTION_NUMBERS.IG":
     - invariant IG: i - 1 > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.II":
     - invariant II: i - i > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.RG":
     - invariant RG: 1.0 - 1.0 > 0;
                               ^
   * In invariant "SUBTRACTION_NUMBERS.RR":
     - invariant RR: 1.0 - 1.0 > 0;
                               ^

  -------------------------------------------------------------
  (18/25) Binary operator ">=" is used on a real typed operand.
  -------------------------------------------------------------
   * In invariant "GREATER_EQUAL.IR":
     - invariant IR: 1 >= 1.0;
                       ^
   * In invariant "GREATER_EQUAL.RI":
     - invariant RI: 1.0 >= 1;
                         ^
   * In invariant "GREATER_EQUAL.RR":
     - invariant RR: 1.0 >= 1.0;
                         ^

  -----------------------------------------------------------------
  (19/25) Binary operator ">=" is used on an integer typed operand.
  -----------------------------------------------------------------
   * In invariant "GREATER_EQUAL.GG":
     - invariant GG: 1 >= 1;
                       ^
   * In invariant "GREATER_EQUAL.II":
     - invariant II: i >= i;
                       ^
   * In invariant "GREATER_EQUAL.IR":
     - invariant IR: 1 >= 1.0;
                       ^
   * In invariant "GREATER_EQUAL.RI":
     - invariant RI: 1.0 >= 1;
                         ^

  ------------------------------------------------------------------
  (20/25) Binary operator "div" is used on an integer typed operand.
  ------------------------------------------------------------------
   * In invariant "INTEGER_DIVISION.GG":
     - invariant GG: 1 div 1 = 0;
                       ^
   * In invariant "INTEGER_DIVISION.GI":
     - invariant GI: 1 div i = 0;
                       ^
   * In invariant "INTEGER_DIVISION.IG":
     - invariant IG: i div 1 = 0;
                       ^
   * In invariant "INTEGER_DIVISION.II":
     - invariant II: i div i = 0;
                       ^

  -------------------------------------------------------------------
  (21/25) Binary operator "in" is used on a dictionary typed operand.
  -------------------------------------------------------------------
   * In group "ELEMENT_OF_DICTS":
     - invariant 1 in {1: 2};
                   ^

  -------------------------------------------------------------
  (22/25) Binary operator "in" is used on a list typed operand.
  -------------------------------------------------------------
   * In group "ELEMENT_OF_LISTS":
     - invariant 1 in [1];
                   ^

  ------------------------------------------------------------
  (23/25) Binary operator "in" is used on a set typed operand.
  ------------------------------------------------------------
   * In group "ELEMENT_OF_SETS":
     - invariant 1 in {1};
                   ^

  ------------------------------------------------------------------------
  (24/25) Binary operator "mod" is used on a ranged integer typed operand.
  ------------------------------------------------------------------------
   * In invariant "MODULUS.GG":
     - invariant GG: 1 mod 1 = 0;
                       ^
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                       ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                       ^

  ---------------------------------------------------------------------------
  (25/25) Binary operator "mod" is used on a rangeless integer typed operand.
  ---------------------------------------------------------------------------
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                       ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                       ^
   * In invariant "MODULUS.II":
     - invariant II: i mod i = 0;
                       ^
