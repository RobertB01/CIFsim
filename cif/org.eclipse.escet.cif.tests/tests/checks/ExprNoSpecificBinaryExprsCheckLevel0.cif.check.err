WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 15, column 1: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 19, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 25, column 5: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 32, column 13: Type "int[1..1]" allows only one value.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 44, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 45, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 203, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel0.cif": Semantic warning at line 204, column 13: Duplicate state invariant.
ERROR: CIF checks tester failed due to unsatisfied preconditions:

  ------------------------------------
  (1/11) Binary operator "!=" is used.
  ------------------------------------
   * In group "UNEQUAL":
     - invariant 1 != 2;
                   ^
     - invariant true != false;
                      ^
     - invariant 1.2 != 1.5;
                     ^
     - invariant [1, 2, 4] != [1, 2, 3];
                           ^
     - invariant {1, 2, 4} != {1, 2, 3};
                           ^
     - invariant {1: 10, 5: 20} != {1: 10, 2: 20};
                                ^
     - invariant A != B;
                   ^
     - invariant (1, 2, 4) != (1, 2, 3);
                           ^
     - invariant "abc" != "def";
                       ^

  -----------------------------------
  (2/11) Binary operator "*" is used.
  -----------------------------------
   * In invariant "MULTIPLICATION.GG":
     - invariant GG: 1 * 1 = 0;
                       ^
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                       ^
   * In invariant "MULTIPLICATION.IR":
     - invariant IR: 1 * 1.0 = 0.0;
                       ^
   * In invariant "MULTIPLICATION.RI":
     - invariant RI: 1.0 * 1 = 0.0;
                         ^
   * In invariant "MULTIPLICATION.RR":
     - invariant RR: 1.0 * 1.0 = 0.0;
                         ^

  -----------------------------------
  (3/11) Binary operator "+" is used.
  -----------------------------------
   * In group "ADDITION_DICTS":
     - invariant empty({true: false} + {false: true});
                                     ^
   * In group "ADDITION_LISTS":
     - invariant empty([1] + [1]);
                           ^
   * In invariant "ADDITION_NUMBERS.GG":
     - invariant GG: 1 + 1 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.GI":
     - invariant GI: 1 + i > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.IG":
     - invariant IG: i + 1 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.II":
     - invariant II: i + i > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.RG":
     - invariant RG: 1.0 + 1.0 > 0;
                         ^
   * In invariant "ADDITION_NUMBERS.RR":
     - invariant RR: 1.0 + 1.0 > 0;
                         ^
   * In group "ADDITION_STRINGS":
     - invariant "a" + "a" = "aa";
                     ^

  -----------------------------------
  (4/11) Binary operator "-" is used.
  -----------------------------------
   * In invariant "SUBTRACTION_CONTAINERS.DD":
     - invariant DD: empty({1: 2} - {1: 2});
                                  ^
   * In invariant "SUBTRACTION_CONTAINERS.DLG":
     - invariant DLG: empty({1: 2} - [1]);
                                   ^
   * In invariant "SUBTRACTION_CONTAINERS.DLI":
     - invariant DLI: empty({1: 2} - [i]);
                                   ^
   * In invariant "SUBTRACTION_CONTAINERS.DS":
     - invariant DS: empty({1: 2} - {1});
                                  ^
   * In invariant "SUBTRACTION_CONTAINERS.SS":
     - invariant SS: empty({true} - {false});
                                  ^
   * In invariant "SUBTRACTION_NUMBERS.GG":
     - invariant GG: 1 - 1 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.GI":
     - invariant GI: 1 - i > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.IG":
     - invariant IG: i - 1 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.II":
     - invariant II: i - i > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.RG":
     - invariant RG: 1.0 - 1.0 > 0;
                         ^
   * In invariant "SUBTRACTION_NUMBERS.RR":
     - invariant RR: 1.0 - 1.0 > 0;
                         ^

  -----------------------------------
  (5/11) Binary operator "/" is used.
  -----------------------------------
   * In invariant "DIVISION.II":
     - invariant II: 1 / 1 = 0.0;
                       ^
   * In invariant "DIVISION.IR":
     - invariant IR: 1 / 1.0 = 0.0;
                       ^
   * In invariant "DIVISION.RI":
     - invariant RI: 1.0 / 1 = 0.0;
                         ^
   * In invariant "DIVISION.RR":
     - invariant RR: 1.0 / 1.0 = 0.0;
                         ^

  -----------------------------------
  (6/11) Binary operator "=" is used.
  -----------------------------------
   * In group "ADDITION_STRINGS":
     - invariant "a" + "a" = "aa";
                           ^
   * In invariant "DIVISION.II":
     - invariant II: 1 / 1 = 0.0;
                           ^
   * In invariant "DIVISION.IR":
     - invariant IR: 1 / 1.0 = 0.0;
                             ^
   * In invariant "DIVISION.RI":
     - invariant RI: 1.0 / 1 = 0.0;
                             ^
   * In invariant "DIVISION.RR":
     - invariant RR: 1.0 / 1.0 = 0.0;
                               ^
   * In group "EQUAL":
     - invariant 1 = 1;
                   ^
     - invariant true = true;
                      ^
     - invariant 1.2 = 1.2;
                     ^
     - invariant [1, 2, 3] = [1, 2, 3];
                           ^
     - invariant {1, 2, 3} = {1, 2, 3};
                           ^
     - invariant {1: 10, 2: 20} = {1: 10, 2: 20};
                                ^
     - invariant A = A;
                   ^
     - invariant (1, 2, 3) = (1, 2, 3);
                           ^
     - invariant "abc" = "abc";
                       ^
   * In invariant "INTEGER_DIVISION.GG":
     - invariant GG: 1 div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.GI":
     - invariant GI: 1 div i = 0;
                             ^
   * In invariant "INTEGER_DIVISION.IG":
     - invariant IG: i div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.II":
     - invariant II: i div i = 0;
                             ^
   * In invariant "MODULUS.GG":
     - invariant GG: 1 mod 1 = 0;
                             ^
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                             ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                             ^
   * In invariant "MODULUS.II":
     - invariant II: i mod i = 0;
                             ^
   * In invariant "MULTIPLICATION.GG":
     - invariant GG: 1 * 1 = 0;
                           ^
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                           ^
   * In invariant "MULTIPLICATION.IR":
     - invariant IR: 1 * 1.0 = 0.0;
                             ^
   * In invariant "MULTIPLICATION.RI":
     - invariant RI: 1.0 * 1 = 0.0;
                             ^
   * In invariant "MULTIPLICATION.RR":
     - invariant RR: 1.0 * 1.0 = 0.0;
                               ^

  ------------------------------------
  (7/11) Binary operator "=>" is used.
  ------------------------------------
   * In group "IMPLICATION":
     - invariant true => false;
                      ^

  -------------------------------------
  (8/11) Binary operator "and" is used.
  -------------------------------------
   * In invariant "CONJUNCTION.BB":
     - invariant BB: true and false;
                          ^
   * In invariant "CONJUNCTION.SS":
     - invariant SS: empty({true} and {false});
                                  ^

  -------------------------------------
  (9/11) Binary operator "mod" is used.
  -------------------------------------
   * In invariant "MODULUS.GG":
     - invariant GG: 1 mod 1 = 0;
                       ^
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                       ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                       ^
   * In invariant "MODULUS.II":
     - invariant II: i mod i = 0;
                       ^

  -------------------------------------
  (10/11) Binary operator "or" is used.
  -------------------------------------
   * In invariant "DISJUNCTION.BB":
     - invariant BB: true or false;
                          ^
   * In invariant "DISJUNCTION.SS":
     - invariant SS: empty({true} or {false});
                                  ^

  --------------------------------------
  (11/11) Binary operator "sub" is used.
  --------------------------------------
   * In group "SUBSET":
     - invariant {true} sub {false};
                        ^
