WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 15, column 1: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 19, column 3: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 25, column 5: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 32, column 13: The type "int[1..1]" of algebraic variable "type_decl.a" allows only one value. Consider whether the type is correct, or use a constant instead of the algebraic variable.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 44, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 45, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 209, column 13: Duplicate state invariant.
WARNING: File "checks/ExprNoSpecificBinaryExprsCheckLevel1.cif": Semantic warning at line 210, column 13: Duplicate state invariant.
ERROR: CIF checks tester failed due to unsatisfied preconditions:

  ---------------------------------------------------------------
  (1/39) Binary operator "!=" is used on a boolean typed operand.
  ---------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant true != false;
                      ^

  ------------------------------------------------------------------
  (2/39) Binary operator "!=" is used on a dictionary typed operand.
  ------------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant {1: 10, 5: 20} != {1: 10, 2: 20};
                                ^

  ------------------------------------------------------------
  (3/39) Binary operator "!=" is used on a list typed operand.
  ------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant [1, 2, 4] != [1, 2, 3];
                           ^

  ------------------------------------------------------------
  (4/39) Binary operator "!=" is used on a real typed operand.
  ------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant 1.2 != 1.5;
                     ^

  -----------------------------------------------------------
  (5/39) Binary operator "!=" is used on a set typed operand.
  -----------------------------------------------------------
   * In group "UNEQUAL":
     - invariant {1, 2, 4} != {1, 2, 3};
                           ^

  --------------------------------------------------------------
  (6/39) Binary operator "!=" is used on a string typed operand.
  --------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant "abc" != "def";
                       ^

  -------------------------------------------------------------
  (7/39) Binary operator "!=" is used on a tuple typed operand.
  -------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant (1, 2, 4) != (1, 2, 3);
                           ^

  --------------------------------------------------------------------
  (8/39) Binary operator "!=" is used on an enumeration typed operand.
  --------------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant A != B;
                   ^

  ----------------------------------------------------------------
  (9/39) Binary operator "!=" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In group "UNEQUAL":
     - invariant 1 != 2;
                   ^

  ------------------------------------------------------------
  (10/39) Binary operator "*" is used on a real typed operand.
  ------------------------------------------------------------
   * In invariant "MULTIPLICATION.IR":
     - invariant IR: 1 * 1.0 = 0.0;
                       ^
   * In invariant "MULTIPLICATION.RI":
     - invariant RI: 1.0 * 1 = 0.0;
                         ^
   * In invariant "MULTIPLICATION.RR":
     - invariant RR: 1.0 * 1.0 = 0.0;
                         ^

  ----------------------------------------------------------------
  (11/39) Binary operator "*" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In invariant "MULTIPLICATION.GG":
     - invariant GG: 1 * 1 = 0;
                       ^
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                       ^
   * In invariant "MULTIPLICATION.IR":
     - invariant IR: 1 * 1.0 = 0.0;
                       ^
   * In invariant "MULTIPLICATION.RI":
     - invariant RI: 1.0 * 1 = 0.0;
                         ^

  ------------------------------------------------------------------
  (12/39) Binary operator "+" is used on a dictionary typed operand.
  ------------------------------------------------------------------
   * In group "ADDITION_DICTS":
     - invariant empty({true: false} + {false: true});
                                     ^

  ------------------------------------------------------------
  (13/39) Binary operator "+" is used on a list typed operand.
  ------------------------------------------------------------
   * In group "ADDITION_LISTS":
     - invariant empty([1] + [1]);
                           ^

  ------------------------------------------------------------
  (14/39) Binary operator "+" is used on a real typed operand.
  ------------------------------------------------------------
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.RG":
     - invariant RG: 1.0 + 1.0 > 0;
                         ^
   * In invariant "ADDITION_NUMBERS.RR":
     - invariant RR: 1.0 + 1.0 > 0;
                         ^

  --------------------------------------------------------------
  (15/39) Binary operator "+" is used on a string typed operand.
  --------------------------------------------------------------
   * In group "ADDITION_STRINGS":
     - invariant "a" + "a" = "aa";
                     ^

  ----------------------------------------------------------------
  (16/39) Binary operator "+" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In invariant "ADDITION_NUMBERS.GG":
     - invariant GG: 1 + 1 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.GI":
     - invariant GI: 1 + i > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.IG":
     - invariant IG: i + 1 > 0;
                       ^
   * In invariant "ADDITION_NUMBERS.II":
     - invariant II: i + i > 0;
                       ^

  ------------------------------------------------------------------
  (17/39) Binary operator "-" is used on a dictionary typed operand.
  ------------------------------------------------------------------
   * In invariant "SUBTRACTION_CONTAINERS.DD":
     - invariant DD: empty({1: 2} - {1: 2});
                                  ^
   * In invariant "SUBTRACTION_CONTAINERS.DLG":
     - invariant DLG: empty({1: 2} - [1]);
                                   ^
   * In invariant "SUBTRACTION_CONTAINERS.DLI":
     - invariant DLI: empty({1: 2} - [i]);
                                   ^
   * In invariant "SUBTRACTION_CONTAINERS.DS":
     - invariant DS: empty({1: 2} - {1});
                                  ^

  ------------------------------------------------------------
  (18/39) Binary operator "-" is used on a list typed operand.
  ------------------------------------------------------------
   * In invariant "SUBTRACTION_CONTAINERS.DLG":
     - invariant DLG: empty({1: 2} - [1]);
                                   ^
   * In invariant "SUBTRACTION_CONTAINERS.DLI":
     - invariant DLI: empty({1: 2} - [i]);
                                   ^

  ------------------------------------------------------------
  (19/39) Binary operator "-" is used on a real typed operand.
  ------------------------------------------------------------
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.RG":
     - invariant RG: 1.0 - 1.0 > 0;
                         ^
   * In invariant "SUBTRACTION_NUMBERS.RR":
     - invariant RR: 1.0 - 1.0 > 0;
                         ^

  -----------------------------------------------------------
  (20/39) Binary operator "-" is used on a set typed operand.
  -----------------------------------------------------------
   * In invariant "SUBTRACTION_CONTAINERS.DS":
     - invariant DS: empty({1: 2} - {1});
                                  ^
   * In invariant "SUBTRACTION_CONTAINERS.SS":
     - invariant SS: empty({true} - {false});
                                  ^

  ----------------------------------------------------------------
  (21/39) Binary operator "-" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In invariant "SUBTRACTION_NUMBERS.GG":
     - invariant GG: 1 - 1 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.GI":
     - invariant GI: 1 - i > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.IG":
     - invariant IG: i - 1 > 0;
                       ^
   * In invariant "SUBTRACTION_NUMBERS.II":
     - invariant II: i - i > 0;
                       ^

  ------------------------------------
  (22/39) Binary operator "<" is used.
  ------------------------------------
   * In the top-level scope of the specification:
     - invariant 1 < 2;
                   ^
   * In invariant "LESS_THAN.GG":
     - invariant GG: 1 < 1;
                       ^
   * In invariant "LESS_THAN.II":
     - invariant II: i < i;
                       ^
   * In invariant "LESS_THAN.IR":
     - invariant IR: 1 < 1.0;
                       ^
   * In invariant "LESS_THAN.RI":
     - invariant RI: 1.0 < 1;
                         ^
   * In invariant "LESS_THAN.RR":
     - invariant RR: 1.0 < 1.0;
                         ^
   * In group "grp":
     - invariant 1 < 2;
                   ^
   * In group "nested_grp.nested_grp":
     - invariant 1 < 2;
                   ^
   * In group "type_decl":
     - invariant a < a;
                   ^

  -------------------------------------
  (23/39) Binary operator "<=" is used.
  -------------------------------------
   * In invariant "LESS_EQUAL.GG":
     - invariant GG: 1 <= 1;
                       ^
   * In invariant "LESS_EQUAL.II":
     - invariant II: i <= i;
                       ^
   * In invariant "LESS_EQUAL.IR":
     - invariant IR: 1 <= 1.0;
                       ^
   * In invariant "LESS_EQUAL.RI":
     - invariant RI: 1.0 <= 1;
                         ^
   * In invariant "LESS_EQUAL.RR":
     - invariant RR: 1.0 <= 1.0;
                         ^

  --------------------------------------
  (24/39) Binary operator "<=>" is used.
  --------------------------------------
   * In group "BI_CONDITIONAL":
     - invariant true <=> false;
                      ^

  ---------------------------------------------------------------
  (25/39) Binary operator "=" is used on a boolean typed operand.
  ---------------------------------------------------------------
   * In group "EQUAL":
     - invariant true = true;
                      ^

  ------------------------------------------------------------------
  (26/39) Binary operator "=" is used on a dictionary typed operand.
  ------------------------------------------------------------------
   * In group "EQUAL":
     - invariant {1: 10, 2: 20} = {1: 10, 2: 20};
                                ^

  ------------------------------------------------------------
  (27/39) Binary operator "=" is used on a list typed operand.
  ------------------------------------------------------------
   * In group "EQUAL":
     - invariant [1, 2, 3] = [1, 2, 3];
                           ^

  ------------------------------------------------------------
  (28/39) Binary operator "=" is used on a real typed operand.
  ------------------------------------------------------------
   * In invariant "DIVISION.II":
     - invariant II: 1 / 1 = 0.0;
                           ^
   * In invariant "DIVISION.IR":
     - invariant IR: 1 / 1.0 = 0.0;
                             ^
   * In invariant "DIVISION.RI":
     - invariant RI: 1.0 / 1 = 0.0;
                             ^
   * In invariant "DIVISION.RR":
     - invariant RR: 1.0 / 1.0 = 0.0;
                               ^
   * In group "EQUAL":
     - invariant 1.2 = 1.2;
                     ^
   * In invariant "MULTIPLICATION.IR":
     - invariant IR: 1 * 1.0 = 0.0;
                             ^
   * In invariant "MULTIPLICATION.RI":
     - invariant RI: 1.0 * 1 = 0.0;
                             ^
   * In invariant "MULTIPLICATION.RR":
     - invariant RR: 1.0 * 1.0 = 0.0;
                               ^

  -----------------------------------------------------------
  (29/39) Binary operator "=" is used on a set typed operand.
  -----------------------------------------------------------
   * In group "EQUAL":
     - invariant {1, 2, 3} = {1, 2, 3};
                           ^

  --------------------------------------------------------------
  (30/39) Binary operator "=" is used on a string typed operand.
  --------------------------------------------------------------
   * In group "ADDITION_STRINGS":
     - invariant "a" + "a" = "aa";
                           ^
   * In group "EQUAL":
     - invariant "abc" = "abc";
                       ^

  -------------------------------------------------------------
  (31/39) Binary operator "=" is used on a tuple typed operand.
  -------------------------------------------------------------
   * In group "EQUAL":
     - invariant (1, 2, 3) = (1, 2, 3);
                           ^

  --------------------------------------------------------------------
  (32/39) Binary operator "=" is used on an enumeration typed operand.
  --------------------------------------------------------------------
   * In group "EQUAL":
     - invariant A = A;
                   ^

  ----------------------------------------------------------------
  (33/39) Binary operator "=" is used on an integer typed operand.
  ----------------------------------------------------------------
   * In group "EQUAL":
     - invariant 1 = 1;
                   ^
   * In invariant "INTEGER_DIVISION.GG":
     - invariant GG: 1 div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.GI":
     - invariant GI: 1 div i = 0;
                             ^
   * In invariant "INTEGER_DIVISION.IG":
     - invariant IG: i div 1 = 0;
                             ^
   * In invariant "INTEGER_DIVISION.II":
     - invariant II: i div i = 0;
                             ^
   * In invariant "INTEGER_DIVISION.NPn1":
     - invariant NPn1: i div -1 = 0;
                                ^
   * In invariant "INTEGER_DIVISION.NPz":
     - invariant NPz: i div 0 = 0;
                              ^
   * In invariant "MODULUS.GG":
     - invariant GG: 1 mod 1 = 0;
                             ^
   * In invariant "MODULUS.GI":
     - invariant GI: 1 mod i = 0;
                             ^
   * In invariant "MODULUS.IG":
     - invariant IG: i mod 1 = 0;
                             ^
   * In invariant "MODULUS.II":
     - invariant II: i mod i = 0;
                             ^
   * In invariant "MODULUS.NPn1":
     - invariant NPn1: i mod -1 = 0;
                                ^
   * In invariant "MODULUS.NPz":
     - invariant NPz: i mod 0 = 0;
                              ^
   * In invariant "MULTIPLICATION.GG":
     - invariant GG: 1 * 1 = 0;
                           ^
   * In invariant "MULTIPLICATION.II":
     - invariant II: i * i = 0;
                           ^

  ------------------------------------
  (34/39) Binary operator ">" is used.
  ------------------------------------
   * In invariant "ADDITION_NUMBERS.GG":
     - invariant GG: 1 + 1 > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.GI":
     - invariant GI: 1 + i > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.GR":
     - invariant GR: 1 + 1.0 > 0;
                             ^
   * In invariant "ADDITION_NUMBERS.IG":
     - invariant IG: i + 1 > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.II":
     - invariant II: i + i > 0;
                           ^
   * In invariant "ADDITION_NUMBERS.RG":
     - invariant RG: 1.0 + 1.0 > 0;
                               ^
   * In invariant "ADDITION_NUMBERS.RR":
     - invariant RR: 1.0 + 1.0 > 0;
                               ^
   * In invariant "GREATER_THAN.GG":
     - invariant GG: 1 > 1;
                       ^
   * In invariant "GREATER_THAN.II":
     - invariant II: i > i;
                       ^
   * In invariant "GREATER_THAN.IR":
     - invariant IR: 1 > 1.0;
                       ^
   * In invariant "GREATER_THAN.RI":
     - invariant RI: 1.0 > 1;
                         ^
   * In invariant "GREATER_THAN.RR":
     - invariant RR: 1.0 > 1.0;
                         ^
   * In invariant "SUBTRACTION_NUMBERS.GG":
     - invariant GG: 1 - 1 > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.GI":
     - invariant GI: 1 - i > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.GR":
     - invariant GR: 1 - 1.0 > 0;
                             ^
   * In invariant "SUBTRACTION_NUMBERS.IG":
     - invariant IG: i - 1 > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.II":
     - invariant II: i - i > 0;
                           ^
   * In invariant "SUBTRACTION_NUMBERS.RG":
     - invariant RG: 1.0 - 1.0 > 0;
                               ^
   * In invariant "SUBTRACTION_NUMBERS.RR":
     - invariant RR: 1.0 - 1.0 > 0;
                               ^

  -------------------------------------
  (35/39) Binary operator ">=" is used.
  -------------------------------------
   * In invariant "GREATER_EQUAL.GG":
     - invariant GG: 1 >= 1;
                       ^
   * In invariant "GREATER_EQUAL.II":
     - invariant II: i >= i;
                       ^
   * In invariant "GREATER_EQUAL.IR":
     - invariant IR: 1 >= 1.0;
                       ^
   * In invariant "GREATER_EQUAL.RI":
     - invariant RI: 1.0 >= 1;
                         ^
   * In invariant "GREATER_EQUAL.RR":
     - invariant RR: 1.0 >= 1.0;
                         ^

  -------------------------------------------------------------
  (36/39) Binary operator "and" is used on a set typed operand.
  -------------------------------------------------------------
   * In invariant "CONJUNCTION.SS":
     - invariant SS: empty({true} and {false});
                                  ^

  --------------------------------------
  (37/39) Binary operator "div" is used.
  --------------------------------------
   * In invariant "INTEGER_DIVISION.GG":
     - invariant GG: 1 div 1 = 0;
                       ^
   * In invariant "INTEGER_DIVISION.GI":
     - invariant GI: 1 div i = 0;
                       ^
   * In invariant "INTEGER_DIVISION.IG":
     - invariant IG: i div 1 = 0;
                       ^
   * In invariant "INTEGER_DIVISION.II":
     - invariant II: i div i = 0;
                       ^
   * In invariant "INTEGER_DIVISION.NPn1":
     - invariant NPn1: i div -1 = 0;
                         ^
   * In invariant "INTEGER_DIVISION.NPz":
     - invariant NPz: i div 0 = 0;
                        ^

  -------------------------------------
  (38/39) Binary operator "in" is used.
  -------------------------------------
   * In group "ELEMENT_OF_DICTS":
     - invariant 1 in {1: 2};
                   ^
   * In group "ELEMENT_OF_LISTS":
     - invariant 1 in [1];
                   ^
   * In group "ELEMENT_OF_SETS":
     - invariant 1 in {1};
                   ^

  ------------------------------------------------------------
  (39/39) Binary operator "or" is used on a set typed operand.
  ------------------------------------------------------------
   * In invariant "DISJUNCTION.SS":
     - invariant SS: empty({true} or {false});
                                  ^
