//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:cif" import cifcontrollercheck, cif2cif;

// Configuration.
string test_path = "controllercheck";
string test_pattern = "*.cif";
list string default_options = ["--devmode=1", "--output-mode=debug"];

map(string:list string) test_options = {
    "controllercheck/common/no_checks_enabled.cif": [
        "--bounded-response-check=false",
        "--finite-response-check=false",
        "--confluence-check=false",
        "--non-blocking-under-control-check=false",
    ],
};
set string test_skip = {};

// Initialize counts.
int run_count = 0;
int run_successes = 0;
int run_failures = 0;
int run_skipped = 0;

int check_count = 0;
int check_successes = 0;
int check_failures = 0;

// Find tests.
list string tests = find(test_path, test_pattern);
for i in range(tests):: tests[i] = replace(pathjoin(test_path, tests[i]), "\\", "/");
for i in reverse(range(tests)):
    if contains(tests[i], ".out.cif") or endswith(tests[i], ".out.real.cif"):
        tests = delidx(tests, i);
        continue;
    end
    if contains(test_skip, tests[i]):
        tests = delidx(tests, i);
        run_count = run_count + 1;
        run_skipped = run_skipped + 1;
    end
end

// Test all tests.
for test in tests:
    // Test with certain checks enabled/disabled:
    // - Root folder: all checks enabled, each individual check enabled.
    // - Sub-folders: all checks enabled, only that specific check enabled.
    //
    // Get the enablements, with per enablement entry: bounded response, confluence, finite response, non-blocking
    // under control:
    list tuple(bool, bool, bool, bool) checks_enabled_variants;
    if contains(replace(test, "\\", "/"), "/bounded_response/"):
        checks_enabled_variants = [(true, true, true, true), (true, false, false, false)];
    elif contains(replace(test, "\\", "/"), "/confluence/"):
        checks_enabled_variants = [(true, true, true, true), (false, true, false, false)];
    elif contains(replace(test, "\\", "/"), "/finite_response/"):
        checks_enabled_variants = [(true, true, true, true), (false, false, true, false)];
    elif contains(replace(test, "\\", "/"), "/non_blocking_under_control/"):
        checks_enabled_variants = [(true, true, true, true), (false, false, false, false)];
    else
        checks_enabled_variants = [(true, true, true, true), (true, false, false, false), (false, true, false, false),
                                   (false, false, true, false), (false, false, false, true)];
    end

    // Test per enablement combination:
    for bounded_response_enabled, confluence_enabled, finite_response_enabled, non_blocking_under_control_enabled in checks_enabled_variants:
        // ====
        // Run.
        // ====

        // Get test specific options.
        list string options = default_options;
        if not bounded_response_enabled::            options = options + ["--bounded-response-check=false"];
        if not confluence_enabled::                  options = options + ["--confluence-check=false"];
        if not finite_response_enabled::             options = options + ["--finite-response-check=false"];
        if not non_blocking_under_control_enabled::  options = options + ["--non-blocking-under-control-check=false"];
        list string extra_options;
        if contains(test_options, test):: extra_options = test_options[test];
        options = options + extra_options;

        // Determine path postfix.
        string postfix = "";
        if bounded_response_enabled:            postfix = postfix + "B"; else postfix = postfix + "x"; end
        if confluence_enabled:                  postfix = postfix + "C"; else postfix = postfix + "x"; end
        if finite_response_enabled:             postfix = postfix + "F"; else postfix = postfix + "x"; end
        if non_blocking_under_control_enabled:  postfix = postfix + "N"; else postfix = postfix + "x"; end

        // Print what we are testing.
        outln("Testing \"%s\" (run) using checks \"%s\" and options \"%s\"...", test, postfix, join(extra_options, " "));

        // Get paths.
        string test1_out_exp  = chfileext(test, "cif", postfix + ".run.out");
        string test1_err_exp  = chfileext(test, "cif", postfix + ".run.err");
        string test1_out_real = chfileext(test, "cif", postfix + ".run.out.real");
        string test1_err_real = chfileext(test, "cif", postfix + ".run.err.real");
        string rslt1_exp      = chfileext(test, "cif", postfix + ".out.cif");
        string rslt1_real     = chfileext(test, "cif", postfix + ".out.cif.real");

        // Execute.
        list string options1 = options + ["-o", rslt1_real];
        int exit_code1 = cifcontrollercheck([test] + options1, stdout=test1_out_real, stderr=test1_err_real, ignoreNonZeroExitCode=true);

        // Compare output.
        bool stderr1_diff = diff(test1_err_exp, test1_err_real, missingAsEmpty=true, warnOnDiff=true);
        bool stdout1_diff = diff(test1_out_exp, test1_out_real, missingAsEmpty=true, warnOnDiff=true);
        bool rslt1_diff   = diff(rslt1_exp, rslt1_real, missingAsEmpty=true, warnOnDiff=true);
        if not stderr1_diff:: rmfile(test1_err_real);
        if not stdout1_diff:: rmfile(test1_out_real);
        // Don't remove 'rslt1_real' here, as we need to check it still.

        // Update counts.
        int run_diff_count = 0;
        if stderr1_diff:: run_diff_count = run_diff_count + 1;
        if stdout1_diff:: run_diff_count = run_diff_count + 1;
        if rslt1_diff::   run_diff_count = run_diff_count + 1;

        run_count = run_count + 1;
        if run_diff_count == 0:: run_successes = run_successes + 1;
        if run_diff_count > 0:: run_failures = run_failures + 1;

        // =========================
        // Check produced CIF model.
        // =========================

        // Get paths.
        string test2          = rslt1_real;
        string file2_out_real = chfileext(test, "cif", postfix + ".check.out.real.cif");

        // Do check, if applicable.
        if exit_code1 == 0 or isfile(rslt1_exp) or isfile(rslt1_real):
            // Print what we are testing.
            outln("Testing \"%s\" (check) for checks \"%s\"...", test, postfix);

            // Execute.
            list string options2 = ["--devmode=1", "--output-mode=error", "-o", file2_out_real];
            int exit_code2 = cif2cif([test2] + options2, ignoreNonZeroExitCode=true);

            // Check output.
            bool exit_code2_ok = (exit_code2 == 0);
            bool file2_written = isfile(file2_out_real) and filesize(file2_out_real) > 0;
            bool check_ok = exit_code2_ok and file2_written;

            // Cleanup.
            if check_ok and exists(file2_out_real):: rmfile(file2_out_real);

            // Update counts.
            check_count = check_count + 1;
            if     check_ok:: check_successes = check_successes + 1;
            if not check_ok:: check_failures  = check_failures  + 1;
        end

        // ========
        // Cleanup.
        // ========

        if not rslt1_diff:: if exists(rslt1_real):: rmfile(rslt1_real);
    end
end

// Get result messages.
string run_rslt;
string check_rslt;
if run_failures   == 0: run_rslt   = "SUCCESS"; else run_rslt   = "FAILURE"; end
if check_failures == 0: check_rslt = "SUCCESS"; else check_rslt = "FAILURE"; end

string run_msg   = fmt("Test %s (%s, run):   %d tests, %d successes, %d failures, %d skipped.",
                       run_rslt, test_path, run_count, run_successes, run_failures, run_skipped);
string check_msg = fmt("Test %s (%s, check): %d tests, %d successes, %d failures.",
                       check_rslt, test_path, check_count, check_successes, check_failures);

// Output result messages.
if run_failures == 0:
    outln(run_msg);
else
    errln(run_msg);
end

if check_failures == 0:
    outln(check_msg);
else
    errln(check_msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit run_failures + check_failures;
