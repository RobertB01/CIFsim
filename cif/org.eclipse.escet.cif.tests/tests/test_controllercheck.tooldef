//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

from "lib:cif" import cifcontrollercheck;

// Configuration.
string test_path = "controllercheck";
string test_pattern = "*.cif";
list string default_options = ["--devmode=1", "--output-mode=debug"];

map(string:list string) test_options = {
    "controllercheck/no_checks_enabled.cif": [
        "--bounded-response-check=false",
        "--finite-response-check=false",
        "--confluence-check=false",
    ],
};
set string test_skip = {};

// Initialize counts.
int count = 0;
int successes = 0;
int failures = 0;
int skipped = 0;

// Find tests.
list string tests = find(test_path, test_pattern);
for i in range(tests):: tests[i] = replace(pathjoin(test_path, tests[i]), "\\", "/");
for i in reverse(range(tests)):
    if contains(tests[i], ".out.cif") or endswith(tests[i], ".out.real.cif"):
        tests = delidx(tests, i);
        continue;
    end
    if contains(test_skip, tests[i]):
        tests = delidx(tests, i);
        count = count + 1;
        skipped = skipped + 1;
    end
end

// Test all tests.
for test in tests:
    // Test with certain checks enabled/disabled:
    // - Root folder: all checks enabled, each individual check enabled.
    // - Sub-folders: all checks enabled, only that specific check enabled.
    list tuple(bool, bool) checks_enabled_variants; // Entries contain check enablements: confluence, finite response.
    if contains(replace(test, "\\", "/"), "/confluence/"):
        checks_enabled_variants = [(true, true), (true, false)];
    elif contains(replace(test, "\\", "/"), "/finite_response/"):
        checks_enabled_variants = [(true, true), (false, true)];
    elif contains(replace(test, "\\", "/"), "/mdd/"):
        checks_enabled_variants = [(true, true), (true, false), (false, true)];
    else
        checks_enabled_variants = [(true, true), (true, false), (false, true)];
    end

    // Test per enablement combination:
    for confluence_enabled, finite_response_enabled in checks_enabled_variants:
        // Get test specific options.
        list string options = default_options;
        options = options + ["--bounded-response-check=false"];
        if not confluence_enabled::       options = options + ["--confluence-check=false"];
        if not finite_response_enabled::  options = options + ["--finite-response-check=false"];
        list string extra_options;
        if contains(test_options, test):: extra_options = test_options[test];
        options = options + extra_options;

        // Determine path postfix.
        string postfix = "";
        if confluence_enabled:      postfix = postfix + "C"; else postfix = postfix + "x"; end
        if finite_response_enabled: postfix = postfix + "F"; else postfix = postfix + "x"; end

        // Print what we are testing.
        outln("Testing \"%s\" using checks \"%s\" and options \"%s\"...", test, postfix, join(extra_options, " "));

        // Get paths.
        string test_out_exp  = chfileext(test, oldext="cif", newext=postfix+".out");
        string test_err_exp  = chfileext(test, oldext="cif", newext=postfix+".err");
        string test_out_real = chfileext(test, oldext="cif", newext=postfix+".out.real");
        string test_err_real = chfileext(test, oldext="cif", newext=postfix+".err.real");

        // Execute.
        cifcontrollercheck([test] + options, stdout=test_out_real, stderr=test_err_real, ignoreNonZeroExitCode=true);

        // Compare output.
        bool stdout_diff = diff(test_out_exp, test_out_real, missingAsEmpty=true, warnOnDiff=true);
        bool stderr_diff = diff(test_err_exp, test_err_real, missingAsEmpty=true, warnOnDiff=true);
        if not stdout_diff:: rmfile(test_out_real);
        if not stderr_diff:: rmfile(test_err_real);

        // Update counts.
        int diff_count = 0;
        if stdout_diff:: diff_count = diff_count + 1;
        if stderr_diff:: diff_count = diff_count + 1;

        count = count + 1;
        if diff_count == 0:: successes = successes + 1;
        if diff_count > 0:: failures = failures + 1;
    end
end

// Get result message.
string rslt;
if failures == 0: rslt = "SUCCESS"; else rslt = "FAILURE"; end

string msg = fmt("Test %s (%s): %d tests, %d successes, %d failures, %d skipped.",
                 rslt, test_path, count, successes, failures, skipped);

// Output result message.
if failures == 0:
    outln(msg);
else
    errln(msg);
end

// Return number of failures as exit code. No failures means zero exit code,
// any failures means non-zero exit code.
exit failures;
