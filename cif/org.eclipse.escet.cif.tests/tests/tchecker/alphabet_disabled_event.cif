//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2020 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

group g:
  group def Q1(Q2 q):
    automaton p1:
      alphabet    e1,    e1,    e2,    e2,    e3,
               p2.e1, p2.e1, p2.e2, p2.e2, p2.e3,
                q.e1,  q.e1,  q.e2,  q.e2,  q.e3,
                r.e1,  r.e1,  r.e2,  r.e2,  r.e3;
      event e1, e2, e3;
      location l:
        initial;
        edge e1, e2, e3,
             p2.e1, p2.e2, p2.e3,
              q.e1,  q.e2,  q.e3,
              r.e1,  r.e2,  r.e3;
    end

    automaton p2:
      event e1, e2, e3, e4;
      location l:
        initial;
        edge e1, e2, e3, e4;
    end

    automaton def R():
      event e1, e2, e3, e4;
      location l:
        initial;
        edge e1, e2, e3, e4;
    end

    r: R();
  end

  q1: Q1(q2);

  q2: Q2();

  automaton def Q2():
    event e1, e2, e3, e4;
    location l:
      initial;
      edge e1, e2, e3;
    invariant e4 needs true;
  end

  ///

  group def P():
    event e;
  end

  plant def Q(P p1, p2):
    // May both be false positives, depending on instantiations.
    alphabet p1.e, p2.e;
    location:
      initial;
      edge p1.e;
  end
end

group h:
  event int e;

  automaton snd:
    alphabet e;
    location:
      initial;
      edge e!5;
  end

  automaton rcv:
    alphabet e;
    location:
      initial;
      edge e?;
  end
end
