//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

automaton p:
  alphabet ^p.e1, .p.e2, p.e3, ^p.$event;

  type t = int;
  type $type = int;

  event ^p.t e1;
  event .p.t e2;
  event  p.t e3;
  event $event;

  disc ^p.t x1;
  disc .p.t x2;
  disc  p.t x3;
  disc ^p.type $disc;

  location l1:
    initial;
    edge ^p.e1 when ^p.x1 = 1 do x1 := 1;
    edge .p.e2 when .p.x2 = 2 do x2 := 2;
    edge  p.e3 when  p.x3 = 3 do x3 := 3;
    edge ^p.event when ^p.disc = 4;
end

group q:
  automaton def D(alg bool x):
    alg bool y = x;
    location:
      initial;
  end
  group def E(q.D d):
    alg bool x = d.y;
  end

  alg bool x = true;

  d1 : ^q.D(^q.x);
  d2 : .q.D(.q.x);
  d3 :  q.D( q.x);
  $automaton : D(x);

  e1 : ^q.E(^q.d1);
  e2 : .q.E(.q.d2);
  e3 :  q.E( q.d3);
  $group : E(^q.automaton);
end

group r:
  alg bool f1 = ^r.f();
  alg bool f2 = .r.f();
  alg bool f3 =  r.f();

  func bool f():
    return true;
  end
end
