Loading CIF specification "controllercheck/bounded_response/bounded_supervised_counter.cif"...
Preparing for BDD-based checks...

    CIF variables and location pointers:
      Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
      -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
      1      discrete variable  int[0..5]  p.x   0      3 * 2     6 * 2       8 * 2       75%
      -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
      Total                                      1      6         12          16          75%

    Skipping variable ordering: only one variable present.


    Restricting system behavior using state/event exclusion plant invariants.

    Edge (event: c_c) (guard: p.x = 2) (assignments: p.x := p.x - 1): guard: p.x = 2 -> false [plant: false].

    System:
        Edge: (event: u_a) (guard: p.x = 0) (assignments: p.x := p.x + 1)
        Edge: (event: u_b) (guard: p.x = 1) (assignments: p.x := p.x + 1)
        Edge: (event: u_c) (guard: p.x = 2) (assignments: p.x := p.x + 1)
        Edge: (event: u_d) (guard: false) (assignments: p.x := p.x + 1)
        Edge: (event: c_a) (guard: p.x = 4) (assignments: p.x := p.x - 1)
        Edge: (event: c_b) (guard: p.x = 3) (assignments: p.x := p.x - 1)
        Edge: (event: c_c) (guard: p.x = 2 -> false) (assignments: p.x := p.x - 1)
        Edge: (event: c_d) (guard: p.x = 1) (assignments: p.x := p.x - 1)

Preparing for MDD-based checks...
    Analyzing automaton "p"...
        Initializing the automaton data for event "c_a"...
        Initializing the automaton data for event "c_b"...
        Initializing the automaton data for event "c_c"...
        Initializing the automaton data for event "c_d"...
        Processing edges from the location of automaton "p"...
        Updating global guards and updates for event "c_a"...
        Updating global guards and updates for event "c_b"...
        Updating global guards and updates for event "c_c"...
        Updating global guards and updates for event "c_d"...
    Analyzing automaton "s"...
    Analyzing automaton "PlantStateEvtExcls"...
        Initializing the automaton data for event "c_c"...
        Processing edges from the location of automaton "PlantStateEvtExcls"...
        Updating global guards and updates for event "c_c"...

Checking for bounded response...
    Computing reachable states...
    Reachable states: p.x = 0 [initial states predicate]
    Forward reachability: iteration 1.
    Reachable states: p.x = 0 -> p.x = 0 or p.x = 1 [forward reach with edge: (event: u_a) (guard: p.x = 0) (assignments: p.x := p.x + 1)]
    Reachable states: p.x = 0 or p.x = 1 -> p.x != 4 and (p.x != 5 and p.x != 3) [forward reach with edge: (event: u_b) (guard: p.x = 1) (assignments: p.x := p.x + 1)]
    Reachable states: p.x != 4 and (p.x != 5 and p.x != 3) -> 0 <= p.x and p.x <= 3 [forward reach with edge: (event: u_c) (guard: p.x = 2) (assignments: p.x := p.x + 1)]
    Forward reachability: iteration 2.
    Reachable states: 0 <= p.x and p.x <= 3 [fixed point].

    Computing bound for uncontrollable events...
    Bounded response check round 1 (states before round: 0 <= p.x and p.x <= 3).
    Bounded response check round 2 (states before round: p.x = 2 or (p.x = 1 or p.x = 3)).
    Bounded response check round 3 (states before round: p.x = 2 or p.x = 3).
    Bounded response check round 4 (states before round: p.x = 3).

    Computing bound for controllable events...
    Bounded response check round 1 (states before round: 0 <= p.x and p.x <= 3).
    Bounded response check round 2 (states before round: p.x = 0 or p.x = 2).

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled...
    Condition under which no controllable event is enabled: p.x = 0 or (p.x = 2 or p.x = 5)

    Computing the controllable-complete path states...
    Controllable-complete path states: false [controllable-complete path end states predicate]
    Backward reachability: iteration 1.
    Controllable-complete path states: false

    Computing the bad states...
    Bad states: true [not controllable-complete path states predicate]
    Backward reachability: iteration 1.
    Bad states: true

    Computing the result of the non-blocking under control check...
    Initial states: p.x = 0
    Bad initial states: p.x = 0

Checking for finite response...

    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton p:
            (c_a), which is not controllable unconnectable.
            (c_b), which is not controllable unconnectable.
            (c_d), which is not controllable unconnectable.

Checking for confluence...

    Mutual exclusive event pairs:
        (c_a, c_b), (c_a, c_c), (c_a, c_d), (c_b, c_c), (c_b, c_d), (c_c, c_d)

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 3 transitions is possible for uncontrollable events.
        - A sequence of at most 1 transition is possible for controllable events.

    [ERROR] The specification is NOT non-blocking under control.

    [ERROR] The specification may NOT have finite response:

        At least one controllable-event loop was found.
        The following events might still occur in a controllable-event loop:
            - c_a
            - c_b
            - c_d

    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/bounded_response/bounded_supervised_counter.BCFN.out.cif.real".
