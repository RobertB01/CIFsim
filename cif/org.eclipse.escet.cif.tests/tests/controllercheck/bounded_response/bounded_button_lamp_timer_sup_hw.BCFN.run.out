Loading CIF specification "controllercheck/bounded_response/bounded_button_lamp_timer_sup_hw.cif"...
Preparing for BDD-based checks...
    CIF variables and location pointers:
        Nr     Kind               Type  Name          Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----  ------------  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a   Button        0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer   n/a   Lamp          1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer   n/a   Timer         2      1 * 2     2 * 2       2 * 2       100%
        4      location pointer   n/a   Cycle         3      3 * 2     5 * 2       8 * 2       ~63%
        5      location pointer   n/a   ButtonHW      4      1 * 2     2 * 2       2 * 2       100%
        6      input variable     bool  ButtonHW.bit  5      1 * 2     2 * 2       2 * 2       100%
        7      location pointer   n/a   LampHW        6      1 * 2     2 * 2       2 * 2       100%
        8      discrete variable  bool  LampHW.bit    7      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ----  ------------  -----  --------  ----------  ----------  -----------
        Total                                         8      20        38          44          ~86%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 8

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 13

                    Total span:   19 (total)   2.38 (avg/edge) / WES:   0.578125 (total)   0.072266 (avg/edge) [before]
                    Total span:   15 (total)   1.88 (avg/edge) / WES:   0.460938 (total)   0.057617 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 13

                    Total span:   19 (total)   2.38 (avg/edge) / WES:   0.578125 (total)   0.072266 (avg/edge) [before]
                    Total span:   19 (total)   2.38 (avg/edge) / WES:   0.488281 (total)   0.061035 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 13

                        Total span:   19 (total)   2.38 (avg/edge) / WES:   0.578125 (total)   0.072266 (avg/edge) [before]
                        Total span:   15 (total)   1.88 (avg/edge) / WES:   0.460938 (total)   0.057617 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   15 (total)   1.88 (avg/edge) / WES:   0.460938 (total)   0.057617 (avg/edge) [before]
                        Total span:   15 (total)   1.88 (avg/edge) / WES:   0.460938 (total)   0.057617 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 13

                        Total span:   19 (total)   2.38 (avg/edge) / WES:   0.578125 (total)   0.072266 (avg/edge) [before]
                        Total span:   19 (total)   2.38 (avg/edge) / WES:   0.488281 (total)   0.061035 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   19 (total)   2.38 (avg/edge) / WES:   0.488281 (total)   0.061035 (avg/edge) [before]
                        Total span:   19 (total)   2.38 (avg/edge) / WES:   0.488281 (total)   0.061035 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 10
                Maximum number of iterations: 30

                Total span:   27 (total)   2.70 (avg/edge) / WES:   0.678125 (total)   0.067813 (avg/edge) [before]
                Total span:   27 (total)   2.70 (avg/edge) / WES:   0.678125 (total)   0.067813 (avg/edge) [iteration 1]
                Total span:   27 (total)   2.70 (avg/edge) / WES:   0.678125 (total)   0.067813 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 10
                Window length: 4

                Total span:   27 (total)   2.70 (avg/edge) / WES:   0.678125 (total)   0.067813 (avg/edge) [before]
                Total span:   27 (total)   2.70 (avg/edge) / WES:   0.678125 (total)   0.067813 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type  Name          Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----  ------------  -----  --------  ----------  ----------  -----------
        1      discrete variable  bool  LampHW.bit    0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer   n/a   LampHW        1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer   n/a   Lamp          2      1 * 2     2 * 2       2 * 2       100%
        4      location pointer   n/a   Timer         3      1 * 2     2 * 2       2 * 2       100%
        5      location pointer   n/a   Cycle         4      3 * 2     5 * 2       8 * 2       ~63%
        6      input variable     bool  ButtonHW.bit  5      1 * 2     2 * 2       2 * 2       100%
        7      location pointer   n/a   ButtonHW      6      1 * 2     2 * 2       2 * 2       100%
        8      location pointer   n/a   Button        7      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ----  ------------  -----  --------  ----------  ----------  -----------
        Total                                         8      20        38          44          ~86%


    Restricting system behavior using state/event exclusion plant invariants.

Preparing for MDD-based checks...
    Analyzing automaton "Button"...
    Analyzing automaton "Lamp"...
        Initializing the automaton data for event "Lamp.c_on"...
        Initializing the automaton data for event "Lamp.c_off"...
        Processing edges from location "Off" of automaton "Lamp"...
        Processing edges from location "On" of automaton "Lamp"...
        Updating global guards and updates for event "Lamp.c_on"...
        Updating global guards and updates for event "Lamp.c_off"...
    Analyzing automaton "Timer"...
        Initializing the automaton data for event "Timer.c_start"...
        Processing edges from location "Idle" of automaton "Timer"...
        Processing edges from location "Running" of automaton "Timer"...
        Updating global guards and updates for event "Timer.c_start"...
    Analyzing automaton "Cycle"...
        Initializing the automaton data for event "Lamp.c_on"...
        Initializing the automaton data for event "Timer.c_start"...
        Initializing the automaton data for event "Lamp.c_off"...
        Processing edges from location "WaitForButtonPush" of automaton "Cycle"...
        Processing edges from location "TurnLampOn" of automaton "Cycle"...
        Processing edges from location "StartTimer" of automaton "Cycle"...
        Processing edges from location "WaitForTimeout" of automaton "Cycle"...
        Processing edges from location "TurnLampOff" of automaton "Cycle"...
        Updating global guards and updates for event "Lamp.c_on"...
        Updating global guards and updates for event "Timer.c_start"...
        Updating global guards and updates for event "Lamp.c_off"...
    Analyzing automaton "sup"...
        Initializing the automaton data for event "Lamp.c_on"...
        Initializing the automaton data for event "Lamp.c_off"...
        Initializing the automaton data for event "Timer.c_start"...
        Processing edges from the location of automaton "sup"...
        Updating global guards and updates for event "Lamp.c_on"...
        Updating global guards and updates for event "Lamp.c_off"...
        Updating global guards and updates for event "Timer.c_start"...
    Analyzing automaton "ButtonHW"...
    Analyzing automaton "LampHW"...
        Initializing the automaton data for event "Lamp.c_on"...
        Initializing the automaton data for event "Lamp.c_off"...
        Processing edges from location "Off" of automaton "LampHW"...
        Processing edges from location "On" of automaton "LampHW"...
        Updating global guards and updates for event "Lamp.c_on"...
        Updating global guards and updates for event "Lamp.c_off"...

Checking for bounded response...
    Computing reachable states...
    Reachable states: not LampHW.bit and (LampHW.Off and Lamp.Off) and (Timer.Idle and Cycle.WaitForButtonPush and (ButtonHW.Released and Button.Released)) [initial states predicate]
    Reachable states: <bdd 17n 8p> [fixed point].

    Computing bound for uncontrollable events...
    Bounded response check round 1 (states before round: <bdd 17n 8p>).
    Bounded response check round 2 (states before round: <bdd 24n 9p>).
    Bounded response check round 3 (states before round: <bdd 12n 2p>).

    Computing bound for controllable events...
    Bounded response check round 1 (states before round: <bdd 17n 8p>).
    Bounded response check round 2 (states before round: <bdd 16n 6p>).
    Bounded response check round 3 (states before round: LampHW.bit and (LampHW.On and Lamp.On) and (Timer.Running and Cycle.WaitForTimeout and (ButtonHW.Released and Button.Released)) or LampHW.bit and (LampHW.On and Lamp.On) and (Timer.Running and Cycle.WaitForTimeout and (ButtonHW.Pushed and Button.Pushed))).

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled...
    Condition under which no controllable event is enabled: <bdd 17n 21p>

    Computing the controllable-complete path states...
    Controllable-complete path states: LampHW.Off and (Lamp.Off and Timer.Idle) and (Cycle.WaitForButtonPush and (ButtonHW.Released and Button.Released)) [controllable-complete path end states predicate]
    Controllable-complete path states: <bdd 15n 8p> [fixed point].
    Controllable-complete path states: <bdd 15n 8p>

    Computing the bad states...
    Bad states: <bdd 15n 19p> [not controllable-complete path states predicate]
    Bad states: <bdd 15n 19p>

    Computing the result of the non-blocking under control check...
    Initial states: not LampHW.bit and (LampHW.Off and Lamp.Off) and (Timer.Idle and Cycle.WaitForButtonPush and (ButtonHW.Released and Button.Released))
    Bad initial states: false

Checking for finite response...
    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton Lamp:
            (Lamp.c_on Lamp.c_off), which is not controllable unconnectable.

Checking for confluence...
    Mutual exclusive event pairs:
        (Lamp.c_off, Lamp.c_on), (Lamp.c_off, Timer.c_start), (Lamp.c_on, Timer.c_start)

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 2 transitions is possible for uncontrollable events.
        - A sequence of at most 2 transitions is possible for controllable events.

    [OK] The specification is non-blocking under control.
    [OK] The specification has finite response.
    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/bounded_response/bounded_button_lamp_timer_sup_hw.BCFN.out.cif.real".
