Loading CIF specification "controllercheck/bounded_response/bounded_even_odd_any.cif"...
Preparing for BDD-based checks...

    CIF variables and location pointers:
        Nr     Kind               Type        Name       Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----------  ---------  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..25]  p.counter  0      5 * 2     26 * 2      32 * 2      ~81%
        -----  -----------------  ----------  ---------  -----  --------  ----------  ----------  -----------
        Total                                            1      10        52          64          ~81%

    Skipping variable ordering: only one variable present.


    Restricting system behavior using state/event exclusion plant invariants.

Preparing for MDD-based checks...
    Analyzing automaton "p"...
        Initializing the automaton data for event "c_inc_even"...
        Initializing the automaton data for event "c_dec_even"...
        Processing edges from the location of automaton "p"...
        Updating global guards and updates for event "c_inc_even"...
        Updating global guards and updates for event "c_dec_even"...

Checking for bounded response...
    Computing reachable states...
    Reachable states: true [initial states predicate]
    Forward reachability: iteration 1.

    Computing bound for uncontrollable events...
    Bounded response check round 1 (states before round: true).
    Bounded response check round 2 (states before round: p.counter = 0 or (p.counter = 2 or p.counter = 4) or (p.counter = 6 or (p.counter = 8 or p.counter = 10)) or (p.counter = 12 or (p.counter = 14 or p.counter = 16) or (p.counter = 18 or p.counter = 20 or (p.counter = 22 or p.counter = 24)))).

    Computing bound for controllable events...
    Bounded response check round 1 (states before round: true).
    Bounded response check round 2 (states before round: p.counter = 1 or (p.counter = 3 or p.counter = 5) or (p.counter = 7 or (p.counter = 9 or p.counter = 11)) or (p.counter = 13 or (p.counter = 15 or p.counter = 17) or (p.counter = 19 or p.counter = 21 or (p.counter = 23 or p.counter = 25)))).

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled...
    Condition under which no controllable event is enabled: p.counter = 1 or (p.counter = 3 or p.counter = 5) or (p.counter = 7 or (p.counter = 9 or p.counter = 11)) or (p.counter = 13 or (p.counter = 15 or p.counter = 17) or (p.counter = 19 or p.counter = 21 or (p.counter = 23 or p.counter = 25)))

    Computing the controllable-complete path states...
    Controllable-complete path states: p.counter = 1 or (p.counter = 3 or p.counter = 5) or (p.counter = 7 or (p.counter = 9 or p.counter = 11)) or (p.counter = 13 or (p.counter = 15 or p.counter = 17) or (p.counter = 19 or p.counter = 21 or (p.counter = 23 or p.counter = 25))) [controllable-complete path end states predicate]
    Backward reachability: iteration 1.
    Controllable-complete path states: p.counter = 1 or (p.counter = 3 or p.counter = 5) or (p.counter = 7 or (p.counter = 9 or p.counter = 11)) or (p.counter = 13 or (p.counter = 15 or p.counter = 17) or (p.counter = 19 or p.counter = 21 or (p.counter = 23 or p.counter = 25))) -> true [backward reach with edge: (event: c_inc_even) (guard: p.counter = 0 or (p.counter = 2 or p.counter = 4) or (p.counter = 6 or (p.counter = 8 or p.counter = 10)) or (p.counter = 12 or (p.counter = 14 or p.counter = 16) or (p.counter = 18 or p.counter = 20 or (p.counter = 22 or p.counter = 24)))) (assignments: p.counter := p.counter + 1)]
    Controllable-complete path states: true -> true [backward reach with edge: (event: c_dec_even) (guard: p.counter = 16 or (p.counter = 8 or p.counter = 24) or (p.counter = 4 or (p.counter = 12 or p.counter = 20)) or (p.counter = 2 or (p.counter = 6 or p.counter = 10) or (p.counter = 14 or (p.counter = 18 or p.counter = 22)))) (assignments: p.counter := p.counter - 1)]
    Backward reachability: iteration 2.
    Controllable-complete path states: true [fixed point].
    Controllable-complete path states: true

    Computing the bad states...
    Bad states: false [not controllable-complete path states predicate]
    Backward reachability: iteration 1.
    Bad states: false

    Computing the result of the non-blocking under control check...
    Initial states: true
    Bad initial states: false

Checking for finite response...

    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton p:
            (c_inc_even), which is not controllable unconnectable.
            (c_dec_even), which is not controllable unconnectable.

Checking for confluence...

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 1 transition is possible for uncontrollable events.
        - A sequence of at most 1 transition is possible for controllable events.

    [OK] The specification is non-blocking under control.

    [ERROR] The specification may NOT have finite response:

        At least one controllable-event loop was found.
        The following events might still occur in a controllable-event loop:
            - c_dec_even
            - c_inc_even

    [ERROR] The specification may NOT have confluence:

        Confluence of the following event pair could not be decided:
            (c_dec_even, c_inc_even)

The model with the check results has been written to "controllercheck/bounded_response/bounded_even_odd_any.BCFN.out.cif.real".
