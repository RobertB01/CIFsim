Loading CIF specification "controllercheck/bounded_response/bounded_state_evt_excl_inv.cif"...
Preparing for BDD-based checks...
    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..7]  p.xu  0      3 * 2     8 * 2       8 * 2       100%
        2      discrete variable  int[0..7]  p.xc  1      3 * 2     8 * 2       8 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      12        32          32          100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 6

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Maximum number of iterations: 10

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Window length: 2

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.125000 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      discrete variable  int[0..7]  p.xc  0      3 * 2     8 * 2       8 * 2       100%
        2      discrete variable  int[0..7]  p.xu  1      3 * 2     8 * 2       8 * 2       100%
        -----  -----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                      2      12        32          32          100%


    Restricting system behavior using state/event exclusion plant invariants.

    Edge (event: u) (guard: true -> p.xu != 7) (assignments: p.xu := p.xu + 1): guard: p.xu != 7 -> 0 <= p.xu and p.xu <= 3 [plant: 0 <= p.xu and p.xu <= 3].
    Edge (event: c) (guard: true -> p.xc != 7) (assignments: p.xc := p.xc + 1): guard: p.xc != 7 -> p.xc != 6 and (0 <= p.xc and p.xc <= 4 or p.xc = 6) [plant: p.xc != 6 and (0 <= p.xc and p.xc <= 4 or p.xc = 6)].

    System:
        Edge: (event: u) (guard: true -> 0 <= p.xu and p.xu <= 3) (assignments: p.xu := p.xu + 1)
        Edge: (event: c) (guard: true -> p.xc != 6 and (0 <= p.xc and p.xc <= 4 or p.xc = 6)) (assignments: p.xc := p.xc + 1)

Checking for bounded response...
    Computing reachable states...
    Reachable states: p.xc = 0 and p.xu = 0 [initial states predicate]
    Reachable states: (p.xc = 2 or p.xc = 3 or (p.xc = 6 or (p.xc = 7 or p.xu != 6))) and ((p.xc = 2 or (p.xc = 3 or p.xc = 6) or (p.xc = 7 or (0 <= p.xu and p.xu <= 4 or p.xu = 6))) and (not(p.xc = 2 or p.xc = 3) or p.xu != 6)) and ((not(p.xc = 2 or p.xc = 3) or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and (0 <= p.xc and p.xc <= 5)) [fixed point].

    Computing bound for uncontrollable events...
    Bounded response check round 1 (states before round: (p.xc = 2 or p.xc = 3 or (p.xc = 6 or (p.xc = 7 or p.xu != 6))) and ((p.xc = 2 or (p.xc = 3 or p.xc = 6) or (p.xc = 7 or (0 <= p.xu and p.xu <= 4 or p.xu = 6))) and (not(p.xc = 2 or p.xc = 3) or p.xu != 6)) and ((not(p.xc = 2 or p.xc = 3) or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and (0 <= p.xc and p.xc <= 5))).
    Bounded response check round 2 (states before round: (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 4 or ((p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 2 or (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and (p.xu = 1 or p.xu = 3)) or ((p.xc = 2 or p.xc = 3) and p.xu = 4 or ((p.xc = 2 or p.xc = 3) and p.xu = 2 or (p.xc = 2 or p.xc = 3) and (p.xu = 1 or p.xu = 3)))).
    Bounded response check round 3 (states before round: (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 4 or ((p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 2 or (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 3) or ((p.xc = 2 or p.xc = 3) and p.xu = 4 or ((p.xc = 2 or p.xc = 3) and p.xu = 2 or (p.xc = 2 or p.xc = 3) and p.xu = 3))).
    Bounded response check round 4 (states before round: (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 4 or (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 3 or ((p.xc = 2 or p.xc = 3) and p.xu = 4 or (p.xc = 2 or p.xc = 3) and p.xu = 3)).
    Bounded response check round 5 (states before round: (p.xc = 0 or p.xc = 1 or (p.xc = 4 or p.xc = 5)) and p.xu = 4 or (p.xc = 2 or p.xc = 3) and p.xu = 4).

    Computing bound for controllable events...
    Bounded response check round 1 (states before round: (p.xc = 2 or p.xc = 3 or (p.xc = 6 or (p.xc = 7 or p.xu != 6))) and ((p.xc = 2 or (p.xc = 3 or p.xc = 6) or (p.xc = 7 or (0 <= p.xu and p.xu <= 4 or p.xu = 6))) and (not(p.xc = 2 or p.xc = 3) or p.xu != 6)) and ((not(p.xc = 2 or p.xc = 3) or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and (0 <= p.xc and p.xc <= 5))).
    Bounded response check round 2 (states before round: <bdd 8n 12p>).
    Bounded response check round 3 (states before round: 2 <= p.xc and p.xc <= 7 and ((not(p.xc = 4 or p.xc = 5) or p.xu != 6) and (not(p.xc = 4 or p.xc = 5) or (0 <= p.xu and p.xu <= 4 or p.xu = 6))) and ((not(p.xc = 2 or p.xc = 3) or p.xu != 6) and (not(p.xc = 2 or p.xc = 3) or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and (0 <= p.xc and p.xc <= 5))).
    Bounded response check round 4 (states before round: p.xc != 0 and (p.xc != 4 or p.xu != 6) and ((p.xc != 4 or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and (not(p.xc = 2 or p.xc = 6) and p.xc != 1)) and ((p.xc != 5 or p.xu != 6) and (p.xc != 5 or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and ((p.xc != 3 or p.xu != 6) and ((p.xc != 3 or (0 <= p.xu and p.xu <= 4 or p.xu = 6)) and p.xc != 7)))).
    Bounded response check round 5 (states before round: (p.xc = 4 or p.xc = 5) and (p.xu = 0 or p.xu = 4) or ((p.xc = 4 or p.xc = 5) and p.xu = 2 or (p.xc = 4 or p.xc = 5) and (p.xu = 1 or p.xu = 3))).
    Bounded response check round 6 (states before round: p.xc = 5 and (p.xu = 0 or p.xu = 4) or (p.xc = 5 and p.xu = 2 or p.xc = 5 and (p.xu = 1 or p.xu = 3))).

    Bounded response check completed.

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 4 transitions is possible for uncontrollable events.
        - A sequence of at most 5 transitions is possible for controllable events.

    [UNKNOWN] Non-blocking under control checking was disabled, non-blocking under control property is unknown.
    [UNKNOWN] Finite response checking was disabled, finite response property is unknown.
    [UNKNOWN] Confluence checking was disabled, confluence property is unknown.

The model with the check results has been written to "controllercheck/bounded_response/bounded_state_evt_excl_inv.Bxxx.out.cif.real".
