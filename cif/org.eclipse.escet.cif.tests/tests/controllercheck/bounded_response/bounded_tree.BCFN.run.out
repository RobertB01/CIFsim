Loading CIF specification "controllercheck/bounded_response/bounded_tree.cif"...
Preparing for BDD-based checks...

    CIF variables and location pointers:
        Nr     Kind              Type  Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   p1    0      3 * 2     5 * 2       8 * 2       ~63%
        2      location pointer  n/a   p2    1      3 * 2     6 * 2       8 * 2       75%
        -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
        Total                                2      12        22          32          ~69%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 9

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 9

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.277778 (total)   0.030864 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.277778 (total)   0.030864 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 9

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.277778 (total)   0.030864 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.277778 (total)   0.030864 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 9
                Maximum number of iterations: 10

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [iteration 1]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 9
                Window length: 2

                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [before]
                Total span:   0 (total)   0.00 (avg/edge) / WES:   0.222222 (total)   0.024691 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind              Type  Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   p2    0      3 * 2     6 * 2       8 * 2       75%
        2      location pointer  n/a   p1    1      3 * 2     5 * 2       8 * 2       ~63%
        -----  ----------------  ----  ----  -----  --------  ----------  ----------  -----------
        Total                                2      12        22          32          ~69%


    Restricting system behavior using state/event exclusion plant invariants.

Preparing for MDD-based checks...
    Analyzing automaton "p1"...
    Analyzing automaton "p2"...
        Initializing the automaton data for event "c_a"...
        Initializing the automaton data for event "c_b"...
        Initializing the automaton data for event "c_d"...
        Initializing the automaton data for event "c_c"...
        Initializing the automaton data for event "c_e"...
        Processing edges from location "loc1" of automaton "p2"...
        Processing edges from location "loc2" of automaton "p2"...
        Processing edges from location "loc3" of automaton "p2"...
        Processing edges from location "loc4" of automaton "p2"...
        Processing edges from location "loc5" of automaton "p2"...
        Processing edges from location "loc6" of automaton "p2"...
        Updating global guards and updates for event "c_a"...
        Updating global guards and updates for event "c_b"...
        Updating global guards and updates for event "c_d"...
        Updating global guards and updates for event "c_c"...
        Updating global guards and updates for event "c_e"...

Checking for bounded response...
    Computing reachable states...
    Reachable states: p2.loc1 and p1.loc1 [initial states predicate]
    Forward reachability: iteration 1.
    Reachable states: p2.loc1 and p1.loc1 -> p2.loc1 and (p1.loc1 or p1.loc2) [forward reach with edge: (event: u_a) (guard: p1.loc1) (assignments: p1 := p1.loc2)]
    Reachable states: p2.loc1 and (p1.loc1 or p1.loc2) -> p2.loc1 and (p1.loc1 or p1.loc5) or p2.loc1 and p1.loc2 [forward reach with edge: (event: u_d) (guard: p1.loc1) (assignments: p1 := p1.loc5)]
    Reachable states: p2.loc1 and (p1.loc1 or p1.loc5) or p2.loc1 and p1.loc2 -> p2.loc1 and (p1.loc1 or p1.loc5) or (p2.loc1 and p1.loc3 or p2.loc1 and p1.loc2) [forward reach with edge: (event: u_b) (guard: p1.loc2) (assignments: p1 := p1.loc3)]
    Reachable states: p2.loc1 and (p1.loc1 or p1.loc5) or (p2.loc1 and p1.loc3 or p2.loc1 and p1.loc2) -> not p2.loc5 and (not p2.loc3 and (p2.loc1 or (p2.loc3 or p2.loc5))) [forward reach with edge: (event: u_c) (guard: p1.loc2) (assignments: p1 := p1.loc4)]
    Reachable states: not p2.loc5 and (not p2.loc3 and (p2.loc1 or (p2.loc3 or p2.loc5))) -> not p2.loc5 and not p2.loc6 and (not p2.loc3 and not p2.loc4) [forward reach with edge: (event: c_a) (guard: p2.loc1) (assignments: p2 := p2.loc2)]
    Reachable states: not p2.loc5 and not p2.loc6 and (not p2.loc3 and not p2.loc4) -> not p2.loc5 and (not p2.loc6 and not p2.loc4) [forward reach with edge: (event: c_b) (guard: p2.loc2) (assignments: p2 := p2.loc3)]
    Reachable states: not p2.loc5 and (not p2.loc6 and not p2.loc4) -> not p2.loc6 and not p2.loc4 [forward reach with edge: (event: c_d) (guard: p2.loc2) (assignments: p2 := p2.loc5)]
    Reachable states: not p2.loc6 and not p2.loc4 -> not p2.loc6 [forward reach with edge: (event: c_c) (guard: p2.loc3) (assignments: p2 := p2.loc4)]
    Reachable states: not p2.loc6 -> true [forward reach with edge: (event: c_e) (guard: p2.loc3) (assignments: p2 := p2.loc6)]
    Forward reachability: iteration 2.
    Reachable states: true [fixed point].

    Computing bound for uncontrollable events...
    Bounded response check round 1 (states before round: true).
    Bounded response check round 2 (states before round: (p2.loc3 or (p2.loc4 or not p1.loc1)) and (not p2.loc3 and not p2.loc4 or not p1.loc1)).
    Bounded response check round 3 (states before round: (p2.loc3 or p2.loc4 or (p1.loc3 or p1.loc4)) and (not p2.loc3 and not p2.loc4 or (p1.loc3 or p1.loc4))).

    Computing bound for controllable events...
    Bounded response check round 1 (states before round: true).
    Bounded response check round 2 (states before round: <bdd 8n 12p>).
    Bounded response check round 3 (states before round: not p2.loc1 and not p2.loc2).
    Bounded response check round 4 (states before round: (p2.loc2 or (p2.loc4 or p2.loc6)) and not p2.loc2).

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled...
    Condition under which no controllable event is enabled: p2.loc5 or (p2.loc6 or p2.loc4)

    Computing the controllable-complete path states...
    Controllable-complete path states: p2.loc5 and p1.loc5 or p2.loc5 and p1.loc3 or (p2.loc5 and p1.loc4 or p2.loc6 and p1.loc5) or (p2.loc6 and p1.loc3 or p2.loc6 and p1.loc4 or (p2.loc4 and p1.loc5 or (p2.loc4 and p1.loc3 or p2.loc4 and p1.loc4))) [controllable-complete path end states predicate]
    Backward reachability: iteration 1.
    Controllable-complete path states: p2.loc5 and p1.loc5 or p2.loc5 and p1.loc3 or (p2.loc5 and p1.loc4 or p2.loc6 and p1.loc5) or (p2.loc6 and p1.loc3 or p2.loc6 and p1.loc4 or (p2.loc4 and p1.loc5 or (p2.loc4 and p1.loc3 or p2.loc4 and p1.loc4))) -> not p2.loc1 and ((not p2.loc5 or not p1.loc2) and not p2.loc3) and (not p2.loc2 and ((not p2.loc6 or not p1.loc2) and (not p2.loc4 or not p1.loc2))) [backward reach with edge: (event: u_d) (guard: p1.loc1 -> p2.loc5 and p1.loc1 or (p2.loc6 and p1.loc1 or p2.loc4 and p1.loc1)) (assignments: p1 := p1.loc5)]
    Controllable-complete path states: not p2.loc1 and ((not p2.loc5 or not p1.loc2) and not p2.loc3) and (not p2.loc2 and ((not p2.loc6 or not p1.loc2) and (not p2.loc4 or not p1.loc2))) -> not p2.loc1 and (not p2.loc3 and not p2.loc2) [backward reach with edge: (event: u_b) (guard: p1.loc2 -> p2.loc5 and p1.loc2 or (p2.loc6 and p1.loc2 or p2.loc4 and p1.loc2)) (assignments: p1 := p1.loc3)]
    Controllable-complete path states: not p2.loc1 and (not p2.loc3 and not p2.loc2) -> not p2.loc1 and not p2.loc3 [backward reach with edge: (event: c_d) (guard: p2.loc2) (assignments: p2 := p2.loc5)]
    Controllable-complete path states: not p2.loc1 and not p2.loc3 -> <bdd 8n 12p> [backward reach with edge: (event: c_c) (guard: p2.loc3) (assignments: p2 := p2.loc4)]
    Backward reachability: iteration 2.
    Controllable-complete path states: <bdd 8n 12p> -> true [backward reach with edge: (event: c_a) (guard: p2.loc1) (assignments: p2 := p2.loc2)]
    Backward reachability: iteration 3.
    Controllable-complete path states: true [fixed point].
    Controllable-complete path states: true

    Computing the bad states...
    Bad states: false [not controllable-complete path states predicate]
    Backward reachability: iteration 1.
    Bad states: false

    Computing the result of the non-blocking under control check...
    Initial states: p2.loc1 and p1.loc1
    Bad initial states: false

Checking for finite response...

    Iteration 1.

Checking for confluence...

    Mutual exclusive event pairs:
        (c_a, c_b), (c_a, c_c), (c_a, c_d), (c_a, c_e), (c_b, c_c), (c_b, c_e), (c_c, c_d), (c_d, c_e)

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 2 transitions is possible for uncontrollable events.
        - A sequence of at most 3 transitions is possible for controllable events.

    [OK] The specification is non-blocking under control.
    [OK] The specification has finite response.

    [ERROR] The specification may NOT have confluence:

        Confluence of the following event pairs could not be decided:
            (c_b, c_d), (c_c, c_e)

The model with the check results has been written to "controllercheck/bounded_response/bounded_tree.BCFN.out.cif.real".
