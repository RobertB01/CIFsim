Loading CIF specification "controllercheck/confluence/not_confluent.cif".
Preparing for BDD-based checks:
    CIF variables and location pointers:
        Nr     Kind               Type  Name         Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        1      location pointer   n/a   SingleAut    0      1 * 2     2 * 2       2 * 2       100%
        2      discrete variable  bool  SingleAut.z  1      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        Total                                        2      4         8           8           100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 4

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [before]
                    Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [before]
                    Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [before]
                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [before]
                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [before]
                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [before]
                        Total span:   2 (total)   0.50 (avg/edge) / WES:   0.750000 (total)   0.187500 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Maximum number of iterations: 10

                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [before]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [iteration 1]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 2
                Window length: 2

                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [before]
                Total span:   2 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.500000 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind               Type  Name         Group  BDD vars  CIF values  BDD values  Values used
        -----  -----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        1      discrete variable  bool  SingleAut.z  0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer   n/a   SingleAut    1      1 * 2     2 * 2       2 * 2       100%
        -----  -----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        Total                                        2      4         8           8           100%

    Restricting system behavior using state/event exclusion plant invariants:
        No guards changed.

Preparing for MDD-based checks:
    Analyzing automaton "SingleAut":
        Initializing the automaton data for event "SingleAut.a".
        Initializing the automaton data for event "SingleAut.b".
        Processing edges from location "p" of automaton "SingleAut".
        Processing edges from location "q" of automaton "SingleAut".
        Updating global guards and updates for event "SingleAut.a".
        Updating global guards and updates for event "SingleAut.b".

Checking for bounded response:
    Computing reachable states:
        Reachable states: not SingleAut.z and SingleAut.p [initial states predicate]

<<<<<<< HEAD
Checking for bounded response...
    Computing reachable states...
    Reachable states: not SingleAut.z and SingleAut.p [initial states predicate]
    Reachable states: not SingleAut.z or SingleAut.q [fixed point].
=======
        Forward reachability iteration 1:
            Reachable states: not SingleAut.z and SingleAut.p -> not SingleAut.z [forward reach with edge: (event: SingleAut.a) (guard: SingleAut.p) (assignments: SingleAut.z := SingleAut.z, SingleAut := SingleAut.q)]
            Reachable states: not SingleAut.z -> not SingleAut.z or SingleAut.q [forward reach with edge: (event: SingleAut.b) (guard: SingleAut.p) (assignments: SingleAut.z := not SingleAut.z, SingleAut := SingleAut.q)]
>>>>>>> refs/remotes/origin/develop

        Forward reachability iteration 2:
            No change this iteration.

        Reachable states: not SingleAut.z or SingleAut.q [fixed point].

    Computing bound for uncontrollable events:
        Bounded response check round 1 (states before round: not SingleAut.z or SingleAut.q).

        Bound: 0.

    Computing bound for controllable events:
        Bounded response check round 1 (states before round: not SingleAut.z or SingleAut.q).
        Bounded response check round 2 (states before round: SingleAut.q).

        Bound: 1.

    Bounded response check completed.

Checking for non-blocking under control:
    Computing the condition for no controllable event to be enabled:
        Condition under which no controllable event is enabled: SingleAut.q

<<<<<<< HEAD
    Computing the controllable-complete path states...
    Controllable-complete path states: SingleAut.q [controllable-complete path end states predicate]
    Controllable-complete path states: true [fixed point].
    Controllable-complete path states: true
=======
    Computing the controllable-complete path states:
        Controllable-complete path states: SingleAut.q [controllable-complete path end states predicate]
>>>>>>> refs/remotes/origin/develop

<<<<<<< HEAD
    Computing the bad states...
    Bad states: false [not controllable-complete path states predicate]
    Bad states: false
=======
        Backward reachability iteration 1:
            Controllable-complete path states: SingleAut.q -> true [backward reach with edge: (event: SingleAut.a) (guard: SingleAut.p) (assignments: SingleAut.z := SingleAut.z, SingleAut := SingleAut.q)]
>>>>>>> refs/remotes/origin/develop

        Backward reachability iteration 2:
            No change this iteration.

        Controllable-complete path states: true [fixed point].

        Controllable-complete path states: true

    Computing the bad states:
        Bad states: false [not controllable-complete path states predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Bad states: false

    Computing the result of the non-blocking under control check:
        Initial states: not SingleAut.z and SingleAut.p
        Bad initial states: false

    Non-blocking under control: yes

Checking for finite response:
    Iteration 1.

Checking for confluence:
    No proven pairs.

    Some pairs unproven. Confluence may not hold.

CONCLUSION:
    [OK] The specification has bounded response:

        - No transitions are possible for uncontrollable events.
        - A sequence of at most 1 transition is possible for controllable events.

    [OK] The specification is non-blocking under control.
    [OK] The specification has finite response.

    [ERROR] The specification may NOT have confluence:

        Confluence of the following event pair could not be decided:
            (SingleAut.a, SingleAut.b)

The model with the check results has been written to "controllercheck/confluence/not_confluent.BCFN.out.cif.real".
