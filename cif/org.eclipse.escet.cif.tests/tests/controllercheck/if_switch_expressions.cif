//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

input bool A, B;

plant Aut1:
  controllable c_a, c_b;
  location l1:
    initial; marked;
    edge c_a goto l2;
  location l2:
    edge c_b goto l1;
end

// Trivially true if expression:
requirement Aut1.c_a needs if A: 3 elif B: 4 else 2 end > 1;

plant Aut2:
  controllable c_a, c_b;
  location l1:
    initial; marked;
    edge c_a goto l2;
  location l2:
    edge c_b goto l1;
end

// Trivially false if expression:
requirement Aut2.c_a needs if A: 3 elif B: 4 else 2 end > 5;

plant Aut3:
  controllable c_a, c_b;
  location l1:
    initial; marked;
    edge c_a goto l2;
  location l2:
    edge c_b goto l1;
end

// Combinatorial mutually exclusive if expression:
requirement Aut3.c_a needs if A: true  else false end;
requirement Aut3.c_b needs if A: false else true  end;

plant Aut4:
  controllable c_a, c_b;
  location l1:
    initial; marked;
    edge c_a goto l2;
  location l2:
    edge c_b goto l1;
end

// Trivially true switch expression:
requirement Aut4.c_a needs switch A:
                           case true: 3
                           else 4
                           end > 1;

plant Aut5:
  controllable c_a, c_b;
  location l1:
    initial; marked;
    edge c_a goto l2;
  location l2:
    edge c_b goto l1;
end

// Trivially false switch expression:
requirement Aut5.c_a needs switch A:
                           case true: 3
                           else 4
                           end < 1;

plant Aut6:
  controllable c_a, c_b;
  location l1:
    initial; marked;
    edge c_a goto l2;
  location l2:
    edge c_b goto l1;
end

// Combinatorial mutually exclusive switch expression:
requirement Aut6.c_a needs switch A:
                           case true: true
                           else false
                           end;
requirement Aut6.c_b needs switch A:
                           case true: false
                           else true
                           end;
