Loading CIF specification "controllercheck/non_blocking_under_control/button_lamp.cif"...
Preparing for BDD-based checks...
    CIF variables and location pointers:
        Nr     Kind              Type  Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   button    0      1 * 2     2 * 2       2 * 2       100%
        2      input variable    bool  button.b  1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer  n/a   lamp      2      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        Total                                    3      6         12          12          100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 4

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 2

                    Total span:   6 (total)   1.50 (avg/edge) / WES:   0.888889 (total)   0.222222 (avg/edge) [before]
                    Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 2

                    Total span:   6 (total)   1.50 (avg/edge) / WES:   0.888889 (total)   0.222222 (avg/edge) [before]
                    Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 2

                        Total span:   6 (total)   1.50 (avg/edge) / WES:   0.888889 (total)   0.222222 (avg/edge) [before]
                        Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [before]
                        Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 2

                        Total span:   6 (total)   1.50 (avg/edge) / WES:   0.888889 (total)   0.222222 (avg/edge) [before]
                        Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 4

                        Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [before]
                        Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Maximum number of iterations: 20

                Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [before]
                Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [iteration 1]
                Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Window length: 3

                Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [before]
                Total span:   4 (total)   1.00 (avg/edge) / WES:   0.666667 (total)   0.166667 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind              Type  Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        1      input variable    bool  button.b  0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer  n/a   button    1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer  n/a   lamp      2      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        Total                                    3      6         12          12          100%


    Restricting system behavior using state/event exclusion plant invariants.

Preparing for MDD-based checks...
    Analyzing automaton "button"...
    Analyzing automaton "lamp"...
        Initializing the automaton data for event "lamp.c_on"...
        Initializing the automaton data for event "lamp.c_off"...
        Processing edges from location "Off" of automaton "lamp"...
        Processing edges from location "On" of automaton "lamp"...
        Updating global guards and updates for event "lamp.c_on"...
        Updating global guards and updates for event "lamp.c_off"...
    Analyzing automaton "controller"...
        Initializing the automaton data for event "lamp.c_on"...
        Initializing the automaton data for event "lamp.c_off"...
        Processing edges from the location of automaton "controller"...
        Updating global guards and updates for event "lamp.c_on"...
        Updating global guards and updates for event "lamp.c_off"...

Checking for bounded response...
    Computing reachable states...
    Reachable states: button.Released and lamp.Off [initial states predicate]
    Reachable states: true [fixed point].

    Computing bound for uncontrollable events...
    Bounded response check round 1 (states before round: true).
    Bounded response check round 2 (states before round: (button.b or button.Released) and (not button.b or button.Pushed)).

    Computing bound for controllable events...
    Bounded response check round 1 (states before round: true).
    Bounded response check round 2 (states before round: (button.Pushed or lamp.Off) and (button.Released or lamp.On)).

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled...
    Condition under which no controllable event is enabled: (button.Pushed or lamp.Off) and (button.Released or lamp.On)

    Computing the controllable-complete path states...
    Controllable-complete path states: not button.b and (button.Released and lamp.Off) or button.b and (button.Pushed and lamp.On) [controllable-complete path end states predicate]
    Controllable-complete path states: true [fixed point].
    Controllable-complete path states: true

    Computing the bad states...
    Bad states: false [not controllable-complete path states predicate]
    Bad states: false

    Computing the result of the non-blocking under control check...
    Initial states: button.Released and lamp.Off
    Bad initial states: false

Checking for finite response...
    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton lamp:
            (lamp.c_on lamp.c_off), which is controllable unconnectable.

Checking for confluence...
    Mutual exclusive event pairs:
        (lamp.c_off, lamp.c_on)

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 1 transition is possible for uncontrollable events.
        - A sequence of at most 1 transition is possible for controllable events.

    [OK] The specification is non-blocking under control.
    [OK] The specification has finite response.
    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/non_blocking_under_control/button_lamp.BCFN.out.cif.real".
