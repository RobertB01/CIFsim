Loading CIF specification "controllercheck/non_blocking_under_control/nbuc_init_guard.cif"...
Preparing for BDD-based checks...
    CIF variables and location pointers:
        Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   Supervisor    0      2 * 2     3 * 2       4 * 2       75%
        2      input variable    bool  Supervisor.i  1      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
        Total                                        2      6         10          12          ~83%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 2

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [before]
                    Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 1

                    Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [before]
                    Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [after]

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [before]
                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 2

                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [before]
                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 1

                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [before]
                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 2

                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [before]
                        Total span:   1 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.250000 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Maximum number of iterations: 10

                Total span:   2 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [before]
                Total span:   2 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [iteration 1]
                Total span:   2 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 4
                Window length: 2

                Total span:   2 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [before]
                Total span:   2 (total)   0.50 (avg/edge) / WES:   0.500000 (total)   0.125000 (avg/edge) [after]

    Variable order unchanged.

    Restricting system behavior using state/event exclusion plant invariants:
        No guards changed.

Preparing for MDD-based checks...
    Analyzing automaton "Supervisor"...
        Initializing the automaton data for event "Supervisor.c_act"...
        Processing edges from location "Start" of automaton "Supervisor"...
        Processing edges from location "DoneTrue" of automaton "Supervisor"...
        Processing edges from location "DoneFalse" of automaton "Supervisor"...
        Updating global guards and updates for event "Supervisor.c_act"...

Checking for bounded response...
    Computing reachable states:
        Reachable states: Supervisor.Start [initial states predicate]

        Forward reachability iteration 1:
            Reachable states: Supervisor.Start -> (not Supervisor.DoneFalse or not Supervisor.i) and (not Supervisor.DoneTrue or Supervisor.i) [forward reach with edge: (event: Supervisor.c_act) (guard: Supervisor.Start) (assignments: Supervisor := Supervisor.DoneTrue / Supervisor := Supervisor.DoneFalse)]
            Reachable states: (not Supervisor.DoneFalse or not Supervisor.i) and (not Supervisor.DoneTrue or Supervisor.i) -> true [forward reach with edge: (event: Supervisor.i) (guard: true) (assignments: Supervisor.i+ != Supervisor.i)]

        Forward reachability iteration 2:
            No change this iteration.

        Reachable states: true [fixed point].

    Computing bound for uncontrollable events...
        Bounded response check round 1 (states before round: true).
        Bounded response check round 2 (states before round: Supervisor.Start).

        Bound: 1.

    Computing bound for controllable events...
        Bounded response check round 1 (states before round: true).
        Bounded response check round 2 (states before round: Supervisor.DoneFalse and not Supervisor.i or Supervisor.DoneTrue and Supervisor.i).

        Bound: 1.

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled...
    Condition under which no controllable event is enabled: not Supervisor.Start

    Computing the controllable-complete path states...
    Controllable-complete path states: Supervisor.DoneTrue [controllable-complete path end states predicate]

    Backward reachability iteration 1:
        Controllable-complete path states: Supervisor.DoneTrue -> Supervisor.Start and Supervisor.i or Supervisor.DoneTrue [backward reach with edge: (event: Supervisor.c_act) (guard: Supervisor.Start) (assignments: Supervisor := Supervisor.DoneTrue / Supervisor := Supervisor.DoneFalse)]
        Controllable-complete path states: Supervisor.Start and Supervisor.i or Supervisor.DoneTrue -> Supervisor.DoneTrue or Supervisor.i [backward reach with edge: (event: Supervisor.u_back) (guard: not Supervisor.Start) (assignments: Supervisor := Supervisor.Start / Supervisor := Supervisor.Start)]
        Controllable-complete path states: Supervisor.DoneTrue or Supervisor.i -> not Supervisor.Start or Supervisor.i [backward reach with edge: (event: Supervisor.i) (guard: true -> not Supervisor.Start) (assignments: Supervisor.i+ != Supervisor.i)]

    Backward reachability iteration 2:
        Controllable-complete path states: not Supervisor.Start or Supervisor.i -> true [backward reach with edge: (event: Supervisor.c_act) (guard: Supervisor.Start) (assignments: Supervisor := Supervisor.DoneTrue / Supervisor := Supervisor.DoneFalse)]

    Backward reachability iteration 3:
        No change this iteration.

    Controllable-complete path states: true [fixed point].
    Controllable-complete path states: true

    Computing the bad states...
    Bad states: false [not controllable-complete path states predicate]

    Backward reachability iteration 1:
        No change this iteration.
    Bad states: false

    Computing the result of the non-blocking under control check...
    Initial states: Supervisor.Start
    Bad initial states: false

Checking for finite response...
    Iteration 1.

Checking for confluence...

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 1 transition is possible for uncontrollable events.
        - A sequence of at most 1 transition is possible for controllable events.

    [OK] The specification is non-blocking under control.
    [OK] The specification has finite response.
    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/non_blocking_under_control/nbuc_init_guard.BCFN.out.cif.real".
