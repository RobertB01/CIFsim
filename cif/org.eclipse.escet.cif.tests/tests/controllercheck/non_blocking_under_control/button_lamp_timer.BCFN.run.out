Loading CIF specification "controllercheck/non_blocking_under_control/button_lamp_timer.cif".
Preparing for BDD-based checks:
    CIF variables and location pointers:
        Nr     Kind              Type  Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   Button    0      1 * 2     2 * 2       2 * 2       100%
        2      input variable    bool  Button.b  1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer  n/a   Lamp      2      1 * 2     2 * 2       2 * 2       100%
        4      location pointer  n/a   Timer     3      1 * 2     2 * 2       2 * 2       100%
        5      location pointer  n/a   Cycle     4      3 * 2     5 * 2       8 * 2       ~63%
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        Total                                    5      14        26          32          ~81%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 6

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 5

                    Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [before]
                    Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [after]

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 5

                    Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [before]
                    Total span:   9 (total)   1.50 (avg/edge) / WES:   0.533333 (total)   0.088889 (avg/edge) [after]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 5

                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [before]
                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [before]
                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 5

                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.586667 (total)   0.097778 (avg/edge) [before]
                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.533333 (total)   0.088889 (avg/edge) [after]

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.533333 (total)   0.088889 (avg/edge) [before]
                        Total span:   9 (total)   1.50 (avg/edge) / WES:   0.533333 (total)   0.088889 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 10
                Maximum number of iterations: 20

                Total span:   17 (total)   1.70 (avg/edge) / WES:   0.704000 (total)   0.070400 (avg/edge) [before]
                Total span:   17 (total)   1.70 (avg/edge) / WES:   0.704000 (total)   0.070400 (avg/edge) [iteration 1]
                Total span:   17 (total)   1.70 (avg/edge) / WES:   0.704000 (total)   0.070400 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 10
                Window length: 4

                Total span:   17 (total)   1.70 (avg/edge) / WES:   0.704000 (total)   0.070400 (avg/edge) [before]
                Total span:   17 (total)   1.70 (avg/edge) / WES:   0.704000 (total)   0.070400 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind              Type  Name      Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   Lamp      0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer  n/a   Timer     1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer  n/a   Cycle     2      3 * 2     5 * 2       8 * 2       ~63%
        4      input variable    bool  Button.b  3      1 * 2     2 * 2       2 * 2       100%
        5      location pointer  n/a   Button    4      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  --------  -----  --------  ----------  ----------  -----------
        Total                                    5      14        26          32          ~81%

    Restricting system behavior using state/event exclusion plant invariants:
        No guards changed.

Preparing for MDD-based checks:
    Analyzing automaton "Button":
        Nothing to process.

    Analyzing automaton "Lamp":
        Initializing the automaton data for event "Lamp.c_on".
        Initializing the automaton data for event "Lamp.c_off".
        Processing edges from location "Off" of automaton "Lamp".
        Processing edges from location "On" of automaton "Lamp".
        Updating global guards and updates for event "Lamp.c_on".
        Updating global guards and updates for event "Lamp.c_off".

    Analyzing automaton "Timer":
        Initializing the automaton data for event "Timer.c_start".
        Processing edges from location "Idle" of automaton "Timer".
        Processing edges from location "Running" of automaton "Timer".
        Updating global guards and updates for event "Timer.c_start".

    Analyzing automaton "Cycle":
        Initializing the automaton data for event "Lamp.c_on".
        Initializing the automaton data for event "Timer.c_start".
        Initializing the automaton data for event "Lamp.c_off".
        Processing edges from location "WaitForButtonPush" of automaton "Cycle".
        Processing edges from location "TurnLampOn" of automaton "Cycle".
        Processing edges from location "StartTimer" of automaton "Cycle".
        Processing edges from location "WaitForTimeout" of automaton "Cycle".
        Processing edges from location "TurnLampOff" of automaton "Cycle".
        Updating global guards and updates for event "Lamp.c_on".
        Updating global guards and updates for event "Timer.c_start".
        Updating global guards and updates for event "Lamp.c_off".

    Analyzing automaton "sup":
        Initializing the automaton data for event "Lamp.c_on".
        Initializing the automaton data for event "Lamp.c_off".
        Initializing the automaton data for event "Timer.c_start".
        Processing edges from the location of automaton "sup".
        Updating global guards and updates for event "Lamp.c_on".
        Updating global guards and updates for event "Lamp.c_off".
        Updating global guards and updates for event "Timer.c_start".

Checking for bounded response:
    Computing reachable states:
        Reachable states: Lamp.Off and Timer.Idle and (Cycle.WaitForButtonPush and Button.Released) [initial states predicate]

        Reachable states: Lamp.Off and (Timer.Idle and (Cycle.WaitForButtonPush or Cycle.TurnLampOn)) or Lamp.On and (Timer.Idle and Cycle.TurnLampOff) or (Lamp.On and (Timer.Idle and Cycle.StartTimer) or Lamp.On and (Timer.Running and Cycle.WaitForTimeout)) [fixed point].

    Computing bound for uncontrollable events:
        Bounded response check round 1 (states before round: Lamp.Off and (Timer.Idle and (Cycle.WaitForButtonPush or Cycle.TurnLampOn)) or Lamp.On and (Timer.Idle and Cycle.TurnLampOff) or (Lamp.On and (Timer.Idle and Cycle.StartTimer) or Lamp.On and (Timer.Running and Cycle.WaitForTimeout))).
        Bounded response check round 2 (states before round: <bdd 17n 8p>).
        Bounded response check round 3 (states before round: Lamp.On and Timer.Idle and (Cycle.TurnLampOff and (not Button.b and Button.Released)) or Lamp.On and Timer.Idle and (Cycle.TurnLampOff and (Button.b and Button.Pushed))).

        Bound: 2.

    Computing bound for controllable events:
        Bounded response check round 1 (states before round: Lamp.Off and (Timer.Idle and (Cycle.WaitForButtonPush or Cycle.TurnLampOn)) or Lamp.On and (Timer.Idle and Cycle.TurnLampOff) or (Lamp.On and (Timer.Idle and Cycle.StartTimer) or Lamp.On and (Timer.Running and Cycle.WaitForTimeout))).
        Bounded response check round 2 (states before round: Lamp.Off and (Timer.Idle and Cycle.WaitForButtonPush) or (Lamp.On and (Timer.Idle and Cycle.StartTimer) or Lamp.On and (Timer.Running and Cycle.WaitForTimeout))).
        Bounded response check round 3 (states before round: Lamp.On and (Timer.Running and Cycle.WaitForTimeout)).

        Bound: 2.

    Bounded response check completed.

Checking for non-blocking under control:
    Computing the condition for no controllable event to be enabled:
        Condition under which no controllable event is enabled: <bdd 13n 13p>

    Computing the controllable-complete path states:
        Controllable-complete path states: <bdd 13n 3p> [controllable-complete path end states predicate]

        Controllable-complete path states: Lamp.Off and (Timer.Idle and (Cycle.WaitForButtonPush or Cycle.TurnLampOn)) or Lamp.On and (Timer.Idle and Cycle.TurnLampOff) or (Lamp.On and (Timer.Idle and Cycle.StartTimer) or Lamp.On and (Timer.Running and Cycle.WaitForTimeout)) [fixed point].

        Controllable-complete path states: Lamp.Off and (Timer.Idle and (Cycle.WaitForButtonPush or Cycle.TurnLampOn)) or Lamp.On and (Timer.Idle and Cycle.TurnLampOff) or (Lamp.On and (Timer.Idle and Cycle.StartTimer) or Lamp.On and (Timer.Running and Cycle.WaitForTimeout))

    Computing the bad states:
        Bad states: (Lamp.On or (Timer.Running or not Cycle.WaitForButtonPush and not Cycle.TurnLampOn)) and (Lamp.Off or (Timer.Running or not Cycle.TurnLampOff)) and ((Lamp.Off or (Timer.Running or not Cycle.StartTimer)) and (Lamp.Off or (Timer.Idle or not Cycle.WaitForTimeout))) [not controllable-complete path states predicate]

        Bad states: (Lamp.On or (Timer.Running or not Cycle.WaitForButtonPush and not Cycle.TurnLampOn)) and (Lamp.Off or (Timer.Running or not Cycle.TurnLampOff)) and ((Lamp.Off or (Timer.Running or not Cycle.StartTimer)) and (Lamp.Off or (Timer.Idle or not Cycle.WaitForTimeout)))

    Computing the result of the non-blocking under control check:
        Initial states: Lamp.Off and Timer.Idle and (Cycle.WaitForButtonPush and Button.Released)
        Bad initial states: false

    Non-blocking under control: yes

Checking for finite response:
    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton Lamp:
            (Lamp.c_on Lamp.c_off), which is not controllable unconnectable.

Checking for confluence:
    Mutual exclusive event pairs:
        (Lamp.c_off, Lamp.c_on), (Lamp.c_off, Timer.c_start), (Lamp.c_on, Timer.c_start)

    All pairs proven. Confluence holds.

CONCLUSION:
    [OK] The specification has bounded response:

        - A sequence of at most 2 transitions is possible for uncontrollable events.
        - A sequence of at most 2 transitions is possible for controllable events.

    [OK] The specification is non-blocking under control.
    [OK] The specification has finite response.
    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/non_blocking_under_control/button_lamp_timer.BCFN.out.cif.real".
