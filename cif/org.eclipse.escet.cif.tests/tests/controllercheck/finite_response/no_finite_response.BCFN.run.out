Loading CIF specification "controllercheck/finite_response/no_finite_response.cif".
Preparing for BDD-based checks:
    CIF variables and location pointers:
        Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   Actuator     0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer  n/a   StartButton  1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer  n/a   StopButton   2      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        Total                                       3      6         12          12          100%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 8

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.031250 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.031250 (avg/edge) [reversed]

                Found new best variable order.

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 8

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.031250 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.031250 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Maximum number of iterations: 20

                Total span:   3 (total)   0.50 (avg/edge) / WES:   0.444444 (total)   0.074074 (avg/edge) [before]
                Total span:   3 (total)   0.50 (avg/edge) / WES:   0.444444 (total)   0.074074 (avg/edge) [iteration 1]
                Total span:   3 (total)   0.50 (avg/edge) / WES:   0.444444 (total)   0.074074 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 6
                Window length: 3

                Total span:   3 (total)   0.50 (avg/edge) / WES:   0.444444 (total)   0.074074 (avg/edge) [before]
                Total span:   2 (total)   0.33 (avg/edge) / WES:   0.370370 (total)   0.061728 (avg/edge) [window 0..2]
                Total span:   2 (total)   0.33 (avg/edge) / WES:   0.370370 (total)   0.061728 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a   StopButton   0      1 * 2     2 * 2       2 * 2       100%
        2      location pointer  n/a   Actuator     1      1 * 2     2 * 2       2 * 2       100%
        3      location pointer  n/a   StartButton  2      1 * 2     2 * 2       2 * 2       100%
        -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
        Total                                       3      6         12          12          100%

    Restricting system behavior using state/event exclusion plant invariants:
        Edge (event: Actuator.c_on) (guard: Actuator.Off) (assignments: Actuator := Actuator.On): guard: Actuator.Off -> Actuator.Off and StartButton.Pushed [plant: StartButton.Pushed].
        Edge (event: Actuator.c_off) (guard: Actuator.On) (assignments: Actuator := Actuator.Off): guard: Actuator.On -> StopButton.Pushed and Actuator.On [plant: StopButton.Pushed].

        System:
            Edge: (event: Actuator.c_on) (guard: Actuator.Off -> Actuator.Off and StartButton.Pushed) (assignments: Actuator := Actuator.On)
            Edge: (event: Actuator.c_off) (guard: Actuator.On -> StopButton.Pushed and Actuator.On) (assignments: Actuator := Actuator.Off)
            Edge: (event: StartButton.u_pushed) (guard: StartButton.Released) (assignments: StartButton := StartButton.Pushed)
            Edge: (event: StartButton.u_released) (guard: StartButton.Pushed) (assignments: StartButton := StartButton.Released)
            Edge: (event: StopButton.u_pushed) (guard: StopButton.Released) (assignments: StopButton := StopButton.Pushed)
            Edge: (event: StopButton.u_released) (guard: StopButton.Pushed) (assignments: StopButton := StopButton.Released)

Preparing for MDD-based checks:
    Analyzing automaton "Actuator":
        Initializing the automaton data for event "Actuator.c_on".
        Initializing the automaton data for event "Actuator.c_off".
        Processing edges from location "Off" of automaton "Actuator".
        Processing edges from location "On" of automaton "Actuator".
        Updating global guards and updates for event "Actuator.c_on".
        Updating global guards and updates for event "Actuator.c_off".

    Analyzing automaton "StartButton":
        Nothing to process.

    Analyzing automaton "StopButton":
        Nothing to process.

<<<<<<< HEAD
Checking for bounded response...
    Computing reachable states...
    Reachable states: StopButton.Released and (Actuator.Off and StartButton.Released) [initial states predicate]
    Reachable states: true [fixed point].
=======
    Analyzing automaton "SupervisorStateEvtExcls":
        Initializing the automaton data for event "Actuator.c_on".
        Initializing the automaton data for event "Actuator.c_off".
        Processing edges from the location of automaton "SupervisorStateEvtExcls".
        Updating global guards and updates for event "Actuator.c_on".
        Updating global guards and updates for event "Actuator.c_off".
>>>>>>> refs/remotes/origin/develop

Checking for bounded response:
    Computing reachable states:
        Reachable states: StopButton.Released and (Actuator.Off and StartButton.Released) [initial states predicate]

        Forward reachability iteration 1:
            Reachable states: StopButton.Released and (Actuator.Off and StartButton.Released) -> StopButton.Released and Actuator.Off [forward reach with edge: (event: StartButton.u_pushed) (guard: StartButton.Released) (assignments: StartButton := StartButton.Pushed)]
            Reachable states: StopButton.Released and Actuator.Off -> Actuator.Off [forward reach with edge: (event: StopButton.u_pushed) (guard: StopButton.Released) (assignments: StopButton := StopButton.Pushed)]

        Forward reachability iteration 2:
            Reachable states: Actuator.Off -> Actuator.Off or StartButton.Pushed [forward reach with edge: (event: Actuator.c_on) (guard: Actuator.Off -> Actuator.Off and StartButton.Pushed) (assignments: Actuator := Actuator.On)]
            Reachable states: Actuator.Off or StartButton.Pushed -> true [forward reach with edge: (event: StartButton.u_released) (guard: StartButton.Pushed) (assignments: StartButton := StartButton.Released)]

        Forward reachability iteration 3:
            No change this iteration.

        Reachable states: true [fixed point].

    Computing bound for uncontrollable events:
        Bounded response check round 1 (states before round: true).

        Bound: n/a (cycle).

    Computing bound for controllable events:
        Bounded response check round 1 (states before round: true).
        Bounded response check round 2 (states before round: (StopButton.Pushed or Actuator.On) and ((StopButton.Pushed or (Actuator.Off or StartButton.Pushed)) and (StopButton.Released or (Actuator.Off or StartButton.Pushed)))).
        Bounded response check round 3 (states before round: StopButton.Pushed and StartButton.Pushed).

        Bound: n/a (cycle).

    Bounded response check completed.

Checking for non-blocking under control:
    Computing the condition for no controllable event to be enabled:
        Condition under which no controllable event is enabled: (StopButton.Pushed or (Actuator.On or StartButton.Released)) and ((StopButton.Released or (Actuator.On or StartButton.Released)) and (StopButton.Released or Actuator.Off))

<<<<<<< HEAD
    Computing the controllable-complete path states...
    Controllable-complete path states: false [controllable-complete path end states predicate]
    Controllable-complete path states: false
=======
    Computing the controllable-complete path states:
        Controllable-complete path states: false [controllable-complete path end states predicate]
>>>>>>> refs/remotes/origin/develop

<<<<<<< HEAD
    Computing the bad states...
    Bad states: true [not controllable-complete path states predicate]
    Bad states: true
=======
        Backward reachability iteration 1:
            No change this iteration.
>>>>>>> refs/remotes/origin/develop

        Controllable-complete path states: false

    Computing the bad states:
        Bad states: true [not controllable-complete path states predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Bad states: true

    Computing the result of the non-blocking under control check:
        Initial states: StopButton.Released and (Actuator.Off and StartButton.Released)
        Bad initial states: StopButton.Released and (Actuator.Off and StartButton.Released)

    Non-blocking under control: no

Checking for finite response:
    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton Actuator:
            (Actuator.c_on Actuator.c_off), which is not controllable unconnectable.
        The following events have been encountered in a controllable-event loop of automaton SupervisorStateEvtExcls:
            (Actuator.c_on), which is not controllable unconnectable.
            (Actuator.c_off), which is not controllable unconnectable.

Checking for confluence:
    Mutual exclusive event pairs:
        (Actuator.c_off, Actuator.c_on)

    All pairs proven. Confluence holds.

CONCLUSION:
    [ERROR] The specification does NOT have bounded response:

        - An infinite sequence of transitions is possible for uncontrollable events.
        - An infinite sequence of transitions is possible for controllable events.

    [ERROR] The specification is NOT non-blocking under control.

    [ERROR] The specification may NOT have finite response:

        At least one controllable-event loop was found.
        The following events might still occur in a controllable-event loop:
            - Actuator.c_off
            - Actuator.c_on

    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/finite_response/no_finite_response.BCFN.out.cif.real".
