Loading CIF specification "controllercheck/finite_response/three_part_loop.cif"...
Preparing for BDD-based checks...
    CIF variables and location pointers:
        Nr     Kind              Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      input variable    int[0..2]  Y     0      2 * 2     3 * 2       4 * 2       75%
        2      location pointer  n/a        X     1      2 * 2     3 * 2       4 * 2       75%
        -----  ----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                     2      8         12          16          75%

    Applying variable ordering:
        Applying 4 orderers, sequentially:
            Applying sorted variable order:
                Effect: both

            Applying DCSH algorithm:
                Metric: wes
                Relations: legacy
                Effect: var-order
                Number of hyper-edges: 6

                Applying Weighted Cuthill-McKee algorithm:
                    Node finder: george-liu
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Found new best variable order.

                Applying Sloan algorithm:
                    Relations: legacy
                    Effect: var-order
                    Number of graph edges: 0

                    Skipping algorithm: no graph edges.

                Applying 2 orderers, sequentially:
                    Applying Weighted Cuthill-McKee algorithm:
                        Node finder: george-liu
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [reversed]

                Applying 2 orderers, sequentially:
                    Applying Sloan algorithm:
                        Relations: legacy
                        Effect: var-order
                        Number of graph edges: 0

                        Skipping algorithm: no graph edges.

                    Reversing the variable order:
                        Relations: legacy
                        Effect: var-order
                        Number of hyper-edges: 6

                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [before]
                        Total span:   0 (total)   0.00 (avg/edge) / WES:   0.250000 (total)   0.041667 (avg/edge) [reversed]

            Applying FORCE algorithm:
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Maximum number of iterations: 10

                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [before]
                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [iteration 1]
                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [after]

            Applying sliding window algorithm:
                Size: 4
                Metric: total-span
                Relations: linearized
                Effect: var-order
                Number of hyper-edges: 3
                Window length: 2

                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [before]
                Total span:   3 (total)   1.00 (avg/edge) / WES:   1.000000 (total)   0.333333 (avg/edge) [after]

    Variable order changed.

    CIF variables and location pointers:
        Nr     Kind              Type       Name  Group  BDD vars  CIF values  BDD values  Values used
        -----  ----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        1      location pointer  n/a        X     0      2 * 2     3 * 2       4 * 2       75%
        2      input variable    int[0..2]  Y     1      2 * 2     3 * 2       4 * 2       75%
        -----  ----------------  ---------  ----  -----  --------  ----------  ----------  -----------
        Total                                     2      8         12          16          75%

    Restricting system behavior using state/event exclusion plant invariants:
        Edge (event: X.a) (guard: X.A) (assignments: X := X.B): guard: X.A -> X.A and Y != 1 [plant: Y != 1].
        Edge (event: X.b) (guard: X.B) (assignments: X := X.C): guard: X.B -> X.B and Y != 2 [plant: Y != 2].
        Edge (event: X.c) (guard: X.C) (assignments: X := X.A): guard: X.C -> X.C and Y = 2 or X.C and Y = 1 [plant: Y != 0].

        System:
            Edge: (event: X.a) (guard: X.A -> X.A and Y != 1) (assignments: X := X.B)
            Edge: (event: X.b) (guard: X.B -> X.B and Y != 2) (assignments: X := X.C)
            Edge: (event: X.c) (guard: X.C -> X.C and Y = 2 or X.C and Y = 1) (assignments: X := X.A)
            Edge: (event: Y) (guard: true) (assignments: Y+ != Y)

Preparing for MDD-based checks...
    Analyzing automaton "X"...
        Initializing the automaton data for event "X.a"...
        Initializing the automaton data for event "X.b"...
        Initializing the automaton data for event "X.c"...
        Processing edges from location "A" of automaton "X"...
        Processing edges from location "B" of automaton "X"...
        Processing edges from location "C" of automaton "X"...
        Updating global guards and updates for event "X.a"...
        Updating global guards and updates for event "X.b"...
        Updating global guards and updates for event "X.c"...

    Analyzing automaton "SupervisorStateEvtExcls"...
        Initializing the automaton data for event "X.a"...
        Initializing the automaton data for event "X.b"...
        Initializing the automaton data for event "X.c"...
        Processing edges from the location of automaton "SupervisorStateEvtExcls"...
        Updating global guards and updates for event "X.a"...
        Updating global guards and updates for event "X.b"...
        Updating global guards and updates for event "X.c"...

Checking for bounded response...
    Computing reachable states:
        Reachable states: X.A [initial states predicate]

        Forward reachability iteration 1:
            Reachable states: X.A -> X.A or X.B and Y != 1 [forward reach with edge: (event: X.a) (guard: X.A -> X.A and Y != 1) (assignments: X := X.B)]
            Reachable states: X.A or X.B and Y != 1 -> X.A or (X.C and Y = 0 or X.B and Y != 1) [forward reach with edge: (event: X.b) (guard: X.B -> X.B and Y != 2) (assignments: X := X.C)]
            Reachable states: X.A or (X.C and Y = 0 or X.B and Y != 1) -> true [forward reach with edge: (event: Y) (guard: true) (assignments: Y+ != Y)]

        Forward reachability iteration 2:
            No change this iteration.

        Reachable states: true [fixed point].

    Computing bound for uncontrollable events...
        Bounded response check round 1 (states before round: true).

        Bound: 0.

    Computing bound for controllable events...
        Bounded response check round 1 (states before round: true).
        Bounded response check round 2 (states before round: (not X.A or Y != 0) and ((not X.C or Y != 2) and (not X.B or Y != 1))).
        Bounded response check round 3 (states before round: X.A and Y = 1 or (X.C and Y = 0 or X.B and Y = 2)).

        Bound: 2.

    Bounded response check completed.

Checking for non-blocking under control...
    Computing the condition for no controllable event to be enabled:
        Condition under which no controllable event is enabled: X.A and Y = 1 or (X.C and Y = 0 or X.B and Y = 2)

    Computing the controllable-complete path states...
        Controllable-complete path states: false [controllable-complete path end states predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Controllable-complete path states: false

    Computing the bad states...
        Bad states: true [not controllable-complete path states predicate]

        Backward reachability iteration 1:
            No change this iteration.

        Bad states: true

    Computing the result of the non-blocking under control check...
        Initial states: X.A
        Bad initial states: X.A

    Non-blocking under control: no

Checking for finite response...
    Iteration 1.
        The following events have been encountered in a controllable-event loop of automaton X:
            (X.a X.b X.c), which is controllable unconnectable.

Checking for confluence...
    Mutual exclusive event pairs:
        (X.a, X.b), (X.a, X.c), (X.b, X.c)

CONCLUSION:
    [OK] The specification has bounded response:

        - No transitions are possible for uncontrollable events.
        - A sequence of at most 2 transitions is possible for controllable events.

    [ERROR] The specification is NOT non-blocking under control.
    [OK] The specification has finite response.
    [OK] The specification has confluence.

The model with the check results has been written to "controllercheck/finite_response/three_part_loop.BCFN.out.cif.real".
