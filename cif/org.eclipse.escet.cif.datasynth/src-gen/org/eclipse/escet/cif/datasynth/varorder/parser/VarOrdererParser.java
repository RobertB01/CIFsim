//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Disable Eclipse Java formatter for generated code file:
// @formatter:off

package org.eclipse.escet.cif.datasynth.varorder.parser;

import static org.eclipse.escet.common.java.Strings.fmt;

import java.io.IOException;
import java.util.List;

import org.eclipse.escet.cif.datasynth.varorder.parser.ast.VarOrderOrOrdererArg;
import org.eclipse.escet.cif.datasynth.varorder.parser.ast.VarOrderOrOrdererInstance;
import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.ParserHooksBase;
import org.eclipse.escet.setext.runtime.Token;

/**
 * VarOrderParser.
 *
 * <p>This parser is generated by SeText for main symbol
 * "VarOrderOrOrdererSeq".</p>
 */
@SuppressWarnings("unchecked")
public final class VarOrderParser extends Parser<List<VarOrderOrOrdererInstance>> {
    /** The names of the non-terminals, ordered by their unique ids. */
    private static final String[] NON_TERMINAL_NAMES = {
        "VarOrderOrOrdererSeq",
        "VarOrderOrOrdererList",
        "VarOrderOrOrderer",
        "VarOrderOrOrdererArgs",
        "VarOrderOrOrdererArg",
        "OptComma",
    };

    /**
     * The entry symbol names for each of the parser states, and {@code null}
     * for the initial state.
     */
    private static final String[] ENTRY_SYMBOL_NAMES = new String[] {
        null,
        "PAROPENTK",
        "IDENTIFIERTK",
        "VarOrderOrOrderer",
        "VarOrderOrOrdererSeq",
        "ARROWTK",
        "VarOrderOrOrderer",
        "PAROPENTK",
        "PARCLOSETK",
        "IDENTIFIERTK",
        "VarOrderOrOrdererArg",
        "VarOrderOrOrdererArgs",
        "COMMATK",
        "OptComma",
        "PARCLOSETK",
        "VarOrderOrOrdererArg",
        "EQUALTK",
        "SQOPENTK",
        "NUMBERTK",
        "STRINGTK",
        "VarOrderOrOrderer",
        "VarOrderOrOrderer",
        "VarOrderOrOrdererList",
        "COMMATK",
        "SQCLOSETK",
        "VarOrderOrOrderer",
        "VarOrderOrOrdererSeq",
        "PARCLOSETK",
    };

    /** Parser call back hook methods. */
    private final VarOrderParserHooks hooks;

    /** Whether parsing has completed (final result has been accepted). */
    private boolean accept;

    /** The parse result, but only if {@code #accept} is {@code true}. */
    private List<VarOrderOrOrdererInstance> acceptObject;

    /** The current scanner token to process, if any. */
    private Token token;

    /** Whether parsing has resulted in a reduce action. */
    private boolean reduce;

    /** The state from which to reduce, if {@code #reduce} is {@code true}. */
    private int reduceState;

    /** The non-terminal to reduce, if {@code #reduce} is {@code true}. */
    private int reduceNonTerminal;

    /** Constructor for the {@link VarOrderParser} class. */
    public VarOrderParser() {
        super(new VarOrderScanner());
        entrySymbolNames = ENTRY_SYMBOL_NAMES;
        firstTerminals = FirstTerminals.FIRST_TERMINALS;
        firstTerminalsReduced = FirstTerminalsReduced.FIRST_TERMINALS_REDUCED;
        reducibleNonTerminals = ReducibleNonTerminals.REDUCIBLE_NON_TERMINALS;
        reducibleNonTerminalsReduced = ReducibleNonTerminalsReduced.REDUCIBLE_NON_TERMINALS_REDUCED;
        hooks = new VarOrderParserHooks();
    }

    @Override
    public ParserHooksBase getHooks() {
        return hooks;
    }

    @Override
    protected final List<VarOrderOrOrdererInstance> parse() throws IOException {
        token = nextToken();
        int state;

        accept = false;

        while (true) {
            // Perform action.
            state = getCurrentState();
            reduce = false;

            switch (state) {
                case 0:
                    action0();
                    break;
                case 1:
                    action1();
                    break;
                case 2:
                    action2();
                    break;
                case 3:
                    action3();
                    break;
                case 4:
                    action4();
                    break;
                case 5:
                    action5();
                    break;
                case 6:
                    action6();
                    break;
                case 7:
                    action7();
                    break;
                case 8:
                    action8();
                    break;
                case 9:
                    action9();
                    break;
                case 10:
                    action10();
                    break;
                case 11:
                    action11();
                    break;
                case 12:
                    action12();
                    break;
                case 13:
                    action13();
                    break;
                case 14:
                    action14();
                    break;
                case 15:
                    action15();
                    break;
                case 16:
                    action16();
                    break;
                case 17:
                    action17();
                    break;
                case 18:
                    action18();
                    break;
                case 19:
                    action19();
                    break;
                case 20:
                    action20();
                    break;
                case 21:
                    action21();
                    break;
                case 22:
                    action22();
                    break;
                case 23:
                    action23();
                    break;
                case 24:
                    action24();
                    break;
                case 25:
                    action25();
                    break;
                case 26:
                    action26();
                    break;
                case 27:
                    action27();
                    break;
                default:
                    String msg = "Unknown parser state: " + state;
                    throw new RuntimeException(msg);
            }

            // Accept action.
            if (accept) {
                return acceptObject;
            }

            // Shift action.
            if (!reduce) {
                continue;
            }

            // Perform goto (as part of a reduce action).
            switch (reduceState) {
                case 0:
                    goto0();
                    break;
                case 1:
                    goto1();
                    break;
                case 2:
                    goto2();
                    break;
                case 3:
                    goto3();
                    break;
                case 4:
                    goto4();
                    break;
                case 5:
                    goto5();
                    break;
                case 6:
                    goto6();
                    break;
                case 7:
                    goto7();
                    break;
                case 8:
                    goto8();
                    break;
                case 9:
                    goto9();
                    break;
                case 10:
                    goto10();
                    break;
                case 11:
                    goto11();
                    break;
                case 12:
                    goto12();
                    break;
                case 13:
                    goto13();
                    break;
                case 14:
                    goto14();
                    break;
                case 15:
                    goto15();
                    break;
                case 16:
                    goto16();
                    break;
                case 17:
                    goto17();
                    break;
                case 18:
                    goto18();
                    break;
                case 19:
                    goto19();
                    break;
                case 20:
                    goto20();
                    break;
                case 21:
                    goto21();
                    break;
                case 22:
                    goto22();
                    break;
                case 23:
                    goto23();
                    break;
                case 24:
                    goto24();
                    break;
                case 25:
                    goto25();
                    break;
                case 26:
                    goto26();
                    break;
                case 27:
                    goto27();
                    break;
                default:
                    String msg = fmt("Unknown reduce state %d.", reduceState);
                    throw new RuntimeException(msg);
            }
        }
    }

    /**
     * Parser action code for parser state 0.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action0() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 1.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action1() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 2.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action2() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 0:
            case 1:
            case 3:
            case 6:
            case 11: {
                // Reduce VarOrderOrOrderer : IDENTIFIERTK;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                VarOrderOrOrdererInstance o = hooks.parseVarOrderOrOrderer1((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 3.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action3() throws IOException {
        switch (token.id) {
            case 0:
            case 3:
            case 11: {
                // Reduce VarOrderOrOrdererSeq : VarOrderOrOrderer;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                List<VarOrderOrOrdererInstance> o = hooks.parseVarOrderOrOrdererSeq1((VarOrderOrOrdererInstance)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 4.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action4() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 11: {
                // Accept.
                Object rslt = doAccept(token);
                accept = true;
                acceptObject = (List<VarOrderOrOrdererInstance>)rslt;
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 5.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action5() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 6.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action6() throws IOException {
        switch (token.id) {
            case 0:
            case 3:
            case 11: {
                // Reduce VarOrderOrOrdererSeq : VarOrderOrOrdererSeq ARROWTK VarOrderOrOrderer;
                doReduce1(token, 0);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<VarOrderOrOrdererInstance> o = hooks.parseVarOrderOrOrdererSeq2((List<VarOrderOrOrdererInstance>)o1, (VarOrderOrOrdererInstance)o3);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 7.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action7() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 7: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 8.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action8() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 3:
            case 6:
            case 11: {
                // Reduce VarOrderOrOrderer : IDENTIFIERTK PAROPENTK PARCLOSETK;
                doReduce1(token, 2);
                doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererInstance o = hooks.parseVarOrderOrOrderer2((Token)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 9.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action9() throws IOException {
        switch (token.id) {
            case 2: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 10.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action10() throws IOException {
        switch (token.id) {
            case 1:
            case 3: {
                // Reduce VarOrderOrOrdererArgs : VarOrderOrOrdererArg;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                List<VarOrderOrOrdererArg> o = hooks.parseVarOrderOrOrdererArgs1((VarOrderOrOrdererArg)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 11.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action11() throws IOException {
        switch (token.id) {
            case 1: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 3: {
                // Reduce OptComma : ;
                doReduce1(token, 5);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 12.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action12() throws IOException {
        switch (token.id) {
            case 7: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 3: {
                // Reduce OptComma : COMMATK;
                doReduce1(token, 5);
                Object o1 = doReduce2();

                Token o = hooks.parseOptComma2((Token)o1);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 13.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action13() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 14.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action14() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 3:
            case 6:
            case 11: {
                // Reduce VarOrderOrOrderer : IDENTIFIERTK PAROPENTK VarOrderOrOrdererArgs OptComma PARCLOSETK;
                doReduce1(token, 2);
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererInstance o = hooks.parseVarOrderOrOrderer3((Token)o1, (List<VarOrderOrOrdererArg>)o3, (Token)o4);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 15.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action15() throws IOException {
        switch (token.id) {
            case 1:
            case 3: {
                // Reduce VarOrderOrOrdererArgs : VarOrderOrOrdererArgs COMMATK VarOrderOrOrdererArg;
                doReduce1(token, 3);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<VarOrderOrOrdererArg> o = hooks.parseVarOrderOrOrdererArgs2((List<VarOrderOrOrdererArg>)o1, (VarOrderOrOrdererArg)o3);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 16.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action16() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            case 5: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 8: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 9: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 17.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action17() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 18.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action18() throws IOException {
        switch (token.id) {
            case 1:
            case 3: {
                // Reduce VarOrderOrOrdererArg : IDENTIFIERTK EQUALTK NUMBERTK;
                doReduce1(token, 4);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererArg o = hooks.parseVarOrderOrOrdererArg1((Token)o1, (Token)o3);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 19.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action19() throws IOException {
        switch (token.id) {
            case 1:
            case 3: {
                // Reduce VarOrderOrOrdererArg : IDENTIFIERTK EQUALTK STRINGTK;
                doReduce1(token, 4);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererArg o = hooks.parseVarOrderOrOrdererArg2((Token)o1, (Token)o3);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 20.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action20() throws IOException {
        switch (token.id) {
            case 1:
            case 3: {
                // Reduce VarOrderOrOrdererArg : IDENTIFIERTK EQUALTK VarOrderOrOrderer;
                doReduce1(token, 4);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererArg o = hooks.parseVarOrderOrOrdererArg3((Token)o1, (VarOrderOrOrdererInstance)o3);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 21.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action21() throws IOException {
        switch (token.id) {
            case 1:
            case 6: {
                // Reduce VarOrderOrOrdererList : VarOrderOrOrderer;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                List<VarOrderOrOrdererInstance> o = hooks.parseVarOrderOrOrdererList1((VarOrderOrOrdererInstance)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 22.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action22() throws IOException {
        switch (token.id) {
            case 1: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 6: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 23.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action23() throws IOException {
        switch (token.id) {
            case 4: {
                // Shift 1.
                token = doShift(token, 1);
                return;
            }

            case 7: {
                // Shift 2.
                token = doShift(token, 2);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 24.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action24() throws IOException {
        switch (token.id) {
            case 1:
            case 3: {
                // Reduce VarOrderOrOrdererArg : IDENTIFIERTK EQUALTK SQOPENTK VarOrderOrOrdererList SQCLOSETK;
                doReduce1(token, 4);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererArg o = hooks.parseVarOrderOrOrdererArg4((Token)o1, (List<VarOrderOrOrdererInstance>)o4);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 25.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action25() throws IOException {
        switch (token.id) {
            case 1:
            case 6: {
                // Reduce VarOrderOrOrdererList : VarOrderOrOrdererList COMMATK VarOrderOrOrderer;
                doReduce1(token, 1);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<VarOrderOrOrdererInstance> o = hooks.parseVarOrderOrOrdererList2((List<VarOrderOrOrdererInstance>)o1, (VarOrderOrOrdererInstance)o3);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 26.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action26() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 3: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 27.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action27() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 3:
            case 6:
            case 11: {
                // Reduce VarOrderOrOrderer : PAROPENTK VarOrderOrOrdererSeq PARCLOSETK;
                doReduce1(token, 2);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                VarOrderOrOrdererInstance o = hooks.parseVarOrderOrOrderer4((Token)o1, (List<VarOrderOrOrdererInstance>)o2);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /** Parser goto code for parser state 0. */
    private final void goto0() {
        switch (reduceNonTerminal) {
            case 0:
                // VarOrderOrOrdererSeq
                doGoto(4);
                return;

            case 2:
                // VarOrderOrOrderer
                doGoto(3);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 1. */
    private final void goto1() {
        switch (reduceNonTerminal) {
            case 0:
                // VarOrderOrOrdererSeq
                doGoto(26);
                return;

            case 2:
                // VarOrderOrOrderer
                doGoto(3);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 2. */
    private final void goto2() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 3. */
    private final void goto3() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 4. */
    private final void goto4() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 5. */
    private final void goto5() {
        switch (reduceNonTerminal) {
            case 2:
                // VarOrderOrOrderer
                doGoto(6);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 6. */
    private final void goto6() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 7. */
    private final void goto7() {
        switch (reduceNonTerminal) {
            case 3:
                // VarOrderOrOrdererArgs
                doGoto(11);
                return;

            case 4:
                // VarOrderOrOrdererArg
                doGoto(10);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 8. */
    private final void goto8() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 9. */
    private final void goto9() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 10. */
    private final void goto10() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 11. */
    private final void goto11() {
        switch (reduceNonTerminal) {
            case 5:
                // OptComma
                doGoto(13);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 12. */
    private final void goto12() {
        switch (reduceNonTerminal) {
            case 4:
                // VarOrderOrOrdererArg
                doGoto(15);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 13. */
    private final void goto13() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 14. */
    private final void goto14() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 15. */
    private final void goto15() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 16. */
    private final void goto16() {
        switch (reduceNonTerminal) {
            case 2:
                // VarOrderOrOrderer
                doGoto(20);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 17. */
    private final void goto17() {
        switch (reduceNonTerminal) {
            case 1:
                // VarOrderOrOrdererList
                doGoto(22);
                return;

            case 2:
                // VarOrderOrOrderer
                doGoto(21);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 18. */
    private final void goto18() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 19. */
    private final void goto19() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 20. */
    private final void goto20() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 21. */
    private final void goto21() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 22. */
    private final void goto22() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 23. */
    private final void goto23() {
        switch (reduceNonTerminal) {
            case 2:
                // VarOrderOrOrderer
                doGoto(25);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 24. */
    private final void goto24() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 25. */
    private final void goto25() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 26. */
    private final void goto26() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 27. */
    private final void goto27() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    @Override
    protected final String getNonTerminalName(int nonTerminalId) {
        return NON_TERMINAL_NAMES[nonTerminalId];
    }

    /** See {@code Parser.firstTerminals}. */
    private static final class FirstTerminals {
        /** See {@code Parser.firstTerminals}. */
        private static final int[][] FIRST_TERMINALS = new int[][] {
            {4, 7}, // state 0
            {4, 7}, // state 1
            {4}, // state 2
            {}, // state 3
            {0, 11}, // state 4
            {4, 7}, // state 5
            {}, // state 6
            {3, 7}, // state 7
            {}, // state 8
            {2}, // state 9
            {}, // state 10
            {1, 3}, // state 11
            {7}, // state 12
            {3}, // state 13
            {}, // state 14
            {}, // state 15
            {4, 5, 7, 8, 9}, // state 16
            {4, 7}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {1, 6}, // state 22
            {4, 7}, // state 23
            {}, // state 24
            {}, // state 25
            {0, 3}, // state 26
            {}, // state 27
        };
    }

    /** See {@code Parser.firstTerminalsReduced}. */
    private static final class FirstTerminalsReduced {
        /** See {@code Parser.firstTerminalsReduced}. */
        private static final int[][][] FIRST_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {0, 0, 11},
            },
            { // state 1
                {0, 0, 3},
            },
            {}, // state 2
            {}, // state 3
            {}, // state 4
            {}, // state 5
            {}, // state 6
            { // state 7
                {3, 1, 3},
            },
            {}, // state 8
            {}, // state 9
            {}, // state 10
            { // state 11
                {5, 3},
            },
            {}, // state 12
            {}, // state 13
            {}, // state 14
            {}, // state 15
            {}, // state 16
            { // state 17
                {1, 1, 6},
            },
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
        };
    }

    /** See {@code Parser.reducibleNonTerminals}. */
    private static final class ReducibleNonTerminals {
        /** See {@code Parser.reducibleNonTerminals}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS = new int[][][] {
            {}, // state 0
            {}, // state 1
            { // state 2
                {2, 1},
            },
            { // state 3
                {0, 1},
            },
            {}, // state 4
            {}, // state 5
            { // state 6
                {0, 3},
            },
            {}, // state 7
            { // state 8
                {2, 3},
            },
            {}, // state 9
            { // state 10
                {3, 1},
            },
            { // state 11
                {5, 0},
            },
            { // state 12
                {5, 1},
            },
            {}, // state 13
            { // state 14
                {2, 5},
            },
            { // state 15
                {3, 3},
            },
            {}, // state 16
            {}, // state 17
            { // state 18
                {4, 3},
            },
            { // state 19
                {4, 3},
            },
            { // state 20
                {4, 3},
            },
            { // state 21
                {1, 1},
            },
            {}, // state 22
            {}, // state 23
            { // state 24
                {4, 5},
            },
            { // state 25
                {1, 3},
            },
            {}, // state 26
            { // state 27
                {2, 3},
            },
        };
    }

    /** See {@code Parser.reducibleNonTerminalsReduced}. */
    private static final class ReducibleNonTerminalsReduced {
        /** See {@code Parser.reducibleNonTerminalsReduced}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {2, 0, 0},
            },
            { // state 1
                {2, 0, 0},
            },
            {}, // state 2
            {}, // state 3
            {}, // state 4
            { // state 5
                {2, 0, 2},
            },
            {}, // state 6
            { // state 7
                {4, 3, 0},
            },
            {}, // state 8
            {}, // state 9
            {}, // state 10
            {}, // state 11
            { // state 12
                {4, 3, 2},
            },
            {}, // state 13
            {}, // state 14
            {}, // state 15
            { // state 16
                {2, 4, 2},
            },
            { // state 17
                {2, 1, 0},
            },
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            { // state 23
                {2, 1, 2},
            },
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
        };
    }

    /** Parser call back hooks for {@link VarOrderParser}. */
    public interface Hooks extends ParserHooksBase {
        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererSeq : VarOrderOrOrderer;}</p>
         *
         * @param v1 {@code VarOrderOrOrderer}.
         * @return The parser call back hook result.
         */
        public List<VarOrderOrOrdererInstance> parseVarOrderOrOrdererSeq1(VarOrderOrOrdererInstance v1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererSeq : VarOrderOrOrdererSeq ARROWTK VarOrderOrOrderer;}</p>
         *
         * @param l1 {@code VarOrderOrOrdererSeq}.
         * @param v3 {@code VarOrderOrOrderer}.
         * @return The parser call back hook result.
         */
        public List<VarOrderOrOrdererInstance> parseVarOrderOrOrdererSeq2(List<VarOrderOrOrdererInstance> l1, VarOrderOrOrdererInstance v3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererList : VarOrderOrOrderer;}</p>
         *
         * @param v1 {@code VarOrderOrOrderer}.
         * @return The parser call back hook result.
         */
        public List<VarOrderOrOrdererInstance> parseVarOrderOrOrdererList1(VarOrderOrOrdererInstance v1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererList : VarOrderOrOrdererList COMMATK VarOrderOrOrderer;}</p>
         *
         * @param l1 {@code VarOrderOrOrdererList}.
         * @param v3 {@code VarOrderOrOrderer}.
         * @return The parser call back hook result.
         */
        public List<VarOrderOrOrdererInstance> parseVarOrderOrOrdererList2(List<VarOrderOrOrdererInstance> l1, VarOrderOrOrdererInstance v3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrderer : @IDENTIFIERTK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererInstance parseVarOrderOrOrderer1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrderer : @IDENTIFIERTK PAROPENTK PARCLOSETK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererInstance parseVarOrderOrOrderer2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrderer : @IDENTIFIERTK PAROPENTK VarOrderOrOrdererArgs OptComma PARCLOSETK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param l3 {@code VarOrderOrOrdererArgs}.
         * @param t4 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererInstance parseVarOrderOrOrderer3(Token t1, List<VarOrderOrOrdererArg> l3, Token t4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrderer : @PAROPENTK VarOrderOrOrdererSeq PARCLOSETK;}</p>
         *
         * @param t1 {@code PAROPENTK}.
         * @param l2 {@code VarOrderOrOrdererSeq}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererInstance parseVarOrderOrOrderer4(Token t1, List<VarOrderOrOrdererInstance> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererArgs : VarOrderOrOrdererArg;}</p>
         *
         * @param v1 {@code VarOrderOrOrdererArg}.
         * @return The parser call back hook result.
         */
        public List<VarOrderOrOrdererArg> parseVarOrderOrOrdererArgs1(VarOrderOrOrdererArg v1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererArgs : VarOrderOrOrdererArgs COMMATK VarOrderOrOrdererArg;}</p>
         *
         * @param l1 {@code VarOrderOrOrdererArgs}.
         * @param v3 {@code VarOrderOrOrdererArg}.
         * @return The parser call back hook result.
         */
        public List<VarOrderOrOrdererArg> parseVarOrderOrOrdererArgs2(List<VarOrderOrOrdererArg> l1, VarOrderOrOrdererArg v3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererArg : @IDENTIFIERTK EQUALTK @NUMBERTK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param t3 {@code NUMBERTK}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererArg parseVarOrderOrOrdererArg1(Token t1, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererArg : @IDENTIFIERTK EQUALTK @STRINGTK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param t3 {@code STRINGTK}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererArg parseVarOrderOrOrdererArg2(Token t1, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererArg : @IDENTIFIERTK EQUALTK VarOrderOrOrderer;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param v3 {@code VarOrderOrOrderer}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererArg parseVarOrderOrOrdererArg3(Token t1, VarOrderOrOrdererInstance v3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code VarOrderOrOrdererArg : @IDENTIFIERTK EQUALTK SQOPENTK VarOrderOrOrdererList SQCLOSETK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param l4 {@code VarOrderOrOrdererList}.
         * @return The parser call back hook result.
         */
        public VarOrderOrOrdererArg parseVarOrderOrOrdererArg4(Token t1, List<VarOrderOrOrdererInstance> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptComma : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public Token parseOptComma1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptComma : @COMMATK;}</p>
         *
         * @param t1 {@code COMMATK}.
         * @return The parser call back hook result.
         */
        public Token parseOptComma2(Token t1);
    }
}
