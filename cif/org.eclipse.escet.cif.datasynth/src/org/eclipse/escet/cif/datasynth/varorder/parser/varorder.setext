//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

@scanner org.eclipse.escet.cif.datasynth.varorder.parser.VarOrderScanner;

@terminals:
  // Symbols.
  ARROWTK    = "\->";
  COMMATK    = ",";
  EQUALTK    = "=";
  PARCLOSETK = "\)";
  PAROPENTK  = "\(";
  SQOPENTK   = "\[";
  SQCLOSETK  = "\]";

  // Literals.
  IDENTIFIERTK     = "[a-zA-Z][a-zA-Z\-]*[a-zA-Z]"
                     [an identifier];
  NUMBERTK         = "\-?(0|[1-9][0-9]*)"
                     [an integer literal];
  STRINGTK         = "\"([^\\\"\n]|\\[nt\\\"])*\""
                     [a string literal];

  // Whitespace and EOF.
  "[ \t\r\n]+";
  @eof;
end

@import java.util.List;
@import org.eclipse.escet.cif.datasynth.varorder.parser;
@import org.eclipse.escet.cif.datasynth.varorder.parser.ast;
@import org.eclipse.escet.setext.runtime.Token;

@main VarOrderOrOrdererSeq: parser.VarOrderParser;

@hooks parser.VarOrderParserHooks;

{List<ast.VarOrderOrOrdererInstance>}
VarOrderOrOrdererSeq : VarOrderOrOrderer
                     | VarOrderOrOrdererSeq ARROWTK VarOrderOrOrderer
                     ;

{List<ast.VarOrderOrOrdererInstance>}
VarOrderOrOrdererList : VarOrderOrOrderer
                      | VarOrderOrOrdererList COMMATK VarOrderOrOrderer
                      ;

{ast.VarOrderOrOrdererInstance}
VarOrderOrOrderer : @IDENTIFIERTK
                  | @IDENTIFIERTK PAROPENTK                                PARCLOSETK
                  | @IDENTIFIERTK PAROPENTK VarOrderOrOrdererArgs OptComma PARCLOSETK
                  | @PAROPENTK VarOrderOrOrdererSeq PARCLOSETK
                  ;

{List<ast.VarOrderOrOrdererArg>}
VarOrderOrOrdererArgs : VarOrderOrOrdererArg
                      | VarOrderOrOrdererArgs COMMATK VarOrderOrOrdererArg
                      ;

{ast.VarOrderOrOrdererArg}
VarOrderOrOrdererArg : @IDENTIFIERTK EQUALTK @NUMBERTK
                     | @IDENTIFIERTK EQUALTK @STRINGTK
                     | @IDENTIFIERTK EQUALTK VarOrderOrOrderer // If no arguments, includes a single identifier.
                     | @IDENTIFIERTK EQUALTK SQOPENTK VarOrderOrOrdererList SQCLOSETK
                     ;

{Token}
OptComma : /* empty */
         | @COMMATK
         ;
