//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

// Disable Eclipse Java formatter for generated code file:
// @formatter:off

package org.eclipse.escet.cif.parser;

import static org.eclipse.escet.common.java.Strings.fmt;

import java.io.IOException;
import java.util.List;

import org.eclipse.escet.cif.parser.ast.ADecl;
import org.eclipse.escet.cif.parser.ast.AEquation;
import org.eclipse.escet.cif.parser.ast.AEventParameterPart;
import org.eclipse.escet.cif.parser.ast.AGroupBody;
import org.eclipse.escet.cif.parser.ast.AImport;
import org.eclipse.escet.cif.parser.ast.AInvariant;
import org.eclipse.escet.cif.parser.ast.AInvariantDecl;
import org.eclipse.escet.cif.parser.ast.AParameter;
import org.eclipse.escet.cif.parser.ast.ASpecification;
import org.eclipse.escet.cif.parser.ast.annotations.AAnnotation;
import org.eclipse.escet.cif.parser.ast.annotations.AAnnotationArgument;
import org.eclipse.escet.cif.parser.ast.automata.AAutomatonBody;
import org.eclipse.escet.cif.parser.ast.automata.ACoreEdge;
import org.eclipse.escet.cif.parser.ast.automata.AEdgeEvent;
import org.eclipse.escet.cif.parser.ast.automata.AElifUpdate;
import org.eclipse.escet.cif.parser.ast.automata.ALocation;
import org.eclipse.escet.cif.parser.ast.automata.ALocationElement;
import org.eclipse.escet.cif.parser.ast.automata.AUpdate;
import org.eclipse.escet.cif.parser.ast.declarations.AAlgVariable;
import org.eclipse.escet.cif.parser.ast.declarations.AConstant;
import org.eclipse.escet.cif.parser.ast.declarations.AContVariable;
import org.eclipse.escet.cif.parser.ast.declarations.ADiscVariable;
import org.eclipse.escet.cif.parser.ast.declarations.ADiscVariableDecl;
import org.eclipse.escet.cif.parser.ast.declarations.ATypeDef;
import org.eclipse.escet.cif.parser.ast.expressions.ADictPair;
import org.eclipse.escet.cif.parser.ast.expressions.AElifExpression;
import org.eclipse.escet.cif.parser.ast.expressions.AExpression;
import org.eclipse.escet.cif.parser.ast.expressions.AProjectionExpression;
import org.eclipse.escet.cif.parser.ast.expressions.ASetExpression;
import org.eclipse.escet.cif.parser.ast.expressions.ASwitchCase;
import org.eclipse.escet.cif.parser.ast.functions.AElifFuncStatement;
import org.eclipse.escet.cif.parser.ast.functions.AElseFuncStatement;
import org.eclipse.escet.cif.parser.ast.functions.AFuncBody;
import org.eclipse.escet.cif.parser.ast.functions.AFuncParam;
import org.eclipse.escet.cif.parser.ast.functions.AFuncStatement;
import org.eclipse.escet.cif.parser.ast.iodecls.AIoDecl;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrint;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintFile;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintFor;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintTxt;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintWhen;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgCopy;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgFile;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgIn;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgInEvent;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgInEventIfEntry;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgMove;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgOut;
import org.eclipse.escet.cif.parser.ast.tokens.AEventParamFlag;
import org.eclipse.escet.cif.parser.ast.tokens.AIdentifier;
import org.eclipse.escet.cif.parser.ast.tokens.AName;
import org.eclipse.escet.cif.parser.ast.tokens.AStringToken;
import org.eclipse.escet.cif.parser.ast.types.ACifType;
import org.eclipse.escet.cif.parser.ast.types.AField;
import org.eclipse.escet.common.java.TextPosition;
import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.ParserHooksBase;
import org.eclipse.escet.setext.runtime.Token;

/**
 * CifParser.
 *
 * <p>This parser is generated by SeText for main symbol
 * "Specification".</p>
 */
@SuppressWarnings("unchecked")
public final class CifParser extends Parser<ASpecification> {
    /** The names of the non-terminals, ordered by their unique ids. */
    private static final String[] NON_TERMINAL_NAMES = {
        "SupKind",
        "StdLibFunction",
        "Specification",
        "GroupBody",
        "AutomatonBody",
        "OptGroupDecls",
        "GroupDecl",
        "OptAutDecls",
        "AutDecl",
        "Decl",
        "Identifier",
        "Imports",
        "StringToken",
        "TypeDefs",
        "ConstantDefs",
        "AlgVarsDefs",
        "FuncParams",
        "FuncParamDecls",
        "FuncBody",
        "FuncVarDecls",
        "FuncVarDecl",
        "FuncStatements",
        "FuncStatement",
        "OptElifFuncStats",
        "OptElseFuncStat",
        "Events",
        "CoreEdge",
        "OptEdgeGuard",
        "OptEdgeUrgent",
        "OptEdgeUpdate",
        "EdgeEvents",
        "EdgeEvent",
        "Locations",
        "Location",
        "LocationElements",
        "LocationElement",
        "CompInstArgs",
        "CompDefParms",
        "CompDefDecls",
        "CompDefDeclaration",
        "EventParamIds",
        "EventParamId",
        "OptEventParamFlags",
        "EventParamFlag",
        "DiscDecls",
        "DiscDecl",
        "ContDecls",
        "ContDecl",
        "OptDerivative",
        "Equations",
        "Equation",
        "InvariantDecls",
        "Invariants",
        "Invariant",
        "NamesSet",
        "Names",
        "Updates",
        "Update",
        "Addressables",
        "Addressable",
        "Projections",
        "Projection",
        "OptElifUpdates",
        "OptElseUpdate",
        "Identifiers",
        "OptSupKind",
        "OptControllability",
        "Controllability",
        "OptIoDecls",
        "IoDecl",
        "SvgFile",
        "OptSvgFile",
        "SvgCopy",
        "OptSvgCopyPre",
        "OptSvgCopyPost",
        "SvgMove",
        "SvgOut",
        "SvgAttr",
        "SvgIn",
        "SvgInEvent",
        "OptSvgInEventElifs",
        "SvgInEventElifs",
        "PrintFile",
        "Print",
        "PrintTxt",
        "OptPrintFors",
        "PrintFors",
        "PrintFor",
        "OptPrintWhen",
        "OptPrintFile",
        "Types",
        "EventType",
        "Type",
        "Fields",
        "Field",
        "Expressions",
        "OptExpression",
        "Expression",
        "OrExpression",
        "AndExpression",
        "CompareExpression",
        "AddExpression",
        "MulExpression",
        "UnaryExpression",
        "FuncExpression",
        "ExpressionFactor",
        "NonEmptySetExpression",
        "DictPairs",
        "OptElifExprs",
        "SwitchBody",
        "SwitchCases",
        "Name",
        "OptAnnos",
        "Annotation",
        "AnnotationArgs",
        "AnnotationArg",
        "OptComma",
    };

    /**
     * The entry symbol names for each of the parser states, and {@code null}
     * for the initial state.
     */
    private static final String[] ENTRY_SYMBOL_NAMES = new String[] {
        null,
        "GroupBody",
        "OptGroupDecls",
        "Specification",
        "ALGKW",
        "CONSTKW",
        "CONTKW",
        "CONTROLLABLEKW",
        "ENUMKW",
        "EQUATIONKW",
        "FUNCKW",
        "GROUPKW",
        "IMPORTKW",
        "INITIALKW",
        "MARKEDKW",
        "NAMESPACEKW",
        "PRINTKW",
        "PRINTFILEKW",
        "SVGCOPYKW",
        "SVGFILEKW",
        "SVGINKW",
        "SVGMOVEKW",
        "SVGOUTKW",
        "TYPEKW",
        "UNCONTROLLABLEKW",
        "PLANTKW",
        "REQUIREMENTKW",
        "SUPERVISORKW",
        "IDENTIFIERTK",
        "Controllability",
        "Decl",
        "GroupDecl",
        "Identifier",
        "InvariantDecls",
        "IoDecl",
        "OptAnnos",
        "OptControllability",
        "OptSupKind",
        "Print",
        "PrintFile",
        "SupKind",
        "SvgCopy",
        "SvgFile",
        "SvgIn",
        "SvgMove",
        "SvgOut",
        "DEFKW",
        "FALSEKW",
        "IFKW",
        "SELFKW",
        "SWITCHKW",
        "TIMEKW",
        "TRUEKW",
        "ACOSHKW",
        "ACOSKW",
        "ASINHKW",
        "ASINKW",
        "ATANHKW",
        "ATANKW",
        "COSHKW",
        "COSKW",
        "SINHKW",
        "SINKW",
        "TANHKW",
        "TANKW",
        "ABSKW",
        "CBRTKW",
        "CEILKW",
        "DELKW",
        "EMPTYKW",
        "EXPKW",
        "FLOORKW",
        "FMTKW",
        "LNKW",
        "LOGKW",
        "MAXKW",
        "MINKW",
        "POPKW",
        "POWKW",
        "ROUNDKW",
        "SCALEKW",
        "SIGNKW",
        "SIZEKW",
        "SQRTKW",
        "BERNOULLIKW",
        "BETAKW",
        "BINOMIALKW",
        "CONSTANTKW",
        "ERLANGKW",
        "EXPONENTIALKW",
        "GAMMAKW",
        "GEOMETRICKW",
        "LOGNORMALKW",
        "NORMALKW",
        "POISSONKW",
        "RANDOMKW",
        "TRIANGLEKW",
        "UNIFORMKW",
        "WEIBULLKW",
        "NOTKW",
        "SAMPLEKW",
        "QUESTIONTK",
        "LTTK",
        "PLUSTK",
        "MINUSTK",
        "CUROPENTK",
        "PAROPENTK",
        "SQOPENTK",
        "RELATIVENAMETK",
        "ABSOLUTENAMETK",
        "ROOTNAMETK",
        "NUMBERTK",
        "REALTK",
        "STRINGTK",
        "AddExpression",
        "AndExpression",
        "CompareExpression",
        "Expression",
        "ExpressionFactor",
        "FuncExpression",
        "Identifier",
        "Invariant",
        "Invariants",
        "MulExpression",
        "Name",
        "NonEmptySetExpression",
        "OrExpression",
        "StdLibFunction",
        "StringToken",
        "UnaryExpression",
        "PAROPENTK",
        "PARCLOSETK",
        "Expression",
        "Expressions",
        "Identifier",
        "Name",
        "NonEmptySetExpression",
        "APOSTROPHETK",
        "COMMATK",
        "PARCLOSETK",
        "Expression",
        "ORKW",
        "IMPLIESTK",
        "EQUIVALENCETK",
        "OrExpression",
        "OrExpression",
        "AndExpression",
        "ANDKW",
        "CompareExpression",
        "INKW",
        "SUBKW",
        "LTTK",
        "LETK",
        "EQTK",
        "NETK",
        "GETK",
        "GTTK",
        "AddExpression",
        "PLUSTK",
        "MINUSTK",
        "MulExpression",
        "DIVKW",
        "MODKW",
        "ASTERISKTK",
        "SLASHTK",
        "UnaryExpression",
        "UnaryExpression",
        "UnaryExpression",
        "UnaryExpression",
        "MulExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "AddExpression",
        "NEEDSKW",
        "Expression",
        "NEEDSKW",
        "Expression",
        "COMMATK",
        "SEMICOLTK",
        "Identifier",
        "Invariant",
        "COLONTK",
        "Expression",
        "Name",
        "NEEDSKW",
        "Expression",
        "DISABLESKW",
        "Name",
        "COLONTK",
        "AutomatonBody",
        "OptAutDecls",
        "ALPHABETKW",
        "DISCKW",
        "MONITORKW",
        "AutDecl",
        "Decl",
        "Location",
        "Locations",
        "OptAnnos",
        "OptSupKind",
        "SupKind",
        "INVARIANTKW",
        "Invariants",
        "SEMICOLTK",
        "INPUTKW",
        "LOCATIONKW",
        "ANNOTATIONNAMETK",
        "Annotation",
        "PAROPENTK",
        "PARCLOSETK",
        "RELATIVENAMETK",
        "IDENTIFIERTK",
        "AnnotationArg",
        "AnnotationArgs",
        "COMMATK",
        "OptComma",
        "PARCLOSETK",
        "AnnotationArg",
        "EQTK",
        "Expression",
        "EQTK",
        "Expression",
        "SEMICOLTK",
        "COLONTK",
        "Identifier",
        "SEMICOLTK",
        "COLONTK",
        "EDGEKW",
        "EQUATIONKW",
        "INITIALKW",
        "MARKEDKW",
        "URGENTKW",
        "InvariantDecls",
        "LocationElement",
        "LocationElements",
        "LocationElement",
        "SEMICOLTK",
        "SEMICOLTK",
        "Expressions",
        "SEMICOLTK",
        "SEMICOLTK",
        "Expressions",
        "SEMICOLTK",
        "Equation",
        "Equations",
        "Identifier",
        "APOSTROPHETK",
        "EQTK",
        "Expression",
        "EQTK",
        "Expression",
        "COMMATK",
        "SEMICOLTK",
        "Equation",
        "DOKW",
        "NOWKW",
        "TAUKW",
        "WHENKW",
        "CoreEdge",
        "EdgeEvent",
        "EdgeEvents",
        "Name",
        "EXCLAMATIONTK",
        "QUESTIONTK",
        "Expression",
        "WHENKW",
        "COMMATK",
        "OptEdgeGuard",
        "NOWKW",
        "OptEdgeUrgent",
        "DOKW",
        "OptEdgeUpdate",
        "IFKW",
        "PAROPENTK",
        "Addressable",
        "Name",
        "Update",
        "Updates",
        "COMMATK",
        "Update",
        "SQOPENTK",
        "Projection",
        "Projections",
        "Projection",
        "Expression",
        "SQCLOSETK",
        "BECOMESTK",
        "Expression",
        "Addressable",
        "COMMATK",
        "Addressable",
        "Addressables",
        "COMMATK",
        "PARCLOSETK",
        "Addressable",
        "Expressions",
        "COLONTK",
        "Updates",
        "OptElifUpdates",
        "ELIFKW",
        "ELSEKW",
        "OptElseUpdate",
        "ENDKW",
        "Updates",
        "Expressions",
        "COLONTK",
        "Updates",
        "EdgeEvent",
        "Expressions",
        "GOTOKW",
        "SEMICOLTK",
        "Identifier",
        "SEMICOLTK",
        "Expressions",
        "OptEdgeUrgent",
        "OptEdgeUpdate",
        "OptEdgeUpdate",
        "Updates",
        "LocationElements",
        "BOOLKW",
        "DICTKW",
        "DISTKW",
        "FUNCKW",
        "INTKW",
        "LISTKW",
        "REALKW",
        "SETKW",
        "STRINGKW",
        "TUPLEKW",
        "Name",
        "Type",
        "Identifier",
        "Identifiers",
        "COMMATK",
        "SEMICOLTK",
        "Identifier",
        "PAROPENTK",
        "Field",
        "Fields",
        "Type",
        "Identifiers",
        "SEMICOLTK",
        "PARCLOSETK",
        "Field",
        "Type",
        "SQOPENTK",
        "Type",
        "Expression",
        "DOTDOTTK",
        "SQCLOSETK",
        "Type",
        "Expression",
        "SQCLOSETK",
        "Type",
        "SQOPENTK",
        "Expression",
        "DOTDOTTK",
        "Expression",
        "SQCLOSETK",
        "Type",
        "PAROPENTK",
        "PARCLOSETK",
        "Type",
        "Types",
        "COMMATK",
        "PARCLOSETK",
        "Type",
        "Type",
        "PAROPENTK",
        "Type",
        "COLONTK",
        "Type",
        "PARCLOSETK",
        "Location",
        "OptAnnos",
        "OptIoDecls",
        "IoDecl",
        "SEMICOLTK",
        "Events",
        "Name",
        "COMMATK",
        "SEMICOLTK",
        "Name",
        "Type",
        "DiscDecl",
        "DiscDecls",
        "Identifier",
        "INKW",
        "EQTK",
        "Expression",
        "ANYKW",
        "CUROPENTK",
        "Expressions",
        "CURCLOSETK",
        "COMMATK",
        "SEMICOLTK",
        "DiscDecl",
        "SEMICOLTK",
        "Events",
        "SEMICOLTK",
        "ENDKW",
        "PAROPENTK",
        "SQOPENTK",
        "Expression",
        "OptExpression",
        "COLONTK",
        "Expression",
        "OptExpression",
        "SQCLOSETK",
        "SQCLOSETK",
        "PARCLOSETK",
        "Expressions",
        "PARCLOSETK",
        "DISABLESKW",
        "CUROPENTK",
        "Name",
        "NamesSet",
        "Name",
        "Names",
        "COMMATK",
        "CURCLOSETK",
        "Name",
        "SQCLOSETK",
        "Expressions",
        "SQCLOSETK",
        "Expression",
        "COMMATK",
        "PARCLOSETK",
        "Expressions",
        "PARCLOSETK",
        "CURCLOSETK",
        "DictPairs",
        "Expression",
        "Expressions",
        "CURCLOSETK",
        "COLONTK",
        "Expression",
        "COMMATK",
        "CURCLOSETK",
        "Expression",
        "COLONTK",
        "Expression",
        "UnaryExpression",
        "UnaryExpression",
        "Type",
        "GTTK",
        "ExpressionFactor",
        "FuncExpression",
        "UnaryExpression",
        "Expression",
        "COLONTK",
        "CASEKW",
        "ELSEKW",
        "SwitchBody",
        "SwitchCases",
        "CASEKW",
        "ELSEKW",
        "Expression",
        "Expression",
        "COLONTK",
        "Expression",
        "ENDKW",
        "Expression",
        "Expression",
        "COLONTK",
        "Expression",
        "Expressions",
        "COLONTK",
        "Expression",
        "OptElifExprs",
        "ELIFKW",
        "ELSEKW",
        "Expression",
        "ENDKW",
        "Expressions",
        "COLONTK",
        "Expression",
        "Identifier",
        "PAROPENTK",
        "CompDefParms",
        "COLONTK",
        "AutomatonBody",
        "ENDKW",
        "ALGKW",
        "LOCATIONKW",
        "PARCLOSETK",
        "CompDefDeclaration",
        "CompDefDecls",
        "Controllability",
        "Name",
        "OptControllability",
        "EVENTKW",
        "VOIDKW",
        "EventParamId",
        "EventParamIds",
        "EventType",
        "Identifier",
        "Type",
        "OptEventParamFlags",
        "EXCLAMATIONTK",
        "QUESTIONTK",
        "TILDETK",
        "EventParamFlag",
        "EventParamIds",
        "Identifier",
        "COMMATK",
        "EventParamId",
        "Identifiers",
        "EventParamIds",
        "EventType",
        "EventParamIds",
        "SEMICOLTK",
        "PARCLOSETK",
        "CompDefDeclaration",
        "Identifiers",
        "Type",
        "Identifiers",
        "AUTOMATONKW",
        "DEFKW",
        "Identifier",
        "COLONTK",
        "AutomatonBody",
        "ENDKW",
        "Identifier",
        "CompDefParms",
        "COLONTK",
        "AutomatonBody",
        "ENDKW",
        "EVENTKW",
        "EventType",
        "Identifier",
        "Identifiers",
        "SEMICOLTK",
        "Identifiers",
        "SEMICOLTK",
        "COLONTK",
        "Name",
        "PAROPENTK",
        "CompInstArgs",
        "SEMICOLTK",
        "PARCLOSETK",
        "Expressions",
        "PARCLOSETK",
        "EventType",
        "Identifiers",
        "SEMICOLTK",
        "Identifiers",
        "SEMICOLTK",
        "Identifier",
        "TypeDefs",
        "COMMATK",
        "SEMICOLTK",
        "Identifier",
        "EQTK",
        "Type",
        "EQTK",
        "Type",
        "IDKW",
        "Expression",
        "ATTRKW",
        "TEXTKW",
        "SvgAttr",
        "VALUEKW",
        "Expression",
        "FILEKW",
        "OptSvgFile",
        "SEMICOLTK",
        "StringToken",
        "StringToken",
        "IDKW",
        "Expression",
        "TOKW",
        "Expression",
        "COMMATK",
        "Expression",
        "OptSvgFile",
        "SEMICOLTK",
        "IDKW",
        "Expression",
        "DOKW",
        "EVENTKW",
        "IFKW",
        "Name",
        "SvgInEvent",
        "OptSvgFile",
        "SEMICOLTK",
        "Expression",
        "COLONTK",
        "Name",
        "ELIFKW",
        "OptSvgInEventElifs",
        "SvgInEventElifs",
        "ELIFKW",
        "ENDKW",
        "Expression",
        "COLONTK",
        "Name",
        "ELSEKW",
        "Name",
        "ENDKW",
        "Expression",
        "COLONTK",
        "Name",
        "Updates",
        "OptSvgFile",
        "SEMICOLTK",
        "StringToken",
        "SEMICOLTK",
        "IDKW",
        "Expression",
        "PREKW",
        "OptSvgCopyPre",
        "POSTKW",
        "OptSvgCopyPost",
        "OptSvgFile",
        "SEMICOLTK",
        "Expression",
        "Expression",
        "StringToken",
        "SEMICOLTK",
        "POSTKW",
        "PREKW",
        "Expression",
        "PrintTxt",
        "FORKW",
        "OptPrintFors",
        "WHENKW",
        "OptPrintWhen",
        "FILEKW",
        "OptPrintFile",
        "SEMICOLTK",
        "StringToken",
        "POSTKW",
        "PREKW",
        "Expression",
        "Expression",
        "POSTKW",
        "Expression",
        "Expression",
        "EVENTKW",
        "FINALKW",
        "INITIALKW",
        "TIMEKW",
        "Name",
        "PrintFor",
        "PrintFors",
        "COMMATK",
        "PrintFor",
        "Expression",
        "POSTKW",
        "Expression",
        "Expression",
        "RELATIVENAMETK",
        "IDENTIFIERTK",
        "SEMICOLTK",
        "SEMICOLTK",
        "Expressions",
        "SEMICOLTK",
        "Expressions",
        "SEMICOLTK",
        "Imports",
        "StringToken",
        "COMMATK",
        "SEMICOLTK",
        "StringToken",
        "DEFKW",
        "Identifier",
        "COLONTK",
        "GroupBody",
        "ENDKW",
        "Identifier",
        "CompDefParms",
        "COLONTK",
        "GroupBody",
        "ENDKW",
        "Types",
        "Identifier",
        "PAROPENTK",
        "FuncParams",
        "COLONTK",
        "FuncBody",
        "FuncVarDecls",
        "StringToken",
        "SEMICOLTK",
        "BREAKKW",
        "CONTINUEKW",
        "IFKW",
        "RETURNKW",
        "WHILEKW",
        "Addressables",
        "FuncStatement",
        "FuncStatements",
        "Name",
        "Type",
        "FuncVarDecl",
        "Identifier",
        "EQTK",
        "Expression",
        "COMMATK",
        "SEMICOLTK",
        "Identifier",
        "EQTK",
        "Expression",
        "ENDKW",
        "FuncStatement",
        "BECOMESTK",
        "Expressions",
        "SEMICOLTK",
        "Expressions",
        "COLONTK",
        "FuncStatements",
        "ENDKW",
        "Expressions",
        "SEMICOLTK",
        "Expressions",
        "COLONTK",
        "FuncStatements",
        "OptElifFuncStats",
        "ELIFKW",
        "ELSEKW",
        "OptElseFuncStat",
        "ENDKW",
        "FuncStatements",
        "Expressions",
        "COLONTK",
        "FuncStatements",
        "SEMICOLTK",
        "SEMICOLTK",
        "PARCLOSETK",
        "FuncParamDecls",
        "Type",
        "Identifiers",
        "SEMICOLTK",
        "PARCLOSETK",
        "Type",
        "Identifiers",
        "Equations",
        "SEMICOLTK",
        "Identifier",
        "EQTK",
        "Identifiers",
        "SEMICOLTK",
        "ContDecl",
        "ContDecls",
        "Identifier",
        "DERKW",
        "EQTK",
        "OptDerivative",
        "Expression",
        "OptDerivative",
        "Expression",
        "COMMATK",
        "SEMICOLTK",
        "ContDecl",
        "Type",
        "ConstantDefs",
        "Identifier",
        "EQTK",
        "Expression",
        "COMMATK",
        "SEMICOLTK",
        "Identifier",
        "EQTK",
        "Expression",
        "Type",
        "AlgVarsDefs",
        "Identifier",
        "EQTK",
        "Expression",
        "COMMATK",
        "SEMICOLTK",
        "Identifier",
        "EQTK",
        "Expression",
    };

    /** Parser call back hook methods. */
    private final CifParserHooks hooks;

    /** Whether parsing has completed (final result has been accepted). */
    private boolean accept;

    /** The parse result, but only if {@code #accept} is {@code true}. */
    private ASpecification acceptObject;

    /** The current scanner token to process, if any. */
    private Token token;

    /** Whether parsing has resulted in a reduce action. */
    private boolean reduce;

    /** The state from which to reduce, if {@code #reduce} is {@code true}. */
    private int reduceState;

    /** The non-terminal to reduce, if {@code #reduce} is {@code true}. */
    private int reduceNonTerminal;

    /** Constructor for the {@link CifParser} class. */
    public CifParser() {
        super(new CifScanner());
        entrySymbolNames = ENTRY_SYMBOL_NAMES;
        firstTerminals = FirstTerminals.FIRST_TERMINALS;
        firstTerminalsReduced = FirstTerminalsReduced.FIRST_TERMINALS_REDUCED;
        reducibleNonTerminals = ReducibleNonTerminals.REDUCIBLE_NON_TERMINALS;
        reducibleNonTerminalsReduced = ReducibleNonTerminalsReduced.REDUCIBLE_NON_TERMINALS_REDUCED;
        hooks = new CifParserHooks();
    }

    @Override
    public ParserHooksBase getHooks() {
        return hooks;
    }

    @Override
    protected final ASpecification parse() throws IOException {
        token = nextToken();
        int state;

        accept = false;

        while (true) {
            // Perform action.
            state = getCurrentState();
            reduce = false;

            switch (state) {
                case 0:
                    action0();
                    break;
                case 1:
                    action1();
                    break;
                case 2:
                    action2();
                    break;
                case 3:
                    action3();
                    break;
                case 4:
                    action4();
                    break;
                case 5:
                    action5();
                    break;
                case 6:
                    action6();
                    break;
                case 7:
                    action7();
                    break;
                case 8:
                    action8();
                    break;
                case 9:
                    action9();
                    break;
                case 10:
                    action10();
                    break;
                case 11:
                    action11();
                    break;
                case 12:
                    action12();
                    break;
                case 13:
                    action13();
                    break;
                case 14:
                    action14();
                    break;
                case 15:
                    action15();
                    break;
                case 16:
                    action16();
                    break;
                case 17:
                    action17();
                    break;
                case 18:
                    action18();
                    break;
                case 19:
                    action19();
                    break;
                case 20:
                    action20();
                    break;
                case 21:
                    action21();
                    break;
                case 22:
                    action22();
                    break;
                case 23:
                    action23();
                    break;
                case 24:
                    action24();
                    break;
                case 25:
                    action25();
                    break;
                case 26:
                    action26();
                    break;
                case 27:
                    action27();
                    break;
                case 28:
                    action28();
                    break;
                case 29:
                    action29();
                    break;
                case 30:
                    action30();
                    break;
                case 31:
                    action31();
                    break;
                case 32:
                    action32();
                    break;
                case 33:
                    action33();
                    break;
                case 34:
                    action34();
                    break;
                case 35:
                    action35();
                    break;
                case 36:
                    action36();
                    break;
                case 37:
                    action37();
                    break;
                case 38:
                    action38();
                    break;
                case 39:
                    action39();
                    break;
                case 40:
                    action40();
                    break;
                case 41:
                    action41();
                    break;
                case 42:
                    action42();
                    break;
                case 43:
                    action43();
                    break;
                case 44:
                    action44();
                    break;
                case 45:
                    action45();
                    break;
                case 46:
                    action46();
                    break;
                case 47:
                    action47();
                    break;
                case 48:
                    action48();
                    break;
                case 49:
                    action49();
                    break;
                case 50:
                    action50();
                    break;
                case 51:
                    action51();
                    break;
                case 52:
                    action52();
                    break;
                case 53:
                    action53();
                    break;
                case 54:
                    action54();
                    break;
                case 55:
                    action55();
                    break;
                case 56:
                    action56();
                    break;
                case 57:
                    action57();
                    break;
                case 58:
                    action58();
                    break;
                case 59:
                    action59();
                    break;
                case 60:
                    action60();
                    break;
                case 61:
                    action61();
                    break;
                case 62:
                    action62();
                    break;
                case 63:
                    action63();
                    break;
                case 64:
                    action64();
                    break;
                case 65:
                    action65();
                    break;
                case 66:
                    action66();
                    break;
                case 67:
                    action67();
                    break;
                case 68:
                    action68();
                    break;
                case 69:
                    action69();
                    break;
                case 70:
                    action70();
                    break;
                case 71:
                    action71();
                    break;
                case 72:
                    action72();
                    break;
                case 73:
                    action73();
                    break;
                case 74:
                    action74();
                    break;
                case 75:
                    action75();
                    break;
                case 76:
                    action76();
                    break;
                case 77:
                    action77();
                    break;
                case 78:
                    action78();
                    break;
                case 79:
                    action79();
                    break;
                case 80:
                    action80();
                    break;
                case 81:
                    action81();
                    break;
                case 82:
                    action82();
                    break;
                case 83:
                    action83();
                    break;
                case 84:
                    action84();
                    break;
                case 85:
                    action85();
                    break;
                case 86:
                    action86();
                    break;
                case 87:
                    action87();
                    break;
                case 88:
                    action88();
                    break;
                case 89:
                    action89();
                    break;
                case 90:
                    action90();
                    break;
                case 91:
                    action91();
                    break;
                case 92:
                    action92();
                    break;
                case 93:
                    action93();
                    break;
                case 94:
                    action94();
                    break;
                case 95:
                    action95();
                    break;
                case 96:
                    action96();
                    break;
                case 97:
                    action97();
                    break;
                case 98:
                    action98();
                    break;
                case 99:
                    action99();
                    break;
                case 100:
                    action100();
                    break;
                case 101:
                    action101();
                    break;
                case 102:
                    action102();
                    break;
                case 103:
                    action103();
                    break;
                case 104:
                    action104();
                    break;
                case 105:
                    action105();
                    break;
                case 106:
                    action106();
                    break;
                case 107:
                    action107();
                    break;
                case 108:
                    action108();
                    break;
                case 109:
                    action109();
                    break;
                case 110:
                    action110();
                    break;
                case 111:
                    action111();
                    break;
                case 112:
                    action112();
                    break;
                case 113:
                    action113();
                    break;
                case 114:
                    action114();
                    break;
                case 115:
                    action115();
                    break;
                case 116:
                    action116();
                    break;
                case 117:
                    action117();
                    break;
                case 118:
                    action118();
                    break;
                case 119:
                    action119();
                    break;
                case 120:
                    action120();
                    break;
                case 121:
                    action121();
                    break;
                case 122:
                    action122();
                    break;
                case 123:
                    action123();
                    break;
                case 124:
                    action124();
                    break;
                case 125:
                    action125();
                    break;
                case 126:
                    action126();
                    break;
                case 127:
                    action127();
                    break;
                case 128:
                    action128();
                    break;
                case 129:
                    action129();
                    break;
                case 130:
                    action130();
                    break;
                case 131:
                    action131();
                    break;
                case 132:
                    action132();
                    break;
                case 133:
                    action133();
                    break;
                case 134:
                    action134();
                    break;
                case 135:
                    action135();
                    break;
                case 136:
                    action136();
                    break;
                case 137:
                    action137();
                    break;
                case 138:
                    action138();
                    break;
                case 139:
                    action139();
                    break;
                case 140:
                    action140();
                    break;
                case 141:
                    action141();
                    break;
                case 142:
                    action142();
                    break;
                case 143:
                    action143();
                    break;
                case 144:
                    action144();
                    break;
                case 145:
                    action145();
                    break;
                case 146:
                    action146();
                    break;
                case 147:
                    action147();
                    break;
                case 148:
                    action148();
                    break;
                case 149:
                    action149();
                    break;
                case 150:
                    action150();
                    break;
                case 151:
                    action151();
                    break;
                case 152:
                    action152();
                    break;
                case 153:
                    action153();
                    break;
                case 154:
                    action154();
                    break;
                case 155:
                    action155();
                    break;
                case 156:
                    action156();
                    break;
                case 157:
                    action157();
                    break;
                case 158:
                    action158();
                    break;
                case 159:
                    action159();
                    break;
                case 160:
                    action160();
                    break;
                case 161:
                    action161();
                    break;
                case 162:
                    action162();
                    break;
                case 163:
                    action163();
                    break;
                case 164:
                    action164();
                    break;
                case 165:
                    action165();
                    break;
                case 166:
                    action166();
                    break;
                case 167:
                    action167();
                    break;
                case 168:
                    action168();
                    break;
                case 169:
                    action169();
                    break;
                case 170:
                    action170();
                    break;
                case 171:
                    action171();
                    break;
                case 172:
                    action172();
                    break;
                case 173:
                    action173();
                    break;
                case 174:
                    action174();
                    break;
                case 175:
                    action175();
                    break;
                case 176:
                    action176();
                    break;
                case 177:
                    action177();
                    break;
                case 178:
                    action178();
                    break;
                case 179:
                    action179();
                    break;
                case 180:
                    action180();
                    break;
                case 181:
                    action181();
                    break;
                case 182:
                    action182();
                    break;
                case 183:
                    action183();
                    break;
                case 184:
                    action184();
                    break;
                case 185:
                    action185();
                    break;
                case 186:
                    action186();
                    break;
                case 187:
                    action187();
                    break;
                case 188:
                    action188();
                    break;
                case 189:
                    action189();
                    break;
                case 190:
                    action190();
                    break;
                case 191:
                    action191();
                    break;
                case 192:
                    action192();
                    break;
                case 193:
                    action193();
                    break;
                case 194:
                    action194();
                    break;
                case 195:
                    action195();
                    break;
                case 196:
                    action196();
                    break;
                case 197:
                    action197();
                    break;
                case 198:
                    action198();
                    break;
                case 199:
                    action199();
                    break;
                case 200:
                    action200();
                    break;
                case 201:
                    action201();
                    break;
                case 202:
                    action202();
                    break;
                case 203:
                    action203();
                    break;
                case 204:
                    action204();
                    break;
                case 205:
                    action205();
                    break;
                case 206:
                    action206();
                    break;
                case 207:
                    action207();
                    break;
                case 208:
                    action208();
                    break;
                case 209:
                    action209();
                    break;
                case 210:
                    action210();
                    break;
                case 211:
                    action211();
                    break;
                case 212:
                    action212();
                    break;
                case 213:
                    action213();
                    break;
                case 214:
                    action214();
                    break;
                case 215:
                    action215();
                    break;
                case 216:
                    action216();
                    break;
                case 217:
                    action217();
                    break;
                case 218:
                    action218();
                    break;
                case 219:
                    action219();
                    break;
                case 220:
                    action220();
                    break;
                case 221:
                    action221();
                    break;
                case 222:
                    action222();
                    break;
                case 223:
                    action223();
                    break;
                case 224:
                    action224();
                    break;
                case 225:
                    action225();
                    break;
                case 226:
                    action226();
                    break;
                case 227:
                    action227();
                    break;
                case 228:
                    action228();
                    break;
                case 229:
                    action229();
                    break;
                case 230:
                    action230();
                    break;
                case 231:
                    action231();
                    break;
                case 232:
                    action232();
                    break;
                case 233:
                    action233();
                    break;
                case 234:
                    action234();
                    break;
                case 235:
                    action235();
                    break;
                case 236:
                    action236();
                    break;
                case 237:
                    action237();
                    break;
                case 238:
                    action238();
                    break;
                case 239:
                    action239();
                    break;
                case 240:
                    action240();
                    break;
                case 241:
                    action241();
                    break;
                case 242:
                    action242();
                    break;
                case 243:
                    action243();
                    break;
                case 244:
                    action244();
                    break;
                case 245:
                    action245();
                    break;
                case 246:
                    action246();
                    break;
                case 247:
                    action247();
                    break;
                case 248:
                    action248();
                    break;
                case 249:
                    action249();
                    break;
                case 250:
                    action250();
                    break;
                case 251:
                    action251();
                    break;
                case 252:
                    action252();
                    break;
                case 253:
                    action253();
                    break;
                case 254:
                    action254();
                    break;
                case 255:
                    action255();
                    break;
                case 256:
                    action256();
                    break;
                case 257:
                    action257();
                    break;
                case 258:
                    action258();
                    break;
                case 259:
                    action259();
                    break;
                case 260:
                    action260();
                    break;
                case 261:
                    action261();
                    break;
                case 262:
                    action262();
                    break;
                case 263:
                    action263();
                    break;
                case 264:
                    action264();
                    break;
                case 265:
                    action265();
                    break;
                case 266:
                    action266();
                    break;
                case 267:
                    action267();
                    break;
                case 268:
                    action268();
                    break;
                case 269:
                    action269();
                    break;
                case 270:
                    action270();
                    break;
                case 271:
                    action271();
                    break;
                case 272:
                    action272();
                    break;
                case 273:
                    action273();
                    break;
                case 274:
                    action274();
                    break;
                case 275:
                    action275();
                    break;
                case 276:
                    action276();
                    break;
                case 277:
                    action277();
                    break;
                case 278:
                    action278();
                    break;
                case 279:
                    action279();
                    break;
                case 280:
                    action280();
                    break;
                case 281:
                    action281();
                    break;
                case 282:
                    action282();
                    break;
                case 283:
                    action283();
                    break;
                case 284:
                    action284();
                    break;
                case 285:
                    action285();
                    break;
                case 286:
                    action286();
                    break;
                case 287:
                    action287();
                    break;
                case 288:
                    action288();
                    break;
                case 289:
                    action289();
                    break;
                case 290:
                    action290();
                    break;
                case 291:
                    action291();
                    break;
                case 292:
                    action292();
                    break;
                case 293:
                    action293();
                    break;
                case 294:
                    action294();
                    break;
                case 295:
                    action295();
                    break;
                case 296:
                    action296();
                    break;
                case 297:
                    action297();
                    break;
                case 298:
                    action298();
                    break;
                case 299:
                    action299();
                    break;
                case 300:
                    action300();
                    break;
                case 301:
                    action301();
                    break;
                case 302:
                    action302();
                    break;
                case 303:
                    action303();
                    break;
                case 304:
                    action304();
                    break;
                case 305:
                    action305();
                    break;
                case 306:
                    action306();
                    break;
                case 307:
                    action307();
                    break;
                case 308:
                    action308();
                    break;
                case 309:
                    action309();
                    break;
                case 310:
                    action310();
                    break;
                case 311:
                    action311();
                    break;
                case 312:
                    action312();
                    break;
                case 313:
                    action313();
                    break;
                case 314:
                    action314();
                    break;
                case 315:
                    action315();
                    break;
                case 316:
                    action316();
                    break;
                case 317:
                    action317();
                    break;
                case 318:
                    action318();
                    break;
                case 319:
                    action319();
                    break;
                case 320:
                    action320();
                    break;
                case 321:
                    action321();
                    break;
                case 322:
                    action322();
                    break;
                case 323:
                    action323();
                    break;
                case 324:
                    action324();
                    break;
                case 325:
                    action325();
                    break;
                case 326:
                    action326();
                    break;
                case 327:
                    action327();
                    break;
                case 328:
                    action328();
                    break;
                case 329:
                    action329();
                    break;
                case 330:
                    action330();
                    break;
                case 331:
                    action331();
                    break;
                case 332:
                    action332();
                    break;
                case 333:
                    action333();
                    break;
                case 334:
                    action334();
                    break;
                case 335:
                    action335();
                    break;
                case 336:
                    action336();
                    break;
                case 337:
                    action337();
                    break;
                case 338:
                    action338();
                    break;
                case 339:
                    action339();
                    break;
                case 340:
                    action340();
                    break;
                case 341:
                    action341();
                    break;
                case 342:
                    action342();
                    break;
                case 343:
                    action343();
                    break;
                case 344:
                    action344();
                    break;
                case 345:
                    action345();
                    break;
                case 346:
                    action346();
                    break;
                case 347:
                    action347();
                    break;
                case 348:
                    action348();
                    break;
                case 349:
                    action349();
                    break;
                case 350:
                    action350();
                    break;
                case 351:
                    action351();
                    break;
                case 352:
                    action352();
                    break;
                case 353:
                    action353();
                    break;
                case 354:
                    action354();
                    break;
                case 355:
                    action355();
                    break;
                case 356:
                    action356();
                    break;
                case 357:
                    action357();
                    break;
                case 358:
                    action358();
                    break;
                case 359:
                    action359();
                    break;
                case 360:
                    action360();
                    break;
                case 361:
                    action361();
                    break;
                case 362:
                    action362();
                    break;
                case 363:
                    action363();
                    break;
                case 364:
                    action364();
                    break;
                case 365:
                    action365();
                    break;
                case 366:
                    action366();
                    break;
                case 367:
                    action367();
                    break;
                case 368:
                    action368();
                    break;
                case 369:
                    action369();
                    break;
                case 370:
                    action370();
                    break;
                case 371:
                    action371();
                    break;
                case 372:
                    action372();
                    break;
                case 373:
                    action373();
                    break;
                case 374:
                    action374();
                    break;
                case 375:
                    action375();
                    break;
                case 376:
                    action376();
                    break;
                case 377:
                    action377();
                    break;
                case 378:
                    action378();
                    break;
                case 379:
                    action379();
                    break;
                case 380:
                    action380();
                    break;
                case 381:
                    action381();
                    break;
                case 382:
                    action382();
                    break;
                case 383:
                    action383();
                    break;
                case 384:
                    action384();
                    break;
                case 385:
                    action385();
                    break;
                case 386:
                    action386();
                    break;
                case 387:
                    action387();
                    break;
                case 388:
                    action388();
                    break;
                case 389:
                    action389();
                    break;
                case 390:
                    action390();
                    break;
                case 391:
                    action391();
                    break;
                case 392:
                    action392();
                    break;
                case 393:
                    action393();
                    break;
                case 394:
                    action394();
                    break;
                case 395:
                    action395();
                    break;
                case 396:
                    action396();
                    break;
                case 397:
                    action397();
                    break;
                case 398:
                    action398();
                    break;
                case 399:
                    action399();
                    break;
                case 400:
                    action400();
                    break;
                case 401:
                    action401();
                    break;
                case 402:
                    action402();
                    break;
                case 403:
                    action403();
                    break;
                case 404:
                    action404();
                    break;
                case 405:
                    action405();
                    break;
                case 406:
                    action406();
                    break;
                case 407:
                    action407();
                    break;
                case 408:
                    action408();
                    break;
                case 409:
                    action409();
                    break;
                case 410:
                    action410();
                    break;
                case 411:
                    action411();
                    break;
                case 412:
                    action412();
                    break;
                case 413:
                    action413();
                    break;
                case 414:
                    action414();
                    break;
                case 415:
                    action415();
                    break;
                case 416:
                    action416();
                    break;
                case 417:
                    action417();
                    break;
                case 418:
                    action418();
                    break;
                case 419:
                    action419();
                    break;
                case 420:
                    action420();
                    break;
                case 421:
                    action421();
                    break;
                case 422:
                    action422();
                    break;
                case 423:
                    action423();
                    break;
                case 424:
                    action424();
                    break;
                case 425:
                    action425();
                    break;
                case 426:
                    action426();
                    break;
                case 427:
                    action427();
                    break;
                case 428:
                    action428();
                    break;
                case 429:
                    action429();
                    break;
                case 430:
                    action430();
                    break;
                case 431:
                    action431();
                    break;
                case 432:
                    action432();
                    break;
                case 433:
                    action433();
                    break;
                case 434:
                    action434();
                    break;
                case 435:
                    action435();
                    break;
                case 436:
                    action436();
                    break;
                case 437:
                    action437();
                    break;
                case 438:
                    action438();
                    break;
                case 439:
                    action439();
                    break;
                case 440:
                    action440();
                    break;
                case 441:
                    action441();
                    break;
                case 442:
                    action442();
                    break;
                case 443:
                    action443();
                    break;
                case 444:
                    action444();
                    break;
                case 445:
                    action445();
                    break;
                case 446:
                    action446();
                    break;
                case 447:
                    action447();
                    break;
                case 448:
                    action448();
                    break;
                case 449:
                    action449();
                    break;
                case 450:
                    action450();
                    break;
                case 451:
                    action451();
                    break;
                case 452:
                    action452();
                    break;
                case 453:
                    action453();
                    break;
                case 454:
                    action454();
                    break;
                case 455:
                    action455();
                    break;
                case 456:
                    action456();
                    break;
                case 457:
                    action457();
                    break;
                case 458:
                    action458();
                    break;
                case 459:
                    action459();
                    break;
                case 460:
                    action460();
                    break;
                case 461:
                    action461();
                    break;
                case 462:
                    action462();
                    break;
                case 463:
                    action463();
                    break;
                case 464:
                    action464();
                    break;
                case 465:
                    action465();
                    break;
                case 466:
                    action466();
                    break;
                case 467:
                    action467();
                    break;
                case 468:
                    action468();
                    break;
                case 469:
                    action469();
                    break;
                case 470:
                    action470();
                    break;
                case 471:
                    action471();
                    break;
                case 472:
                    action472();
                    break;
                case 473:
                    action473();
                    break;
                case 474:
                    action474();
                    break;
                case 475:
                    action475();
                    break;
                case 476:
                    action476();
                    break;
                case 477:
                    action477();
                    break;
                case 478:
                    action478();
                    break;
                case 479:
                    action479();
                    break;
                case 480:
                    action480();
                    break;
                case 481:
                    action481();
                    break;
                case 482:
                    action482();
                    break;
                case 483:
                    action483();
                    break;
                case 484:
                    action484();
                    break;
                case 485:
                    action485();
                    break;
                case 486:
                    action486();
                    break;
                case 487:
                    action487();
                    break;
                case 488:
                    action488();
                    break;
                case 489:
                    action489();
                    break;
                case 490:
                    action490();
                    break;
                case 491:
                    action491();
                    break;
                case 492:
                    action492();
                    break;
                case 493:
                    action493();
                    break;
                case 494:
                    action494();
                    break;
                case 495:
                    action495();
                    break;
                case 496:
                    action496();
                    break;
                case 497:
                    action497();
                    break;
                case 498:
                    action498();
                    break;
                case 499:
                    action499();
                    break;
                case 500:
                    action500();
                    break;
                case 501:
                    action501();
                    break;
                case 502:
                    action502();
                    break;
                case 503:
                    action503();
                    break;
                case 504:
                    action504();
                    break;
                case 505:
                    action505();
                    break;
                case 506:
                    action506();
                    break;
                case 507:
                    action507();
                    break;
                case 508:
                    action508();
                    break;
                case 509:
                    action509();
                    break;
                case 510:
                    action510();
                    break;
                case 511:
                    action511();
                    break;
                case 512:
                    action512();
                    break;
                case 513:
                    action513();
                    break;
                case 514:
                    action514();
                    break;
                case 515:
                    action515();
                    break;
                case 516:
                    action516();
                    break;
                case 517:
                    action517();
                    break;
                case 518:
                    action518();
                    break;
                case 519:
                    action519();
                    break;
                case 520:
                    action520();
                    break;
                case 521:
                    action521();
                    break;
                case 522:
                    action522();
                    break;
                case 523:
                    action523();
                    break;
                case 524:
                    action524();
                    break;
                case 525:
                    action525();
                    break;
                case 526:
                    action526();
                    break;
                case 527:
                    action527();
                    break;
                case 528:
                    action528();
                    break;
                case 529:
                    action529();
                    break;
                case 530:
                    action530();
                    break;
                case 531:
                    action531();
                    break;
                case 532:
                    action532();
                    break;
                case 533:
                    action533();
                    break;
                case 534:
                    action534();
                    break;
                case 535:
                    action535();
                    break;
                case 536:
                    action536();
                    break;
                case 537:
                    action537();
                    break;
                case 538:
                    action538();
                    break;
                case 539:
                    action539();
                    break;
                case 540:
                    action540();
                    break;
                case 541:
                    action541();
                    break;
                case 542:
                    action542();
                    break;
                case 543:
                    action543();
                    break;
                case 544:
                    action544();
                    break;
                case 545:
                    action545();
                    break;
                case 546:
                    action546();
                    break;
                case 547:
                    action547();
                    break;
                case 548:
                    action548();
                    break;
                case 549:
                    action549();
                    break;
                case 550:
                    action550();
                    break;
                case 551:
                    action551();
                    break;
                case 552:
                    action552();
                    break;
                case 553:
                    action553();
                    break;
                case 554:
                    action554();
                    break;
                case 555:
                    action555();
                    break;
                case 556:
                    action556();
                    break;
                case 557:
                    action557();
                    break;
                case 558:
                    action558();
                    break;
                case 559:
                    action559();
                    break;
                case 560:
                    action560();
                    break;
                case 561:
                    action561();
                    break;
                case 562:
                    action562();
                    break;
                case 563:
                    action563();
                    break;
                case 564:
                    action564();
                    break;
                case 565:
                    action565();
                    break;
                case 566:
                    action566();
                    break;
                case 567:
                    action567();
                    break;
                case 568:
                    action568();
                    break;
                case 569:
                    action569();
                    break;
                case 570:
                    action570();
                    break;
                case 571:
                    action571();
                    break;
                case 572:
                    action572();
                    break;
                case 573:
                    action573();
                    break;
                case 574:
                    action574();
                    break;
                case 575:
                    action575();
                    break;
                case 576:
                    action576();
                    break;
                case 577:
                    action577();
                    break;
                case 578:
                    action578();
                    break;
                case 579:
                    action579();
                    break;
                case 580:
                    action580();
                    break;
                case 581:
                    action581();
                    break;
                case 582:
                    action582();
                    break;
                case 583:
                    action583();
                    break;
                case 584:
                    action584();
                    break;
                case 585:
                    action585();
                    break;
                case 586:
                    action586();
                    break;
                case 587:
                    action587();
                    break;
                case 588:
                    action588();
                    break;
                case 589:
                    action589();
                    break;
                case 590:
                    action590();
                    break;
                case 591:
                    action591();
                    break;
                case 592:
                    action592();
                    break;
                case 593:
                    action593();
                    break;
                case 594:
                    action594();
                    break;
                case 595:
                    action595();
                    break;
                case 596:
                    action596();
                    break;
                case 597:
                    action597();
                    break;
                case 598:
                    action598();
                    break;
                case 599:
                    action599();
                    break;
                case 600:
                    action600();
                    break;
                case 601:
                    action601();
                    break;
                case 602:
                    action602();
                    break;
                case 603:
                    action603();
                    break;
                case 604:
                    action604();
                    break;
                case 605:
                    action605();
                    break;
                case 606:
                    action606();
                    break;
                case 607:
                    action607();
                    break;
                case 608:
                    action608();
                    break;
                case 609:
                    action609();
                    break;
                case 610:
                    action610();
                    break;
                case 611:
                    action611();
                    break;
                case 612:
                    action612();
                    break;
                case 613:
                    action613();
                    break;
                case 614:
                    action614();
                    break;
                case 615:
                    action615();
                    break;
                case 616:
                    action616();
                    break;
                case 617:
                    action617();
                    break;
                case 618:
                    action618();
                    break;
                case 619:
                    action619();
                    break;
                case 620:
                    action620();
                    break;
                case 621:
                    action621();
                    break;
                case 622:
                    action622();
                    break;
                case 623:
                    action623();
                    break;
                case 624:
                    action624();
                    break;
                case 625:
                    action625();
                    break;
                case 626:
                    action626();
                    break;
                case 627:
                    action627();
                    break;
                case 628:
                    action628();
                    break;
                case 629:
                    action629();
                    break;
                case 630:
                    action630();
                    break;
                case 631:
                    action631();
                    break;
                case 632:
                    action632();
                    break;
                case 633:
                    action633();
                    break;
                case 634:
                    action634();
                    break;
                case 635:
                    action635();
                    break;
                case 636:
                    action636();
                    break;
                case 637:
                    action637();
                    break;
                case 638:
                    action638();
                    break;
                case 639:
                    action639();
                    break;
                case 640:
                    action640();
                    break;
                case 641:
                    action641();
                    break;
                case 642:
                    action642();
                    break;
                case 643:
                    action643();
                    break;
                case 644:
                    action644();
                    break;
                case 645:
                    action645();
                    break;
                case 646:
                    action646();
                    break;
                case 647:
                    action647();
                    break;
                case 648:
                    action648();
                    break;
                case 649:
                    action649();
                    break;
                case 650:
                    action650();
                    break;
                case 651:
                    action651();
                    break;
                case 652:
                    action652();
                    break;
                case 653:
                    action653();
                    break;
                case 654:
                    action654();
                    break;
                case 655:
                    action655();
                    break;
                case 656:
                    action656();
                    break;
                case 657:
                    action657();
                    break;
                case 658:
                    action658();
                    break;
                case 659:
                    action659();
                    break;
                case 660:
                    action660();
                    break;
                case 661:
                    action661();
                    break;
                case 662:
                    action662();
                    break;
                case 663:
                    action663();
                    break;
                case 664:
                    action664();
                    break;
                case 665:
                    action665();
                    break;
                case 666:
                    action666();
                    break;
                case 667:
                    action667();
                    break;
                case 668:
                    action668();
                    break;
                case 669:
                    action669();
                    break;
                case 670:
                    action670();
                    break;
                case 671:
                    action671();
                    break;
                case 672:
                    action672();
                    break;
                case 673:
                    action673();
                    break;
                case 674:
                    action674();
                    break;
                case 675:
                    action675();
                    break;
                case 676:
                    action676();
                    break;
                case 677:
                    action677();
                    break;
                case 678:
                    action678();
                    break;
                case 679:
                    action679();
                    break;
                case 680:
                    action680();
                    break;
                case 681:
                    action681();
                    break;
                case 682:
                    action682();
                    break;
                case 683:
                    action683();
                    break;
                case 684:
                    action684();
                    break;
                case 685:
                    action685();
                    break;
                case 686:
                    action686();
                    break;
                case 687:
                    action687();
                    break;
                case 688:
                    action688();
                    break;
                case 689:
                    action689();
                    break;
                case 690:
                    action690();
                    break;
                case 691:
                    action691();
                    break;
                case 692:
                    action692();
                    break;
                case 693:
                    action693();
                    break;
                case 694:
                    action694();
                    break;
                case 695:
                    action695();
                    break;
                case 696:
                    action696();
                    break;
                case 697:
                    action697();
                    break;
                case 698:
                    action698();
                    break;
                case 699:
                    action699();
                    break;
                case 700:
                    action700();
                    break;
                case 701:
                    action701();
                    break;
                case 702:
                    action702();
                    break;
                case 703:
                    action703();
                    break;
                case 704:
                    action704();
                    break;
                case 705:
                    action705();
                    break;
                case 706:
                    action706();
                    break;
                case 707:
                    action707();
                    break;
                case 708:
                    action708();
                    break;
                case 709:
                    action709();
                    break;
                case 710:
                    action710();
                    break;
                case 711:
                    action711();
                    break;
                case 712:
                    action712();
                    break;
                case 713:
                    action713();
                    break;
                case 714:
                    action714();
                    break;
                case 715:
                    action715();
                    break;
                case 716:
                    action716();
                    break;
                case 717:
                    action717();
                    break;
                case 718:
                    action718();
                    break;
                case 719:
                    action719();
                    break;
                case 720:
                    action720();
                    break;
                case 721:
                    action721();
                    break;
                case 722:
                    action722();
                    break;
                case 723:
                    action723();
                    break;
                case 724:
                    action724();
                    break;
                case 725:
                    action725();
                    break;
                case 726:
                    action726();
                    break;
                case 727:
                    action727();
                    break;
                case 728:
                    action728();
                    break;
                case 729:
                    action729();
                    break;
                case 730:
                    action730();
                    break;
                case 731:
                    action731();
                    break;
                case 732:
                    action732();
                    break;
                case 733:
                    action733();
                    break;
                case 734:
                    action734();
                    break;
                case 735:
                    action735();
                    break;
                case 736:
                    action736();
                    break;
                case 737:
                    action737();
                    break;
                case 738:
                    action738();
                    break;
                case 739:
                    action739();
                    break;
                case 740:
                    action740();
                    break;
                case 741:
                    action741();
                    break;
                case 742:
                    action742();
                    break;
                case 743:
                    action743();
                    break;
                case 744:
                    action744();
                    break;
                case 745:
                    action745();
                    break;
                case 746:
                    action746();
                    break;
                case 747:
                    action747();
                    break;
                case 748:
                    action748();
                    break;
                case 749:
                    action749();
                    break;
                case 750:
                    action750();
                    break;
                case 751:
                    action751();
                    break;
                case 752:
                    action752();
                    break;
                case 753:
                    action753();
                    break;
                case 754:
                    action754();
                    break;
                case 755:
                    action755();
                    break;
                case 756:
                    action756();
                    break;
                case 757:
                    action757();
                    break;
                case 758:
                    action758();
                    break;
                case 759:
                    action759();
                    break;
                case 760:
                    action760();
                    break;
                case 761:
                    action761();
                    break;
                case 762:
                    action762();
                    break;
                case 763:
                    action763();
                    break;
                case 764:
                    action764();
                    break;
                case 765:
                    action765();
                    break;
                case 766:
                    action766();
                    break;
                case 767:
                    action767();
                    break;
                case 768:
                    action768();
                    break;
                case 769:
                    action769();
                    break;
                case 770:
                    action770();
                    break;
                case 771:
                    action771();
                    break;
                case 772:
                    action772();
                    break;
                case 773:
                    action773();
                    break;
                case 774:
                    action774();
                    break;
                case 775:
                    action775();
                    break;
                case 776:
                    action776();
                    break;
                case 777:
                    action777();
                    break;
                default:
                    String msg = "Unknown parser state: " + state;
                    throw new RuntimeException(msg);
            }

            // Accept action.
            if (accept) {
                return acceptObject;
            }

            // Shift action.
            if (!reduce) {
                continue;
            }

            // Perform goto (as part of a reduce action).
            switch (reduceState) {
                case 0:
                    goto0();
                    break;
                case 1:
                    goto1();
                    break;
                case 2:
                    goto2();
                    break;
                case 3:
                    goto3();
                    break;
                case 4:
                    goto4();
                    break;
                case 5:
                    goto5();
                    break;
                case 6:
                    goto6();
                    break;
                case 7:
                    goto7();
                    break;
                case 8:
                    goto8();
                    break;
                case 9:
                    goto9();
                    break;
                case 10:
                    goto10();
                    break;
                case 11:
                    goto11();
                    break;
                case 12:
                    goto12();
                    break;
                case 13:
                    goto13();
                    break;
                case 14:
                    goto14();
                    break;
                case 15:
                    goto15();
                    break;
                case 16:
                    goto16();
                    break;
                case 17:
                    goto17();
                    break;
                case 18:
                    goto18();
                    break;
                case 19:
                    goto19();
                    break;
                case 20:
                    goto20();
                    break;
                case 21:
                    goto21();
                    break;
                case 22:
                    goto22();
                    break;
                case 23:
                    goto23();
                    break;
                case 24:
                    goto24();
                    break;
                case 25:
                    goto25();
                    break;
                case 26:
                    goto26();
                    break;
                case 27:
                    goto27();
                    break;
                case 28:
                    goto28();
                    break;
                case 29:
                    goto29();
                    break;
                case 30:
                    goto30();
                    break;
                case 31:
                    goto31();
                    break;
                case 32:
                    goto32();
                    break;
                case 33:
                    goto33();
                    break;
                case 34:
                    goto34();
                    break;
                case 35:
                    goto35();
                    break;
                case 36:
                    goto36();
                    break;
                case 37:
                    goto37();
                    break;
                case 38:
                    goto38();
                    break;
                case 39:
                    goto39();
                    break;
                case 40:
                    goto40();
                    break;
                case 41:
                    goto41();
                    break;
                case 42:
                    goto42();
                    break;
                case 43:
                    goto43();
                    break;
                case 44:
                    goto44();
                    break;
                case 45:
                    goto45();
                    break;
                case 46:
                    goto46();
                    break;
                case 47:
                    goto47();
                    break;
                case 48:
                    goto48();
                    break;
                case 49:
                    goto49();
                    break;
                case 50:
                    goto50();
                    break;
                case 51:
                    goto51();
                    break;
                case 52:
                    goto52();
                    break;
                case 53:
                    goto53();
                    break;
                case 54:
                    goto54();
                    break;
                case 55:
                    goto55();
                    break;
                case 56:
                    goto56();
                    break;
                case 57:
                    goto57();
                    break;
                case 58:
                    goto58();
                    break;
                case 59:
                    goto59();
                    break;
                case 60:
                    goto60();
                    break;
                case 61:
                    goto61();
                    break;
                case 62:
                    goto62();
                    break;
                case 63:
                    goto63();
                    break;
                case 64:
                    goto64();
                    break;
                case 65:
                    goto65();
                    break;
                case 66:
                    goto66();
                    break;
                case 67:
                    goto67();
                    break;
                case 68:
                    goto68();
                    break;
                case 69:
                    goto69();
                    break;
                case 70:
                    goto70();
                    break;
                case 71:
                    goto71();
                    break;
                case 72:
                    goto72();
                    break;
                case 73:
                    goto73();
                    break;
                case 74:
                    goto74();
                    break;
                case 75:
                    goto75();
                    break;
                case 76:
                    goto76();
                    break;
                case 77:
                    goto77();
                    break;
                case 78:
                    goto78();
                    break;
                case 79:
                    goto79();
                    break;
                case 80:
                    goto80();
                    break;
                case 81:
                    goto81();
                    break;
                case 82:
                    goto82();
                    break;
                case 83:
                    goto83();
                    break;
                case 84:
                    goto84();
                    break;
                case 85:
                    goto85();
                    break;
                case 86:
                    goto86();
                    break;
                case 87:
                    goto87();
                    break;
                case 88:
                    goto88();
                    break;
                case 89:
                    goto89();
                    break;
                case 90:
                    goto90();
                    break;
                case 91:
                    goto91();
                    break;
                case 92:
                    goto92();
                    break;
                case 93:
                    goto93();
                    break;
                case 94:
                    goto94();
                    break;
                case 95:
                    goto95();
                    break;
                case 96:
                    goto96();
                    break;
                case 97:
                    goto97();
                    break;
                case 98:
                    goto98();
                    break;
                case 99:
                    goto99();
                    break;
                case 100:
                    goto100();
                    break;
                case 101:
                    goto101();
                    break;
                case 102:
                    goto102();
                    break;
                case 103:
                    goto103();
                    break;
                case 104:
                    goto104();
                    break;
                case 105:
                    goto105();
                    break;
                case 106:
                    goto106();
                    break;
                case 107:
                    goto107();
                    break;
                case 108:
                    goto108();
                    break;
                case 109:
                    goto109();
                    break;
                case 110:
                    goto110();
                    break;
                case 111:
                    goto111();
                    break;
                case 112:
                    goto112();
                    break;
                case 113:
                    goto113();
                    break;
                case 114:
                    goto114();
                    break;
                case 115:
                    goto115();
                    break;
                case 116:
                    goto116();
                    break;
                case 117:
                    goto117();
                    break;
                case 118:
                    goto118();
                    break;
                case 119:
                    goto119();
                    break;
                case 120:
                    goto120();
                    break;
                case 121:
                    goto121();
                    break;
                case 122:
                    goto122();
                    break;
                case 123:
                    goto123();
                    break;
                case 124:
                    goto124();
                    break;
                case 125:
                    goto125();
                    break;
                case 126:
                    goto126();
                    break;
                case 127:
                    goto127();
                    break;
                case 128:
                    goto128();
                    break;
                case 129:
                    goto129();
                    break;
                case 130:
                    goto130();
                    break;
                case 131:
                    goto131();
                    break;
                case 132:
                    goto132();
                    break;
                case 133:
                    goto133();
                    break;
                case 134:
                    goto134();
                    break;
                case 135:
                    goto135();
                    break;
                case 136:
                    goto136();
                    break;
                case 137:
                    goto137();
                    break;
                case 138:
                    goto138();
                    break;
                case 139:
                    goto139();
                    break;
                case 140:
                    goto140();
                    break;
                case 141:
                    goto141();
                    break;
                case 142:
                    goto142();
                    break;
                case 143:
                    goto143();
                    break;
                case 144:
                    goto144();
                    break;
                case 145:
                    goto145();
                    break;
                case 146:
                    goto146();
                    break;
                case 147:
                    goto147();
                    break;
                case 148:
                    goto148();
                    break;
                case 149:
                    goto149();
                    break;
                case 150:
                    goto150();
                    break;
                case 151:
                    goto151();
                    break;
                case 152:
                    goto152();
                    break;
                case 153:
                    goto153();
                    break;
                case 154:
                    goto154();
                    break;
                case 155:
                    goto155();
                    break;
                case 156:
                    goto156();
                    break;
                case 157:
                    goto157();
                    break;
                case 158:
                    goto158();
                    break;
                case 159:
                    goto159();
                    break;
                case 160:
                    goto160();
                    break;
                case 161:
                    goto161();
                    break;
                case 162:
                    goto162();
                    break;
                case 163:
                    goto163();
                    break;
                case 164:
                    goto164();
                    break;
                case 165:
                    goto165();
                    break;
                case 166:
                    goto166();
                    break;
                case 167:
                    goto167();
                    break;
                case 168:
                    goto168();
                    break;
                case 169:
                    goto169();
                    break;
                case 170:
                    goto170();
                    break;
                case 171:
                    goto171();
                    break;
                case 172:
                    goto172();
                    break;
                case 173:
                    goto173();
                    break;
                case 174:
                    goto174();
                    break;
                case 175:
                    goto175();
                    break;
                case 176:
                    goto176();
                    break;
                case 177:
                    goto177();
                    break;
                case 178:
                    goto178();
                    break;
                case 179:
                    goto179();
                    break;
                case 180:
                    goto180();
                    break;
                case 181:
                    goto181();
                    break;
                case 182:
                    goto182();
                    break;
                case 183:
                    goto183();
                    break;
                case 184:
                    goto184();
                    break;
                case 185:
                    goto185();
                    break;
                case 186:
                    goto186();
                    break;
                case 187:
                    goto187();
                    break;
                case 188:
                    goto188();
                    break;
                case 189:
                    goto189();
                    break;
                case 190:
                    goto190();
                    break;
                case 191:
                    goto191();
                    break;
                case 192:
                    goto192();
                    break;
                case 193:
                    goto193();
                    break;
                case 194:
                    goto194();
                    break;
                case 195:
                    goto195();
                    break;
                case 196:
                    goto196();
                    break;
                case 197:
                    goto197();
                    break;
                case 198:
                    goto198();
                    break;
                case 199:
                    goto199();
                    break;
                case 200:
                    goto200();
                    break;
                case 201:
                    goto201();
                    break;
                case 202:
                    goto202();
                    break;
                case 203:
                    goto203();
                    break;
                case 204:
                    goto204();
                    break;
                case 205:
                    goto205();
                    break;
                case 206:
                    goto206();
                    break;
                case 207:
                    goto207();
                    break;
                case 208:
                    goto208();
                    break;
                case 209:
                    goto209();
                    break;
                case 210:
                    goto210();
                    break;
                case 211:
                    goto211();
                    break;
                case 212:
                    goto212();
                    break;
                case 213:
                    goto213();
                    break;
                case 214:
                    goto214();
                    break;
                case 215:
                    goto215();
                    break;
                case 216:
                    goto216();
                    break;
                case 217:
                    goto217();
                    break;
                case 218:
                    goto218();
                    break;
                case 219:
                    goto219();
                    break;
                case 220:
                    goto220();
                    break;
                case 221:
                    goto221();
                    break;
                case 222:
                    goto222();
                    break;
                case 223:
                    goto223();
                    break;
                case 224:
                    goto224();
                    break;
                case 225:
                    goto225();
                    break;
                case 226:
                    goto226();
                    break;
                case 227:
                    goto227();
                    break;
                case 228:
                    goto228();
                    break;
                case 229:
                    goto229();
                    break;
                case 230:
                    goto230();
                    break;
                case 231:
                    goto231();
                    break;
                case 232:
                    goto232();
                    break;
                case 233:
                    goto233();
                    break;
                case 234:
                    goto234();
                    break;
                case 235:
                    goto235();
                    break;
                case 236:
                    goto236();
                    break;
                case 237:
                    goto237();
                    break;
                case 238:
                    goto238();
                    break;
                case 239:
                    goto239();
                    break;
                case 240:
                    goto240();
                    break;
                case 241:
                    goto241();
                    break;
                case 242:
                    goto242();
                    break;
                case 243:
                    goto243();
                    break;
                case 244:
                    goto244();
                    break;
                case 245:
                    goto245();
                    break;
                case 246:
                    goto246();
                    break;
                case 247:
                    goto247();
                    break;
                case 248:
                    goto248();
                    break;
                case 249:
                    goto249();
                    break;
                case 250:
                    goto250();
                    break;
                case 251:
                    goto251();
                    break;
                case 252:
                    goto252();
                    break;
                case 253:
                    goto253();
                    break;
                case 254:
                    goto254();
                    break;
                case 255:
                    goto255();
                    break;
                case 256:
                    goto256();
                    break;
                case 257:
                    goto257();
                    break;
                case 258:
                    goto258();
                    break;
                case 259:
                    goto259();
                    break;
                case 260:
                    goto260();
                    break;
                case 261:
                    goto261();
                    break;
                case 262:
                    goto262();
                    break;
                case 263:
                    goto263();
                    break;
                case 264:
                    goto264();
                    break;
                case 265:
                    goto265();
                    break;
                case 266:
                    goto266();
                    break;
                case 267:
                    goto267();
                    break;
                case 268:
                    goto268();
                    break;
                case 269:
                    goto269();
                    break;
                case 270:
                    goto270();
                    break;
                case 271:
                    goto271();
                    break;
                case 272:
                    goto272();
                    break;
                case 273:
                    goto273();
                    break;
                case 274:
                    goto274();
                    break;
                case 275:
                    goto275();
                    break;
                case 276:
                    goto276();
                    break;
                case 277:
                    goto277();
                    break;
                case 278:
                    goto278();
                    break;
                case 279:
                    goto279();
                    break;
                case 280:
                    goto280();
                    break;
                case 281:
                    goto281();
                    break;
                case 282:
                    goto282();
                    break;
                case 283:
                    goto283();
                    break;
                case 284:
                    goto284();
                    break;
                case 285:
                    goto285();
                    break;
                case 286:
                    goto286();
                    break;
                case 287:
                    goto287();
                    break;
                case 288:
                    goto288();
                    break;
                case 289:
                    goto289();
                    break;
                case 290:
                    goto290();
                    break;
                case 291:
                    goto291();
                    break;
                case 292:
                    goto292();
                    break;
                case 293:
                    goto293();
                    break;
                case 294:
                    goto294();
                    break;
                case 295:
                    goto295();
                    break;
                case 296:
                    goto296();
                    break;
                case 297:
                    goto297();
                    break;
                case 298:
                    goto298();
                    break;
                case 299:
                    goto299();
                    break;
                case 300:
                    goto300();
                    break;
                case 301:
                    goto301();
                    break;
                case 302:
                    goto302();
                    break;
                case 303:
                    goto303();
                    break;
                case 304:
                    goto304();
                    break;
                case 305:
                    goto305();
                    break;
                case 306:
                    goto306();
                    break;
                case 307:
                    goto307();
                    break;
                case 308:
                    goto308();
                    break;
                case 309:
                    goto309();
                    break;
                case 310:
                    goto310();
                    break;
                case 311:
                    goto311();
                    break;
                case 312:
                    goto312();
                    break;
                case 313:
                    goto313();
                    break;
                case 314:
                    goto314();
                    break;
                case 315:
                    goto315();
                    break;
                case 316:
                    goto316();
                    break;
                case 317:
                    goto317();
                    break;
                case 318:
                    goto318();
                    break;
                case 319:
                    goto319();
                    break;
                case 320:
                    goto320();
                    break;
                case 321:
                    goto321();
                    break;
                case 322:
                    goto322();
                    break;
                case 323:
                    goto323();
                    break;
                case 324:
                    goto324();
                    break;
                case 325:
                    goto325();
                    break;
                case 326:
                    goto326();
                    break;
                case 327:
                    goto327();
                    break;
                case 328:
                    goto328();
                    break;
                case 329:
                    goto329();
                    break;
                case 330:
                    goto330();
                    break;
                case 331:
                    goto331();
                    break;
                case 332:
                    goto332();
                    break;
                case 333:
                    goto333();
                    break;
                case 334:
                    goto334();
                    break;
                case 335:
                    goto335();
                    break;
                case 336:
                    goto336();
                    break;
                case 337:
                    goto337();
                    break;
                case 338:
                    goto338();
                    break;
                case 339:
                    goto339();
                    break;
                case 340:
                    goto340();
                    break;
                case 341:
                    goto341();
                    break;
                case 342:
                    goto342();
                    break;
                case 343:
                    goto343();
                    break;
                case 344:
                    goto344();
                    break;
                case 345:
                    goto345();
                    break;
                case 346:
                    goto346();
                    break;
                case 347:
                    goto347();
                    break;
                case 348:
                    goto348();
                    break;
                case 349:
                    goto349();
                    break;
                case 350:
                    goto350();
                    break;
                case 351:
                    goto351();
                    break;
                case 352:
                    goto352();
                    break;
                case 353:
                    goto353();
                    break;
                case 354:
                    goto354();
                    break;
                case 355:
                    goto355();
                    break;
                case 356:
                    goto356();
                    break;
                case 357:
                    goto357();
                    break;
                case 358:
                    goto358();
                    break;
                case 359:
                    goto359();
                    break;
                case 360:
                    goto360();
                    break;
                case 361:
                    goto361();
                    break;
                case 362:
                    goto362();
                    break;
                case 363:
                    goto363();
                    break;
                case 364:
                    goto364();
                    break;
                case 365:
                    goto365();
                    break;
                case 366:
                    goto366();
                    break;
                case 367:
                    goto367();
                    break;
                case 368:
                    goto368();
                    break;
                case 369:
                    goto369();
                    break;
                case 370:
                    goto370();
                    break;
                case 371:
                    goto371();
                    break;
                case 372:
                    goto372();
                    break;
                case 373:
                    goto373();
                    break;
                case 374:
                    goto374();
                    break;
                case 375:
                    goto375();
                    break;
                case 376:
                    goto376();
                    break;
                case 377:
                    goto377();
                    break;
                case 378:
                    goto378();
                    break;
                case 379:
                    goto379();
                    break;
                case 380:
                    goto380();
                    break;
                case 381:
                    goto381();
                    break;
                case 382:
                    goto382();
                    break;
                case 383:
                    goto383();
                    break;
                case 384:
                    goto384();
                    break;
                case 385:
                    goto385();
                    break;
                case 386:
                    goto386();
                    break;
                case 387:
                    goto387();
                    break;
                case 388:
                    goto388();
                    break;
                case 389:
                    goto389();
                    break;
                case 390:
                    goto390();
                    break;
                case 391:
                    goto391();
                    break;
                case 392:
                    goto392();
                    break;
                case 393:
                    goto393();
                    break;
                case 394:
                    goto394();
                    break;
                case 395:
                    goto395();
                    break;
                case 396:
                    goto396();
                    break;
                case 397:
                    goto397();
                    break;
                case 398:
                    goto398();
                    break;
                case 399:
                    goto399();
                    break;
                case 400:
                    goto400();
                    break;
                case 401:
                    goto401();
                    break;
                case 402:
                    goto402();
                    break;
                case 403:
                    goto403();
                    break;
                case 404:
                    goto404();
                    break;
                case 405:
                    goto405();
                    break;
                case 406:
                    goto406();
                    break;
                case 407:
                    goto407();
                    break;
                case 408:
                    goto408();
                    break;
                case 409:
                    goto409();
                    break;
                case 410:
                    goto410();
                    break;
                case 411:
                    goto411();
                    break;
                case 412:
                    goto412();
                    break;
                case 413:
                    goto413();
                    break;
                case 414:
                    goto414();
                    break;
                case 415:
                    goto415();
                    break;
                case 416:
                    goto416();
                    break;
                case 417:
                    goto417();
                    break;
                case 418:
                    goto418();
                    break;
                case 419:
                    goto419();
                    break;
                case 420:
                    goto420();
                    break;
                case 421:
                    goto421();
                    break;
                case 422:
                    goto422();
                    break;
                case 423:
                    goto423();
                    break;
                case 424:
                    goto424();
                    break;
                case 425:
                    goto425();
                    break;
                case 426:
                    goto426();
                    break;
                case 427:
                    goto427();
                    break;
                case 428:
                    goto428();
                    break;
                case 429:
                    goto429();
                    break;
                case 430:
                    goto430();
                    break;
                case 431:
                    goto431();
                    break;
                case 432:
                    goto432();
                    break;
                case 433:
                    goto433();
                    break;
                case 434:
                    goto434();
                    break;
                case 435:
                    goto435();
                    break;
                case 436:
                    goto436();
                    break;
                case 437:
                    goto437();
                    break;
                case 438:
                    goto438();
                    break;
                case 439:
                    goto439();
                    break;
                case 440:
                    goto440();
                    break;
                case 441:
                    goto441();
                    break;
                case 442:
                    goto442();
                    break;
                case 443:
                    goto443();
                    break;
                case 444:
                    goto444();
                    break;
                case 445:
                    goto445();
                    break;
                case 446:
                    goto446();
                    break;
                case 447:
                    goto447();
                    break;
                case 448:
                    goto448();
                    break;
                case 449:
                    goto449();
                    break;
                case 450:
                    goto450();
                    break;
                case 451:
                    goto451();
                    break;
                case 452:
                    goto452();
                    break;
                case 453:
                    goto453();
                    break;
                case 454:
                    goto454();
                    break;
                case 455:
                    goto455();
                    break;
                case 456:
                    goto456();
                    break;
                case 457:
                    goto457();
                    break;
                case 458:
                    goto458();
                    break;
                case 459:
                    goto459();
                    break;
                case 460:
                    goto460();
                    break;
                case 461:
                    goto461();
                    break;
                case 462:
                    goto462();
                    break;
                case 463:
                    goto463();
                    break;
                case 464:
                    goto464();
                    break;
                case 465:
                    goto465();
                    break;
                case 466:
                    goto466();
                    break;
                case 467:
                    goto467();
                    break;
                case 468:
                    goto468();
                    break;
                case 469:
                    goto469();
                    break;
                case 470:
                    goto470();
                    break;
                case 471:
                    goto471();
                    break;
                case 472:
                    goto472();
                    break;
                case 473:
                    goto473();
                    break;
                case 474:
                    goto474();
                    break;
                case 475:
                    goto475();
                    break;
                case 476:
                    goto476();
                    break;
                case 477:
                    goto477();
                    break;
                case 478:
                    goto478();
                    break;
                case 479:
                    goto479();
                    break;
                case 480:
                    goto480();
                    break;
                case 481:
                    goto481();
                    break;
                case 482:
                    goto482();
                    break;
                case 483:
                    goto483();
                    break;
                case 484:
                    goto484();
                    break;
                case 485:
                    goto485();
                    break;
                case 486:
                    goto486();
                    break;
                case 487:
                    goto487();
                    break;
                case 488:
                    goto488();
                    break;
                case 489:
                    goto489();
                    break;
                case 490:
                    goto490();
                    break;
                case 491:
                    goto491();
                    break;
                case 492:
                    goto492();
                    break;
                case 493:
                    goto493();
                    break;
                case 494:
                    goto494();
                    break;
                case 495:
                    goto495();
                    break;
                case 496:
                    goto496();
                    break;
                case 497:
                    goto497();
                    break;
                case 498:
                    goto498();
                    break;
                case 499:
                    goto499();
                    break;
                case 500:
                    goto500();
                    break;
                case 501:
                    goto501();
                    break;
                case 502:
                    goto502();
                    break;
                case 503:
                    goto503();
                    break;
                case 504:
                    goto504();
                    break;
                case 505:
                    goto505();
                    break;
                case 506:
                    goto506();
                    break;
                case 507:
                    goto507();
                    break;
                case 508:
                    goto508();
                    break;
                case 509:
                    goto509();
                    break;
                case 510:
                    goto510();
                    break;
                case 511:
                    goto511();
                    break;
                case 512:
                    goto512();
                    break;
                case 513:
                    goto513();
                    break;
                case 514:
                    goto514();
                    break;
                case 515:
                    goto515();
                    break;
                case 516:
                    goto516();
                    break;
                case 517:
                    goto517();
                    break;
                case 518:
                    goto518();
                    break;
                case 519:
                    goto519();
                    break;
                case 520:
                    goto520();
                    break;
                case 521:
                    goto521();
                    break;
                case 522:
                    goto522();
                    break;
                case 523:
                    goto523();
                    break;
                case 524:
                    goto524();
                    break;
                case 525:
                    goto525();
                    break;
                case 526:
                    goto526();
                    break;
                case 527:
                    goto527();
                    break;
                case 528:
                    goto528();
                    break;
                case 529:
                    goto529();
                    break;
                case 530:
                    goto530();
                    break;
                case 531:
                    goto531();
                    break;
                case 532:
                    goto532();
                    break;
                case 533:
                    goto533();
                    break;
                case 534:
                    goto534();
                    break;
                case 535:
                    goto535();
                    break;
                case 536:
                    goto536();
                    break;
                case 537:
                    goto537();
                    break;
                case 538:
                    goto538();
                    break;
                case 539:
                    goto539();
                    break;
                case 540:
                    goto540();
                    break;
                case 541:
                    goto541();
                    break;
                case 542:
                    goto542();
                    break;
                case 543:
                    goto543();
                    break;
                case 544:
                    goto544();
                    break;
                case 545:
                    goto545();
                    break;
                case 546:
                    goto546();
                    break;
                case 547:
                    goto547();
                    break;
                case 548:
                    goto548();
                    break;
                case 549:
                    goto549();
                    break;
                case 550:
                    goto550();
                    break;
                case 551:
                    goto551();
                    break;
                case 552:
                    goto552();
                    break;
                case 553:
                    goto553();
                    break;
                case 554:
                    goto554();
                    break;
                case 555:
                    goto555();
                    break;
                case 556:
                    goto556();
                    break;
                case 557:
                    goto557();
                    break;
                case 558:
                    goto558();
                    break;
                case 559:
                    goto559();
                    break;
                case 560:
                    goto560();
                    break;
                case 561:
                    goto561();
                    break;
                case 562:
                    goto562();
                    break;
                case 563:
                    goto563();
                    break;
                case 564:
                    goto564();
                    break;
                case 565:
                    goto565();
                    break;
                case 566:
                    goto566();
                    break;
                case 567:
                    goto567();
                    break;
                case 568:
                    goto568();
                    break;
                case 569:
                    goto569();
                    break;
                case 570:
                    goto570();
                    break;
                case 571:
                    goto571();
                    break;
                case 572:
                    goto572();
                    break;
                case 573:
                    goto573();
                    break;
                case 574:
                    goto574();
                    break;
                case 575:
                    goto575();
                    break;
                case 576:
                    goto576();
                    break;
                case 577:
                    goto577();
                    break;
                case 578:
                    goto578();
                    break;
                case 579:
                    goto579();
                    break;
                case 580:
                    goto580();
                    break;
                case 581:
                    goto581();
                    break;
                case 582:
                    goto582();
                    break;
                case 583:
                    goto583();
                    break;
                case 584:
                    goto584();
                    break;
                case 585:
                    goto585();
                    break;
                case 586:
                    goto586();
                    break;
                case 587:
                    goto587();
                    break;
                case 588:
                    goto588();
                    break;
                case 589:
                    goto589();
                    break;
                case 590:
                    goto590();
                    break;
                case 591:
                    goto591();
                    break;
                case 592:
                    goto592();
                    break;
                case 593:
                    goto593();
                    break;
                case 594:
                    goto594();
                    break;
                case 595:
                    goto595();
                    break;
                case 596:
                    goto596();
                    break;
                case 597:
                    goto597();
                    break;
                case 598:
                    goto598();
                    break;
                case 599:
                    goto599();
                    break;
                case 600:
                    goto600();
                    break;
                case 601:
                    goto601();
                    break;
                case 602:
                    goto602();
                    break;
                case 603:
                    goto603();
                    break;
                case 604:
                    goto604();
                    break;
                case 605:
                    goto605();
                    break;
                case 606:
                    goto606();
                    break;
                case 607:
                    goto607();
                    break;
                case 608:
                    goto608();
                    break;
                case 609:
                    goto609();
                    break;
                case 610:
                    goto610();
                    break;
                case 611:
                    goto611();
                    break;
                case 612:
                    goto612();
                    break;
                case 613:
                    goto613();
                    break;
                case 614:
                    goto614();
                    break;
                case 615:
                    goto615();
                    break;
                case 616:
                    goto616();
                    break;
                case 617:
                    goto617();
                    break;
                case 618:
                    goto618();
                    break;
                case 619:
                    goto619();
                    break;
                case 620:
                    goto620();
                    break;
                case 621:
                    goto621();
                    break;
                case 622:
                    goto622();
                    break;
                case 623:
                    goto623();
                    break;
                case 624:
                    goto624();
                    break;
                case 625:
                    goto625();
                    break;
                case 626:
                    goto626();
                    break;
                case 627:
                    goto627();
                    break;
                case 628:
                    goto628();
                    break;
                case 629:
                    goto629();
                    break;
                case 630:
                    goto630();
                    break;
                case 631:
                    goto631();
                    break;
                case 632:
                    goto632();
                    break;
                case 633:
                    goto633();
                    break;
                case 634:
                    goto634();
                    break;
                case 635:
                    goto635();
                    break;
                case 636:
                    goto636();
                    break;
                case 637:
                    goto637();
                    break;
                case 638:
                    goto638();
                    break;
                case 639:
                    goto639();
                    break;
                case 640:
                    goto640();
                    break;
                case 641:
                    goto641();
                    break;
                case 642:
                    goto642();
                    break;
                case 643:
                    goto643();
                    break;
                case 644:
                    goto644();
                    break;
                case 645:
                    goto645();
                    break;
                case 646:
                    goto646();
                    break;
                case 647:
                    goto647();
                    break;
                case 648:
                    goto648();
                    break;
                case 649:
                    goto649();
                    break;
                case 650:
                    goto650();
                    break;
                case 651:
                    goto651();
                    break;
                case 652:
                    goto652();
                    break;
                case 653:
                    goto653();
                    break;
                case 654:
                    goto654();
                    break;
                case 655:
                    goto655();
                    break;
                case 656:
                    goto656();
                    break;
                case 657:
                    goto657();
                    break;
                case 658:
                    goto658();
                    break;
                case 659:
                    goto659();
                    break;
                case 660:
                    goto660();
                    break;
                case 661:
                    goto661();
                    break;
                case 662:
                    goto662();
                    break;
                case 663:
                    goto663();
                    break;
                case 664:
                    goto664();
                    break;
                case 665:
                    goto665();
                    break;
                case 666:
                    goto666();
                    break;
                case 667:
                    goto667();
                    break;
                case 668:
                    goto668();
                    break;
                case 669:
                    goto669();
                    break;
                case 670:
                    goto670();
                    break;
                case 671:
                    goto671();
                    break;
                case 672:
                    goto672();
                    break;
                case 673:
                    goto673();
                    break;
                case 674:
                    goto674();
                    break;
                case 675:
                    goto675();
                    break;
                case 676:
                    goto676();
                    break;
                case 677:
                    goto677();
                    break;
                case 678:
                    goto678();
                    break;
                case 679:
                    goto679();
                    break;
                case 680:
                    goto680();
                    break;
                case 681:
                    goto681();
                    break;
                case 682:
                    goto682();
                    break;
                case 683:
                    goto683();
                    break;
                case 684:
                    goto684();
                    break;
                case 685:
                    goto685();
                    break;
                case 686:
                    goto686();
                    break;
                case 687:
                    goto687();
                    break;
                case 688:
                    goto688();
                    break;
                case 689:
                    goto689();
                    break;
                case 690:
                    goto690();
                    break;
                case 691:
                    goto691();
                    break;
                case 692:
                    goto692();
                    break;
                case 693:
                    goto693();
                    break;
                case 694:
                    goto694();
                    break;
                case 695:
                    goto695();
                    break;
                case 696:
                    goto696();
                    break;
                case 697:
                    goto697();
                    break;
                case 698:
                    goto698();
                    break;
                case 699:
                    goto699();
                    break;
                case 700:
                    goto700();
                    break;
                case 701:
                    goto701();
                    break;
                case 702:
                    goto702();
                    break;
                case 703:
                    goto703();
                    break;
                case 704:
                    goto704();
                    break;
                case 705:
                    goto705();
                    break;
                case 706:
                    goto706();
                    break;
                case 707:
                    goto707();
                    break;
                case 708:
                    goto708();
                    break;
                case 709:
                    goto709();
                    break;
                case 710:
                    goto710();
                    break;
                case 711:
                    goto711();
                    break;
                case 712:
                    goto712();
                    break;
                case 713:
                    goto713();
                    break;
                case 714:
                    goto714();
                    break;
                case 715:
                    goto715();
                    break;
                case 716:
                    goto716();
                    break;
                case 717:
                    goto717();
                    break;
                case 718:
                    goto718();
                    break;
                case 719:
                    goto719();
                    break;
                case 720:
                    goto720();
                    break;
                case 721:
                    goto721();
                    break;
                case 722:
                    goto722();
                    break;
                case 723:
                    goto723();
                    break;
                case 724:
                    goto724();
                    break;
                case 725:
                    goto725();
                    break;
                case 726:
                    goto726();
                    break;
                case 727:
                    goto727();
                    break;
                case 728:
                    goto728();
                    break;
                case 729:
                    goto729();
                    break;
                case 730:
                    goto730();
                    break;
                case 731:
                    goto731();
                    break;
                case 732:
                    goto732();
                    break;
                case 733:
                    goto733();
                    break;
                case 734:
                    goto734();
                    break;
                case 735:
                    goto735();
                    break;
                case 736:
                    goto736();
                    break;
                case 737:
                    goto737();
                    break;
                case 738:
                    goto738();
                    break;
                case 739:
                    goto739();
                    break;
                case 740:
                    goto740();
                    break;
                case 741:
                    goto741();
                    break;
                case 742:
                    goto742();
                    break;
                case 743:
                    goto743();
                    break;
                case 744:
                    goto744();
                    break;
                case 745:
                    goto745();
                    break;
                case 746:
                    goto746();
                    break;
                case 747:
                    goto747();
                    break;
                case 748:
                    goto748();
                    break;
                case 749:
                    goto749();
                    break;
                case 750:
                    goto750();
                    break;
                case 751:
                    goto751();
                    break;
                case 752:
                    goto752();
                    break;
                case 753:
                    goto753();
                    break;
                case 754:
                    goto754();
                    break;
                case 755:
                    goto755();
                    break;
                case 756:
                    goto756();
                    break;
                case 757:
                    goto757();
                    break;
                case 758:
                    goto758();
                    break;
                case 759:
                    goto759();
                    break;
                case 760:
                    goto760();
                    break;
                case 761:
                    goto761();
                    break;
                case 762:
                    goto762();
                    break;
                case 763:
                    goto763();
                    break;
                case 764:
                    goto764();
                    break;
                case 765:
                    goto765();
                    break;
                case 766:
                    goto766();
                    break;
                case 767:
                    goto767();
                    break;
                case 768:
                    goto768();
                    break;
                case 769:
                    goto769();
                    break;
                case 770:
                    goto770();
                    break;
                case 771:
                    goto771();
                    break;
                case 772:
                    goto772();
                    break;
                case 773:
                    goto773();
                    break;
                case 774:
                    goto774();
                    break;
                case 775:
                    goto775();
                    break;
                case 776:
                    goto776();
                    break;
                case 777:
                    goto777();
                    break;
                default:
                    String msg = fmt("Unknown reduce state %d.", reduceState);
                    throw new RuntimeException(msg);
            }
        }
    }

    /**
     * Parser action code for parser state 0.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action0() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce OptGroupDecls : ;
                doReduce1(token, 5);
                List<ADecl> o = hooks.parseOptGroupDecls1();

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 1.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action1() throws IOException {
        switch (token.id) {
            case 170: {
                // Reduce Specification : GroupBody;
                doReduce1(token, 2);
                Object o1 = doReduce2();

                ASpecification o = hooks.parseSpecification1((AGroupBody)o1);

                reduce = true;
                reduceNonTerminal = 2;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 2.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action2() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 11: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 23: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 24: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 30: {
                // Shift 10.
                token = doShift(token, 10);
                return;
            }

            case 32: {
                // Shift 11.
                token = doShift(token, 11);
                return;
            }

            case 35: {
                // Shift 12.
                token = doShift(token, 12);
                return;
            }

            case 36: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 44: {
                // Shift 15.
                token = doShift(token, 15);
                return;
            }

            case 49: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 50: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 56: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 57: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 58: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 59: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 60: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 68: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 69: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 75: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 76: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 77: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 22:
            case 170: {
                // Reduce GroupBody : OptGroupDecls;
                doReduce1(token, 3);
                Object o1 = doReduce2();

                AGroupBody o = hooks.parseGroupBody1((List<ADecl>)o1);

                reduce = true;
                reduceNonTerminal = 3;
                reduceState = doReduce3(o);
                return;
            }

            case 4:
            case 39: {
                // Reduce OptSupKind : ;
                doReduce1(token, 65);
                Token o = hooks.parseOptSupKind1();

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            case 25: {
                // Reduce OptControllability : ;
                doReduce1(token, 66);
                Token o = hooks.parseOptControllability1();

                reduce = true;
                reduceNonTerminal = 66;
                reduceState = doReduce3(o);
                return;
            }

            case 37:
            case 166: {
                // Reduce OptAnnos : ;
                doReduce1(token, 112);
                List<AAnnotation> o = hooks.parseOptAnnos1();

                reduce = true;
                reduceNonTerminal = 112;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 3.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action3() throws IOException {
        switch (token.id) {
            case 170: {
                // Accept.
                Object rslt = doAccept(token);
                accept = true;
                acceptObject = (ASpecification)rslt;
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 4.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action4() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 5.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action5() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 6.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action6() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 7.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action7() throws IOException {
        switch (token.id) {
            case 5:
            case 14:
            case 17:
            case 25:
            case 30:
            case 38:
            case 40:
            case 51:
            case 54:
            case 55:
            case 67:
            case 72:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce Controllability : CONTROLLABLEKW;
                doReduce1(token, 67);
                Object o1 = doReduce2();

                Token o = hooks.parseControllability1((Token)o1);

                reduce = true;
                reduceNonTerminal = 67;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 8.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action8() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 9.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action9() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 10.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action10() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 11.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action11() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 12: {
                // Shift 669.
                token = doShift(token, 669);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 12.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action12() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 13.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action13() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 14.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action14() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 15.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action15() throws IOException {
        switch (token.id) {
            case 159: {
                // Shift 656.
                token = doShift(token, 656);
                return;
            }

            case 162: {
                // Shift 657.
                token = doShift(token, 657);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 16.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action16() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 47: {
                // Shift 624.
                token = doShift(token, 624);
                return;
            }

            case 48: {
                // Shift 625.
                token = doShift(token, 625);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 17.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action17() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 18.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action18() throws IOException {
        switch (token.id) {
            case 33: {
                // Shift 612.
                token = doShift(token, 612);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 19.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action19() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 20.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action20() throws IOException {
        switch (token.id) {
            case 33: {
                // Shift 581.
                token = doShift(token, 581);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 21.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action21() throws IOException {
        switch (token.id) {
            case 33: {
                // Shift 573.
                token = doShift(token, 573);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 22.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action22() throws IOException {
        switch (token.id) {
            case 33: {
                // Shift 561.
                token = doShift(token, 561);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 23.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action23() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 24.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action24() throws IOException {
        switch (token.id) {
            case 5:
            case 14:
            case 17:
            case 25:
            case 30:
            case 38:
            case 40:
            case 51:
            case 54:
            case 55:
            case 67:
            case 72:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce Controllability : UNCONTROLLABLEKW;
                doReduce1(token, 67);
                Object o1 = doReduce2();

                Token o = hooks.parseControllability2((Token)o1);

                reduce = true;
                reduceNonTerminal = 67;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 25.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action25() throws IOException {
        switch (token.id) {
            case 4:
            case 12:
            case 26:
            case 34:
            case 39:
            case 53:
            case 61:
            case 64:
            case 66:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 128:
            case 130:
            case 138:
            case 142:
            case 148:
            case 149:
            case 153:
            case 155:
            case 157:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165: {
                // Reduce SupKind : PLANTKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseSupKind1((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 26.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action26() throws IOException {
        switch (token.id) {
            case 4:
            case 12:
            case 26:
            case 34:
            case 39:
            case 53:
            case 61:
            case 64:
            case 66:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 128:
            case 130:
            case 138:
            case 142:
            case 148:
            case 149:
            case 153:
            case 155:
            case 157:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165: {
                // Reduce SupKind : REQUIREMENTKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseSupKind2((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 27.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action27() throws IOException {
        switch (token.id) {
            case 4:
            case 12:
            case 26:
            case 34:
            case 39:
            case 53:
            case 61:
            case 64:
            case 66:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
            case 123:
            case 128:
            case 130:
            case 138:
            case 142:
            case 148:
            case 149:
            case 153:
            case 155:
            case 157:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165: {
                // Reduce SupKind : SUPERVISORKW;
                doReduce1(token, 0);
                Object o1 = doReduce2();

                Token o = hooks.parseSupKind3((Token)o1);

                reduce = true;
                reduceNonTerminal = 0;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 28.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action28() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 45:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 162: {
                // Reduce Identifier : IDENTIFIERTK;
                doReduce1(token, 10);
                Object o1 = doReduce2();

                AIdentifier o = hooks.parseIdentifier1((Token)o1);

                reduce = true;
                reduceNonTerminal = 10;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 29.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action29() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 72: {
                // Shift 496.
                token = doShift(token, 496);
                return;
            }

            case 25: {
                // Reduce OptControllability : Controllability;
                doReduce1(token, 66);
                Object o1 = doReduce2();

                Token o = hooks.parseOptControllability2((Token)o1);

                reduce = true;
                reduceNonTerminal = 66;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 30.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action30() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : Decl;
                doReduce1(token, 6);
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl01((ADecl)o1);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 31.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action31() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce OptGroupDecls : OptGroupDecls GroupDecl;
                doReduce1(token, 5);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ADecl> o = hooks.parseOptGroupDecls2((List<ADecl>)o1, (ADecl)o2);

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 32.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action32() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 539.
                token = doShift(token, 539);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 33.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action33() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : InvariantDecls;
                doReduce1(token, 9);
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl13((AInvariantDecl)o1);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 34.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action34() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : IoDecl;
                doReduce1(token, 9);
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl15((AIoDecl)o1);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 35.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action35() throws IOException {
        switch (token.id) {
            case 37: {
                // Shift 208.
                token = doShift(token, 208);
                return;
            }

            case 166: {
                // Shift 210.
                token = doShift(token, 210);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 36.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action36() throws IOException {
        switch (token.id) {
            case 25: {
                // Shift 532.
                token = doShift(token, 532);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 37.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action37() throws IOException {
        switch (token.id) {
            case 39: {
                // Shift 205.
                token = doShift(token, 205);
                return;
            }

            case 4: {
                // Shift 521.
                token = doShift(token, 521);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 38.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action38() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : Print;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl7((APrint)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 39.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action39() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : PrintFile;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl6((APrintFile)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 40.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action40() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 12: {
                // Shift 46.
                token = doShift(token, 46);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 4:
            case 39: {
                // Reduce OptSupKind : SupKind;
                doReduce1(token, 65);
                Object o1 = doReduce2();

                Token o = hooks.parseOptSupKind2((Token)o1);

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 41.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action41() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : SvgCopy;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl2((ASvgCopy)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 42.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action42() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : SvgFile;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl1((ASvgFile)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 43.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action43() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : SvgIn;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl5((ASvgIn)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 44.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action44() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : SvgMove;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl3((ASvgMove)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 45.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action45() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce IoDecl : SvgOut;
                doReduce1(token, 69);
                Object o1 = doReduce2();

                AIoDecl o = hooks.parseIoDecl4((ASvgOut)o1);

                reduce = true;
                reduceNonTerminal = 69;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 46.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action46() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 47.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action47() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : FALSEKW;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor02((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 48.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action48() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 49.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action49() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : SELFKW;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor20((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 50.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action50() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 51.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action51() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : TIMEKW;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor06((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 52.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action52() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : TRUEKW;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor01((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 53.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action53() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ACOSHKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction01((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 54.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action54() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ACOSKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction02((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 55.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action55() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ASINHKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction03((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 56.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action56() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ASINKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction04((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 57.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action57() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ATANHKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction05((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 58.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action58() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ATANKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction06((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 59.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action59() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : COSHKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction07((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 60.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action60() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : COSKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction08((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 61.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action61() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : SINHKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction09((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 62.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action62() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : SINKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction10((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 63.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action63() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : TANHKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction11((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 64.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action64() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : TANKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction12((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 65.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action65() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ABSKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction13((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 66.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action66() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : CBRTKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction14((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 67.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action67() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : CEILKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction15((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 68.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action68() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : DELKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction16((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 69.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action69() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : EMPTYKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction17((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 70.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action70() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : EXPKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction18((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 71.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action71() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : FLOORKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction19((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 72.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action72() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : FMTKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction20((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 73.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action73() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : LNKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction21((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 74.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action74() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : LOGKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction22((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 75.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action75() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : MAXKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction23((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 76.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action76() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : MINKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction24((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 77.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action77() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : POPKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction25((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 78.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action78() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : POWKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction26((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 79.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action79() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ROUNDKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction27((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 80.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action80() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : SCALEKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction28((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 81.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action81() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : SIGNKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction29((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 82.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action82() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : SIZEKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction30((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 83.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action83() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : SQRTKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction31((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 84.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action84() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : BERNOULLIKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction32((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 85.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action85() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : BETAKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction33((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 86.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action86() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : BINOMIALKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction34((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 87.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action87() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : CONSTANTKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction35((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 88.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action88() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : ERLANGKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction36((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 89.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action89() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : EXPONENTIALKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction37((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 90.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action90() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : GAMMAKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction38((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 91.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action91() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : GEOMETRICKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction39((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 92.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action92() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : LOGNORMALKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction40((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 93.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action93() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : NORMALKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction41((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 94.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action94() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : POISSONKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction42((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 95.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action95() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : RANDOMKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction43((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 96.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action96() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : TRIANGLEKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction44((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 97.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action97() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : UNIFORMKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction45((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 98.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action98() throws IOException {
        switch (token.id) {
            case 155: {
                // Reduce StdLibFunction : WEIBULLKW;
                doReduce1(token, 1);
                Object o1 = doReduce2();

                Token o = hooks.parseStdLibFunction46((Token)o1);

                reduce = true;
                reduceNonTerminal = 1;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 99.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action99() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 100.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action100() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 101.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action101() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : QUESTIONTK;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor19((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 102.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action102() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 103.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action103() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 104.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action104() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 105.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action105() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 154: {
                // Shift 434.
                token = doShift(token, 434);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 106.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action106() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 107.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action107() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 158: {
                // Shift 426.
                token = doShift(token, 426);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 108.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action108() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 45:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 162: {
                // Reduce Name : RELATIVENAMETK;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName2((Token)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 109.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action109() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 45:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 162: {
                // Reduce Name : ABSOLUTENAMETK;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName3((Token)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 110.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action110() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 45:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 162: {
                // Reduce Name : ROOTNAMETK;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName4((Token)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 111.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action111() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : NUMBERTK;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor03((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 112.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action112() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : REALTK;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor04((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 113.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action113() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 71:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce StringToken : STRINGTK;
                doReduce1(token, 12);
                Object o1 = doReduce2();

                AStringToken o = hooks.parseStringToken1((Token)o1);

                reduce = true;
                reduceNonTerminal = 12;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 114.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action114() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : AddExpression;
                doReduce1(token, 100);
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 115.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action115() throws IOException {
        switch (token.id) {
            case 124: {
                // Shift 147.
                token = doShift(token, 147);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 129:
            case 133:
            case 134:
            case 135:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce OrExpression : AndExpression;
                doReduce1(token, 98);
                Object o1 = doReduce2();

                AExpression o = hooks.parseOrExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 98;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 116.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action116() throws IOException {
        switch (token.id) {
            case 126: {
                // Shift 149.
                token = doShift(token, 149);
                return;
            }

            case 131: {
                // Shift 150.
                token = doShift(token, 150);
                return;
            }

            case 142: {
                // Shift 151.
                token = doShift(token, 151);
                return;
            }

            case 143: {
                // Shift 152.
                token = doShift(token, 152);
                return;
            }

            case 144: {
                // Shift 153.
                token = doShift(token, 153);
                return;
            }

            case 145: {
                // Shift 154.
                token = doShift(token, 154);
                return;
            }

            case 146: {
                // Shift 155.
                token = doShift(token, 155);
                return;
            }

            case 147: {
                // Shift 156.
                token = doShift(token, 156);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 129:
            case 133:
            case 134:
            case 135:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce AndExpression : CompareExpression;
                doReduce1(token, 99);
                Object o1 = doReduce2();

                AExpression o = hooks.parseAndExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 99;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 117.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action117() throws IOException {
        switch (token.id) {
            case 15: {
                // Shift 417.
                token = doShift(token, 417);
                return;
            }

            case 133:
            case 134: {
                // Reduce Invariant : Expression;
                doReduce1(token, 53);
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 118.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action118() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : ExpressionFactor;
                doReduce1(token, 104);
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 119.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action119() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 405.
                token = doShift(token, 405);
                return;
            }

            case 157: {
                // Shift 406.
                token = doShift(token, 406);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce UnaryExpression : FuncExpression;
                doReduce1(token, 103);
                Object o1 = doReduce2();

                AExpression o = hooks.parseUnaryExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 103;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 120.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action120() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 192.
                token = doShift(token, 192);
                return;
            }

            case 15:
            case 45:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 136:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 155:
            case 157: {
                // Reduce Name : Identifier;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 121.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action121() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariants : Invariant;
                doReduce1(token, 52);
                Object o1 = doReduce2();

                List<AInvariant> o = hooks.parseInvariants1((AInvariant)o1);

                reduce = true;
                reduceNonTerminal = 52;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 122.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action122() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 181.
                token = doShift(token, 181);
                return;
            }

            case 134: {
                // Shift 182.
                token = doShift(token, 182);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 123.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action123() throws IOException {
        switch (token.id) {
            case 125: {
                // Shift 161.
                token = doShift(token, 161);
                return;
            }

            case 127: {
                // Shift 162.
                token = doShift(token, 162);
                return;
            }

            case 140: {
                // Shift 163.
                token = doShift(token, 163);
                return;
            }

            case 141: {
                // Shift 164.
                token = doShift(token, 164);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce AddExpression : MulExpression;
                doReduce1(token, 101);
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 101;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 124.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action124() throws IOException {
        switch (token.id) {
            case 136: {
                // Shift 137.
                token = doShift(token, 137);
                return;
            }

            case 45: {
                // Shift 179.
                token = doShift(token, 179);
                return;
            }

            case 15:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 155:
            case 157: {
                // Reduce ExpressionFactor : Name;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor17((AName)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 125.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action125() throws IOException {
        switch (token.id) {
            case 45: {
                // Shift 177.
                token = doShift(token, 177);
                return;
            }

            case 15:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 155:
            case 157: {
                // Reduce ExpressionFactor : NonEmptySetExpression;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor10((ASetExpression)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 126.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action126() throws IOException {
        switch (token.id) {
            case 129: {
                // Shift 141.
                token = doShift(token, 141);
                return;
            }

            case 150: {
                // Shift 142.
                token = doShift(token, 142);
                return;
            }

            case 151: {
                // Shift 143.
                token = doShift(token, 143);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 133:
            case 134:
            case 135:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce Expression : OrExpression;
                doReduce1(token, 97);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 97;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 127.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action127() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 130.
                token = doShift(token, 130);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 128.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action128() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : StringToken;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor05((AStringToken)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 129.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action129() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce MulExpression : UnaryExpression;
                doReduce1(token, 102);
                Object o1 = doReduce2();

                AExpression o = hooks.parseMulExpression1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 102;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 130.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action130() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 156: {
                // Shift 131.
                token = doShift(token, 131);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 131.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action131() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : StdLibFunction PAROPENTK PARCLOSETK;
                doReduce1(token, 104);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression6((Token)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 132.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action132() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 133:
            case 134:
            case 135:
            case 154:
            case 156:
            case 158: {
                // Reduce Expressions : Expression;
                doReduce1(token, 95);
                Object o1 = doReduce2();

                List<AExpression> o = hooks.parseExpressions1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 95;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 133.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action133() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 156: {
                // Shift 139.
                token = doShift(token, 139);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 134.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action134() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 45:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 162: {
                // Reduce Name : Identifier;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 135.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action135() throws IOException {
        switch (token.id) {
            case 136: {
                // Shift 137.
                token = doShift(token, 137);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : Name;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor17((AName)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 136.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action136() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : NonEmptySetExpression;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor10((ASetExpression)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 137.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action137() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : Name APOSTROPHETK;
                doReduce1(token, 105);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor18((AName)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 138.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action138() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 139.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action139() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : StdLibFunction PAROPENTK Expressions PARCLOSETK;
                doReduce1(token, 104);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression7((Token)o1, (Token)o2, (List<AExpression>)o3);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 140.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action140() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 133:
            case 134:
            case 135:
            case 154:
            case 156:
            case 158: {
                // Reduce Expressions : Expressions COMMATK Expression;
                doReduce1(token, 95);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AExpression> o = hooks.parseExpressions2((List<AExpression>)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 95;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 141.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action141() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 142.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action142() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 143.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action143() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 144.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action144() throws IOException {
        switch (token.id) {
            case 129: {
                // Shift 141.
                token = doShift(token, 141);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 133:
            case 134:
            case 135:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce Expression : OrExpression EQUIVALENCETK OrExpression;
                doReduce1(token, 97);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpression3((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 97;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 145.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action145() throws IOException {
        switch (token.id) {
            case 129: {
                // Shift 141.
                token = doShift(token, 141);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 133:
            case 134:
            case 135:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce Expression : OrExpression IMPLIESTK OrExpression;
                doReduce1(token, 97);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 97;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 146.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action146() throws IOException {
        switch (token.id) {
            case 124: {
                // Shift 147.
                token = doShift(token, 147);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 129:
            case 133:
            case 134:
            case 135:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce OrExpression : OrExpression ORKW AndExpression;
                doReduce1(token, 98);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseOrExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 98;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 147.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action147() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 148.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action148() throws IOException {
        switch (token.id) {
            case 126: {
                // Shift 149.
                token = doShift(token, 149);
                return;
            }

            case 131: {
                // Shift 150.
                token = doShift(token, 150);
                return;
            }

            case 142: {
                // Shift 151.
                token = doShift(token, 151);
                return;
            }

            case 143: {
                // Shift 152.
                token = doShift(token, 152);
                return;
            }

            case 144: {
                // Shift 153.
                token = doShift(token, 153);
                return;
            }

            case 145: {
                // Shift 154.
                token = doShift(token, 154);
                return;
            }

            case 146: {
                // Shift 155.
                token = doShift(token, 155);
                return;
            }

            case 147: {
                // Shift 156.
                token = doShift(token, 156);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 129:
            case 133:
            case 134:
            case 135:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce AndExpression : AndExpression ANDKW CompareExpression;
                doReduce1(token, 99);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseAndExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 99;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 149.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action149() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 150.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action150() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 151.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action151() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 152.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action152() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 153.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action153() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 154.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action154() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 155.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action155() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 156.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action156() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 157.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action157() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression GTTK AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression7((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 158.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action158() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 159.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action159() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 160.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action160() throws IOException {
        switch (token.id) {
            case 125: {
                // Shift 161.
                token = doShift(token, 161);
                return;
            }

            case 127: {
                // Shift 162.
                token = doShift(token, 162);
                return;
            }

            case 140: {
                // Shift 163.
                token = doShift(token, 163);
                return;
            }

            case 141: {
                // Shift 164.
                token = doShift(token, 164);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce AddExpression : AddExpression MINUSTK MulExpression;
                doReduce1(token, 101);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddExpression3((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 101;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 161.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action161() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 162.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action162() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 163.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action163() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 164.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action164() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 165.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action165() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce MulExpression : MulExpression SLASHTK UnaryExpression;
                doReduce1(token, 102);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseMulExpression3((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 102;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 166.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action166() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce MulExpression : MulExpression ASTERISKTK UnaryExpression;
                doReduce1(token, 102);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseMulExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 102;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 167.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action167() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce MulExpression : MulExpression MODKW UnaryExpression;
                doReduce1(token, 102);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseMulExpression5((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 102;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 168.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action168() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce MulExpression : MulExpression DIVKW UnaryExpression;
                doReduce1(token, 102);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseMulExpression4((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 102;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 169.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action169() throws IOException {
        switch (token.id) {
            case 125: {
                // Shift 161.
                token = doShift(token, 161);
                return;
            }

            case 127: {
                // Shift 162.
                token = doShift(token, 162);
                return;
            }

            case 140: {
                // Shift 163.
                token = doShift(token, 163);
                return;
            }

            case 141: {
                // Shift 164.
                token = doShift(token, 164);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce AddExpression : AddExpression PLUSTK MulExpression;
                doReduce1(token, 101);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 101;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 170.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action170() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression GETK AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression6((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 171.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action171() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression NETK AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression5((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 172.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action172() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression EQTK AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression4((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 173.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action173() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression LETK AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression3((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 174.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action174() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression LTTK AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 175.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action175() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression SUBKW AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression9((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 176.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action176() throws IOException {
        switch (token.id) {
            case 148: {
                // Shift 158.
                token = doShift(token, 158);
                return;
            }

            case 149: {
                // Shift 159.
                token = doShift(token, 159);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 126:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce CompareExpression : CompareExpression INKW AddExpression;
                doReduce1(token, 100);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseCompareExpression8((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 100;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 177.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action177() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 178.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action178() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariant : NonEmptySetExpression NEEDSKW Expression;
                doReduce1(token, 53);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant5((ASetExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 179.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action179() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 180.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action180() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariant : Name NEEDSKW Expression;
                doReduce1(token, 53);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant3((AName)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 181.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action181() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 182.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action182() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 19:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 70:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce InvariantDecls : SupKind Invariants SEMICOLTK;
                doReduce1(token, 51);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AInvariantDecl o = hooks.parseInvariantDecls2((Token)o1, (List<AInvariant>)o2);

                reduce = true;
                reduceNonTerminal = 51;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 183.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action183() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 185.
                token = doShift(token, 185);
                return;
            }

            case 15:
            case 45:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 136:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 155:
            case 157: {
                // Reduce Name : Identifier;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 184.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action184() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariants : Invariants COMMATK Invariant;
                doReduce1(token, 52);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AInvariant> o = hooks.parseInvariants2((List<AInvariant>)o1, (AInvariant)o3);

                reduce = true;
                reduceNonTerminal = 52;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 185.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action185() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 186.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action186() throws IOException {
        switch (token.id) {
            case 15: {
                // Shift 190.
                token = doShift(token, 190);
                return;
            }

            case 133:
            case 134: {
                // Reduce Invariant : Identifier COLONTK Expression;
                doReduce1(token, 53);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant2((AIdentifier)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 187.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action187() throws IOException {
        switch (token.id) {
            case 136: {
                // Shift 137.
                token = doShift(token, 137);
                return;
            }

            case 45: {
                // Shift 188.
                token = doShift(token, 188);
                return;
            }

            case 15:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 155:
            case 157: {
                // Reduce ExpressionFactor : Name;
                doReduce1(token, 105);
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor17((AName)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 188.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action188() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 189.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action189() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariant : Identifier COLONTK Name NEEDSKW Expression;
                doReduce1(token, 53);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant4((AIdentifier)o1, (AName)o3, (Token)o4, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 190.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action190() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 191.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action191() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariant : Identifier COLONTK Expression DISABLESKW Name;
                doReduce1(token, 53);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant7((AIdentifier)o1, (AExpression)o3, (Token)o4, (AName)o5);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 192.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action192() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce OptAutDecls : ;
                doReduce1(token, 7);
                List<ADecl> o = hooks.parseOptAutDecls1();

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 193.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action193() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 404.
                token = doShift(token, 404);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 194.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action194() throws IOException {
        switch (token.id) {
            case 0: {
                // Shift 4.
                token = doShift(token, 4);
                return;
            }

            case 8: {
                // Shift 5.
                token = doShift(token, 5);
                return;
            }

            case 9: {
                // Shift 6.
                token = doShift(token, 6);
                return;
            }

            case 11: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 23: {
                // Shift 8.
                token = doShift(token, 8);
                return;
            }

            case 24: {
                // Shift 9.
                token = doShift(token, 9);
                return;
            }

            case 36: {
                // Shift 13.
                token = doShift(token, 13);
                return;
            }

            case 42: {
                // Shift 14.
                token = doShift(token, 14);
                return;
            }

            case 49: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 50: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 56: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 57: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 58: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 59: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 60: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 68: {
                // Shift 23.
                token = doShift(token, 23);
                return;
            }

            case 69: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 75: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 76: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 77: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 1: {
                // Shift 195.
                token = doShift(token, 195);
                return;
            }

            case 16: {
                // Shift 196.
                token = doShift(token, 196);
                return;
            }

            case 43: {
                // Shift 197.
                token = doShift(token, 197);
                return;
            }

            case 39: {
                // Reduce OptSupKind : ;
                doReduce1(token, 65);
                Token o = hooks.parseOptSupKind1();

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            case 25: {
                // Reduce OptControllability : ;
                doReduce1(token, 66);
                Token o = hooks.parseOptControllability1();

                reduce = true;
                reduceNonTerminal = 66;
                reduceState = doReduce3(o);
                return;
            }

            case 37:
            case 41:
            case 166: {
                // Reduce OptAnnos : ;
                doReduce1(token, 112);
                List<AAnnotation> o = hooks.parseOptAnnos1();

                reduce = true;
                reduceNonTerminal = 112;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 195.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action195() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 134: {
                // Shift 401.
                token = doShift(token, 401);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 196.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action196() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 197.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action197() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 134: {
                // Shift 381.
                token = doShift(token, 381);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 198.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action198() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce OptAutDecls : OptAutDecls AutDecl;
                doReduce1(token, 7);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ADecl> o = hooks.parseOptAutDecls2((List<ADecl>)o1, (ADecl)o2);

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 199.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action199() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce AutDecl : Decl;
                doReduce1(token, 8);
                Object o1 = doReduce2();

                ADecl o = hooks.parseAutDecl1((ADecl)o1);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 200.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action200() throws IOException {
        switch (token.id) {
            case 22:
            case 41:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 166: {
                // Reduce Locations : Location;
                doReduce1(token, 32);
                Object o1 = doReduce2();

                List<ALocation> o = hooks.parseLocations1((ALocation)o1);

                reduce = true;
                reduceNonTerminal = 32;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 201.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action201() throws IOException {
        switch (token.id) {
            case 22:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60: {
                // Reduce OptIoDecls : ;
                doReduce1(token, 68);
                List<AIoDecl> o = hooks.parseOptIoDecls1();

                reduce = true;
                reduceNonTerminal = 68;
                reduceState = doReduce3(o);
                return;
            }

            case 41:
            case 166: {
                // Reduce OptAnnos : ;
                doReduce1(token, 112);
                List<AAnnotation> o = hooks.parseOptAnnos1();

                reduce = true;
                reduceNonTerminal = 112;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 202.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action202() throws IOException {
        switch (token.id) {
            case 37: {
                // Shift 208.
                token = doShift(token, 208);
                return;
            }

            case 41: {
                // Shift 209.
                token = doShift(token, 209);
                return;
            }

            case 166: {
                // Shift 210.
                token = doShift(token, 210);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 203.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action203() throws IOException {
        switch (token.id) {
            case 39: {
                // Shift 205.
                token = doShift(token, 205);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 204.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action204() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 39: {
                // Reduce OptSupKind : SupKind;
                doReduce1(token, 65);
                Object o1 = doReduce2();

                Token o = hooks.parseOptSupKind2((Token)o1);

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 205.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action205() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 206.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action206() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 181.
                token = doShift(token, 181);
                return;
            }

            case 134: {
                // Shift 207.
                token = doShift(token, 207);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 207.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action207() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 19:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 70:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce InvariantDecls : OptSupKind INVARIANTKW Invariants SEMICOLTK;
                doReduce1(token, 51);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AInvariantDecl o = hooks.parseInvariantDecls1((Token)o1, (Token)o2, (List<AInvariant>)o3);

                reduce = true;
                reduceNonTerminal = 51;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 208.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action208() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 209.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action209() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 134: {
                // Shift 226.
                token = doShift(token, 226);
                return;
            }

            case 135: {
                // Shift 227.
                token = doShift(token, 227);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 210.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action210() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 212.
                token = doShift(token, 212);
                return;
            }

            case 37:
            case 41:
            case 166: {
                // Reduce Annotation : ANNOTATIONNAMETK;
                doReduce1(token, 113);
                Object o1 = doReduce2();

                AAnnotation o = hooks.parseAnnotation1((Token)o1);

                reduce = true;
                reduceNonTerminal = 113;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 211.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action211() throws IOException {
        switch (token.id) {
            case 37:
            case 41:
            case 166: {
                // Reduce OptAnnos : OptAnnos Annotation;
                doReduce1(token, 112);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AAnnotation> o = hooks.parseOptAnnos2((List<AAnnotation>)o1, (AAnnotation)o2);

                reduce = true;
                reduceNonTerminal = 112;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 212.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action212() throws IOException {
        switch (token.id) {
            case 156: {
                // Shift 213.
                token = doShift(token, 213);
                return;
            }

            case 159: {
                // Shift 214.
                token = doShift(token, 214);
                return;
            }

            case 162: {
                // Shift 215.
                token = doShift(token, 215);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 213.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action213() throws IOException {
        switch (token.id) {
            case 37:
            case 41:
            case 166: {
                // Reduce Annotation : ANNOTATIONNAMETK PAROPENTK PARCLOSETK;
                doReduce1(token, 113);
                doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AAnnotation o = hooks.parseAnnotation2((Token)o1);

                reduce = true;
                reduceNonTerminal = 113;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 214.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action214() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 224.
                token = doShift(token, 224);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 215.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action215() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 222.
                token = doShift(token, 222);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 216.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action216() throws IOException {
        switch (token.id) {
            case 133:
            case 156: {
                // Reduce AnnotationArgs : AnnotationArg;
                doReduce1(token, 114);
                Object o1 = doReduce2();

                List<AAnnotationArgument> o = hooks.parseAnnotationArgs1((AAnnotationArgument)o1);

                reduce = true;
                reduceNonTerminal = 114;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 217.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action217() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 218.
                token = doShift(token, 218);
                return;
            }

            case 156: {
                // Reduce OptComma : ;
                doReduce1(token, 116);
                Token o = hooks.parseOptComma1();

                reduce = true;
                reduceNonTerminal = 116;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 218.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action218() throws IOException {
        switch (token.id) {
            case 159: {
                // Shift 214.
                token = doShift(token, 214);
                return;
            }

            case 162: {
                // Shift 215.
                token = doShift(token, 215);
                return;
            }

            case 156: {
                // Reduce OptComma : COMMATK;
                doReduce1(token, 116);
                Object o1 = doReduce2();

                Token o = hooks.parseOptComma2((Token)o1);

                reduce = true;
                reduceNonTerminal = 116;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 219.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action219() throws IOException {
        switch (token.id) {
            case 156: {
                // Shift 220.
                token = doShift(token, 220);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 220.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action220() throws IOException {
        switch (token.id) {
            case 37:
            case 41:
            case 166: {
                // Reduce Annotation : ANNOTATIONNAMETK PAROPENTK AnnotationArgs OptComma PARCLOSETK;
                doReduce1(token, 113);
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AAnnotation o = hooks.parseAnnotation3((Token)o1, (List<AAnnotationArgument>)o3, (Token)o4);

                reduce = true;
                reduceNonTerminal = 113;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 221.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action221() throws IOException {
        switch (token.id) {
            case 133:
            case 156: {
                // Reduce AnnotationArgs : AnnotationArgs COMMATK AnnotationArg;
                doReduce1(token, 114);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AAnnotationArgument> o = hooks.parseAnnotationArgs2((List<AAnnotationArgument>)o1, (AAnnotationArgument)o3);

                reduce = true;
                reduceNonTerminal = 114;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 222.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action222() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 223.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action223() throws IOException {
        switch (token.id) {
            case 133:
            case 156: {
                // Reduce AnnotationArg : IDENTIFIERTK EQTK Expression;
                doReduce1(token, 115);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AAnnotationArgument o = hooks.parseAnnotationArg1((Token)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 115;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 224.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action224() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 225.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action225() throws IOException {
        switch (token.id) {
            case 133:
            case 156: {
                // Reduce AnnotationArg : RELATIVENAMETK EQTK Expression;
                doReduce1(token, 115);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AAnnotationArgument o = hooks.parseAnnotationArg2((Token)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 115;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 226.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action226() throws IOException {
        switch (token.id) {
            case 22:
            case 41:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 166: {
                // Reduce Location : OptAnnos LOCATIONKW SEMICOLTK;
                doReduce1(token, 33);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocation o = hooks.parseLocation1((List<AAnnotation>)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 33;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 227.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action227() throws IOException {
        switch (token.id) {
            case 75: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 76: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 77: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 19: {
                // Shift 231.
                token = doShift(token, 231);
                return;
            }

            case 24: {
                // Shift 232.
                token = doShift(token, 232);
                return;
            }

            case 36: {
                // Shift 233.
                token = doShift(token, 233);
                return;
            }

            case 42: {
                // Shift 234.
                token = doShift(token, 234);
                return;
            }

            case 70: {
                // Shift 235.
                token = doShift(token, 235);
                return;
            }

            case 39: {
                // Reduce OptSupKind : ;
                doReduce1(token, 65);
                Token o = hooks.parseOptSupKind1();

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 228.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action228() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 229.
                token = doShift(token, 229);
                return;
            }

            case 135: {
                // Shift 230.
                token = doShift(token, 230);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 229.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action229() throws IOException {
        switch (token.id) {
            case 22:
            case 41:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 166: {
                // Reduce Location : OptAnnos LOCATIONKW Identifier SEMICOLTK;
                doReduce1(token, 33);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocation o = hooks.parseLocation2((List<AAnnotation>)o1, (Token)o2, (AIdentifier)o3);

                reduce = true;
                reduceNonTerminal = 33;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 230.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action230() throws IOException {
        switch (token.id) {
            case 75: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 76: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 77: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 19: {
                // Shift 231.
                token = doShift(token, 231);
                return;
            }

            case 24: {
                // Shift 232.
                token = doShift(token, 232);
                return;
            }

            case 36: {
                // Shift 233.
                token = doShift(token, 233);
                return;
            }

            case 42: {
                // Shift 234.
                token = doShift(token, 234);
                return;
            }

            case 70: {
                // Shift 235.
                token = doShift(token, 235);
                return;
            }

            case 39: {
                // Reduce OptSupKind : ;
                doReduce1(token, 65);
                Token o = hooks.parseOptSupKind1();

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 231.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action231() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 18: {
                // Shift 258.
                token = doShift(token, 258);
                return;
            }

            case 46: {
                // Shift 259.
                token = doShift(token, 259);
                return;
            }

            case 62: {
                // Shift 260.
                token = doShift(token, 260);
                return;
            }

            case 73: {
                // Shift 261.
                token = doShift(token, 261);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 232.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action232() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 233.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action233() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 134: {
                // Shift 244.
                token = doShift(token, 244);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 234.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action234() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 134: {
                // Shift 241.
                token = doShift(token, 241);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 235.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action235() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 240.
                token = doShift(token, 240);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 236.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action236() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : InvariantDecls;
                doReduce1(token, 35);
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement3((AInvariantDecl)o1);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 237.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action237() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElements : LocationElement;
                doReduce1(token, 34);
                Object o1 = doReduce2();

                List<ALocationElement> o = hooks.parseLocationElements1((ALocationElement)o1);

                reduce = true;
                reduceNonTerminal = 34;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 238.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action238() throws IOException {
        switch (token.id) {
            case 75: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 76: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 77: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 19: {
                // Shift 231.
                token = doShift(token, 231);
                return;
            }

            case 24: {
                // Shift 232.
                token = doShift(token, 232);
                return;
            }

            case 36: {
                // Shift 233.
                token = doShift(token, 233);
                return;
            }

            case 42: {
                // Shift 234.
                token = doShift(token, 234);
                return;
            }

            case 70: {
                // Shift 235.
                token = doShift(token, 235);
                return;
            }

            case 22:
            case 41:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 166: {
                // Reduce Location : OptAnnos LOCATIONKW Identifier COLONTK LocationElements;
                doReduce1(token, 33);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocation o = hooks.parseLocation4((List<AAnnotation>)o1, (Token)o2, (AIdentifier)o3, (List<ALocationElement>)o5);

                reduce = true;
                reduceNonTerminal = 33;
                reduceState = doReduce3(o);
                return;
            }

            case 39: {
                // Reduce OptSupKind : ;
                doReduce1(token, 65);
                Token o = hooks.parseOptSupKind1();

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 239.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action239() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElements : LocationElements LocationElement;
                doReduce1(token, 34);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ALocationElement> o = hooks.parseLocationElements2((List<ALocationElement>)o1, (ALocationElement)o2);

                reduce = true;
                reduceNonTerminal = 34;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 240.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action240() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : URGENTKW SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement7((Token)o1);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 241.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action241() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : MARKEDKW SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement5((Token)o1);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 242.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action242() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 134: {
                // Shift 243.
                token = doShift(token, 243);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 243.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action243() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : MARKEDKW Expressions SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement6((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 244.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action244() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : INITIALKW SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement1((Token)o1);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 245.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action245() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 134: {
                // Shift 246.
                token = doShift(token, 246);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 246.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action246() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : INITIALKW Expressions SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement2((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 247.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action247() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Equations : Equation;
                doReduce1(token, 49);
                Object o1 = doReduce2();

                List<AEquation> o = hooks.parseEquations1((AEquation)o1);

                reduce = true;
                reduceNonTerminal = 49;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 248.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action248() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 255.
                token = doShift(token, 255);
                return;
            }

            case 134: {
                // Shift 256.
                token = doShift(token, 256);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 249.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action249() throws IOException {
        switch (token.id) {
            case 136: {
                // Shift 250.
                token = doShift(token, 250);
                return;
            }

            case 144: {
                // Shift 251.
                token = doShift(token, 251);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 250.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action250() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 253.
                token = doShift(token, 253);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 251.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action251() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 252.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action252() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Equation : Identifier EQTK Expression;
                doReduce1(token, 50);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AEquation o = hooks.parseEquation2((AIdentifier)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 50;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 253.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action253() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 254.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action254() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Equation : Identifier APOSTROPHETK EQTK Expression;
                doReduce1(token, 50);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AEquation o = hooks.parseEquation1((AIdentifier)o1, (Token)o3, (AExpression)o4);

                reduce = true;
                reduceNonTerminal = 50;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 255.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action255() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 256.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action256() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : EQUATIONKW Equations SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement4((Token)o1, (List<AEquation>)o2);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 257.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action257() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Equations : Equations COMMATK Equation;
                doReduce1(token, 49);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AEquation> o = hooks.parseEquations2((List<AEquation>)o1, (AEquation)o3);

                reduce = true;
                reduceNonTerminal = 49;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 258.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action258() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 259.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action259() throws IOException {
        switch (token.id) {
            case 18: {
                // Shift 274.
                token = doShift(token, 274);
                return;
            }

            case 31:
            case 134: {
                // Reduce OptEdgeUpdate : ;
                doReduce1(token, 29);
                List<AUpdate> o = hooks.parseOptEdgeUpdate1();

                reduce = true;
                reduceNonTerminal = 29;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 260.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action260() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvent : TAUKW;
                doReduce1(token, 31);
                Object o1 = doReduce2();

                AEdgeEvent o = hooks.parseEdgeEvent1((Token)o1);

                reduce = true;
                reduceNonTerminal = 31;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 261.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action261() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 262.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action262() throws IOException {
        switch (token.id) {
            case 31: {
                // Shift 313.
                token = doShift(token, 313);
                return;
            }

            case 134: {
                // Shift 314.
                token = doShift(token, 314);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 263.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action263() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvents : EdgeEvent;
                doReduce1(token, 30);
                Object o1 = doReduce2();

                List<AEdgeEvent> o = hooks.parseEdgeEvents1((AEdgeEvent)o1);

                reduce = true;
                reduceNonTerminal = 30;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 264.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action264() throws IOException {
        switch (token.id) {
            case 73: {
                // Shift 269.
                token = doShift(token, 269);
                return;
            }

            case 133: {
                // Shift 270.
                token = doShift(token, 270);
                return;
            }

            case 18:
            case 31:
            case 46:
            case 134: {
                // Reduce OptEdgeGuard : ;
                doReduce1(token, 27);
                List<AExpression> o = hooks.parseOptEdgeGuard1();

                reduce = true;
                reduceNonTerminal = 27;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 265.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action265() throws IOException {
        switch (token.id) {
            case 137: {
                // Shift 266.
                token = doShift(token, 266);
                return;
            }

            case 138: {
                // Shift 267.
                token = doShift(token, 267);
                return;
            }

            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvent : Name;
                doReduce1(token, 31);
                Object o1 = doReduce2();

                AEdgeEvent o = hooks.parseEdgeEvent2((AName)o1);

                reduce = true;
                reduceNonTerminal = 31;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 266.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action266() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvent : Name EXCLAMATIONTK;
                doReduce1(token, 31);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AEdgeEvent o = hooks.parseEdgeEvent3((AName)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 31;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 267.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action267() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvent : Name QUESTIONTK;
                doReduce1(token, 31);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AEdgeEvent o = hooks.parseEdgeEvent5((AName)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 31;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 268.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action268() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvent : Name EXCLAMATIONTK Expression;
                doReduce1(token, 31);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AEdgeEvent o = hooks.parseEdgeEvent4((AName)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 31;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 269.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action269() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 270.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action270() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 62: {
                // Shift 260.
                token = doShift(token, 260);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 271.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action271() throws IOException {
        switch (token.id) {
            case 46: {
                // Shift 272.
                token = doShift(token, 272);
                return;
            }

            case 18:
            case 31:
            case 134: {
                // Reduce OptEdgeUrgent : ;
                doReduce1(token, 28);
                TextPosition o = hooks.parseOptEdgeUrgent1();

                reduce = true;
                reduceNonTerminal = 28;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 272.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action272() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 134: {
                // Reduce OptEdgeUrgent : NOWKW;
                doReduce1(token, 28);
                Object o1 = doReduce2();

                TextPosition o = hooks.parseOptEdgeUrgent2((Token)o1);

                reduce = true;
                reduceNonTerminal = 28;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 273.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action273() throws IOException {
        switch (token.id) {
            case 18: {
                // Shift 274.
                token = doShift(token, 274);
                return;
            }

            case 31:
            case 134: {
                // Reduce OptEdgeUpdate : ;
                doReduce1(token, 29);
                List<AUpdate> o = hooks.parseOptEdgeUpdate1();

                reduce = true;
                reduceNonTerminal = 29;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 274.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action274() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 275.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action275() throws IOException {
        switch (token.id) {
            case 31:
            case 134: {
                // Reduce CoreEdge : EdgeEvents OptEdgeGuard OptEdgeUrgent OptEdgeUpdate;
                doReduce1(token, 26);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACoreEdge o = hooks.parseCoreEdge1((List<AEdgeEvent>)o1, (List<AExpression>)o2, (TextPosition)o3, (List<AUpdate>)o4);

                reduce = true;
                reduceNonTerminal = 26;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 276.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action276() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 277.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action277() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 278.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action278() throws IOException {
        switch (token.id) {
            case 132: {
                // Shift 290.
                token = doShift(token, 290);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 279.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action279() throws IOException {
        switch (token.id) {
            case 157: {
                // Shift 284.
                token = doShift(token, 284);
                return;
            }

            case 132:
            case 133:
            case 156: {
                // Reduce Addressable : Name;
                doReduce1(token, 59);
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddressable1((AName)o1);

                reduce = true;
                reduceNonTerminal = 59;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 280.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action280() throws IOException {
        switch (token.id) {
            case 20:
            case 21:
            case 22:
            case 27:
            case 31:
            case 133:
            case 134: {
                // Reduce Updates : Update;
                doReduce1(token, 56);
                Object o1 = doReduce2();

                List<AUpdate> o = hooks.parseUpdates1((AUpdate)o1);

                reduce = true;
                reduceNonTerminal = 56;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 281.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action281() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 282.
                token = doShift(token, 282);
                return;
            }

            case 31:
            case 134: {
                // Reduce OptEdgeUpdate : DOKW Updates;
                doReduce1(token, 29);
                Object o2 = doReduce2();
                doReduce2();

                List<AUpdate> o = hooks.parseOptEdgeUpdate2((List<AUpdate>)o2);

                reduce = true;
                reduceNonTerminal = 29;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 282.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action282() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 283.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action283() throws IOException {
        switch (token.id) {
            case 20:
            case 21:
            case 22:
            case 27:
            case 31:
            case 133:
            case 134: {
                // Reduce Updates : Updates COMMATK Update;
                doReduce1(token, 56);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AUpdate> o = hooks.parseUpdates2((List<AUpdate>)o1, (AUpdate)o3);

                reduce = true;
                reduceNonTerminal = 56;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 284.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action284() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 285.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action285() throws IOException {
        switch (token.id) {
            case 132:
            case 133:
            case 156:
            case 157: {
                // Reduce Projections : Projection;
                doReduce1(token, 60);
                Object o1 = doReduce2();

                List<AProjectionExpression> o = hooks.parseProjections1((AProjectionExpression)o1);

                reduce = true;
                reduceNonTerminal = 60;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 286.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action286() throws IOException {
        switch (token.id) {
            case 157: {
                // Shift 284.
                token = doShift(token, 284);
                return;
            }

            case 132:
            case 133:
            case 156: {
                // Reduce Addressable : Name Projections;
                doReduce1(token, 59);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddressable2((AName)o1, (List<AProjectionExpression>)o2);

                reduce = true;
                reduceNonTerminal = 59;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 287.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action287() throws IOException {
        switch (token.id) {
            case 132:
            case 133:
            case 156:
            case 157: {
                // Reduce Projections : Projections Projection;
                doReduce1(token, 60);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AProjectionExpression> o = hooks.parseProjections2((List<AProjectionExpression>)o1, (AProjectionExpression)o2);

                reduce = true;
                reduceNonTerminal = 60;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 288.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action288() throws IOException {
        switch (token.id) {
            case 158: {
                // Shift 289.
                token = doShift(token, 289);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 289.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action289() throws IOException {
        switch (token.id) {
            case 132:
            case 133:
            case 156:
            case 157: {
                // Reduce Projection : SQOPENTK Expression SQCLOSETK;
                doReduce1(token, 61);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AProjectionExpression o = hooks.parseProjection1((Token)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 61;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 290.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action290() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 291.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action291() throws IOException {
        switch (token.id) {
            case 20:
            case 21:
            case 22:
            case 27:
            case 31:
            case 133:
            case 134: {
                // Reduce Update : Addressable BECOMESTK Expression;
                doReduce1(token, 57);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AUpdate o = hooks.parseUpdate1((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 57;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 292.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action292() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 293.
                token = doShift(token, 293);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 293.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action293() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 294.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action294() throws IOException {
        switch (token.id) {
            case 132:
            case 133:
            case 156: {
                // Reduce Addressables : Addressable;
                doReduce1(token, 58);
                Object o1 = doReduce2();

                List<AExpression> o = hooks.parseAddressables1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 58;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 295.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action295() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 296.
                token = doShift(token, 296);
                return;
            }

            case 156: {
                // Shift 297.
                token = doShift(token, 297);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 296.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action296() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 297.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action297() throws IOException {
        switch (token.id) {
            case 132:
            case 133:
            case 156: {
                // Reduce Addressable : PAROPENTK Addressable COMMATK Addressables PARCLOSETK;
                doReduce1(token, 59);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddressable3((Token)o1, (AExpression)o2, (List<AExpression>)o4);

                reduce = true;
                reduceNonTerminal = 59;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 298.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action298() throws IOException {
        switch (token.id) {
            case 132:
            case 133:
            case 156: {
                // Reduce Addressables : Addressables COMMATK Addressable;
                doReduce1(token, 58);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AExpression> o = hooks.parseAddressables2((List<AExpression>)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 58;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 299.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action299() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 300.
                token = doShift(token, 300);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 300.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action300() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 301.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action301() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 282.
                token = doShift(token, 282);
                return;
            }

            case 20:
            case 21:
            case 22: {
                // Reduce OptElifUpdates : ;
                doReduce1(token, 62);
                List<AElifUpdate> o = hooks.parseOptElifUpdates1();

                reduce = true;
                reduceNonTerminal = 62;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 302.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action302() throws IOException {
        switch (token.id) {
            case 20: {
                // Shift 303.
                token = doShift(token, 303);
                return;
            }

            case 21: {
                // Shift 304.
                token = doShift(token, 304);
                return;
            }

            case 22: {
                // Reduce OptElseUpdate : ;
                doReduce1(token, 63);
                List<AUpdate> o = hooks.parseOptElseUpdate1();

                reduce = true;
                reduceNonTerminal = 63;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 303.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action303() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 304.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action304() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 305.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action305() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 306.
                token = doShift(token, 306);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 306.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action306() throws IOException {
        switch (token.id) {
            case 20:
            case 21:
            case 22:
            case 27:
            case 31:
            case 133:
            case 134: {
                // Reduce Update : IFKW Expressions COLONTK Updates OptElifUpdates OptElseUpdate ENDKW;
                doReduce1(token, 57);
                doReduce2();
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AUpdate o = hooks.parseUpdate2((Token)o1, (List<AExpression>)o2, (List<AUpdate>)o4, (List<AElifUpdate>)o5, (List<AUpdate>)o6);

                reduce = true;
                reduceNonTerminal = 57;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 307.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action307() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 282.
                token = doShift(token, 282);
                return;
            }

            case 22: {
                // Reduce OptElseUpdate : ELSEKW Updates;
                doReduce1(token, 63);
                Object o2 = doReduce2();
                doReduce2();

                List<AUpdate> o = hooks.parseOptElseUpdate2((List<AUpdate>)o2);

                reduce = true;
                reduceNonTerminal = 63;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 308.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action308() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 309.
                token = doShift(token, 309);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 309.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action309() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 310.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action310() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 282.
                token = doShift(token, 282);
                return;
            }

            case 20:
            case 21:
            case 22: {
                // Reduce OptElifUpdates : OptElifUpdates ELIFKW Expressions COLONTK Updates;
                doReduce1(token, 62);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AElifUpdate> o = hooks.parseOptElifUpdates2((List<AElifUpdate>)o1, (Token)o2, (List<AExpression>)o3, (List<AUpdate>)o5);

                reduce = true;
                reduceNonTerminal = 62;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 311.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action311() throws IOException {
        switch (token.id) {
            case 18:
            case 31:
            case 46:
            case 73:
            case 133:
            case 134: {
                // Reduce EdgeEvents : EdgeEvents COMMATK EdgeEvent;
                doReduce1(token, 30);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AEdgeEvent> o = hooks.parseEdgeEvents2((List<AEdgeEvent>)o1, (AEdgeEvent)o3);

                reduce = true;
                reduceNonTerminal = 30;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 312.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action312() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 18:
            case 31:
            case 46:
            case 134: {
                // Reduce OptEdgeGuard : WHENKW Expressions;
                doReduce1(token, 27);
                Object o2 = doReduce2();
                doReduce2();

                List<AExpression> o = hooks.parseOptEdgeGuard2((List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 27;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 313.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action313() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 314.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action314() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : EDGEKW CoreEdge SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement8((Token)o1, (ACoreEdge)o2);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 315.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action315() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 316.
                token = doShift(token, 316);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 316.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action316() throws IOException {
        switch (token.id) {
            case 19:
            case 22:
            case 24:
            case 36:
            case 39:
            case 41:
            case 42:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 70:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce LocationElement : EDGEKW CoreEdge GOTOKW Identifier SEMICOLTK;
                doReduce1(token, 35);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocationElement o = hooks.parseLocationElement9((Token)o1, (ACoreEdge)o2, (AIdentifier)o4);

                reduce = true;
                reduceNonTerminal = 35;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 317.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action317() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 46: {
                // Shift 272.
                token = doShift(token, 272);
                return;
            }

            case 18:
            case 31:
            case 134: {
                // Reduce OptEdgeUrgent : ;
                doReduce1(token, 28);
                TextPosition o = hooks.parseOptEdgeUrgent1();

                reduce = true;
                reduceNonTerminal = 28;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 318.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action318() throws IOException {
        switch (token.id) {
            case 18: {
                // Shift 274.
                token = doShift(token, 274);
                return;
            }

            case 31:
            case 134: {
                // Reduce OptEdgeUpdate : ;
                doReduce1(token, 29);
                List<AUpdate> o = hooks.parseOptEdgeUpdate1();

                reduce = true;
                reduceNonTerminal = 29;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 319.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action319() throws IOException {
        switch (token.id) {
            case 31:
            case 134: {
                // Reduce CoreEdge : WHENKW Expressions OptEdgeUrgent OptEdgeUpdate;
                doReduce1(token, 26);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                ACoreEdge o = hooks.parseCoreEdge2((List<AExpression>)o2, (TextPosition)o3, (List<AUpdate>)o4);

                reduce = true;
                reduceNonTerminal = 26;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 320.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action320() throws IOException {
        switch (token.id) {
            case 31:
            case 134: {
                // Reduce CoreEdge : NOWKW OptEdgeUpdate;
                doReduce1(token, 26);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACoreEdge o = hooks.parseCoreEdge3((Token)o1, (List<AUpdate>)o2);

                reduce = true;
                reduceNonTerminal = 26;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 321.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action321() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 282.
                token = doShift(token, 282);
                return;
            }

            case 31:
            case 134: {
                // Reduce CoreEdge : DOKW Updates;
                doReduce1(token, 26);
                Object o2 = doReduce2();
                doReduce2();

                ACoreEdge o = hooks.parseCoreEdge4((List<AUpdate>)o2);

                reduce = true;
                reduceNonTerminal = 26;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 322.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action322() throws IOException {
        switch (token.id) {
            case 75: {
                // Shift 25.
                token = doShift(token, 25);
                return;
            }

            case 76: {
                // Shift 26.
                token = doShift(token, 26);
                return;
            }

            case 77: {
                // Shift 27.
                token = doShift(token, 27);
                return;
            }

            case 19: {
                // Shift 231.
                token = doShift(token, 231);
                return;
            }

            case 24: {
                // Shift 232.
                token = doShift(token, 232);
                return;
            }

            case 36: {
                // Shift 233.
                token = doShift(token, 233);
                return;
            }

            case 42: {
                // Shift 234.
                token = doShift(token, 234);
                return;
            }

            case 70: {
                // Shift 235.
                token = doShift(token, 235);
                return;
            }

            case 22:
            case 41:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 166: {
                // Reduce Location : OptAnnos LOCATIONKW COLONTK LocationElements;
                doReduce1(token, 33);
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ALocation o = hooks.parseLocation3((List<AAnnotation>)o1, (Token)o2, (List<ALocationElement>)o4);

                reduce = true;
                reduceNonTerminal = 33;
                reduceState = doReduce3(o);
                return;
            }

            case 39: {
                // Reduce OptSupKind : ;
                doReduce1(token, 65);
                Token o = hooks.parseOptSupKind1();

                reduce = true;
                reduceNonTerminal = 65;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 323.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action323() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : BOOLKW;
                doReduce1(token, 92);
                Object o1 = doReduce2();

                ACifType o = hooks.parseType01((Token)o1);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 324.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action324() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 372.
                token = doShift(token, 372);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 325.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action325() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 326.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action326() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 327.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action327() throws IOException {
        switch (token.id) {
            case 157: {
                // Shift 358.
                token = doShift(token, 358);
                return;
            }

            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : INTKW;
                doReduce1(token, 92);
                Object o1 = doReduce2();

                ACifType o = hooks.parseType02((Token)o1);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 328.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action328() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 157: {
                // Shift 349.
                token = doShift(token, 349);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 329.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action329() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : REALKW;
                doReduce1(token, 92);
                Object o1 = doReduce2();

                ACifType o = hooks.parseType04((Token)o1);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 330.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action330() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 331.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action331() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : STRINGKW;
                doReduce1(token, 92);
                Object o1 = doReduce2();

                ACifType o = hooks.parseType05((Token)o1);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 332.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action332() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 340.
                token = doShift(token, 340);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 333.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action333() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : Name;
                doReduce1(token, 92);
                Object o1 = doReduce2();

                ACifType o = hooks.parseType15((AName)o1);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 334.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action334() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 335.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action335() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 156: {
                // Reduce Identifiers : Identifier;
                doReduce1(token, 64);
                Object o1 = doReduce2();

                List<AIdentifier> o = hooks.parseIdentifiers1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 64;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 336.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action336() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134: {
                // Shift 338.
                token = doShift(token, 338);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 337.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action337() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 338.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action338() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : OptAnnos INPUTKW Type Identifiers SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl09((List<AAnnotation>)o1, (Token)o2, (ACifType)o3, (List<AIdentifier>)o4);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 339.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action339() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 156: {
                // Reduce Identifiers : Identifiers COMMATK Identifier;
                doReduce1(token, 64);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AIdentifier> o = hooks.parseIdentifiers2((List<AIdentifier>)o1, (AIdentifier)o3);

                reduce = true;
                reduceNonTerminal = 64;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 340.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action340() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 341.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action341() throws IOException {
        switch (token.id) {
            case 134:
            case 156: {
                // Reduce Fields : Field;
                doReduce1(token, 93);
                Object o1 = doReduce2();

                List<AField> o = hooks.parseFields1((AField)o1);

                reduce = true;
                reduceNonTerminal = 93;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 342.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action342() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 345.
                token = doShift(token, 345);
                return;
            }

            case 156: {
                // Shift 346.
                token = doShift(token, 346);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 343.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action343() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 344.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action344() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134:
            case 156: {
                // Reduce Field : Type Identifiers;
                doReduce1(token, 94);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AField o = hooks.parseField1((ACifType)o1, (List<AIdentifier>)o2);

                reduce = true;
                reduceNonTerminal = 94;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 345.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action345() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 346.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action346() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : TUPLEKW PAROPENTK Fields PARCLOSETK;
                doReduce1(token, 92);
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType11((Token)o1, (List<AField>)o3);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 347.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action347() throws IOException {
        switch (token.id) {
            case 134:
            case 156: {
                // Reduce Fields : Fields SEMICOLTK Field;
                doReduce1(token, 93);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AField> o = hooks.parseFields2((List<AField>)o1, (AField)o3);

                reduce = true;
                reduceNonTerminal = 93;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 348.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action348() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : SETKW Type;
                doReduce1(token, 92);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType09((Token)o1, (ACifType)o2);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 349.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action349() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 350.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action350() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : LISTKW Type;
                doReduce1(token, 92);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType06((Token)o1, (ACifType)o2);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 351.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action351() throws IOException {
        switch (token.id) {
            case 152: {
                // Shift 352.
                token = doShift(token, 352);
                return;
            }

            case 158: {
                // Shift 353.
                token = doShift(token, 353);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 352.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action352() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 353.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action353() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 354.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action354() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : LISTKW SQOPENTK Expression SQCLOSETK Type;
                doReduce1(token, 92);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType07((Token)o1, (AExpression)o3, (ACifType)o5);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 355.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action355() throws IOException {
        switch (token.id) {
            case 158: {
                // Shift 356.
                token = doShift(token, 356);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 356.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action356() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 357.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action357() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : LISTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK Type;
                doReduce1(token, 92);
                Object o7 = doReduce2();
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType08((Token)o1, (AExpression)o3, (AExpression)o5, (ACifType)o7);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 358.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action358() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 359.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action359() throws IOException {
        switch (token.id) {
            case 152: {
                // Shift 360.
                token = doShift(token, 360);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 360.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action360() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 361.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action361() throws IOException {
        switch (token.id) {
            case 158: {
                // Shift 362.
                token = doShift(token, 362);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 362.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action362() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : INTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK;
                doReduce1(token, 92);
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType03((Token)o1, (AExpression)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 363.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action363() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 364.
                token = doShift(token, 364);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 364.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action364() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 156: {
                // Shift 365.
                token = doShift(token, 365);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 365.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action365() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : FUNCKW Type PAROPENTK PARCLOSETK;
                doReduce1(token, 92);
                doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType12((Token)o1, (ACifType)o2);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 366.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action366() throws IOException {
        switch (token.id) {
            case 133:
            case 156:
            case 162: {
                // Reduce Types : Type;
                doReduce1(token, 90);
                Object o1 = doReduce2();

                List<ACifType> o = hooks.parseTypes1((ACifType)o1);

                reduce = true;
                reduceNonTerminal = 90;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 367.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action367() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 368.
                token = doShift(token, 368);
                return;
            }

            case 156: {
                // Shift 369.
                token = doShift(token, 369);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 368.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action368() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 369.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action369() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : FUNCKW Type PAROPENTK Types PARCLOSETK;
                doReduce1(token, 92);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType13((Token)o1, (ACifType)o2, (List<ACifType>)o4);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 370.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action370() throws IOException {
        switch (token.id) {
            case 133:
            case 156:
            case 162: {
                // Reduce Types : Types COMMATK Type;
                doReduce1(token, 90);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ACifType> o = hooks.parseTypes2((List<ACifType>)o1, (ACifType)o3);

                reduce = true;
                reduceNonTerminal = 90;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 371.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action371() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : DISTKW Type;
                doReduce1(token, 92);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType14((Token)o1, (ACifType)o2);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 372.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action372() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 373.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action373() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 374.
                token = doShift(token, 374);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 374.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action374() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 375.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action375() throws IOException {
        switch (token.id) {
            case 156: {
                // Shift 376.
                token = doShift(token, 376);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 376.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action376() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 135:
            case 147:
            case 155:
            case 156:
            case 162: {
                // Reduce Type : DICTKW PAROPENTK Type COLONTK Type PARCLOSETK;
                doReduce1(token, 92);
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ACifType o = hooks.parseType10((Token)o1, (ACifType)o3, (ACifType)o5);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 377.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action377() throws IOException {
        switch (token.id) {
            case 22:
            case 41:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 166: {
                // Reduce Locations : Locations Location;
                doReduce1(token, 32);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ALocation> o = hooks.parseLocations2((List<ALocation>)o1, (ALocation)o2);

                reduce = true;
                reduceNonTerminal = 32;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 378.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action378() throws IOException {
        switch (token.id) {
            case 41: {
                // Shift 209.
                token = doShift(token, 209);
                return;
            }

            case 166: {
                // Shift 210.
                token = doShift(token, 210);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 379.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action379() throws IOException {
        switch (token.id) {
            case 49: {
                // Shift 16.
                token = doShift(token, 16);
                return;
            }

            case 50: {
                // Shift 17.
                token = doShift(token, 17);
                return;
            }

            case 56: {
                // Shift 18.
                token = doShift(token, 18);
                return;
            }

            case 57: {
                // Shift 19.
                token = doShift(token, 19);
                return;
            }

            case 58: {
                // Shift 20.
                token = doShift(token, 20);
                return;
            }

            case 59: {
                // Shift 21.
                token = doShift(token, 21);
                return;
            }

            case 60: {
                // Shift 22.
                token = doShift(token, 22);
                return;
            }

            case 22: {
                // Reduce AutomatonBody : OptAutDecls Locations OptIoDecls;
                doReduce1(token, 4);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AAutomatonBody o = hooks.parseAutomatonBody1((List<ADecl>)o1, (List<ALocation>)o2, (List<AIoDecl>)o3);

                reduce = true;
                reduceNonTerminal = 4;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 380.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action380() throws IOException {
        switch (token.id) {
            case 22:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60: {
                // Reduce OptIoDecls : OptIoDecls IoDecl;
                doReduce1(token, 68);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AIoDecl> o = hooks.parseOptIoDecls2((List<AIoDecl>)o1, (AIoDecl)o2);

                reduce = true;
                reduceNonTerminal = 68;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 381.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action381() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce AutDecl : MONITORKW SEMICOLTK;
                doReduce1(token, 8);
                doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseAutDecl5((Token)o1);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 382.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action382() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 384.
                token = doShift(token, 384);
                return;
            }

            case 134: {
                // Shift 385.
                token = doShift(token, 385);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 383.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action383() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Events : Name;
                doReduce1(token, 25);
                Object o1 = doReduce2();

                List<AName> o = hooks.parseEvents1((AName)o1);

                reduce = true;
                reduceNonTerminal = 25;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 384.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action384() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 385.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action385() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce AutDecl : MONITORKW Events SEMICOLTK;
                doReduce1(token, 8);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseAutDecl4((Token)o1, (List<AName>)o2);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 386.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action386() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Events : Events COMMATK Name;
                doReduce1(token, 25);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AName> o = hooks.parseEvents2((List<AName>)o1, (AName)o3);

                reduce = true;
                reduceNonTerminal = 25;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 387.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action387() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 388.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action388() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce DiscDecls : DiscDecl;
                doReduce1(token, 44);
                Object o1 = doReduce2();

                List<ADiscVariable> o = hooks.parseDiscDecls1((ADiscVariable)o1);

                reduce = true;
                reduceNonTerminal = 44;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 389.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action389() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 398.
                token = doShift(token, 398);
                return;
            }

            case 134: {
                // Shift 399.
                token = doShift(token, 399);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 390.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action390() throws IOException {
        switch (token.id) {
            case 126: {
                // Shift 391.
                token = doShift(token, 391);
                return;
            }

            case 144: {
                // Shift 392.
                token = doShift(token, 392);
                return;
            }

            case 133:
            case 134: {
                // Reduce DiscDecl : Identifier;
                doReduce1(token, 45);
                Object o1 = doReduce2();

                ADiscVariable o = hooks.parseDiscDecl1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 45;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 391.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action391() throws IOException {
        switch (token.id) {
            case 2: {
                // Shift 394.
                token = doShift(token, 394);
                return;
            }

            case 153: {
                // Shift 395.
                token = doShift(token, 395);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 392.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action392() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 393.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action393() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce DiscDecl : Identifier EQTK Expression;
                doReduce1(token, 45);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ADiscVariable o = hooks.parseDiscDecl3((AIdentifier)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 45;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 394.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action394() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce DiscDecl : Identifier INKW ANYKW;
                doReduce1(token, 45);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ADiscVariable o = hooks.parseDiscDecl2((AIdentifier)o1, (Token)o3);

                reduce = true;
                reduceNonTerminal = 45;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 395.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action395() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 396.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action396() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 154: {
                // Shift 397.
                token = doShift(token, 397);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 397.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action397() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce DiscDecl : Identifier INKW CUROPENTK Expressions CURCLOSETK;
                doReduce1(token, 45);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ADiscVariable o = hooks.parseDiscDecl4((AIdentifier)o1, (List<AExpression>)o4);

                reduce = true;
                reduceNonTerminal = 45;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 398.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action398() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 399.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action399() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce AutDecl : DISCKW Type DiscDecls SEMICOLTK;
                doReduce1(token, 8);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseAutDecl6((Token)o1, (ACifType)o2, (List<ADiscVariable>)o3);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 400.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action400() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce DiscDecls : DiscDecls COMMATK DiscDecl;
                doReduce1(token, 44);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ADiscVariable> o = hooks.parseDiscDecls2((List<ADiscVariable>)o1, (ADiscVariable)o3);

                reduce = true;
                reduceNonTerminal = 44;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 401.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action401() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce AutDecl : ALPHABETKW SEMICOLTK;
                doReduce1(token, 8);
                doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseAutDecl3((Token)o1);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 402.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action402() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 384.
                token = doShift(token, 384);
                return;
            }

            case 134: {
                // Shift 403.
                token = doShift(token, 403);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 403.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action403() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce AutDecl : ALPHABETKW Events SEMICOLTK;
                doReduce1(token, 8);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseAutDecl2((Token)o1, (List<AName>)o2);

                reduce = true;
                reduceNonTerminal = 8;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 404.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action404() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : SupKind Identifier COLONTK AutomatonBody ENDKW;
                doReduce1(token, 6);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl12((Token)o1, (AIdentifier)o2, (AAutomatonBody)o4, (Token)o5);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 405.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action405() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 156: {
                // Shift 414.
                token = doShift(token, 414);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 406.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action406() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 135: {
                // Reduce OptExpression : ;
                doReduce1(token, 96);
                AExpression o = hooks.parseOptExpression1();

                reduce = true;
                reduceNonTerminal = 96;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 407.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action407() throws IOException {
        switch (token.id) {
            case 158: {
                // Shift 413.
                token = doShift(token, 413);
                return;
            }

            case 135: {
                // Reduce OptExpression : Expression;
                doReduce1(token, 96);
                Object o1 = doReduce2();

                AExpression o = hooks.parseOptExpression2((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 96;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 408.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action408() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 409.
                token = doShift(token, 409);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 409.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action409() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 158: {
                // Reduce OptExpression : ;
                doReduce1(token, 96);
                AExpression o = hooks.parseOptExpression1();

                reduce = true;
                reduceNonTerminal = 96;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 410.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action410() throws IOException {
        switch (token.id) {
            case 158: {
                // Reduce OptExpression : Expression;
                doReduce1(token, 96);
                Object o1 = doReduce2();

                AExpression o = hooks.parseOptExpression2((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 96;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 411.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action411() throws IOException {
        switch (token.id) {
            case 158: {
                // Shift 412.
                token = doShift(token, 412);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 412.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action412() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : FuncExpression SQOPENTK OptExpression COLONTK OptExpression SQCLOSETK;
                doReduce1(token, 104);
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression3((AExpression)o1, (Token)o2, (AExpression)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 413.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action413() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : FuncExpression SQOPENTK Expression SQCLOSETK;
                doReduce1(token, 104);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression2((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 414.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action414() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : FuncExpression PAROPENTK PARCLOSETK;
                doReduce1(token, 104);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression4((AExpression)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 415.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action415() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 156: {
                // Shift 416.
                token = doShift(token, 416);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 416.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action416() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce FuncExpression : FuncExpression PAROPENTK Expressions PARCLOSETK;
                doReduce1(token, 104);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseFuncExpression5((AExpression)o1, (Token)o2, (List<AExpression>)o3);

                reduce = true;
                reduceNonTerminal = 104;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 417.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action417() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 153: {
                // Shift 418.
                token = doShift(token, 418);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 418.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action418() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 419.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action419() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariant : Expression DISABLESKW Name;
                doReduce1(token, 53);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant6((AExpression)o1, (Token)o2, (AName)o3);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 420.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action420() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Invariant : Expression DISABLESKW NamesSet;
                doReduce1(token, 53);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AInvariant o = hooks.parseInvariant8((AExpression)o1, (Token)o2, (List<AName>)o3);

                reduce = true;
                reduceNonTerminal = 53;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 421.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action421() throws IOException {
        switch (token.id) {
            case 133:
            case 154: {
                // Reduce Names : Name;
                doReduce1(token, 55);
                Object o1 = doReduce2();

                List<AName> o = hooks.parseNames1((AName)o1);

                reduce = true;
                reduceNonTerminal = 55;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 422.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action422() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 423.
                token = doShift(token, 423);
                return;
            }

            case 154: {
                // Shift 424.
                token = doShift(token, 424);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 423.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action423() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 424.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action424() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce NamesSet : CUROPENTK Names CURCLOSETK;
                doReduce1(token, 54);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                List<AName> o = hooks.parseNamesSet1((List<AName>)o2);

                reduce = true;
                reduceNonTerminal = 54;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 425.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action425() throws IOException {
        switch (token.id) {
            case 133:
            case 154: {
                // Reduce Names : Names COMMATK Name;
                doReduce1(token, 55);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AName> o = hooks.parseNames2((List<AName>)o1, (AName)o3);

                reduce = true;
                reduceNonTerminal = 55;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 426.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action426() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : SQOPENTK SQCLOSETK;
                doReduce1(token, 105);
                doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor07((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 427.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action427() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 158: {
                // Shift 428.
                token = doShift(token, 428);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 428.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action428() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : SQOPENTK Expressions SQCLOSETK;
                doReduce1(token, 105);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor08((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 429.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action429() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 430.
                token = doShift(token, 430);
                return;
            }

            case 156: {
                // Shift 431.
                token = doShift(token, 431);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 430.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action430() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 431.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action431() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : PAROPENTK Expression PARCLOSETK;
                doReduce1(token, 105);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                AExpression o = hooks.parseExpressionFactor16((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 432.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action432() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 156: {
                // Shift 433.
                token = doShift(token, 433);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 433.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action433() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : PAROPENTK Expression COMMATK Expressions PARCLOSETK;
                doReduce1(token, 105);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor12((Token)o1, (AExpression)o2, (List<AExpression>)o4);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 434.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action434() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : CUROPENTK CURCLOSETK;
                doReduce1(token, 105);
                doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor09((Token)o1);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 435.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action435() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 441.
                token = doShift(token, 441);
                return;
            }

            case 154: {
                // Shift 442.
                token = doShift(token, 442);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 436.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action436() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 439.
                token = doShift(token, 439);
                return;
            }

            case 133:
            case 154: {
                // Reduce Expressions : Expression;
                doReduce1(token, 95);
                Object o1 = doReduce2();

                List<AExpression> o = hooks.parseExpressions1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 95;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 437.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action437() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 154: {
                // Shift 438.
                token = doShift(token, 438);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 438.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action438() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 45:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce NonEmptySetExpression : CUROPENTK Expressions CURCLOSETK;
                doReduce1(token, 106);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ASetExpression o = hooks.parseNonEmptySetExpression1((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 106;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 439.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action439() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 440.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action440() throws IOException {
        switch (token.id) {
            case 133:
            case 154: {
                // Reduce DictPairs : Expression COLONTK Expression;
                doReduce1(token, 107);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ADictPair> o = hooks.parseDictPairs1((AExpression)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 107;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 441.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action441() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 442.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action442() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : CUROPENTK DictPairs CURCLOSETK;
                doReduce1(token, 105);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor11((Token)o1, (List<ADictPair>)o2);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 443.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action443() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 444.
                token = doShift(token, 444);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 444.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action444() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 445.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action445() throws IOException {
        switch (token.id) {
            case 133:
            case 154: {
                // Reduce DictPairs : DictPairs COMMATK Expression COLONTK Expression;
                doReduce1(token, 107);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ADictPair> o = hooks.parseDictPairs2((List<ADictPair>)o1, (AExpression)o3, (Token)o4, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 107;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 446.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action446() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce UnaryExpression : MINUSTK UnaryExpression;
                doReduce1(token, 103);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseUnaryExpression2((Token)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 103;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 447.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action447() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce UnaryExpression : PLUSTK UnaryExpression;
                doReduce1(token, 103);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseUnaryExpression3((Token)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 103;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 448.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action448() throws IOException {
        switch (token.id) {
            case 147: {
                // Shift 449.
                token = doShift(token, 449);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 449.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action449() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 450.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action450() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : LTTK Type GTTK ExpressionFactor;
                doReduce1(token, 105);
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor13((Token)o1, (ACifType)o2, (AExpression)o4);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 451.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action451() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 405.
                token = doShift(token, 405);
                return;
            }

            case 157: {
                // Shift 406.
                token = doShift(token, 406);
                return;
            }

            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce UnaryExpression : SAMPLEKW FuncExpression;
                doReduce1(token, 103);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseUnaryExpression5((Token)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 103;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 452.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action452() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 156:
            case 158: {
                // Reduce UnaryExpression : NOTKW UnaryExpression;
                doReduce1(token, 103);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseUnaryExpression4((Token)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 103;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 453.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action453() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 454.
                token = doShift(token, 454);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 454.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action454() throws IOException {
        switch (token.id) {
            case 7: {
                // Shift 455.
                token = doShift(token, 455);
                return;
            }

            case 21: {
                // Shift 456.
                token = doShift(token, 456);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 455.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action455() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 456.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action456() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 457.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action457() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 465.
                token = doShift(token, 465);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 458.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action458() throws IOException {
        switch (token.id) {
            case 7: {
                // Shift 459.
                token = doShift(token, 459);
                return;
            }

            case 21: {
                // Shift 460.
                token = doShift(token, 460);
                return;
            }

            case 22: {
                // Reduce SwitchBody : SwitchCases;
                doReduce1(token, 109);
                Object o1 = doReduce2();

                List<ASwitchCase> o = hooks.parseSwitchBody1((List<ASwitchCase>)o1);

                reduce = true;
                reduceNonTerminal = 109;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 459.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action459() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 460.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action460() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 461.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action461() throws IOException {
        switch (token.id) {
            case 22: {
                // Reduce SwitchBody : SwitchCases ELSEKW Expression;
                doReduce1(token, 109);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ASwitchCase> o = hooks.parseSwitchBody2((List<ASwitchCase>)o1, (Token)o2, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 109;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 462.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action462() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 463.
                token = doShift(token, 463);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 463.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action463() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 464.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action464() throws IOException {
        switch (token.id) {
            case 7:
            case 21:
            case 22: {
                // Reduce SwitchCases : SwitchCases CASEKW Expression COLONTK Expression;
                doReduce1(token, 110);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ASwitchCase> o = hooks.parseSwitchCases2((List<ASwitchCase>)o1, (Token)o2, (AExpression)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 110;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 465.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action465() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : SWITCHKW Expression COLONTK SwitchBody ENDKW;
                doReduce1(token, 105);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor15((Token)o1, (AExpression)o2, (List<ASwitchCase>)o4);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 466.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action466() throws IOException {
        switch (token.id) {
            case 22: {
                // Reduce SwitchBody : ELSEKW Expression;
                doReduce1(token, 109);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ASwitchCase> o = hooks.parseSwitchBody3((Token)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 109;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 467.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action467() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 468.
                token = doShift(token, 468);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 468.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action468() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 469.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action469() throws IOException {
        switch (token.id) {
            case 7:
            case 21:
            case 22: {
                // Reduce SwitchCases : CASEKW Expression COLONTK Expression;
                doReduce1(token, 110);
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ASwitchCase> o = hooks.parseSwitchCases1((Token)o1, (AExpression)o2, (AExpression)o4);

                reduce = true;
                reduceNonTerminal = 110;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 470.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action470() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 471.
                token = doShift(token, 471);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 471.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action471() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 472.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action472() throws IOException {
        switch (token.id) {
            case 20:
            case 21: {
                // Reduce OptElifExprs : ;
                doReduce1(token, 108);
                List<AElifExpression> o = hooks.parseOptElifExprs1();

                reduce = true;
                reduceNonTerminal = 108;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 473.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action473() throws IOException {
        switch (token.id) {
            case 20: {
                // Shift 474.
                token = doShift(token, 474);
                return;
            }

            case 21: {
                // Shift 475.
                token = doShift(token, 475);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 474.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action474() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 475.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action475() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 476.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action476() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 477.
                token = doShift(token, 477);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 477.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action477() throws IOException {
        switch (token.id) {
            case 3:
            case 7:
            case 13:
            case 15:
            case 18:
            case 20:
            case 21:
            case 22:
            case 25:
            case 27:
            case 29:
            case 31:
            case 46:
            case 47:
            case 48:
            case 63:
            case 65:
            case 73:
            case 124:
            case 125:
            case 126:
            case 127:
            case 129:
            case 131:
            case 133:
            case 134:
            case 135:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158: {
                // Reduce ExpressionFactor : IFKW Expressions COLONTK Expression OptElifExprs ELSEKW Expression ENDKW;
                doReduce1(token, 105);
                doReduce2();
                Object o7 = doReduce2();
                doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AExpression o = hooks.parseExpressionFactor14((Token)o1, (List<AExpression>)o2, (AExpression)o4, (List<AElifExpression>)o5, (AExpression)o7);

                reduce = true;
                reduceNonTerminal = 105;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 478.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action478() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 479.
                token = doShift(token, 479);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 479.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action479() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 480.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action480() throws IOException {
        switch (token.id) {
            case 20:
            case 21: {
                // Reduce OptElifExprs : OptElifExprs ELIFKW Expressions COLONTK Expression;
                doReduce1(token, 108);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AElifExpression> o = hooks.parseOptElifExprs2((List<AElifExpression>)o1, (Token)o2, (List<AExpression>)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 108;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 481.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action481() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 482.
                token = doShift(token, 482);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 482.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action482() throws IOException {
        switch (token.id) {
            case 11: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 69: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 0: {
                // Shift 487.
                token = doShift(token, 487);
                return;
            }

            case 41: {
                // Shift 488.
                token = doShift(token, 488);
                return;
            }

            case 156: {
                // Shift 489.
                token = doShift(token, 489);
                return;
            }

            case 25: {
                // Reduce OptControllability : ;
                doReduce1(token, 66);
                Token o = hooks.parseOptControllability1();

                reduce = true;
                reduceNonTerminal = 66;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 483.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action483() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 484.
                token = doShift(token, 484);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 484.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action484() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce OptAutDecls : ;
                doReduce1(token, 7);
                List<ADecl> o = hooks.parseOptAutDecls1();

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 485.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action485() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 486.
                token = doShift(token, 486);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 486.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action486() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : SupKind DEFKW Identifier CompDefParms COLONTK AutomatonBody ENDKW;
                doReduce1(token, 6);
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl09((Token)o1, (AIdentifier)o3, (List<AParameter>)o4, (AAutomatonBody)o6, (Token)o7);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 487.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action487() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 488.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action488() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 489.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action489() throws IOException {
        switch (token.id) {
            case 135: {
                // Reduce CompDefParms : PAROPENTK PARCLOSETK;
                doReduce1(token, 37);
                doReduce2();
                doReduce2();

                List<AParameter> o = hooks.parseCompDefParms1();

                reduce = true;
                reduceNonTerminal = 37;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 490.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action490() throws IOException {
        switch (token.id) {
            case 134:
            case 156: {
                // Reduce CompDefDecls : CompDefDeclaration;
                doReduce1(token, 38);
                Object o1 = doReduce2();

                List<AParameter> o = hooks.parseCompDefDecls1((AParameter)o1);

                reduce = true;
                reduceNonTerminal = 38;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 491.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action491() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 515.
                token = doShift(token, 515);
                return;
            }

            case 156: {
                // Shift 516.
                token = doShift(token, 516);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 492.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action492() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 72: {
                // Shift 496.
                token = doShift(token, 496);
                return;
            }

            case 25: {
                // Reduce OptControllability : Controllability;
                doReduce1(token, 66);
                Object o1 = doReduce2();

                Token o = hooks.parseOptControllability2((Token)o1);

                reduce = true;
                reduceNonTerminal = 66;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 493.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action493() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 494.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action494() throws IOException {
        switch (token.id) {
            case 25: {
                // Shift 495.
                token = doShift(token, 495);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 495.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action495() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 72: {
                // Shift 496.
                token = doShift(token, 496);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 496.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action496() throws IOException {
        switch (token.id) {
            case 162: {
                // Reduce EventType : VOIDKW;
                doReduce1(token, 91);
                Object o1 = doReduce2();

                ACifType o = hooks.parseEventType1((Token)o1);

                reduce = true;
                reduceNonTerminal = 91;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 497.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action497() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 156: {
                // Reduce EventParamIds : EventParamId;
                doReduce1(token, 40);
                Object o1 = doReduce2();

                List<AEventParameterPart> o = hooks.parseEventParamIds1((AEventParameterPart)o1);

                reduce = true;
                reduceNonTerminal = 40;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 498.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action498() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 509.
                token = doShift(token, 509);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : OptControllability EVENTKW EventParamIds;
                doReduce1(token, 39);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration1((Token)o1, (Token)o2, (List<AEventParameterPart>)o3);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 499.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action499() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 500.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action500() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 156: {
                // Reduce OptEventParamFlags : ;
                doReduce1(token, 42);
                List<AEventParamFlag> o = hooks.parseOptEventParamFlags1();

                reduce = true;
                reduceNonTerminal = 42;
                reduceState = doReduce3(o);
                return;
            }

            case 162: {
                // Reduce Name : Identifier;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 501.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action501() throws IOException {
        switch (token.id) {
            case 162: {
                // Reduce EventType : Type;
                doReduce1(token, 91);
                Object o1 = doReduce2();

                ACifType o = hooks.parseEventType2((ACifType)o1);

                reduce = true;
                reduceNonTerminal = 91;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 502.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action502() throws IOException {
        switch (token.id) {
            case 137: {
                // Shift 503.
                token = doShift(token, 503);
                return;
            }

            case 138: {
                // Shift 504.
                token = doShift(token, 504);
                return;
            }

            case 139: {
                // Shift 505.
                token = doShift(token, 505);
                return;
            }

            case 133:
            case 134:
            case 156: {
                // Reduce EventParamId : Identifier OptEventParamFlags;
                doReduce1(token, 41);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AEventParameterPart o = hooks.parseEventParamId1((AIdentifier)o1, (List<AEventParamFlag>)o2);

                reduce = true;
                reduceNonTerminal = 41;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 503.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action503() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 156: {
                // Reduce EventParamFlag : EXCLAMATIONTK;
                doReduce1(token, 43);
                Object o1 = doReduce2();

                AEventParamFlag o = hooks.parseEventParamFlag1((Token)o1);

                reduce = true;
                reduceNonTerminal = 43;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 504.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action504() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 156: {
                // Reduce EventParamFlag : QUESTIONTK;
                doReduce1(token, 43);
                Object o1 = doReduce2();

                AEventParamFlag o = hooks.parseEventParamFlag2((Token)o1);

                reduce = true;
                reduceNonTerminal = 43;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 505.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action505() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 156: {
                // Reduce EventParamFlag : TILDETK;
                doReduce1(token, 43);
                Object o1 = doReduce2();

                AEventParamFlag o = hooks.parseEventParamFlag3((Token)o1);

                reduce = true;
                reduceNonTerminal = 43;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 506.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action506() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 156: {
                // Reduce OptEventParamFlags : OptEventParamFlags EventParamFlag;
                doReduce1(token, 42);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AEventParamFlag> o = hooks.parseOptEventParamFlags2((List<AEventParamFlag>)o1, (AEventParamFlag)o2);

                reduce = true;
                reduceNonTerminal = 42;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 507.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action507() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 509.
                token = doShift(token, 509);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : OptControllability EVENTKW EventType EventParamIds;
                doReduce1(token, 39);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration2((Token)o1, (Token)o2, (ACifType)o3, (List<AEventParameterPart>)o4);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 508.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action508() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 156: {
                // Reduce OptEventParamFlags : ;
                doReduce1(token, 42);
                List<AEventParamFlag> o = hooks.parseOptEventParamFlags1();

                reduce = true;
                reduceNonTerminal = 42;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 509.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action509() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 510.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action510() throws IOException {
        switch (token.id) {
            case 133:
            case 134:
            case 156: {
                // Reduce EventParamIds : EventParamIds COMMATK EventParamId;
                doReduce1(token, 40);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AEventParameterPart> o = hooks.parseEventParamIds2((List<AEventParameterPart>)o1, (AEventParameterPart)o3);

                reduce = true;
                reduceNonTerminal = 40;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 511.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action511() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : Name Identifiers;
                doReduce1(token, 39);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration5((AName)o1, (List<AIdentifier>)o2);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 512.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action512() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 509.
                token = doShift(token, 509);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : Controllability EventParamIds;
                doReduce1(token, 39);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration3((Token)o1, (List<AEventParameterPart>)o2);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 513.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action513() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 514.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action514() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 509.
                token = doShift(token, 509);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : Controllability EventType EventParamIds;
                doReduce1(token, 39);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration4((Token)o1, (ACifType)o2, (List<AEventParameterPart>)o3);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 515.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action515() throws IOException {
        switch (token.id) {
            case 11: {
                // Shift 7.
                token = doShift(token, 7);
                return;
            }

            case 69: {
                // Shift 24.
                token = doShift(token, 24);
                return;
            }

            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 0: {
                // Shift 487.
                token = doShift(token, 487);
                return;
            }

            case 41: {
                // Shift 488.
                token = doShift(token, 488);
                return;
            }

            case 25: {
                // Reduce OptControllability : ;
                doReduce1(token, 66);
                Token o = hooks.parseOptControllability1();

                reduce = true;
                reduceNonTerminal = 66;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 516.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action516() throws IOException {
        switch (token.id) {
            case 135: {
                // Reduce CompDefParms : PAROPENTK CompDefDecls PARCLOSETK;
                doReduce1(token, 37);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                List<AParameter> o = hooks.parseCompDefParms2((List<AParameter>)o2);

                reduce = true;
                reduceNonTerminal = 37;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 517.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action517() throws IOException {
        switch (token.id) {
            case 134:
            case 156: {
                // Reduce CompDefDecls : CompDefDecls SEMICOLTK CompDefDeclaration;
                doReduce1(token, 38);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AParameter> o = hooks.parseCompDefDecls2((List<AParameter>)o1, (AParameter)o3);

                reduce = true;
                reduceNonTerminal = 38;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 518.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action518() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : LOCATIONKW Identifiers;
                doReduce1(token, 39);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration6((Token)o1, (List<AIdentifier>)o2);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 519.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action519() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 520.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action520() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134:
            case 156: {
                // Reduce CompDefDeclaration : ALGKW Type Identifiers;
                doReduce1(token, 39);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AParameter o = hooks.parseCompDefDeclaration7((Token)o1, (ACifType)o2, (List<AIdentifier>)o3);

                reduce = true;
                reduceNonTerminal = 39;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 521.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action521() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 12: {
                // Shift 522.
                token = doShift(token, 522);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 522.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action522() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 523.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action523() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 524.
                token = doShift(token, 524);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 524.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action524() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce OptAutDecls : ;
                doReduce1(token, 7);
                List<ADecl> o = hooks.parseOptAutDecls1();

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 525.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action525() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 526.
                token = doShift(token, 526);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 526.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action526() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : OptSupKind AUTOMATONKW Identifier COLONTK AutomatonBody ENDKW;
                doReduce1(token, 6);
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl11((Token)o1, (Token)o2, (AIdentifier)o3, (AAutomatonBody)o5, (Token)o6);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 527.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action527() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 482.
                token = doShift(token, 482);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 528.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action528() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 529.
                token = doShift(token, 529);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 529.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action529() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 8:
            case 9:
            case 11:
            case 16:
            case 23:
            case 24:
            case 25:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 166: {
                // Reduce OptAutDecls : ;
                doReduce1(token, 7);
                List<ADecl> o = hooks.parseOptAutDecls1();

                reduce = true;
                reduceNonTerminal = 7;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 530.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action530() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 531.
                token = doShift(token, 531);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 531.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action531() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : OptSupKind AUTOMATONKW DEFKW Identifier CompDefParms COLONTK AutomatonBody ENDKW;
                doReduce1(token, 6);
                Object o8 = doReduce2();
                Object o7 = doReduce2();
                doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl08((Token)o1, (Token)o2, (AIdentifier)o4, (List<AParameter>)o5, (AAutomatonBody)o7, (Token)o8);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 532.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action532() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 72: {
                // Shift 496.
                token = doShift(token, 496);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 533.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action533() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 534.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action534() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Identifiers : Identifier;
                doReduce1(token, 64);
                Object o1 = doReduce2();

                List<AIdentifier> o = hooks.parseIdentifiers1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 64;
                reduceState = doReduce3(o);
                return;
            }

            case 162: {
                // Reduce Name : Identifier;
                doReduce1(token, 111);
                Object o1 = doReduce2();

                AName o = hooks.parseName1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 111;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 535.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action535() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134: {
                // Shift 536.
                token = doShift(token, 536);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 536.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action536() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : OptControllability EVENTKW Identifiers SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl03((Token)o1, (Token)o2, (List<AIdentifier>)o3);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 537.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action537() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134: {
                // Shift 538.
                token = doShift(token, 538);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 538.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action538() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : OptControllability EVENTKW EventType Identifiers SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl04((Token)o1, (Token)o2, (ACifType)o3, (List<AIdentifier>)o4);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 539.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action539() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 540.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action540() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 541.
                token = doShift(token, 541);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 541.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action541() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 156: {
                // Shift 544.
                token = doShift(token, 544);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 542.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action542() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 543.
                token = doShift(token, 543);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 543.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action543() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : Identifier COLONTK Name CompInstArgs SEMICOLTK;
                doReduce1(token, 6);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl06((AIdentifier)o1, (AName)o3, (List<AExpression>)o4, (Token)o5);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 544.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action544() throws IOException {
        switch (token.id) {
            case 134: {
                // Reduce CompInstArgs : PAROPENTK PARCLOSETK;
                doReduce1(token, 36);
                doReduce2();
                doReduce2();

                List<AExpression> o = hooks.parseCompInstArgs1();

                reduce = true;
                reduceNonTerminal = 36;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 545.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action545() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 156: {
                // Shift 546.
                token = doShift(token, 546);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 546.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action546() throws IOException {
        switch (token.id) {
            case 134: {
                // Reduce CompInstArgs : PAROPENTK Expressions PARCLOSETK;
                doReduce1(token, 36);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                List<AExpression> o = hooks.parseCompInstArgs2((List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 36;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 547.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action547() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 548.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action548() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134: {
                // Shift 549.
                token = doShift(token, 549);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 549.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action549() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : Controllability Identifiers SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl05((Token)o1, (List<AIdentifier>)o2);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 550.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action550() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134: {
                // Shift 551.
                token = doShift(token, 551);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 551.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action551() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : Controllability EventType Identifiers SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl06((Token)o1, (ACifType)o2, (List<AIdentifier>)o3);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 552.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action552() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 559.
                token = doShift(token, 559);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 553.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action553() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 554.
                token = doShift(token, 554);
                return;
            }

            case 134: {
                // Shift 555.
                token = doShift(token, 555);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 554.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action554() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 555.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action555() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : TYPEKW TypeDefs SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl01((Token)o1, (List<ATypeDef>)o2);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 556.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action556() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 557.
                token = doShift(token, 557);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 557.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action557() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 558.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action558() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce TypeDefs : TypeDefs COMMATK Identifier EQTK Type;
                doReduce1(token, 13);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ATypeDef> o = hooks.parseTypeDefs2((List<ATypeDef>)o1, (AIdentifier)o3, (ACifType)o5);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 559.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action559() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 560.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action560() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce TypeDefs : Identifier EQTK Type;
                doReduce1(token, 13);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ATypeDef> o = hooks.parseTypeDefs1((AIdentifier)o1, (ACifType)o3);

                reduce = true;
                reduceNonTerminal = 13;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 561.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action561() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 562.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action562() throws IOException {
        switch (token.id) {
            case 3: {
                // Shift 563.
                token = doShift(token, 563);
                return;
            }

            case 63: {
                // Shift 564.
                token = doShift(token, 564);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 563.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action563() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 564.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action564() throws IOException {
        switch (token.id) {
            case 71: {
                // Reduce SvgAttr : TEXTKW;
                doReduce1(token, 77);
                Object o1 = doReduce2();

                AStringToken o = hooks.parseSvgAttr2((Token)o1);

                reduce = true;
                reduceNonTerminal = 77;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 565.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action565() throws IOException {
        switch (token.id) {
            case 71: {
                // Shift 566.
                token = doShift(token, 566);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 566.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action566() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 567.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action567() throws IOException {
        switch (token.id) {
            case 27: {
                // Shift 568.
                token = doShift(token, 568);
                return;
            }

            case 134: {
                // Reduce OptSvgFile : ;
                doReduce1(token, 71);
                ASvgFile o = hooks.parseOptSvgFile1();

                reduce = true;
                reduceNonTerminal = 71;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 568.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action568() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 569.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action569() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 570.
                token = doShift(token, 570);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 570.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action570() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce SvgOut : SVGOUTKW IDKW Expression SvgAttr VALUEKW Expression OptSvgFile SEMICOLTK;
                doReduce1(token, 76);
                Object o8 = doReduce2();
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ASvgOut o = hooks.parseSvgOut1((Token)o1, (AExpression)o3, (AStringToken)o4, (AExpression)o6, (ASvgFile)o7, (Token)o8);

                reduce = true;
                reduceNonTerminal = 76;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 571.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action571() throws IOException {
        switch (token.id) {
            case 134: {
                // Reduce OptSvgFile : FILEKW StringToken;
                doReduce1(token, 71);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ASvgFile o = hooks.parseOptSvgFile2((Token)o1, (AStringToken)o2);

                reduce = true;
                reduceNonTerminal = 71;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 572.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action572() throws IOException {
        switch (token.id) {
            case 71: {
                // Reduce SvgAttr : ATTRKW StringToken;
                doReduce1(token, 77);
                Object o2 = doReduce2();
                doReduce2();

                AStringToken o = hooks.parseSvgAttr1((AStringToken)o2);

                reduce = true;
                reduceNonTerminal = 77;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 573.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action573() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 574.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action574() throws IOException {
        switch (token.id) {
            case 65: {
                // Shift 575.
                token = doShift(token, 575);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 575.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action575() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 576.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action576() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 577.
                token = doShift(token, 577);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 577.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action577() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 578.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action578() throws IOException {
        switch (token.id) {
            case 27: {
                // Shift 568.
                token = doShift(token, 568);
                return;
            }

            case 134: {
                // Reduce OptSvgFile : ;
                doReduce1(token, 71);
                ASvgFile o = hooks.parseOptSvgFile1();

                reduce = true;
                reduceNonTerminal = 71;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 579.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action579() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 580.
                token = doShift(token, 580);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 580.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action580() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce SvgMove : SVGMOVEKW IDKW Expression TOKW Expression COMMATK Expression OptSvgFile SEMICOLTK;
                doReduce1(token, 75);
                Object o9 = doReduce2();
                Object o8 = doReduce2();
                Object o7 = doReduce2();
                doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ASvgMove o = hooks.parseSvgMove1((Token)o1, (AExpression)o3, (AExpression)o5, (AExpression)o7, (ASvgFile)o8, (Token)o9);

                reduce = true;
                reduceNonTerminal = 75;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 581.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action581() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 582.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action582() throws IOException {
        switch (token.id) {
            case 18: {
                // Shift 583.
                token = doShift(token, 583);
                return;
            }

            case 25: {
                // Shift 584.
                token = doShift(token, 584);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 583.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action583() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 276.
                token = doShift(token, 276);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 584.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action584() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 34: {
                // Shift 585.
                token = doShift(token, 585);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 585.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action585() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 586.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action586() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce SvgInEvent : Name;
                doReduce1(token, 79);
                Object o1 = doReduce2();

                ASvgInEvent o = hooks.parseSvgInEvent1((AName)o1);

                reduce = true;
                reduceNonTerminal = 79;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 587.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action587() throws IOException {
        switch (token.id) {
            case 27: {
                // Shift 568.
                token = doShift(token, 568);
                return;
            }

            case 134: {
                // Reduce OptSvgFile : ;
                doReduce1(token, 71);
                ASvgFile o = hooks.parseOptSvgFile1();

                reduce = true;
                reduceNonTerminal = 71;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 588.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action588() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 589.
                token = doShift(token, 589);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 589.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action589() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce SvgIn : SVGINKW IDKW Expression EVENTKW SvgInEvent OptSvgFile SEMICOLTK;
                doReduce1(token, 78);
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ASvgIn o = hooks.parseSvgIn1((Token)o1, (AExpression)o3, (ASvgInEvent)o5, (ASvgFile)o6, (Token)o7);

                reduce = true;
                reduceNonTerminal = 78;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 590.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action590() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 591.
                token = doShift(token, 591);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 591.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action591() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 592.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action592() throws IOException {
        switch (token.id) {
            case 20: {
                // Shift 593.
                token = doShift(token, 593);
                return;
            }

            case 21: {
                // Reduce OptSvgInEventElifs : ;
                doReduce1(token, 80);
                List<ASvgInEventIfEntry> o = hooks.parseOptSvgInEventElifs1();

                reduce = true;
                reduceNonTerminal = 80;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 593.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action593() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 594.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action594() throws IOException {
        switch (token.id) {
            case 21: {
                // Shift 601.
                token = doShift(token, 601);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 595.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action595() throws IOException {
        switch (token.id) {
            case 20: {
                // Shift 596.
                token = doShift(token, 596);
                return;
            }

            case 22: {
                // Shift 597.
                token = doShift(token, 597);
                return;
            }

            case 21: {
                // Reduce OptSvgInEventElifs : SvgInEventElifs;
                doReduce1(token, 80);
                Object o1 = doReduce2();

                List<ASvgInEventIfEntry> o = hooks.parseOptSvgInEventElifs2((List<ASvgInEventIfEntry>)o1);

                reduce = true;
                reduceNonTerminal = 80;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 596.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action596() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 597.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action597() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce SvgInEvent : IFKW Expression COLONTK Name SvgInEventElifs ENDKW;
                doReduce1(token, 79);
                doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ASvgInEvent o = hooks.parseSvgInEvent3((Token)o1, (AExpression)o2, (Token)o3, (AName)o4, (List<ASvgInEventIfEntry>)o5);

                reduce = true;
                reduceNonTerminal = 79;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 598.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action598() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 599.
                token = doShift(token, 599);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 599.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action599() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 600.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action600() throws IOException {
        switch (token.id) {
            case 20:
            case 21:
            case 22: {
                // Reduce SvgInEventElifs : SvgInEventElifs ELIFKW Expression COLONTK Name;
                doReduce1(token, 81);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ASvgInEventIfEntry> o = hooks.parseSvgInEventElifs2((List<ASvgInEventIfEntry>)o1, (Token)o2, (AExpression)o3, (AName)o5);

                reduce = true;
                reduceNonTerminal = 81;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 601.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action601() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 602.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action602() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 603.
                token = doShift(token, 603);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 603.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action603() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce SvgInEvent : IFKW Expression COLONTK Name OptSvgInEventElifs ELSEKW Name ENDKW;
                doReduce1(token, 79);
                doReduce2();
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ASvgInEvent o = hooks.parseSvgInEvent2((Token)o1, (AExpression)o2, (Token)o3, (AName)o4, (List<ASvgInEventIfEntry>)o5, (Token)o6, (AName)o7);

                reduce = true;
                reduceNonTerminal = 79;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 604.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action604() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 605.
                token = doShift(token, 605);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 605.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action605() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 606.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action606() throws IOException {
        switch (token.id) {
            case 20:
            case 21:
            case 22: {
                // Reduce SvgInEventElifs : ELIFKW Expression COLONTK Name;
                doReduce1(token, 81);
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ASvgInEventIfEntry> o = hooks.parseSvgInEventElifs1((Token)o1, (AExpression)o2, (AName)o4);

                reduce = true;
                reduceNonTerminal = 81;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 607.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action607() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 282.
                token = doShift(token, 282);
                return;
            }

            case 27: {
                // Shift 568.
                token = doShift(token, 568);
                return;
            }

            case 134: {
                // Reduce OptSvgFile : ;
                doReduce1(token, 71);
                ASvgFile o = hooks.parseOptSvgFile1();

                reduce = true;
                reduceNonTerminal = 71;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 608.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action608() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 609.
                token = doShift(token, 609);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 609.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action609() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce SvgIn : SVGINKW IDKW Expression DOKW Updates OptSvgFile SEMICOLTK;
                doReduce1(token, 78);
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ASvgIn o = hooks.parseSvgIn2((Token)o1, (AExpression)o3, (List<AUpdate>)o5, (ASvgFile)o6, (Token)o7);

                reduce = true;
                reduceNonTerminal = 78;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 610.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action610() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 611.
                token = doShift(token, 611);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 611.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action611() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce SvgFile : SVGFILEKW StringToken SEMICOLTK;
                doReduce1(token, 70);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ASvgFile o = hooks.parseSvgFile1((Token)o1, (AStringToken)o2);

                reduce = true;
                reduceNonTerminal = 70;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 612.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action612() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 613.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action613() throws IOException {
        switch (token.id) {
            case 48: {
                // Shift 614.
                token = doShift(token, 614);
                return;
            }

            case 27:
            case 47:
            case 134: {
                // Reduce OptSvgCopyPre : ;
                doReduce1(token, 73);
                AExpression o = hooks.parseOptSvgCopyPre1();

                reduce = true;
                reduceNonTerminal = 73;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 614.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action614() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 615.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action615() throws IOException {
        switch (token.id) {
            case 47: {
                // Shift 616.
                token = doShift(token, 616);
                return;
            }

            case 27:
            case 134: {
                // Reduce OptSvgCopyPost : ;
                doReduce1(token, 74);
                AExpression o = hooks.parseOptSvgCopyPost1();

                reduce = true;
                reduceNonTerminal = 74;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 616.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action616() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 617.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action617() throws IOException {
        switch (token.id) {
            case 27: {
                // Shift 568.
                token = doShift(token, 568);
                return;
            }

            case 134: {
                // Reduce OptSvgFile : ;
                doReduce1(token, 71);
                ASvgFile o = hooks.parseOptSvgFile1();

                reduce = true;
                reduceNonTerminal = 71;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 618.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action618() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 619.
                token = doShift(token, 619);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 619.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action619() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce SvgCopy : SVGCOPYKW IDKW Expression OptSvgCopyPre OptSvgCopyPost OptSvgFile SEMICOLTK;
                doReduce1(token, 72);
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ASvgCopy o = hooks.parseSvgCopy1((Token)o1, (AExpression)o3, (AExpression)o4, (AExpression)o5, (ASvgFile)o6, (Token)o7);

                reduce = true;
                reduceNonTerminal = 72;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 620.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action620() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce OptSvgCopyPost : POSTKW Expression;
                doReduce1(token, 74);
                Object o2 = doReduce2();
                doReduce2();

                AExpression o = hooks.parseOptSvgCopyPost2((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 74;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 621.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action621() throws IOException {
        switch (token.id) {
            case 27:
            case 47:
            case 134: {
                // Reduce OptSvgCopyPre : PREKW Expression;
                doReduce1(token, 73);
                Object o2 = doReduce2();
                doReduce2();

                AExpression o = hooks.parseOptSvgCopyPre2((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 73;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 622.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action622() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 623.
                token = doShift(token, 623);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 623.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action623() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce PrintFile : PRINTFILEKW StringToken SEMICOLTK;
                doReduce1(token, 82);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                APrintFile o = hooks.parsePrintFile1((Token)o1, (AStringToken)o2);

                reduce = true;
                reduceNonTerminal = 82;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 624.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action624() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 625.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action625() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 626.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action626() throws IOException {
        switch (token.id) {
            case 27:
            case 29:
            case 73:
            case 134: {
                // Reduce PrintTxt : Expression;
                doReduce1(token, 84);
                Object o1 = doReduce2();

                APrintTxt o = hooks.parsePrintTxt1((AExpression)o1);

                reduce = true;
                reduceNonTerminal = 84;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 627.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action627() throws IOException {
        switch (token.id) {
            case 29: {
                // Shift 628.
                token = doShift(token, 628);
                return;
            }

            case 27:
            case 73:
            case 134: {
                // Reduce OptPrintFors : ;
                doReduce1(token, 85);
                List<APrintFor> o = hooks.parseOptPrintFors1();

                reduce = true;
                reduceNonTerminal = 85;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 628.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action628() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 25: {
                // Shift 643.
                token = doShift(token, 643);
                return;
            }

            case 28: {
                // Shift 644.
                token = doShift(token, 644);
                return;
            }

            case 36: {
                // Shift 645.
                token = doShift(token, 645);
                return;
            }

            case 64: {
                // Shift 646.
                token = doShift(token, 646);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 629.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action629() throws IOException {
        switch (token.id) {
            case 73: {
                // Shift 630.
                token = doShift(token, 630);
                return;
            }

            case 27:
            case 134: {
                // Reduce OptPrintWhen : ;
                doReduce1(token, 88);
                APrintWhen o = hooks.parseOptPrintWhen1();

                reduce = true;
                reduceNonTerminal = 88;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 630.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action630() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 47: {
                // Shift 636.
                token = doShift(token, 636);
                return;
            }

            case 48: {
                // Shift 637.
                token = doShift(token, 637);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 631.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action631() throws IOException {
        switch (token.id) {
            case 27: {
                // Shift 632.
                token = doShift(token, 632);
                return;
            }

            case 134: {
                // Reduce OptPrintFile : ;
                doReduce1(token, 89);
                APrintFile o = hooks.parseOptPrintFile1();

                reduce = true;
                reduceNonTerminal = 89;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 632.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action632() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 633.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action633() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 634.
                token = doShift(token, 634);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 634.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action634() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Print : PRINTKW PrintTxt OptPrintFors OptPrintWhen OptPrintFile SEMICOLTK;
                doReduce1(token, 83);
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                APrint o = hooks.parsePrint1((Token)o1, (APrintTxt)o2, (List<APrintFor>)o3, (APrintWhen)o4, (APrintFile)o5, (Token)o6);

                reduce = true;
                reduceNonTerminal = 83;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 635.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action635() throws IOException {
        switch (token.id) {
            case 134: {
                // Reduce OptPrintFile : FILEKW StringToken;
                doReduce1(token, 89);
                Object o2 = doReduce2();
                doReduce2();

                APrintFile o = hooks.parseOptPrintFile2((AStringToken)o2);

                reduce = true;
                reduceNonTerminal = 89;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 636.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action636() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 637.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action637() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 638.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action638() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce OptPrintWhen : WHENKW Expression;
                doReduce1(token, 88);
                Object o2 = doReduce2();
                doReduce2();

                APrintWhen o = hooks.parseOptPrintWhen2((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 88;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 639.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action639() throws IOException {
        switch (token.id) {
            case 47: {
                // Shift 640.
                token = doShift(token, 640);
                return;
            }

            case 27:
            case 134: {
                // Reduce OptPrintWhen : WHENKW PREKW Expression;
                doReduce1(token, 88);
                Object o3 = doReduce2();
                doReduce2();
                doReduce2();

                APrintWhen o = hooks.parseOptPrintWhen3((AExpression)o3);

                reduce = true;
                reduceNonTerminal = 88;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 640.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action640() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 641.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action641() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce OptPrintWhen : WHENKW PREKW Expression POSTKW Expression;
                doReduce1(token, 88);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                doReduce2();

                APrintWhen o = hooks.parseOptPrintWhen5((AExpression)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 88;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 642.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action642() throws IOException {
        switch (token.id) {
            case 27:
            case 134: {
                // Reduce OptPrintWhen : WHENKW POSTKW Expression;
                doReduce1(token, 88);
                Object o3 = doReduce2();
                doReduce2();
                doReduce2();

                APrintWhen o = hooks.parseOptPrintWhen4((AExpression)o3);

                reduce = true;
                reduceNonTerminal = 88;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 643.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action643() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFor : EVENTKW;
                doReduce1(token, 87);
                Object o1 = doReduce2();

                APrintFor o = hooks.parsePrintFor1((Token)o1);

                reduce = true;
                reduceNonTerminal = 87;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 644.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action644() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFor : FINALKW;
                doReduce1(token, 87);
                Object o1 = doReduce2();

                APrintFor o = hooks.parsePrintFor5((Token)o1);

                reduce = true;
                reduceNonTerminal = 87;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 645.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action645() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFor : INITIALKW;
                doReduce1(token, 87);
                Object o1 = doReduce2();

                APrintFor o = hooks.parsePrintFor4((Token)o1);

                reduce = true;
                reduceNonTerminal = 87;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 646.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action646() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFor : TIMEKW;
                doReduce1(token, 87);
                Object o1 = doReduce2();

                APrintFor o = hooks.parsePrintFor2((Token)o1);

                reduce = true;
                reduceNonTerminal = 87;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 647.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action647() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFor : Name;
                doReduce1(token, 87);
                Object o1 = doReduce2();

                APrintFor o = hooks.parsePrintFor3((AName)o1);

                reduce = true;
                reduceNonTerminal = 87;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 648.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action648() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFors : PrintFor;
                doReduce1(token, 86);
                Object o1 = doReduce2();

                List<APrintFor> o = hooks.parsePrintFors1((APrintFor)o1);

                reduce = true;
                reduceNonTerminal = 86;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 649.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action649() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 650.
                token = doShift(token, 650);
                return;
            }

            case 27:
            case 73:
            case 134: {
                // Reduce OptPrintFors : FORKW PrintFors;
                doReduce1(token, 85);
                Object o2 = doReduce2();
                doReduce2();

                List<APrintFor> o = hooks.parseOptPrintFors2((List<APrintFor>)o2);

                reduce = true;
                reduceNonTerminal = 85;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 650.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action650() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 25: {
                // Shift 643.
                token = doShift(token, 643);
                return;
            }

            case 28: {
                // Shift 644.
                token = doShift(token, 644);
                return;
            }

            case 36: {
                // Shift 645.
                token = doShift(token, 645);
                return;
            }

            case 64: {
                // Shift 646.
                token = doShift(token, 646);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 651.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action651() throws IOException {
        switch (token.id) {
            case 27:
            case 73:
            case 133:
            case 134: {
                // Reduce PrintFors : PrintFors COMMATK PrintFor;
                doReduce1(token, 86);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<APrintFor> o = hooks.parsePrintFors2((List<APrintFor>)o1, (APrintFor)o3);

                reduce = true;
                reduceNonTerminal = 86;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 652.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action652() throws IOException {
        switch (token.id) {
            case 47: {
                // Shift 653.
                token = doShift(token, 653);
                return;
            }

            case 27:
            case 29:
            case 73:
            case 134: {
                // Reduce PrintTxt : PREKW Expression;
                doReduce1(token, 84);
                Object o2 = doReduce2();
                doReduce2();

                APrintTxt o = hooks.parsePrintTxt2((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 84;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 653.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action653() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 654.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action654() throws IOException {
        switch (token.id) {
            case 27:
            case 29:
            case 73:
            case 134: {
                // Reduce PrintTxt : PREKW Expression POSTKW Expression;
                doReduce1(token, 84);
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                APrintTxt o = hooks.parsePrintTxt4((AExpression)o2, (AExpression)o4);

                reduce = true;
                reduceNonTerminal = 84;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 655.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action655() throws IOException {
        switch (token.id) {
            case 27:
            case 29:
            case 73:
            case 134: {
                // Reduce PrintTxt : POSTKW Expression;
                doReduce1(token, 84);
                Object o2 = doReduce2();
                doReduce2();

                APrintTxt o = hooks.parsePrintTxt3((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 84;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 656.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action656() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 659.
                token = doShift(token, 659);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 657.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action657() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 658.
                token = doShift(token, 658);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 658.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action658() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : NAMESPACEKW IDENTIFIERTK SEMICOLTK;
                doReduce1(token, 6);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl03((Token)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 659.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action659() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : NAMESPACEKW RELATIVENAMETK SEMICOLTK;
                doReduce1(token, 6);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl04((Token)o1, (Token)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 660.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action660() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 134: {
                // Shift 661.
                token = doShift(token, 661);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 661.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action661() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : MARKEDKW Expressions SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl14((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 662.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action662() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 134: {
                // Shift 663.
                token = doShift(token, 663);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 663.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action663() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : INITIALKW Expressions SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl12((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 664.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action664() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 666.
                token = doShift(token, 666);
                return;
            }

            case 134: {
                // Shift 667.
                token = doShift(token, 667);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 665.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action665() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Imports : StringToken;
                doReduce1(token, 11);
                Object o1 = doReduce2();

                List<AImport> o = hooks.parseImports1((AStringToken)o1);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 666.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action666() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 667.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action667() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : IMPORTKW Imports SEMICOLTK;
                doReduce1(token, 6);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl02((Token)o1, (List<AImport>)o2);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 668.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action668() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce Imports : Imports COMMATK StringToken;
                doReduce1(token, 11);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AImport> o = hooks.parseImports2((List<AImport>)o1, (AStringToken)o3);

                reduce = true;
                reduceNonTerminal = 11;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 669.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action669() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 670.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action670() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 671.
                token = doShift(token, 671);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 671.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action671() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166: {
                // Reduce OptGroupDecls : ;
                doReduce1(token, 5);
                List<ADecl> o = hooks.parseOptGroupDecls1();

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 672.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action672() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 673.
                token = doShift(token, 673);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 673.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action673() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : GROUPKW Identifier COLONTK GroupBody ENDKW;
                doReduce1(token, 6);
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl10((Token)o1, (AIdentifier)o2, (AGroupBody)o4, (Token)o5);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 674.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action674() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 482.
                token = doShift(token, 482);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 675.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action675() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 676.
                token = doShift(token, 676);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 676.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action676() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166: {
                // Reduce OptGroupDecls : ;
                doReduce1(token, 5);
                List<ADecl> o = hooks.parseOptGroupDecls1();

                reduce = true;
                reduceNonTerminal = 5;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 677.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action677() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 678.
                token = doShift(token, 678);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 678.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action678() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : GROUPKW DEFKW Identifier CompDefParms COLONTK GroupBody ENDKW;
                doReduce1(token, 6);
                Object o7 = doReduce2();
                Object o6 = doReduce2();
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl07((Token)o1, (AIdentifier)o3, (List<AParameter>)o4, (AGroupBody)o6, (Token)o7);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 679.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action679() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 133: {
                // Shift 368.
                token = doShift(token, 368);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 680.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action680() throws IOException {
        switch (token.id) {
            case 155: {
                // Shift 681.
                token = doShift(token, 681);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 681.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action681() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 156: {
                // Shift 732.
                token = doShift(token, 732);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 682.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action682() throws IOException {
        switch (token.id) {
            case 135: {
                // Shift 683.
                token = doShift(token, 683);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 683.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action683() throws IOException {
        switch (token.id) {
            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            case 5:
            case 6:
            case 10:
            case 14:
            case 17:
            case 30:
            case 34:
            case 38:
            case 40:
            case 51:
            case 52:
            case 54:
            case 55:
            case 67:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncVarDecls : ;
                doReduce1(token, 19);
                List<ADiscVariableDecl> o = hooks.parseFuncVarDecls1();

                reduce = true;
                reduceNonTerminal = 19;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 684.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action684() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce GroupDecl : FUNCKW Types Identifier FuncParams COLONTK FuncBody;
                doReduce1(token, 6);
                Object o6 = doReduce2();
                doReduce2();
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseGroupDecl05((Token)o1, (List<ACifType>)o2, (AIdentifier)o3, (List<AFuncParam>)o4, (AFuncBody)o6);

                reduce = true;
                reduceNonTerminal = 6;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 685.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action685() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 686.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action686() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 687.
                token = doShift(token, 687);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 687.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action687() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce FuncBody : StringToken SEMICOLTK;
                doReduce1(token, 18);
                doReduce2();
                Object o1 = doReduce2();

                AFuncBody o = hooks.parseFuncBody2((AStringToken)o1);

                reduce = true;
                reduceNonTerminal = 18;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 688.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action688() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 731.
                token = doShift(token, 731);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 689.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action689() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 730.
                token = doShift(token, 730);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 690.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action690() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 691.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action691() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 692.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action692() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 693.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action693() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 296.
                token = doShift(token, 296);
                return;
            }

            case 132: {
                // Shift 709.
                token = doShift(token, 709);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 694.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action694() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatements : FuncStatement;
                doReduce1(token, 21);
                Object o1 = doReduce2();

                List<AFuncStatement> o = hooks.parseFuncStatements1((AFuncStatement)o1);

                reduce = true;
                reduceNonTerminal = 21;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 695.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action695() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            case 22: {
                // Shift 707.
                token = doShift(token, 707);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 696.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action696() throws IOException {
        switch (token.id) {
            case 157: {
                // Shift 284.
                token = doShift(token, 284);
                return;
            }

            case 132:
            case 133: {
                // Reduce Addressable : Name;
                doReduce1(token, 59);
                Object o1 = doReduce2();

                AExpression o = hooks.parseAddressable1((AName)o1);

                reduce = true;
                reduceNonTerminal = 59;
                reduceState = doReduce3(o);
                return;
            }

            case 162: {
                // Reduce Type : Name;
                doReduce1(token, 92);
                Object o1 = doReduce2();

                ACifType o = hooks.parseType15((AName)o1);

                reduce = true;
                reduceNonTerminal = 92;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 697.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action697() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 698.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action698() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 702.
                token = doShift(token, 702);
                return;
            }

            case 134: {
                // Shift 703.
                token = doShift(token, 703);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 699.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action699() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 700.
                token = doShift(token, 700);
                return;
            }

            case 133:
            case 134: {
                // Reduce FuncVarDecl : Identifier;
                doReduce1(token, 20);
                Object o1 = doReduce2();

                List<ADiscVariable> o = hooks.parseFuncVarDecl1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 700.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action700() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 701.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action701() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce FuncVarDecl : Identifier EQTK Expression;
                doReduce1(token, 20);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ADiscVariable> o = hooks.parseFuncVarDecl2((AIdentifier)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 702.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action702() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 703.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action703() throws IOException {
        switch (token.id) {
            case 5:
            case 6:
            case 10:
            case 14:
            case 17:
            case 30:
            case 34:
            case 38:
            case 40:
            case 51:
            case 52:
            case 54:
            case 55:
            case 67:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncVarDecls : FuncVarDecls Type FuncVarDecl SEMICOLTK;
                doReduce1(token, 19);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<ADiscVariableDecl> o = hooks.parseFuncVarDecls2((List<ADiscVariableDecl>)o1, (ACifType)o2, (List<ADiscVariable>)o3);

                reduce = true;
                reduceNonTerminal = 19;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 704.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action704() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 705.
                token = doShift(token, 705);
                return;
            }

            case 133:
            case 134: {
                // Reduce FuncVarDecl : FuncVarDecl COMMATK Identifier;
                doReduce1(token, 20);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ADiscVariable> o = hooks.parseFuncVarDecl3((List<ADiscVariable>)o1, (AIdentifier)o3);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 705.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action705() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 706.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action706() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce FuncVarDecl : FuncVarDecl COMMATK Identifier EQTK Expression;
                doReduce1(token, 20);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<ADiscVariable> o = hooks.parseFuncVarDecl4((List<ADiscVariable>)o1, (AIdentifier)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 20;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 707.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action707() throws IOException {
        switch (token.id) {
            case 0:
            case 4:
            case 8:
            case 9:
            case 11:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 42:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce FuncBody : FuncVarDecls FuncStatements ENDKW;
                doReduce1(token, 18);
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AFuncBody o = hooks.parseFuncBody1((List<ADiscVariableDecl>)o1, (List<AFuncStatement>)o2, (Token)o3);

                reduce = true;
                reduceNonTerminal = 18;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 708.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action708() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatements : FuncStatements FuncStatement;
                doReduce1(token, 21);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AFuncStatement> o = hooks.parseFuncStatements2((List<AFuncStatement>)o1, (AFuncStatement)o2);

                reduce = true;
                reduceNonTerminal = 21;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 709.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action709() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 710.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action710() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 134: {
                // Shift 711.
                token = doShift(token, 711);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 711.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action711() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatement : Addressables BECOMESTK Expressions SEMICOLTK;
                doReduce1(token, 22);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AFuncStatement o = hooks.parseFuncStatement1((List<AExpression>)o1, (Token)o2, (List<AExpression>)o3);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 712.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action712() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 713.
                token = doShift(token, 713);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 713.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action713() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 714.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action714() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            case 22: {
                // Shift 715.
                token = doShift(token, 715);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 715.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action715() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatement : WHILEKW Expressions COLONTK FuncStatements ENDKW;
                doReduce1(token, 22);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AFuncStatement o = hooks.parseFuncStatement3((Token)o1, (List<AExpression>)o2, (List<AFuncStatement>)o4);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 716.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action716() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 134: {
                // Shift 717.
                token = doShift(token, 717);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 717.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action717() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatement : RETURNKW Expressions SEMICOLTK;
                doReduce1(token, 22);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AFuncStatement o = hooks.parseFuncStatement6((Token)o1, (List<AExpression>)o2);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 718.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action718() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 719.
                token = doShift(token, 719);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 719.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action719() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 720.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action720() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            case 20:
            case 21:
            case 22: {
                // Reduce OptElifFuncStats : ;
                doReduce1(token, 23);
                List<AElifFuncStatement> o = hooks.parseOptElifFuncStats1();

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 721.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action721() throws IOException {
        switch (token.id) {
            case 20: {
                // Shift 722.
                token = doShift(token, 722);
                return;
            }

            case 21: {
                // Shift 723.
                token = doShift(token, 723);
                return;
            }

            case 22: {
                // Reduce OptElseFuncStat : ;
                doReduce1(token, 24);
                AElseFuncStatement o = hooks.parseOptElseFuncStat1();

                reduce = true;
                reduceNonTerminal = 24;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 722.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action722() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 723.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action723() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 724.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action724() throws IOException {
        switch (token.id) {
            case 22: {
                // Shift 725.
                token = doShift(token, 725);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 725.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action725() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatement : IFKW Expressions COLONTK FuncStatements OptElifFuncStats OptElseFuncStat ENDKW;
                doReduce1(token, 22);
                doReduce2();
                Object o6 = doReduce2();
                Object o5 = doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AFuncStatement o = hooks.parseFuncStatement2((Token)o1, (List<AExpression>)o2, (List<AFuncStatement>)o4, (List<AElifFuncStatement>)o5, (AElseFuncStatement)o6);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 726.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action726() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            case 22: {
                // Reduce OptElseFuncStat : ELSEKW FuncStatements;
                doReduce1(token, 24);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AElseFuncStatement o = hooks.parseOptElseFuncStat2((Token)o1, (List<AFuncStatement>)o2);

                reduce = true;
                reduceNonTerminal = 24;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 727.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action727() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 138.
                token = doShift(token, 138);
                return;
            }

            case 135: {
                // Shift 728.
                token = doShift(token, 728);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 728.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action728() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 729.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action729() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 155: {
                // Shift 277.
                token = doShift(token, 277);
                return;
            }

            case 6: {
                // Shift 688.
                token = doShift(token, 688);
                return;
            }

            case 10: {
                // Shift 689.
                token = doShift(token, 689);
                return;
            }

            case 34: {
                // Shift 690.
                token = doShift(token, 690);
                return;
            }

            case 52: {
                // Shift 691.
                token = doShift(token, 691);
                return;
            }

            case 74: {
                // Shift 692.
                token = doShift(token, 692);
                return;
            }

            case 20:
            case 21:
            case 22: {
                // Reduce OptElifFuncStats : OptElifFuncStats ELIFKW Expressions COLONTK FuncStatements;
                doReduce1(token, 23);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AElifFuncStatement> o = hooks.parseOptElifFuncStats2((List<AElifFuncStatement>)o1, (Token)o2, (List<AExpression>)o3, (List<AFuncStatement>)o5);

                reduce = true;
                reduceNonTerminal = 23;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 730.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action730() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatement : CONTINUEKW SEMICOLTK;
                doReduce1(token, 22);
                doReduce2();
                Object o1 = doReduce2();

                AFuncStatement o = hooks.parseFuncStatement5((Token)o1);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 731.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action731() throws IOException {
        switch (token.id) {
            case 6:
            case 10:
            case 20:
            case 21:
            case 22:
            case 34:
            case 52:
            case 74:
            case 155:
            case 159:
            case 160:
            case 161:
            case 162: {
                // Reduce FuncStatement : BREAKKW SEMICOLTK;
                doReduce1(token, 22);
                doReduce2();
                Object o1 = doReduce2();

                AFuncStatement o = hooks.parseFuncStatement4((Token)o1);

                reduce = true;
                reduceNonTerminal = 22;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 732.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action732() throws IOException {
        switch (token.id) {
            case 135: {
                // Reduce FuncParams : PAROPENTK PARCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                doReduce2();

                List<AFuncParam> o = hooks.parseFuncParams1();

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 733.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action733() throws IOException {
        switch (token.id) {
            case 134: {
                // Shift 736.
                token = doShift(token, 736);
                return;
            }

            case 156: {
                // Shift 737.
                token = doShift(token, 737);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 734.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action734() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 735.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action735() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134:
            case 156: {
                // Reduce FuncParamDecls : Type Identifiers;
                doReduce1(token, 17);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                List<AFuncParam> o = hooks.parseFuncParamDecls1((ACifType)o1, (List<AIdentifier>)o2);

                reduce = true;
                reduceNonTerminal = 17;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 736.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action736() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 5: {
                // Shift 323.
                token = doShift(token, 323);
                return;
            }

            case 14: {
                // Shift 324.
                token = doShift(token, 324);
                return;
            }

            case 17: {
                // Shift 325.
                token = doShift(token, 325);
                return;
            }

            case 30: {
                // Shift 326.
                token = doShift(token, 326);
                return;
            }

            case 38: {
                // Shift 327.
                token = doShift(token, 327);
                return;
            }

            case 40: {
                // Shift 328.
                token = doShift(token, 328);
                return;
            }

            case 51: {
                // Shift 329.
                token = doShift(token, 329);
                return;
            }

            case 54: {
                // Shift 330.
                token = doShift(token, 330);
                return;
            }

            case 55: {
                // Shift 331.
                token = doShift(token, 331);
                return;
            }

            case 67: {
                // Shift 332.
                token = doShift(token, 332);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 737.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action737() throws IOException {
        switch (token.id) {
            case 135: {
                // Reduce FuncParams : PAROPENTK FuncParamDecls PARCLOSETK;
                doReduce1(token, 16);
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                List<AFuncParam> o = hooks.parseFuncParams2((List<AFuncParam>)o2);

                reduce = true;
                reduceNonTerminal = 16;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 738.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action738() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 739.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action739() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134:
            case 156: {
                // Reduce FuncParamDecls : FuncParamDecls SEMICOLTK Type Identifiers;
                doReduce1(token, 17);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AFuncParam> o = hooks.parseFuncParamDecls2((List<AFuncParam>)o1, (ACifType)o3, (List<AIdentifier>)o4);

                reduce = true;
                reduceNonTerminal = 17;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 740.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action740() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 255.
                token = doShift(token, 255);
                return;
            }

            case 134: {
                // Shift 741.
                token = doShift(token, 741);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 741.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action741() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : EQUATIONKW Equations SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl11((Token)o1, (List<AEquation>)o2);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 742.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action742() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 743.
                token = doShift(token, 743);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 743.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action743() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 744.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action744() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 337.
                token = doShift(token, 337);
                return;
            }

            case 134: {
                // Shift 745.
                token = doShift(token, 745);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 745.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action745() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : ENUMKW Identifier EQTK Identifiers SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o4 = doReduce2();
                doReduce2();
                Object o2 = doReduce2();
                doReduce2();

                ADecl o = hooks.parseDecl02((AIdentifier)o2, (List<AIdentifier>)o4);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 746.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action746() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce ContDecls : ContDecl;
                doReduce1(token, 46);
                Object o1 = doReduce2();

                List<AContVariable> o = hooks.parseContDecls1((AContVariable)o1);

                reduce = true;
                reduceNonTerminal = 46;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 747.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action747() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 755.
                token = doShift(token, 755);
                return;
            }

            case 134: {
                // Shift 756.
                token = doShift(token, 756);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 748.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action748() throws IOException {
        switch (token.id) {
            case 13: {
                // Shift 749.
                token = doShift(token, 749);
                return;
            }

            case 144: {
                // Shift 750.
                token = doShift(token, 750);
                return;
            }

            case 133:
            case 134: {
                // Reduce OptDerivative : ;
                doReduce1(token, 48);
                AExpression o = hooks.parseOptDerivative1();

                reduce = true;
                reduceNonTerminal = 48;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 749.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action749() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 750.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action750() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 751.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action751() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce ContDecl : Identifier OptDerivative;
                doReduce1(token, 47);
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                AContVariable o = hooks.parseContDecl1((AIdentifier)o1, (AExpression)o2);

                reduce = true;
                reduceNonTerminal = 47;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 752.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action752() throws IOException {
        switch (token.id) {
            case 13: {
                // Shift 749.
                token = doShift(token, 749);
                return;
            }

            case 133:
            case 134: {
                // Reduce OptDerivative : ;
                doReduce1(token, 48);
                AExpression o = hooks.parseOptDerivative1();

                reduce = true;
                reduceNonTerminal = 48;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 753.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action753() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce ContDecl : Identifier EQTK Expression OptDerivative;
                doReduce1(token, 47);
                Object o4 = doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                AContVariable o = hooks.parseContDecl2((AIdentifier)o1, (AExpression)o3, (AExpression)o4);

                reduce = true;
                reduceNonTerminal = 47;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 754.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action754() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce OptDerivative : DERKW Expression;
                doReduce1(token, 48);
                Object o2 = doReduce2();
                doReduce2();

                AExpression o = hooks.parseOptDerivative2((AExpression)o2);

                reduce = true;
                reduceNonTerminal = 48;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 755.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action755() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 756.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action756() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : CONTKW ContDecls SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl10((Token)o1, (List<AContVariable>)o2);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 757.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action757() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce ContDecls : ContDecls COMMATK ContDecl;
                doReduce1(token, 46);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AContVariable> o = hooks.parseContDecls2((List<AContVariable>)o1, (AContVariable)o3);

                reduce = true;
                reduceNonTerminal = 46;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 758.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action758() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 759.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action759() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 763.
                token = doShift(token, 763);
                return;
            }

            case 134: {
                // Shift 764.
                token = doShift(token, 764);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 760.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action760() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 761.
                token = doShift(token, 761);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 761.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action761() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 762.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action762() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce ConstantDefs : Identifier EQTK Expression;
                doReduce1(token, 14);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AConstant> o = hooks.parseConstantDefs1((AIdentifier)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 14;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 763.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action763() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 764.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action764() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : CONSTKW Type ConstantDefs SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl07((Token)o1, (ACifType)o2, (List<AConstant>)o3);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 765.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action765() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 766.
                token = doShift(token, 766);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 766.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action766() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 767.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action767() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce ConstantDefs : ConstantDefs COMMATK Identifier EQTK Expression;
                doReduce1(token, 14);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AConstant> o = hooks.parseConstantDefs2((List<AConstant>)o1, (AIdentifier)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 14;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 768.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action768() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 769.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action769() throws IOException {
        switch (token.id) {
            case 133: {
                // Shift 773.
                token = doShift(token, 773);
                return;
            }

            case 134: {
                // Shift 774.
                token = doShift(token, 774);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 770.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action770() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 771.
                token = doShift(token, 771);
                return;
            }

            case 133:
            case 134: {
                // Reduce AlgVarsDefs : Identifier;
                doReduce1(token, 15);
                Object o1 = doReduce2();

                List<AAlgVariable> o = hooks.parseAlgVarsDefs1((AIdentifier)o1);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 771.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action771() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 772.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action772() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce AlgVarsDefs : Identifier EQTK Expression;
                doReduce1(token, 15);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AAlgVariable> o = hooks.parseAlgVarsDefs2((AIdentifier)o1, (AExpression)o3);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 773.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action773() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 774.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action774() throws IOException {
        switch (token.id) {
            case 0:
            case 1:
            case 4:
            case 8:
            case 9:
            case 11:
            case 16:
            case 22:
            case 23:
            case 24:
            case 25:
            case 30:
            case 32:
            case 35:
            case 36:
            case 37:
            case 39:
            case 41:
            case 42:
            case 43:
            case 44:
            case 49:
            case 50:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 68:
            case 69:
            case 75:
            case 76:
            case 77:
            case 162:
            case 166:
            case 170: {
                // Reduce Decl : ALGKW Type AlgVarsDefs SEMICOLTK;
                doReduce1(token, 9);
                doReduce2();
                Object o3 = doReduce2();
                Object o2 = doReduce2();
                Object o1 = doReduce2();

                ADecl o = hooks.parseDecl08((Token)o1, (ACifType)o2, (List<AAlgVariable>)o3);

                reduce = true;
                reduceNonTerminal = 9;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 775.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action775() throws IOException {
        switch (token.id) {
            case 144: {
                // Shift 776.
                token = doShift(token, 776);
                return;
            }

            case 133:
            case 134: {
                // Reduce AlgVarsDefs : AlgVarsDefs COMMATK Identifier;
                doReduce1(token, 15);
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AAlgVariable> o = hooks.parseAlgVarsDefs3((List<AAlgVariable>)o1, (AIdentifier)o3);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 776.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action776() throws IOException {
        switch (token.id) {
            case 162: {
                // Shift 28.
                token = doShift(token, 28);
                return;
            }

            case 26: {
                // Shift 47.
                token = doShift(token, 47);
                return;
            }

            case 34: {
                // Shift 48.
                token = doShift(token, 48);
                return;
            }

            case 53: {
                // Shift 49.
                token = doShift(token, 49);
                return;
            }

            case 61: {
                // Shift 50.
                token = doShift(token, 50);
                return;
            }

            case 64: {
                // Shift 51.
                token = doShift(token, 51);
                return;
            }

            case 66: {
                // Shift 52.
                token = doShift(token, 52);
                return;
            }

            case 78: {
                // Shift 53.
                token = doShift(token, 53);
                return;
            }

            case 79: {
                // Shift 54.
                token = doShift(token, 54);
                return;
            }

            case 80: {
                // Shift 55.
                token = doShift(token, 55);
                return;
            }

            case 81: {
                // Shift 56.
                token = doShift(token, 56);
                return;
            }

            case 82: {
                // Shift 57.
                token = doShift(token, 57);
                return;
            }

            case 83: {
                // Shift 58.
                token = doShift(token, 58);
                return;
            }

            case 84: {
                // Shift 59.
                token = doShift(token, 59);
                return;
            }

            case 85: {
                // Shift 60.
                token = doShift(token, 60);
                return;
            }

            case 86: {
                // Shift 61.
                token = doShift(token, 61);
                return;
            }

            case 87: {
                // Shift 62.
                token = doShift(token, 62);
                return;
            }

            case 88: {
                // Shift 63.
                token = doShift(token, 63);
                return;
            }

            case 89: {
                // Shift 64.
                token = doShift(token, 64);
                return;
            }

            case 90: {
                // Shift 65.
                token = doShift(token, 65);
                return;
            }

            case 91: {
                // Shift 66.
                token = doShift(token, 66);
                return;
            }

            case 92: {
                // Shift 67.
                token = doShift(token, 67);
                return;
            }

            case 93: {
                // Shift 68.
                token = doShift(token, 68);
                return;
            }

            case 94: {
                // Shift 69.
                token = doShift(token, 69);
                return;
            }

            case 95: {
                // Shift 70.
                token = doShift(token, 70);
                return;
            }

            case 96: {
                // Shift 71.
                token = doShift(token, 71);
                return;
            }

            case 97: {
                // Shift 72.
                token = doShift(token, 72);
                return;
            }

            case 98: {
                // Shift 73.
                token = doShift(token, 73);
                return;
            }

            case 99: {
                // Shift 74.
                token = doShift(token, 74);
                return;
            }

            case 100: {
                // Shift 75.
                token = doShift(token, 75);
                return;
            }

            case 101: {
                // Shift 76.
                token = doShift(token, 76);
                return;
            }

            case 102: {
                // Shift 77.
                token = doShift(token, 77);
                return;
            }

            case 103: {
                // Shift 78.
                token = doShift(token, 78);
                return;
            }

            case 104: {
                // Shift 79.
                token = doShift(token, 79);
                return;
            }

            case 105: {
                // Shift 80.
                token = doShift(token, 80);
                return;
            }

            case 106: {
                // Shift 81.
                token = doShift(token, 81);
                return;
            }

            case 107: {
                // Shift 82.
                token = doShift(token, 82);
                return;
            }

            case 108: {
                // Shift 83.
                token = doShift(token, 83);
                return;
            }

            case 109: {
                // Shift 84.
                token = doShift(token, 84);
                return;
            }

            case 110: {
                // Shift 85.
                token = doShift(token, 85);
                return;
            }

            case 111: {
                // Shift 86.
                token = doShift(token, 86);
                return;
            }

            case 112: {
                // Shift 87.
                token = doShift(token, 87);
                return;
            }

            case 113: {
                // Shift 88.
                token = doShift(token, 88);
                return;
            }

            case 114: {
                // Shift 89.
                token = doShift(token, 89);
                return;
            }

            case 115: {
                // Shift 90.
                token = doShift(token, 90);
                return;
            }

            case 116: {
                // Shift 91.
                token = doShift(token, 91);
                return;
            }

            case 117: {
                // Shift 92.
                token = doShift(token, 92);
                return;
            }

            case 118: {
                // Shift 93.
                token = doShift(token, 93);
                return;
            }

            case 119: {
                // Shift 94.
                token = doShift(token, 94);
                return;
            }

            case 120: {
                // Shift 95.
                token = doShift(token, 95);
                return;
            }

            case 121: {
                // Shift 96.
                token = doShift(token, 96);
                return;
            }

            case 122: {
                // Shift 97.
                token = doShift(token, 97);
                return;
            }

            case 123: {
                // Shift 98.
                token = doShift(token, 98);
                return;
            }

            case 128: {
                // Shift 99.
                token = doShift(token, 99);
                return;
            }

            case 130: {
                // Shift 100.
                token = doShift(token, 100);
                return;
            }

            case 138: {
                // Shift 101.
                token = doShift(token, 101);
                return;
            }

            case 142: {
                // Shift 102.
                token = doShift(token, 102);
                return;
            }

            case 148: {
                // Shift 103.
                token = doShift(token, 103);
                return;
            }

            case 149: {
                // Shift 104.
                token = doShift(token, 104);
                return;
            }

            case 153: {
                // Shift 105.
                token = doShift(token, 105);
                return;
            }

            case 155: {
                // Shift 106.
                token = doShift(token, 106);
                return;
            }

            case 157: {
                // Shift 107.
                token = doShift(token, 107);
                return;
            }

            case 159: {
                // Shift 108.
                token = doShift(token, 108);
                return;
            }

            case 160: {
                // Shift 109.
                token = doShift(token, 109);
                return;
            }

            case 161: {
                // Shift 110.
                token = doShift(token, 110);
                return;
            }

            case 163: {
                // Shift 111.
                token = doShift(token, 111);
                return;
            }

            case 164: {
                // Shift 112.
                token = doShift(token, 112);
                return;
            }

            case 165: {
                // Shift 113.
                token = doShift(token, 113);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /**
     * Parser action code for parser state 777.
     *
     * @throws IOException If reading the input failed due to an I/O error.
     */
    private final void action777() throws IOException {
        switch (token.id) {
            case 133:
            case 134: {
                // Reduce AlgVarsDefs : AlgVarsDefs COMMATK Identifier EQTK Expression;
                doReduce1(token, 15);
                Object o5 = doReduce2();
                doReduce2();
                Object o3 = doReduce2();
                doReduce2();
                Object o1 = doReduce2();

                List<AAlgVariable> o = hooks.parseAlgVarsDefs4((List<AAlgVariable>)o1, (AIdentifier)o3, (AExpression)o5);

                reduce = true;
                reduceNonTerminal = 15;
                reduceState = doReduce3(o);
                return;
            }

            default:
                parsingFailed(token);
        }
    }

    /** Parser goto code for parser state 0. */
    private final void goto0() {
        switch (reduceNonTerminal) {
            case 2:
                // Specification
                doGoto(3);
                return;

            case 3:
                // GroupBody
                doGoto(1);
                return;

            case 5:
                // OptGroupDecls
                doGoto(2);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 1. */
    private final void goto1() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 2. */
    private final void goto2() {
        switch (reduceNonTerminal) {
            case 0:
                // SupKind
                doGoto(40);
                return;

            case 6:
                // GroupDecl
                doGoto(31);
                return;

            case 9:
                // Decl
                doGoto(30);
                return;

            case 10:
                // Identifier
                doGoto(32);
                return;

            case 51:
                // InvariantDecls
                doGoto(33);
                return;

            case 65:
                // OptSupKind
                doGoto(37);
                return;

            case 66:
                // OptControllability
                doGoto(36);
                return;

            case 67:
                // Controllability
                doGoto(29);
                return;

            case 69:
                // IoDecl
                doGoto(34);
                return;

            case 70:
                // SvgFile
                doGoto(42);
                return;

            case 72:
                // SvgCopy
                doGoto(41);
                return;

            case 75:
                // SvgMove
                doGoto(44);
                return;

            case 76:
                // SvgOut
                doGoto(45);
                return;

            case 78:
                // SvgIn
                doGoto(43);
                return;

            case 82:
                // PrintFile
                doGoto(39);
                return;

            case 83:
                // Print
                doGoto(38);
                return;

            case 112:
                // OptAnnos
                doGoto(35);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 3. */
    private final void goto3() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 4. */
    private final void goto4() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(768);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 5. */
    private final void goto5() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(758);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 6. */
    private final void goto6() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(748);
                return;

            case 46:
                // ContDecls
                doGoto(747);
                return;

            case 47:
                // ContDecl
                doGoto(746);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 7. */
    private final void goto7() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 8. */
    private final void goto8() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(742);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 9. */
    private final void goto9() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(249);
                return;

            case 49:
                // Equations
                doGoto(740);
                return;

            case 50:
                // Equation
                doGoto(247);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 10. */
    private final void goto10() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 90:
                // Types
                doGoto(679);
                return;

            case 92:
                // Type
                doGoto(366);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 11. */
    private final void goto11() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(670);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 12. */
    private final void goto12() {
        switch (reduceNonTerminal) {
            case 11:
                // Imports
                doGoto(664);
                return;

            case 12:
                // StringToken
                doGoto(665);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 13. */
    private final void goto13() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(662);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 14. */
    private final void goto14() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(660);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 15. */
    private final void goto15() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 16. */
    private final void goto16() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 84:
                // PrintTxt
                doGoto(627);
                return;

            case 97:
                // Expression
                doGoto(626);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 17. */
    private final void goto17() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(622);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 18. */
    private final void goto18() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 19. */
    private final void goto19() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(610);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 20. */
    private final void goto20() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 21. */
    private final void goto21() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 22. */
    private final void goto22() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 23. */
    private final void goto23() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(552);
                return;

            case 13:
                // TypeDefs
                doGoto(553);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 24. */
    private final void goto24() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 25. */
    private final void goto25() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 26. */
    private final void goto26() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 27. */
    private final void goto27() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 28. */
    private final void goto28() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 29. */
    private final void goto29() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(534);
                return;

            case 64:
                // Identifiers
                doGoto(548);
                return;

            case 91:
                // EventType
                doGoto(547);
                return;

            case 92:
                // Type
                doGoto(501);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 30. */
    private final void goto30() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 31. */
    private final void goto31() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 32. */
    private final void goto32() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 33. */
    private final void goto33() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 34. */
    private final void goto34() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 35. */
    private final void goto35() {
        switch (reduceNonTerminal) {
            case 113:
                // Annotation
                doGoto(211);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 36. */
    private final void goto36() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 37. */
    private final void goto37() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 38. */
    private final void goto38() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 39. */
    private final void goto39() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 40. */
    private final void goto40() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(120);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 52:
                // Invariants
                doGoto(122);
                return;

            case 53:
                // Invariant
                doGoto(121);
                return;

            case 97:
                // Expression
                doGoto(117);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(125);
                return;

            case 111:
                // Name
                doGoto(124);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 41. */
    private final void goto41() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 42. */
    private final void goto42() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 43. */
    private final void goto43() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 44. */
    private final void goto44() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 45. */
    private final void goto45() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 46. */
    private final void goto46() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(481);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 47. */
    private final void goto47() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 48. */
    private final void goto48() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(470);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 49. */
    private final void goto49() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 50. */
    private final void goto50() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(453);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 51. */
    private final void goto51() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 52. */
    private final void goto52() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 53. */
    private final void goto53() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 54. */
    private final void goto54() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 55. */
    private final void goto55() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 56. */
    private final void goto56() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 57. */
    private final void goto57() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 58. */
    private final void goto58() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 59. */
    private final void goto59() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 60. */
    private final void goto60() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 61. */
    private final void goto61() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 62. */
    private final void goto62() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 63. */
    private final void goto63() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 64. */
    private final void goto64() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 65. */
    private final void goto65() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 66. */
    private final void goto66() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 67. */
    private final void goto67() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 68. */
    private final void goto68() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 69. */
    private final void goto69() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 70. */
    private final void goto70() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 71. */
    private final void goto71() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 72. */
    private final void goto72() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 73. */
    private final void goto73() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 74. */
    private final void goto74() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 75. */
    private final void goto75() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 76. */
    private final void goto76() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 77. */
    private final void goto77() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 78. */
    private final void goto78() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 79. */
    private final void goto79() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 80. */
    private final void goto80() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 81. */
    private final void goto81() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 82. */
    private final void goto82() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 83. */
    private final void goto83() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 84. */
    private final void goto84() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 85. */
    private final void goto85() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 86. */
    private final void goto86() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 87. */
    private final void goto87() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 88. */
    private final void goto88() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 89. */
    private final void goto89() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 90. */
    private final void goto90() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 91. */
    private final void goto91() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 92. */
    private final void goto92() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 93. */
    private final void goto93() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 94. */
    private final void goto94() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 95. */
    private final void goto95() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 96. */
    private final void goto96() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 97. */
    private final void goto97() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 98. */
    private final void goto98() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 99. */
    private final void goto99() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(452);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 100. */
    private final void goto100() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 104:
                // FuncExpression
                doGoto(451);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 101. */
    private final void goto101() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 102. */
    private final void goto102() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(448);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 103. */
    private final void goto103() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(447);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 104. */
    private final void goto104() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(446);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 105. */
    private final void goto105() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(437);
                return;

            case 97:
                // Expression
                doGoto(436);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 107:
                // DictPairs
                doGoto(435);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 106. */
    private final void goto106() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(429);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 107. */
    private final void goto107() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(427);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 108. */
    private final void goto108() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 109. */
    private final void goto109() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 110. */
    private final void goto110() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 111. */
    private final void goto111() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 112. */
    private final void goto112() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 113. */
    private final void goto113() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 114. */
    private final void goto114() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 115. */
    private final void goto115() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 116. */
    private final void goto116() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 117. */
    private final void goto117() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 118. */
    private final void goto118() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 119. */
    private final void goto119() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 120. */
    private final void goto120() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 121. */
    private final void goto121() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 122. */
    private final void goto122() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 123. */
    private final void goto123() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 124. */
    private final void goto124() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 125. */
    private final void goto125() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 126. */
    private final void goto126() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 127. */
    private final void goto127() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 128. */
    private final void goto128() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 129. */
    private final void goto129() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 130. */
    private final void goto130() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(133);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 131. */
    private final void goto131() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 132. */
    private final void goto132() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 133. */
    private final void goto133() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 134. */
    private final void goto134() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 135. */
    private final void goto135() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 136. */
    private final void goto136() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 137. */
    private final void goto137() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 138. */
    private final void goto138() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(140);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 139. */
    private final void goto139() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 140. */
    private final void goto140() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 141. */
    private final void goto141() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 99:
                // AndExpression
                doGoto(146);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 142. */
    private final void goto142() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 98:
                // OrExpression
                doGoto(145);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 143. */
    private final void goto143() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 98:
                // OrExpression
                doGoto(144);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 144. */
    private final void goto144() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 145. */
    private final void goto145() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 146. */
    private final void goto146() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 147. */
    private final void goto147() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 100:
                // CompareExpression
                doGoto(148);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 148. */
    private final void goto148() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 149. */
    private final void goto149() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(176);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 150. */
    private final void goto150() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(175);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 151. */
    private final void goto151() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(174);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 152. */
    private final void goto152() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(173);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 153. */
    private final void goto153() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(172);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 154. */
    private final void goto154() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(171);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 155. */
    private final void goto155() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(170);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 156. */
    private final void goto156() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 101:
                // AddExpression
                doGoto(157);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 157. */
    private final void goto157() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 158. */
    private final void goto158() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 102:
                // MulExpression
                doGoto(169);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 159. */
    private final void goto159() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 102:
                // MulExpression
                doGoto(160);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 160. */
    private final void goto160() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 161. */
    private final void goto161() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(168);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 162. */
    private final void goto162() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(167);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 163. */
    private final void goto163() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(166);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 164. */
    private final void goto164() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 103:
                // UnaryExpression
                doGoto(165);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 165. */
    private final void goto165() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 166. */
    private final void goto166() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 167. */
    private final void goto167() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 168. */
    private final void goto168() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 169. */
    private final void goto169() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 170. */
    private final void goto170() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 171. */
    private final void goto171() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 172. */
    private final void goto172() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 173. */
    private final void goto173() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 174. */
    private final void goto174() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 175. */
    private final void goto175() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 176. */
    private final void goto176() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 177. */
    private final void goto177() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(178);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 178. */
    private final void goto178() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 179. */
    private final void goto179() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(180);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 180. */
    private final void goto180() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 181. */
    private final void goto181() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(183);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 53:
                // Invariant
                doGoto(184);
                return;

            case 97:
                // Expression
                doGoto(117);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(125);
                return;

            case 111:
                // Name
                doGoto(124);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 182. */
    private final void goto182() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 183. */
    private final void goto183() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 184. */
    private final void goto184() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 185. */
    private final void goto185() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(186);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(187);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 186. */
    private final void goto186() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 187. */
    private final void goto187() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 188. */
    private final void goto188() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(189);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 189. */
    private final void goto189() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 190. */
    private final void goto190() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(191);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 191. */
    private final void goto191() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 192. */
    private final void goto192() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 4:
                // AutomatonBody
                doGoto(193);
                return;

            case 7:
                // OptAutDecls
                doGoto(194);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(186);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(187);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 193. */
    private final void goto193() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 194. */
    private final void goto194() {
        switch (reduceNonTerminal) {
            case 0:
                // SupKind
                doGoto(204);
                return;

            case 8:
                // AutDecl
                doGoto(198);
                return;

            case 9:
                // Decl
                doGoto(199);
                return;

            case 32:
                // Locations
                doGoto(201);
                return;

            case 33:
                // Location
                doGoto(200);
                return;

            case 51:
                // InvariantDecls
                doGoto(33);
                return;

            case 65:
                // OptSupKind
                doGoto(203);
                return;

            case 66:
                // OptControllability
                doGoto(36);
                return;

            case 67:
                // Controllability
                doGoto(29);
                return;

            case 69:
                // IoDecl
                doGoto(34);
                return;

            case 70:
                // SvgFile
                doGoto(42);
                return;

            case 72:
                // SvgCopy
                doGoto(41);
                return;

            case 75:
                // SvgMove
                doGoto(44);
                return;

            case 76:
                // SvgOut
                doGoto(45);
                return;

            case 78:
                // SvgIn
                doGoto(43);
                return;

            case 82:
                // PrintFile
                doGoto(39);
                return;

            case 83:
                // Print
                doGoto(38);
                return;

            case 112:
                // OptAnnos
                doGoto(202);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 195. */
    private final void goto195() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 25:
                // Events
                doGoto(402);
                return;

            case 111:
                // Name
                doGoto(383);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 196. */
    private final void goto196() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(387);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 197. */
    private final void goto197() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 25:
                // Events
                doGoto(382);
                return;

            case 111:
                // Name
                doGoto(383);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 198. */
    private final void goto198() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 199. */
    private final void goto199() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 200. */
    private final void goto200() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 201. */
    private final void goto201() {
        switch (reduceNonTerminal) {
            case 33:
                // Location
                doGoto(377);
                return;

            case 68:
                // OptIoDecls
                doGoto(379);
                return;

            case 112:
                // OptAnnos
                doGoto(378);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 202. */
    private final void goto202() {
        switch (reduceNonTerminal) {
            case 113:
                // Annotation
                doGoto(211);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 203. */
    private final void goto203() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 204. */
    private final void goto204() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(183);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 52:
                // Invariants
                doGoto(122);
                return;

            case 53:
                // Invariant
                doGoto(121);
                return;

            case 97:
                // Expression
                doGoto(117);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(125);
                return;

            case 111:
                // Name
                doGoto(124);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 205. */
    private final void goto205() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(183);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 52:
                // Invariants
                doGoto(206);
                return;

            case 53:
                // Invariant
                doGoto(121);
                return;

            case 97:
                // Expression
                doGoto(117);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(125);
                return;

            case 111:
                // Name
                doGoto(124);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 206. */
    private final void goto206() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 207. */
    private final void goto207() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 208. */
    private final void goto208() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(334);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 209. */
    private final void goto209() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(228);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 210. */
    private final void goto210() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 211. */
    private final void goto211() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 212. */
    private final void goto212() {
        switch (reduceNonTerminal) {
            case 114:
                // AnnotationArgs
                doGoto(217);
                return;

            case 115:
                // AnnotationArg
                doGoto(216);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 213. */
    private final void goto213() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 214. */
    private final void goto214() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 215. */
    private final void goto215() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 216. */
    private final void goto216() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 217. */
    private final void goto217() {
        switch (reduceNonTerminal) {
            case 116:
                // OptComma
                doGoto(219);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 218. */
    private final void goto218() {
        switch (reduceNonTerminal) {
            case 115:
                // AnnotationArg
                doGoto(221);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 219. */
    private final void goto219() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 220. */
    private final void goto220() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 221. */
    private final void goto221() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 222. */
    private final void goto222() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(223);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 223. */
    private final void goto223() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 224. */
    private final void goto224() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(225);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 225. */
    private final void goto225() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 226. */
    private final void goto226() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 227. */
    private final void goto227() {
        switch (reduceNonTerminal) {
            case 0:
                // SupKind
                doGoto(204);
                return;

            case 34:
                // LocationElements
                doGoto(322);
                return;

            case 35:
                // LocationElement
                doGoto(237);
                return;

            case 51:
                // InvariantDecls
                doGoto(236);
                return;

            case 65:
                // OptSupKind
                doGoto(203);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 228. */
    private final void goto228() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 229. */
    private final void goto229() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 230. */
    private final void goto230() {
        switch (reduceNonTerminal) {
            case 0:
                // SupKind
                doGoto(204);
                return;

            case 34:
                // LocationElements
                doGoto(238);
                return;

            case 35:
                // LocationElement
                doGoto(237);
                return;

            case 51:
                // InvariantDecls
                doGoto(236);
                return;

            case 65:
                // OptSupKind
                doGoto(203);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 231. */
    private final void goto231() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 26:
                // CoreEdge
                doGoto(262);
                return;

            case 30:
                // EdgeEvents
                doGoto(264);
                return;

            case 31:
                // EdgeEvent
                doGoto(263);
                return;

            case 111:
                // Name
                doGoto(265);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 232. */
    private final void goto232() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(249);
                return;

            case 49:
                // Equations
                doGoto(248);
                return;

            case 50:
                // Equation
                doGoto(247);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 233. */
    private final void goto233() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(245);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 234. */
    private final void goto234() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(242);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 235. */
    private final void goto235() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 236. */
    private final void goto236() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 237. */
    private final void goto237() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 238. */
    private final void goto238() {
        switch (reduceNonTerminal) {
            case 0:
                // SupKind
                doGoto(204);
                return;

            case 35:
                // LocationElement
                doGoto(239);
                return;

            case 51:
                // InvariantDecls
                doGoto(236);
                return;

            case 65:
                // OptSupKind
                doGoto(203);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 239. */
    private final void goto239() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 240. */
    private final void goto240() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 241. */
    private final void goto241() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 242. */
    private final void goto242() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 243. */
    private final void goto243() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 244. */
    private final void goto244() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 245. */
    private final void goto245() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 246. */
    private final void goto246() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 247. */
    private final void goto247() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 248. */
    private final void goto248() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 249. */
    private final void goto249() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 250. */
    private final void goto250() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 251. */
    private final void goto251() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(252);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 252. */
    private final void goto252() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 253. */
    private final void goto253() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(254);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 254. */
    private final void goto254() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 255. */
    private final void goto255() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(249);
                return;

            case 50:
                // Equation
                doGoto(257);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 256. */
    private final void goto256() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 257. */
    private final void goto257() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 258. */
    private final void goto258() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 56:
                // Updates
                doGoto(321);
                return;

            case 57:
                // Update
                doGoto(280);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 259. */
    private final void goto259() {
        switch (reduceNonTerminal) {
            case 29:
                // OptEdgeUpdate
                doGoto(320);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 260. */
    private final void goto260() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 261. */
    private final void goto261() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(317);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 262. */
    private final void goto262() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 263. */
    private final void goto263() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 264. */
    private final void goto264() {
        switch (reduceNonTerminal) {
            case 27:
                // OptEdgeGuard
                doGoto(271);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 265. */
    private final void goto265() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 266. */
    private final void goto266() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(268);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 267. */
    private final void goto267() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 268. */
    private final void goto268() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 269. */
    private final void goto269() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(312);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 270. */
    private final void goto270() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 31:
                // EdgeEvent
                doGoto(311);
                return;

            case 111:
                // Name
                doGoto(265);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 271. */
    private final void goto271() {
        switch (reduceNonTerminal) {
            case 28:
                // OptEdgeUrgent
                doGoto(273);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 272. */
    private final void goto272() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 273. */
    private final void goto273() {
        switch (reduceNonTerminal) {
            case 29:
                // OptEdgeUpdate
                doGoto(275);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 274. */
    private final void goto274() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 56:
                // Updates
                doGoto(281);
                return;

            case 57:
                // Update
                doGoto(280);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 275. */
    private final void goto275() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 276. */
    private final void goto276() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(299);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 277. */
    private final void goto277() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 59:
                // Addressable
                doGoto(292);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 278. */
    private final void goto278() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 279. */
    private final void goto279() {
        switch (reduceNonTerminal) {
            case 60:
                // Projections
                doGoto(286);
                return;

            case 61:
                // Projection
                doGoto(285);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 280. */
    private final void goto280() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 281. */
    private final void goto281() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 282. */
    private final void goto282() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 57:
                // Update
                doGoto(283);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 283. */
    private final void goto283() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 284. */
    private final void goto284() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(288);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 285. */
    private final void goto285() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 286. */
    private final void goto286() {
        switch (reduceNonTerminal) {
            case 61:
                // Projection
                doGoto(287);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 287. */
    private final void goto287() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 288. */
    private final void goto288() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 289. */
    private final void goto289() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 290. */
    private final void goto290() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(291);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 291. */
    private final void goto291() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 292. */
    private final void goto292() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 293. */
    private final void goto293() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 58:
                // Addressables
                doGoto(295);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 294. */
    private final void goto294() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 295. */
    private final void goto295() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 296. */
    private final void goto296() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 59:
                // Addressable
                doGoto(298);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 297. */
    private final void goto297() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 298. */
    private final void goto298() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 299. */
    private final void goto299() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 300. */
    private final void goto300() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 56:
                // Updates
                doGoto(301);
                return;

            case 57:
                // Update
                doGoto(280);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 301. */
    private final void goto301() {
        switch (reduceNonTerminal) {
            case 62:
                // OptElifUpdates
                doGoto(302);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 302. */
    private final void goto302() {
        switch (reduceNonTerminal) {
            case 63:
                // OptElseUpdate
                doGoto(305);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 303. */
    private final void goto303() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(308);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 304. */
    private final void goto304() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 56:
                // Updates
                doGoto(307);
                return;

            case 57:
                // Update
                doGoto(280);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 305. */
    private final void goto305() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 306. */
    private final void goto306() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 307. */
    private final void goto307() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 308. */
    private final void goto308() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 309. */
    private final void goto309() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 56:
                // Updates
                doGoto(310);
                return;

            case 57:
                // Update
                doGoto(280);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 310. */
    private final void goto310() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 311. */
    private final void goto311() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 312. */
    private final void goto312() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 313. */
    private final void goto313() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(315);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 314. */
    private final void goto314() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 315. */
    private final void goto315() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 316. */
    private final void goto316() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 317. */
    private final void goto317() {
        switch (reduceNonTerminal) {
            case 28:
                // OptEdgeUrgent
                doGoto(318);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 318. */
    private final void goto318() {
        switch (reduceNonTerminal) {
            case 29:
                // OptEdgeUpdate
                doGoto(319);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 319. */
    private final void goto319() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 320. */
    private final void goto320() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 321. */
    private final void goto321() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 322. */
    private final void goto322() {
        switch (reduceNonTerminal) {
            case 0:
                // SupKind
                doGoto(204);
                return;

            case 35:
                // LocationElement
                doGoto(239);
                return;

            case 51:
                // InvariantDecls
                doGoto(236);
                return;

            case 65:
                // OptSupKind
                doGoto(203);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 323. */
    private final void goto323() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 324. */
    private final void goto324() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 325. */
    private final void goto325() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(371);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 326. */
    private final void goto326() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(363);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 327. */
    private final void goto327() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 328. */
    private final void goto328() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(350);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 329. */
    private final void goto329() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 330. */
    private final void goto330() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(348);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 331. */
    private final void goto331() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 332. */
    private final void goto332() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 333. */
    private final void goto333() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 334. */
    private final void goto334() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(336);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 335. */
    private final void goto335() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 336. */
    private final void goto336() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 337. */
    private final void goto337() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(339);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 338. */
    private final void goto338() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 339. */
    private final void goto339() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 340. */
    private final void goto340() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(343);
                return;

            case 93:
                // Fields
                doGoto(342);
                return;

            case 94:
                // Field
                doGoto(341);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 341. */
    private final void goto341() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 342. */
    private final void goto342() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 343. */
    private final void goto343() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(344);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 344. */
    private final void goto344() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 345. */
    private final void goto345() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(343);
                return;

            case 94:
                // Field
                doGoto(347);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 346. */
    private final void goto346() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 347. */
    private final void goto347() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 348. */
    private final void goto348() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 349. */
    private final void goto349() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(351);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 350. */
    private final void goto350() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 351. */
    private final void goto351() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 352. */
    private final void goto352() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(355);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 353. */
    private final void goto353() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(354);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 354. */
    private final void goto354() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 355. */
    private final void goto355() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 356. */
    private final void goto356() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(357);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 357. */
    private final void goto357() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 358. */
    private final void goto358() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(359);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 359. */
    private final void goto359() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 360. */
    private final void goto360() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(361);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 361. */
    private final void goto361() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 362. */
    private final void goto362() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 363. */
    private final void goto363() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 364. */
    private final void goto364() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 90:
                // Types
                doGoto(367);
                return;

            case 92:
                // Type
                doGoto(366);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 365. */
    private final void goto365() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 366. */
    private final void goto366() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 367. */
    private final void goto367() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 368. */
    private final void goto368() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(370);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 369. */
    private final void goto369() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 370. */
    private final void goto370() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 371. */
    private final void goto371() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 372. */
    private final void goto372() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(373);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 373. */
    private final void goto373() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 374. */
    private final void goto374() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(375);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 375. */
    private final void goto375() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 376. */
    private final void goto376() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 377. */
    private final void goto377() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 378. */
    private final void goto378() {
        switch (reduceNonTerminal) {
            case 113:
                // Annotation
                doGoto(211);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 379. */
    private final void goto379() {
        switch (reduceNonTerminal) {
            case 69:
                // IoDecl
                doGoto(380);
                return;

            case 70:
                // SvgFile
                doGoto(42);
                return;

            case 72:
                // SvgCopy
                doGoto(41);
                return;

            case 75:
                // SvgMove
                doGoto(44);
                return;

            case 76:
                // SvgOut
                doGoto(45);
                return;

            case 78:
                // SvgIn
                doGoto(43);
                return;

            case 82:
                // PrintFile
                doGoto(39);
                return;

            case 83:
                // Print
                doGoto(38);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 380. */
    private final void goto380() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 381. */
    private final void goto381() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 382. */
    private final void goto382() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 383. */
    private final void goto383() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 384. */
    private final void goto384() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(386);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 385. */
    private final void goto385() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 386. */
    private final void goto386() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 387. */
    private final void goto387() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(390);
                return;

            case 44:
                // DiscDecls
                doGoto(389);
                return;

            case 45:
                // DiscDecl
                doGoto(388);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 388. */
    private final void goto388() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 389. */
    private final void goto389() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 390. */
    private final void goto390() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 391. */
    private final void goto391() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 392. */
    private final void goto392() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(393);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 393. */
    private final void goto393() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 394. */
    private final void goto394() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 395. */
    private final void goto395() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(396);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 396. */
    private final void goto396() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 397. */
    private final void goto397() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 398. */
    private final void goto398() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(390);
                return;

            case 45:
                // DiscDecl
                doGoto(400);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 399. */
    private final void goto399() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 400. */
    private final void goto400() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 401. */
    private final void goto401() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 402. */
    private final void goto402() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 403. */
    private final void goto403() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 404. */
    private final void goto404() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 405. */
    private final void goto405() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(415);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 406. */
    private final void goto406() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 96:
                // OptExpression
                doGoto(408);
                return;

            case 97:
                // Expression
                doGoto(407);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 407. */
    private final void goto407() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 408. */
    private final void goto408() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 409. */
    private final void goto409() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 96:
                // OptExpression
                doGoto(411);
                return;

            case 97:
                // Expression
                doGoto(410);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 410. */
    private final void goto410() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 411. */
    private final void goto411() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 412. */
    private final void goto412() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 413. */
    private final void goto413() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 414. */
    private final void goto414() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 415. */
    private final void goto415() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 416. */
    private final void goto416() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 417. */
    private final void goto417() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 54:
                // NamesSet
                doGoto(420);
                return;

            case 111:
                // Name
                doGoto(419);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 418. */
    private final void goto418() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 55:
                // Names
                doGoto(422);
                return;

            case 111:
                // Name
                doGoto(421);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 419. */
    private final void goto419() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 420. */
    private final void goto420() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 421. */
    private final void goto421() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 422. */
    private final void goto422() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 423. */
    private final void goto423() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(425);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 424. */
    private final void goto424() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 425. */
    private final void goto425() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 426. */
    private final void goto426() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 427. */
    private final void goto427() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 428. */
    private final void goto428() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 429. */
    private final void goto429() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 430. */
    private final void goto430() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(432);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 431. */
    private final void goto431() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 432. */
    private final void goto432() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 433. */
    private final void goto433() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 434. */
    private final void goto434() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 435. */
    private final void goto435() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 436. */
    private final void goto436() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 437. */
    private final void goto437() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 438. */
    private final void goto438() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 439. */
    private final void goto439() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(440);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 440. */
    private final void goto440() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 441. */
    private final void goto441() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(443);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 442. */
    private final void goto442() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 443. */
    private final void goto443() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 444. */
    private final void goto444() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(445);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 445. */
    private final void goto445() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 446. */
    private final void goto446() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 447. */
    private final void goto447() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 448. */
    private final void goto448() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 449. */
    private final void goto449() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 105:
                // ExpressionFactor
                doGoto(450);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 450. */
    private final void goto450() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 451. */
    private final void goto451() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 452. */
    private final void goto452() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 453. */
    private final void goto453() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 454. */
    private final void goto454() {
        switch (reduceNonTerminal) {
            case 109:
                // SwitchBody
                doGoto(457);
                return;

            case 110:
                // SwitchCases
                doGoto(458);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 455. */
    private final void goto455() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(467);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 456. */
    private final void goto456() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(466);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 457. */
    private final void goto457() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 458. */
    private final void goto458() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 459. */
    private final void goto459() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(462);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 460. */
    private final void goto460() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(461);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 461. */
    private final void goto461() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 462. */
    private final void goto462() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 463. */
    private final void goto463() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(464);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 464. */
    private final void goto464() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 465. */
    private final void goto465() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 466. */
    private final void goto466() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 467. */
    private final void goto467() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 468. */
    private final void goto468() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(469);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 469. */
    private final void goto469() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 470. */
    private final void goto470() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 471. */
    private final void goto471() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(472);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 472. */
    private final void goto472() {
        switch (reduceNonTerminal) {
            case 108:
                // OptElifExprs
                doGoto(473);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 473. */
    private final void goto473() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 474. */
    private final void goto474() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(478);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 475. */
    private final void goto475() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(476);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 476. */
    private final void goto476() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 477. */
    private final void goto477() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 478. */
    private final void goto478() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 479. */
    private final void goto479() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(480);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 480. */
    private final void goto480() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 481. */
    private final void goto481() {
        switch (reduceNonTerminal) {
            case 37:
                // CompDefParms
                doGoto(483);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 482. */
    private final void goto482() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 38:
                // CompDefDecls
                doGoto(491);
                return;

            case 39:
                // CompDefDeclaration
                doGoto(490);
                return;

            case 66:
                // OptControllability
                doGoto(494);
                return;

            case 67:
                // Controllability
                doGoto(492);
                return;

            case 111:
                // Name
                doGoto(493);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 483. */
    private final void goto483() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 484. */
    private final void goto484() {
        switch (reduceNonTerminal) {
            case 4:
                // AutomatonBody
                doGoto(485);
                return;

            case 7:
                // OptAutDecls
                doGoto(194);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 485. */
    private final void goto485() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 486. */
    private final void goto486() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 487. */
    private final void goto487() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(519);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 488. */
    private final void goto488() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(518);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 489. */
    private final void goto489() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 490. */
    private final void goto490() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 491. */
    private final void goto491() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 492. */
    private final void goto492() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(500);
                return;

            case 40:
                // EventParamIds
                doGoto(512);
                return;

            case 41:
                // EventParamId
                doGoto(497);
                return;

            case 91:
                // EventType
                doGoto(513);
                return;

            case 92:
                // Type
                doGoto(501);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 493. */
    private final void goto493() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(511);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 494. */
    private final void goto494() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 495. */
    private final void goto495() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(500);
                return;

            case 40:
                // EventParamIds
                doGoto(498);
                return;

            case 41:
                // EventParamId
                doGoto(497);
                return;

            case 91:
                // EventType
                doGoto(499);
                return;

            case 92:
                // Type
                doGoto(501);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 496. */
    private final void goto496() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 497. */
    private final void goto497() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 498. */
    private final void goto498() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 499. */
    private final void goto499() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(508);
                return;

            case 40:
                // EventParamIds
                doGoto(507);
                return;

            case 41:
                // EventParamId
                doGoto(497);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 500. */
    private final void goto500() {
        switch (reduceNonTerminal) {
            case 42:
                // OptEventParamFlags
                doGoto(502);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 501. */
    private final void goto501() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 502. */
    private final void goto502() {
        switch (reduceNonTerminal) {
            case 43:
                // EventParamFlag
                doGoto(506);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 503. */
    private final void goto503() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 504. */
    private final void goto504() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 505. */
    private final void goto505() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 506. */
    private final void goto506() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 507. */
    private final void goto507() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 508. */
    private final void goto508() {
        switch (reduceNonTerminal) {
            case 42:
                // OptEventParamFlags
                doGoto(502);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 509. */
    private final void goto509() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(508);
                return;

            case 41:
                // EventParamId
                doGoto(510);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 510. */
    private final void goto510() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 511. */
    private final void goto511() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 512. */
    private final void goto512() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 513. */
    private final void goto513() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(508);
                return;

            case 40:
                // EventParamIds
                doGoto(514);
                return;

            case 41:
                // EventParamId
                doGoto(497);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 514. */
    private final void goto514() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 515. */
    private final void goto515() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 39:
                // CompDefDeclaration
                doGoto(517);
                return;

            case 66:
                // OptControllability
                doGoto(494);
                return;

            case 67:
                // Controllability
                doGoto(492);
                return;

            case 111:
                // Name
                doGoto(493);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 516. */
    private final void goto516() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 517. */
    private final void goto517() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 518. */
    private final void goto518() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 519. */
    private final void goto519() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(520);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 520. */
    private final void goto520() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 521. */
    private final void goto521() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(523);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 522. */
    private final void goto522() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(527);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 523. */
    private final void goto523() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 524. */
    private final void goto524() {
        switch (reduceNonTerminal) {
            case 4:
                // AutomatonBody
                doGoto(525);
                return;

            case 7:
                // OptAutDecls
                doGoto(194);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 525. */
    private final void goto525() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 526. */
    private final void goto526() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 527. */
    private final void goto527() {
        switch (reduceNonTerminal) {
            case 37:
                // CompDefParms
                doGoto(528);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 528. */
    private final void goto528() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 529. */
    private final void goto529() {
        switch (reduceNonTerminal) {
            case 4:
                // AutomatonBody
                doGoto(530);
                return;

            case 7:
                // OptAutDecls
                doGoto(194);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 530. */
    private final void goto530() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 531. */
    private final void goto531() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 532. */
    private final void goto532() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(534);
                return;

            case 64:
                // Identifiers
                doGoto(535);
                return;

            case 91:
                // EventType
                doGoto(533);
                return;

            case 92:
                // Type
                doGoto(501);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 533. */
    private final void goto533() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(537);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 534. */
    private final void goto534() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 535. */
    private final void goto535() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 536. */
    private final void goto536() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 537. */
    private final void goto537() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 538. */
    private final void goto538() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 539. */
    private final void goto539() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(540);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 540. */
    private final void goto540() {
        switch (reduceNonTerminal) {
            case 36:
                // CompInstArgs
                doGoto(542);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 541. */
    private final void goto541() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(545);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 542. */
    private final void goto542() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 543. */
    private final void goto543() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 544. */
    private final void goto544() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 545. */
    private final void goto545() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 546. */
    private final void goto546() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 547. */
    private final void goto547() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(550);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 548. */
    private final void goto548() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 549. */
    private final void goto549() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 550. */
    private final void goto550() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 551. */
    private final void goto551() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 552. */
    private final void goto552() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 553. */
    private final void goto553() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 554. */
    private final void goto554() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(556);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 555. */
    private final void goto555() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 556. */
    private final void goto556() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 557. */
    private final void goto557() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(558);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 558. */
    private final void goto558() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 559. */
    private final void goto559() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(560);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 560. */
    private final void goto560() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 561. */
    private final void goto561() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(562);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 562. */
    private final void goto562() {
        switch (reduceNonTerminal) {
            case 77:
                // SvgAttr
                doGoto(565);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 563. */
    private final void goto563() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(572);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 564. */
    private final void goto564() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 565. */
    private final void goto565() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 566. */
    private final void goto566() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(567);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 567. */
    private final void goto567() {
        switch (reduceNonTerminal) {
            case 71:
                // OptSvgFile
                doGoto(569);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 568. */
    private final void goto568() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(571);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 569. */
    private final void goto569() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 570. */
    private final void goto570() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 571. */
    private final void goto571() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 572. */
    private final void goto572() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 573. */
    private final void goto573() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(574);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 574. */
    private final void goto574() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 575. */
    private final void goto575() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(576);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 576. */
    private final void goto576() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 577. */
    private final void goto577() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(578);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 578. */
    private final void goto578() {
        switch (reduceNonTerminal) {
            case 71:
                // OptSvgFile
                doGoto(579);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 579. */
    private final void goto579() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 580. */
    private final void goto580() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 581. */
    private final void goto581() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(582);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 582. */
    private final void goto582() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 583. */
    private final void goto583() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 56:
                // Updates
                doGoto(607);
                return;

            case 57:
                // Update
                doGoto(280);
                return;

            case 59:
                // Addressable
                doGoto(278);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 584. */
    private final void goto584() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 79:
                // SvgInEvent
                doGoto(587);
                return;

            case 111:
                // Name
                doGoto(586);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 585. */
    private final void goto585() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(590);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 586. */
    private final void goto586() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 587. */
    private final void goto587() {
        switch (reduceNonTerminal) {
            case 71:
                // OptSvgFile
                doGoto(588);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 588. */
    private final void goto588() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 589. */
    private final void goto589() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 590. */
    private final void goto590() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 591. */
    private final void goto591() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(592);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 592. */
    private final void goto592() {
        switch (reduceNonTerminal) {
            case 80:
                // OptSvgInEventElifs
                doGoto(594);
                return;

            case 81:
                // SvgInEventElifs
                doGoto(595);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 593. */
    private final void goto593() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(604);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 594. */
    private final void goto594() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 595. */
    private final void goto595() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 596. */
    private final void goto596() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(598);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 597. */
    private final void goto597() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 598. */
    private final void goto598() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 599. */
    private final void goto599() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(600);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 600. */
    private final void goto600() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 601. */
    private final void goto601() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(602);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 602. */
    private final void goto602() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 603. */
    private final void goto603() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 604. */
    private final void goto604() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 605. */
    private final void goto605() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 111:
                // Name
                doGoto(606);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 606. */
    private final void goto606() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 607. */
    private final void goto607() {
        switch (reduceNonTerminal) {
            case 71:
                // OptSvgFile
                doGoto(608);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 608. */
    private final void goto608() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 609. */
    private final void goto609() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 610. */
    private final void goto610() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 611. */
    private final void goto611() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 612. */
    private final void goto612() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(613);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 613. */
    private final void goto613() {
        switch (reduceNonTerminal) {
            case 73:
                // OptSvgCopyPre
                doGoto(615);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 614. */
    private final void goto614() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(621);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 615. */
    private final void goto615() {
        switch (reduceNonTerminal) {
            case 74:
                // OptSvgCopyPost
                doGoto(617);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 616. */
    private final void goto616() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(620);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 617. */
    private final void goto617() {
        switch (reduceNonTerminal) {
            case 71:
                // OptSvgFile
                doGoto(618);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 618. */
    private final void goto618() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 619. */
    private final void goto619() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 620. */
    private final void goto620() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 621. */
    private final void goto621() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 622. */
    private final void goto622() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 623. */
    private final void goto623() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 624. */
    private final void goto624() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(655);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 625. */
    private final void goto625() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(652);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 626. */
    private final void goto626() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 627. */
    private final void goto627() {
        switch (reduceNonTerminal) {
            case 85:
                // OptPrintFors
                doGoto(629);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 628. */
    private final void goto628() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 86:
                // PrintFors
                doGoto(649);
                return;

            case 87:
                // PrintFor
                doGoto(648);
                return;

            case 111:
                // Name
                doGoto(647);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 629. */
    private final void goto629() {
        switch (reduceNonTerminal) {
            case 88:
                // OptPrintWhen
                doGoto(631);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 630. */
    private final void goto630() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(638);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 631. */
    private final void goto631() {
        switch (reduceNonTerminal) {
            case 89:
                // OptPrintFile
                doGoto(633);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 632. */
    private final void goto632() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(635);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 633. */
    private final void goto633() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 634. */
    private final void goto634() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 635. */
    private final void goto635() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 636. */
    private final void goto636() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(642);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 637. */
    private final void goto637() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(639);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 638. */
    private final void goto638() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 639. */
    private final void goto639() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 640. */
    private final void goto640() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(641);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 641. */
    private final void goto641() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 642. */
    private final void goto642() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 643. */
    private final void goto643() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 644. */
    private final void goto644() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 645. */
    private final void goto645() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 646. */
    private final void goto646() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 647. */
    private final void goto647() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 648. */
    private final void goto648() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 649. */
    private final void goto649() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 650. */
    private final void goto650() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 87:
                // PrintFor
                doGoto(651);
                return;

            case 111:
                // Name
                doGoto(647);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 651. */
    private final void goto651() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 652. */
    private final void goto652() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 653. */
    private final void goto653() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(654);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 654. */
    private final void goto654() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 655. */
    private final void goto655() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 656. */
    private final void goto656() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 657. */
    private final void goto657() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 658. */
    private final void goto658() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 659. */
    private final void goto659() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 660. */
    private final void goto660() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 661. */
    private final void goto661() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 662. */
    private final void goto662() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 663. */
    private final void goto663() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 664. */
    private final void goto664() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 665. */
    private final void goto665() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 666. */
    private final void goto666() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(668);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 667. */
    private final void goto667() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 668. */
    private final void goto668() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 669. */
    private final void goto669() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(674);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 670. */
    private final void goto670() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 671. */
    private final void goto671() {
        switch (reduceNonTerminal) {
            case 3:
                // GroupBody
                doGoto(672);
                return;

            case 5:
                // OptGroupDecls
                doGoto(2);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 672. */
    private final void goto672() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 673. */
    private final void goto673() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 674. */
    private final void goto674() {
        switch (reduceNonTerminal) {
            case 37:
                // CompDefParms
                doGoto(675);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 675. */
    private final void goto675() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 676. */
    private final void goto676() {
        switch (reduceNonTerminal) {
            case 3:
                // GroupBody
                doGoto(677);
                return;

            case 5:
                // OptGroupDecls
                doGoto(2);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 677. */
    private final void goto677() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 678. */
    private final void goto678() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 679. */
    private final void goto679() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(680);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 680. */
    private final void goto680() {
        switch (reduceNonTerminal) {
            case 16:
                // FuncParams
                doGoto(682);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 681. */
    private final void goto681() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 17:
                // FuncParamDecls
                doGoto(733);
                return;

            case 92:
                // Type
                doGoto(734);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 682. */
    private final void goto682() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 683. */
    private final void goto683() {
        switch (reduceNonTerminal) {
            case 12:
                // StringToken
                doGoto(686);
                return;

            case 18:
                // FuncBody
                doGoto(684);
                return;

            case 19:
                // FuncVarDecls
                doGoto(685);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 684. */
    private final void goto684() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 685. */
    private final void goto685() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 21:
                // FuncStatements
                doGoto(695);
                return;

            case 22:
                // FuncStatement
                doGoto(694);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 92:
                // Type
                doGoto(697);
                return;

            case 111:
                // Name
                doGoto(696);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 686. */
    private final void goto686() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 687. */
    private final void goto687() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 688. */
    private final void goto688() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 689. */
    private final void goto689() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 690. */
    private final void goto690() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(718);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 691. */
    private final void goto691() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(716);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 692. */
    private final void goto692() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(712);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 693. */
    private final void goto693() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 694. */
    private final void goto694() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 695. */
    private final void goto695() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 22:
                // FuncStatement
                doGoto(708);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 696. */
    private final void goto696() {
        switch (reduceNonTerminal) {
            case 60:
                // Projections
                doGoto(286);
                return;

            case 61:
                // Projection
                doGoto(285);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 697. */
    private final void goto697() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(699);
                return;

            case 20:
                // FuncVarDecl
                doGoto(698);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 698. */
    private final void goto698() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 699. */
    private final void goto699() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 700. */
    private final void goto700() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(701);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 701. */
    private final void goto701() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 702. */
    private final void goto702() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(704);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 703. */
    private final void goto703() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 704. */
    private final void goto704() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 705. */
    private final void goto705() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(706);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 706. */
    private final void goto706() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 707. */
    private final void goto707() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 708. */
    private final void goto708() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 709. */
    private final void goto709() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(710);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 710. */
    private final void goto710() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 711. */
    private final void goto711() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 712. */
    private final void goto712() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 713. */
    private final void goto713() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 21:
                // FuncStatements
                doGoto(714);
                return;

            case 22:
                // FuncStatement
                doGoto(694);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 714. */
    private final void goto714() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 22:
                // FuncStatement
                doGoto(708);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 715. */
    private final void goto715() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 716. */
    private final void goto716() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 717. */
    private final void goto717() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 718. */
    private final void goto718() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 719. */
    private final void goto719() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 21:
                // FuncStatements
                doGoto(720);
                return;

            case 22:
                // FuncStatement
                doGoto(694);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 720. */
    private final void goto720() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 22:
                // FuncStatement
                doGoto(708);
                return;

            case 23:
                // OptElifFuncStats
                doGoto(721);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 721. */
    private final void goto721() {
        switch (reduceNonTerminal) {
            case 24:
                // OptElseFuncStat
                doGoto(724);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 722. */
    private final void goto722() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 95:
                // Expressions
                doGoto(727);
                return;

            case 97:
                // Expression
                doGoto(132);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 723. */
    private final void goto723() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 21:
                // FuncStatements
                doGoto(726);
                return;

            case 22:
                // FuncStatement
                doGoto(694);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 724. */
    private final void goto724() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 725. */
    private final void goto725() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 726. */
    private final void goto726() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 22:
                // FuncStatement
                doGoto(708);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 727. */
    private final void goto727() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 728. */
    private final void goto728() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 21:
                // FuncStatements
                doGoto(729);
                return;

            case 22:
                // FuncStatement
                doGoto(694);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 729. */
    private final void goto729() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 22:
                // FuncStatement
                doGoto(708);
                return;

            case 58:
                // Addressables
                doGoto(693);
                return;

            case 59:
                // Addressable
                doGoto(294);
                return;

            case 111:
                // Name
                doGoto(279);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 730. */
    private final void goto730() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 731. */
    private final void goto731() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 732. */
    private final void goto732() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 733. */
    private final void goto733() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 734. */
    private final void goto734() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(735);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 735. */
    private final void goto735() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 736. */
    private final void goto736() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(134);
                return;

            case 92:
                // Type
                doGoto(738);
                return;

            case 111:
                // Name
                doGoto(333);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 737. */
    private final void goto737() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 738. */
    private final void goto738() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(739);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 739. */
    private final void goto739() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 740. */
    private final void goto740() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 741. */
    private final void goto741() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 742. */
    private final void goto742() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 743. */
    private final void goto743() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(335);
                return;

            case 64:
                // Identifiers
                doGoto(744);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 744. */
    private final void goto744() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 745. */
    private final void goto745() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 746. */
    private final void goto746() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 747. */
    private final void goto747() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 748. */
    private final void goto748() {
        switch (reduceNonTerminal) {
            case 48:
                // OptDerivative
                doGoto(751);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 749. */
    private final void goto749() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(754);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 750. */
    private final void goto750() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(752);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 751. */
    private final void goto751() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 752. */
    private final void goto752() {
        switch (reduceNonTerminal) {
            case 48:
                // OptDerivative
                doGoto(753);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 753. */
    private final void goto753() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 754. */
    private final void goto754() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 755. */
    private final void goto755() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(748);
                return;

            case 47:
                // ContDecl
                doGoto(757);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 756. */
    private final void goto756() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 757. */
    private final void goto757() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 758. */
    private final void goto758() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(760);
                return;

            case 14:
                // ConstantDefs
                doGoto(759);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 759. */
    private final void goto759() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 760. */
    private final void goto760() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 761. */
    private final void goto761() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(762);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 762. */
    private final void goto762() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 763. */
    private final void goto763() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(765);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 764. */
    private final void goto764() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 765. */
    private final void goto765() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 766. */
    private final void goto766() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(767);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 767. */
    private final void goto767() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 768. */
    private final void goto768() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(770);
                return;

            case 15:
                // AlgVarsDefs
                doGoto(769);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 769. */
    private final void goto769() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 770. */
    private final void goto770() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 771. */
    private final void goto771() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(772);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 772. */
    private final void goto772() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 773. */
    private final void goto773() {
        switch (reduceNonTerminal) {
            case 10:
                // Identifier
                doGoto(775);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 774. */
    private final void goto774() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 775. */
    private final void goto775() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 776. */
    private final void goto776() {
        switch (reduceNonTerminal) {
            case 1:
                // StdLibFunction
                doGoto(127);
                return;

            case 10:
                // Identifier
                doGoto(134);
                return;

            case 12:
                // StringToken
                doGoto(128);
                return;

            case 97:
                // Expression
                doGoto(777);
                return;

            case 98:
                // OrExpression
                doGoto(126);
                return;

            case 99:
                // AndExpression
                doGoto(115);
                return;

            case 100:
                // CompareExpression
                doGoto(116);
                return;

            case 101:
                // AddExpression
                doGoto(114);
                return;

            case 102:
                // MulExpression
                doGoto(123);
                return;

            case 103:
                // UnaryExpression
                doGoto(129);
                return;

            case 104:
                // FuncExpression
                doGoto(119);
                return;

            case 105:
                // ExpressionFactor
                doGoto(118);
                return;

            case 106:
                // NonEmptySetExpression
                doGoto(136);
                return;

            case 111:
                // Name
                doGoto(135);
                return;

            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    /** Parser goto code for parser state 777. */
    private final void goto777() {
        switch (reduceNonTerminal) {
            default:
                String msg = fmt("Unknown non-terminal %d (%s) for reduce " +
                                 "state %d.", reduceNonTerminal,
                                 NON_TERMINAL_NAMES[reduceNonTerminal],
                                 reduceState);
                throw new RuntimeException(msg);
        }
    }

    @Override
    protected final String getNonTerminalName(int nonTerminalId) {
        return NON_TERMINAL_NAMES[nonTerminalId];
    }

    /** See {@code Parser.firstTerminals}. */
    private static final class FirstTerminals {
        /** See {@code Parser.firstTerminals}. */
        private static final int[][] FIRST_TERMINALS = new int[][] {
            {0, 4, 8, 9, 11, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166, 170}, // state 0
            {}, // state 1
            {0, 4, 8, 9, 11, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166}, // state 2
            {170}, // state 3
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 4
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 5
            {162}, // state 6
            {}, // state 7
            {162}, // state 8
            {162}, // state 9
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 10
            {12, 162}, // state 11
            {165}, // state 12
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 13
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 14
            {159, 162}, // state 15
            {26, 34, 47, 48, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 16
            {165}, // state 17
            {33}, // state 18
            {165}, // state 19
            {33}, // state 20
            {33}, // state 21
            {33}, // state 22
            {162}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162}, // state 29
            {}, // state 30
            {}, // state 31
            {135}, // state 32
            {}, // state 33
            {}, // state 34
            {37, 166}, // state 35
            {25}, // state 36
            {4, 39}, // state 37
            {}, // state 38
            {}, // state 39
            {12, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 40
            {}, // state 41
            {}, // state 42
            {}, // state 43
            {}, // state 44
            {}, // state 45
            {162}, // state 46
            {}, // state 47
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 48
            {}, // state 49
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 50
            {}, // state 51
            {}, // state 52
            {}, // state 53
            {}, // state 54
            {}, // state 55
            {}, // state 56
            {}, // state 57
            {}, // state 58
            {}, // state 59
            {}, // state 60
            {}, // state 61
            {}, // state 62
            {}, // state 63
            {}, // state 64
            {}, // state 65
            {}, // state 66
            {}, // state 67
            {}, // state 68
            {}, // state 69
            {}, // state 70
            {}, // state 71
            {}, // state 72
            {}, // state 73
            {}, // state 74
            {}, // state 75
            {}, // state 76
            {}, // state 77
            {}, // state 78
            {}, // state 79
            {}, // state 80
            {}, // state 81
            {}, // state 82
            {}, // state 83
            {}, // state 84
            {}, // state 85
            {}, // state 86
            {}, // state 87
            {}, // state 88
            {}, // state 89
            {}, // state 90
            {}, // state 91
            {}, // state 92
            {}, // state 93
            {}, // state 94
            {}, // state 95
            {}, // state 96
            {}, // state 97
            {}, // state 98
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 99
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 138, 142, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 100
            {}, // state 101
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 102
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 103
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 104
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 105
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 106
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165}, // state 107
            {}, // state 108
            {}, // state 109
            {}, // state 110
            {}, // state 111
            {}, // state 112
            {}, // state 113
            {148, 149}, // state 114
            {124}, // state 115
            {126, 131, 142, 143, 144, 145, 146, 147}, // state 116
            {15}, // state 117
            {}, // state 118
            {155, 157}, // state 119
            {135}, // state 120
            {}, // state 121
            {133, 134}, // state 122
            {125, 127, 140, 141}, // state 123
            {45, 136}, // state 124
            {45}, // state 125
            {129, 150, 151}, // state 126
            {155}, // state 127
            {}, // state 128
            {}, // state 129
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165}, // state 130
            {}, // state 131
            {}, // state 132
            {133, 156}, // state 133
            {}, // state 134
            {136}, // state 135
            {}, // state 136
            {}, // state 137
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 138
            {}, // state 139
            {}, // state 140
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 141
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 142
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 143
            {129}, // state 144
            {129}, // state 145
            {124}, // state 146
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 147
            {126, 131, 142, 143, 144, 145, 146, 147}, // state 148
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 149
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 150
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 151
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 152
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 153
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 154
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 155
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 156
            {148, 149}, // state 157
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 158
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 159
            {125, 127, 140, 141}, // state 160
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 161
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 162
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 163
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 164
            {}, // state 165
            {}, // state 166
            {}, // state 167
            {}, // state 168
            {125, 127, 140, 141}, // state 169
            {148, 149}, // state 170
            {148, 149}, // state 171
            {148, 149}, // state 172
            {148, 149}, // state 173
            {148, 149}, // state 174
            {148, 149}, // state 175
            {148, 149}, // state 176
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 177
            {}, // state 178
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 179
            {}, // state 180
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 181
            {}, // state 182
            {135}, // state 183
            {}, // state 184
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 185
            {15}, // state 186
            {45, 136}, // state 187
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 188
            {}, // state 189
            {159, 160, 161, 162}, // state 190
            {}, // state 191
            {0, 1, 8, 9, 11, 16, 23, 24, 25, 26, 34, 36, 37, 39, 41, 42, 43, 49, 50, 53, 56, 57, 58, 59, 60, 61, 64, 66, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166}, // state 192
            {22}, // state 193
            {0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166}, // state 194
            {134, 159, 160, 161, 162}, // state 195
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 196
            {134, 159, 160, 161, 162}, // state 197
            {}, // state 198
            {}, // state 199
            {}, // state 200
            {41, 49, 50, 56, 57, 58, 59, 60, 166}, // state 201
            {37, 41, 166}, // state 202
            {39}, // state 203
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 204
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 205
            {133, 134}, // state 206
            {}, // state 207
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 208
            {134, 135, 162}, // state 209
            {155}, // state 210
            {}, // state 211
            {156, 159, 162}, // state 212
            {}, // state 213
            {144}, // state 214
            {144}, // state 215
            {}, // state 216
            {133, 156}, // state 217
            {159, 162}, // state 218
            {156}, // state 219
            {}, // state 220
            {}, // state 221
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 222
            {}, // state 223
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 224
            {}, // state 225
            {}, // state 226
            {19, 24, 36, 39, 42, 70, 75, 76, 77}, // state 227
            {134, 135}, // state 228
            {}, // state 229
            {19, 24, 36, 39, 42, 70, 75, 76, 77}, // state 230
            {18, 46, 62, 73, 159, 160, 161, 162}, // state 231
            {162}, // state 232
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 134, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 233
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 134, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 234
            {134}, // state 235
            {}, // state 236
            {}, // state 237
            {19, 24, 36, 39, 42, 70, 75, 76, 77}, // state 238
            {}, // state 239
            {}, // state 240
            {}, // state 241
            {133, 134}, // state 242
            {}, // state 243
            {}, // state 244
            {133, 134}, // state 245
            {}, // state 246
            {}, // state 247
            {133, 134}, // state 248
            {136, 144}, // state 249
            {144}, // state 250
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 251
            {}, // state 252
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 253
            {}, // state 254
            {162}, // state 255
            {}, // state 256
            {}, // state 257
            {34, 155, 159, 160, 161, 162}, // state 258
            {18}, // state 259
            {}, // state 260
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 261
            {31, 134}, // state 262
            {}, // state 263
            {18, 46, 73, 133}, // state 264
            {137, 138}, // state 265
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 266
            {}, // state 267
            {}, // state 268
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 269
            {62, 159, 160, 161, 162}, // state 270
            {18, 46}, // state 271
            {}, // state 272
            {18}, // state 273
            {34, 155, 159, 160, 161, 162}, // state 274
            {}, // state 275
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 276
            {155, 159, 160, 161, 162}, // state 277
            {132}, // state 278
            {157}, // state 279
            {}, // state 280
            {133}, // state 281
            {34, 155, 159, 160, 161, 162}, // state 282
            {}, // state 283
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 284
            {}, // state 285
            {157}, // state 286
            {}, // state 287
            {158}, // state 288
            {}, // state 289
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 290
            {}, // state 291
            {133}, // state 292
            {155, 159, 160, 161, 162}, // state 293
            {}, // state 294
            {133, 156}, // state 295
            {155, 159, 160, 161, 162}, // state 296
            {}, // state 297
            {}, // state 298
            {133, 135}, // state 299
            {34, 155, 159, 160, 161, 162}, // state 300
            {20, 21, 22, 133}, // state 301
            {20, 21, 22}, // state 302
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 303
            {34, 155, 159, 160, 161, 162}, // state 304
            {22}, // state 305
            {}, // state 306
            {133}, // state 307
            {133, 135}, // state 308
            {34, 155, 159, 160, 161, 162}, // state 309
            {133}, // state 310
            {}, // state 311
            {133}, // state 312
            {162}, // state 313
            {}, // state 314
            {134}, // state 315
            {}, // state 316
            {18, 46, 133}, // state 317
            {18}, // state 318
            {}, // state 319
            {}, // state 320
            {133}, // state 321
            {19, 24, 36, 39, 42, 70, 75, 76, 77}, // state 322
            {}, // state 323
            {155}, // state 324
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 325
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 326
            {157}, // state 327
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 157, 159, 160, 161, 162}, // state 328
            {}, // state 329
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 330
            {}, // state 331
            {155}, // state 332
            {}, // state 333
            {162}, // state 334
            {}, // state 335
            {133, 134}, // state 336
            {162}, // state 337
            {}, // state 338
            {}, // state 339
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 340
            {}, // state 341
            {134, 156}, // state 342
            {162}, // state 343
            {133}, // state 344
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 345
            {}, // state 346
            {}, // state 347
            {}, // state 348
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 349
            {}, // state 350
            {152, 158}, // state 351
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 352
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 353
            {}, // state 354
            {158}, // state 355
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 356
            {}, // state 357
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 358
            {152}, // state 359
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 360
            {158}, // state 361
            {}, // state 362
            {155}, // state 363
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 156, 159, 160, 161, 162}, // state 364
            {}, // state 365
            {}, // state 366
            {133, 156}, // state 367
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 368
            {}, // state 369
            {}, // state 370
            {}, // state 371
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 372
            {135}, // state 373
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 374
            {156}, // state 375
            {}, // state 376
            {}, // state 377
            {41, 166}, // state 378
            {49, 50, 56, 57, 58, 59, 60}, // state 379
            {}, // state 380
            {}, // state 381
            {133, 134}, // state 382
            {}, // state 383
            {159, 160, 161, 162}, // state 384
            {}, // state 385
            {}, // state 386
            {162}, // state 387
            {}, // state 388
            {133, 134}, // state 389
            {126, 144}, // state 390
            {2, 153}, // state 391
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 392
            {}, // state 393
            {}, // state 394
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 395
            {133, 154}, // state 396
            {}, // state 397
            {162}, // state 398
            {}, // state 399
            {}, // state 400
            {}, // state 401
            {133, 134}, // state 402
            {}, // state 403
            {}, // state 404
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165}, // state 405
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 135, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 406
            {158}, // state 407
            {135}, // state 408
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165}, // state 409
            {}, // state 410
            {158}, // state 411
            {}, // state 412
            {}, // state 413
            {}, // state 414
            {133, 156}, // state 415
            {}, // state 416
            {153, 159, 160, 161, 162}, // state 417
            {159, 160, 161, 162}, // state 418
            {}, // state 419
            {}, // state 420
            {}, // state 421
            {133, 154}, // state 422
            {159, 160, 161, 162}, // state 423
            {}, // state 424
            {}, // state 425
            {}, // state 426
            {133, 158}, // state 427
            {}, // state 428
            {133, 156}, // state 429
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 430
            {}, // state 431
            {133, 156}, // state 432
            {}, // state 433
            {}, // state 434
            {133, 154}, // state 435
            {135}, // state 436
            {133, 154}, // state 437
            {}, // state 438
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 439
            {}, // state 440
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 441
            {}, // state 442
            {135}, // state 443
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 444
            {}, // state 445
            {}, // state 446
            {}, // state 447
            {147}, // state 448
            {26, 34, 53, 61, 64, 66, 138, 142, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 449
            {}, // state 450
            {155, 157}, // state 451
            {}, // state 452
            {135}, // state 453
            {7, 21}, // state 454
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 455
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 456
            {22}, // state 457
            {7, 21}, // state 458
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 459
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 460
            {}, // state 461
            {135}, // state 462
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 463
            {}, // state 464
            {}, // state 465
            {}, // state 466
            {135}, // state 467
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 468
            {}, // state 469
            {133, 135}, // state 470
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 471
            {20, 21}, // state 472
            {20, 21}, // state 473
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 474
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 475
            {22}, // state 476
            {}, // state 477
            {133, 135}, // state 478
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 479
            {}, // state 480
            {155}, // state 481
            {0, 11, 25, 41, 69, 156, 159, 160, 161, 162}, // state 482
            {135}, // state 483
            {0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166}, // state 484
            {22}, // state 485
            {}, // state 486
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 487
            {162}, // state 488
            {}, // state 489
            {}, // state 490
            {134, 156}, // state 491
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162}, // state 492
            {162}, // state 493
            {25}, // state 494
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162}, // state 495
            {}, // state 496
            {}, // state 497
            {133}, // state 498
            {162}, // state 499
            {137, 138, 139}, // state 500
            {}, // state 501
            {137, 138, 139}, // state 502
            {}, // state 503
            {}, // state 504
            {}, // state 505
            {}, // state 506
            {133}, // state 507
            {137, 138, 139}, // state 508
            {162}, // state 509
            {}, // state 510
            {133}, // state 511
            {133}, // state 512
            {162}, // state 513
            {133}, // state 514
            {0, 11, 25, 41, 69, 159, 160, 161, 162}, // state 515
            {}, // state 516
            {}, // state 517
            {133}, // state 518
            {162}, // state 519
            {133}, // state 520
            {12, 162}, // state 521
            {162}, // state 522
            {135}, // state 523
            {0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166}, // state 524
            {22}, // state 525
            {}, // state 526
            {155}, // state 527
            {135}, // state 528
            {0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166}, // state 529
            {22}, // state 530
            {}, // state 531
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162}, // state 532
            {162}, // state 533
            {}, // state 534
            {133, 134}, // state 535
            {}, // state 536
            {133, 134}, // state 537
            {}, // state 538
            {159, 160, 161, 162}, // state 539
            {155}, // state 540
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165}, // state 541
            {134}, // state 542
            {}, // state 543
            {}, // state 544
            {133, 156}, // state 545
            {}, // state 546
            {162}, // state 547
            {133, 134}, // state 548
            {}, // state 549
            {133, 134}, // state 550
            {}, // state 551
            {144}, // state 552
            {133, 134}, // state 553
            {162}, // state 554
            {}, // state 555
            {144}, // state 556
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 557
            {}, // state 558
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 559
            {}, // state 560
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 561
            {3, 63}, // state 562
            {165}, // state 563
            {}, // state 564
            {71}, // state 565
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 566
            {27, 134}, // state 567
            {165}, // state 568
            {134}, // state 569
            {}, // state 570
            {}, // state 571
            {}, // state 572
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 573
            {65}, // state 574
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 575
            {133}, // state 576
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 577
            {27, 134}, // state 578
            {134}, // state 579
            {}, // state 580
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 581
            {18, 25}, // state 582
            {34, 155, 159, 160, 161, 162}, // state 583
            {34, 159, 160, 161, 162}, // state 584
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 585
            {}, // state 586
            {27, 134}, // state 587
            {134}, // state 588
            {}, // state 589
            {135}, // state 590
            {159, 160, 161, 162}, // state 591
            {20, 21}, // state 592
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 593
            {21}, // state 594
            {20, 22}, // state 595
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 596
            {}, // state 597
            {135}, // state 598
            {159, 160, 161, 162}, // state 599
            {}, // state 600
            {159, 160, 161, 162}, // state 601
            {22}, // state 602
            {}, // state 603
            {135}, // state 604
            {159, 160, 161, 162}, // state 605
            {}, // state 606
            {27, 133, 134}, // state 607
            {134}, // state 608
            {}, // state 609
            {134}, // state 610
            {}, // state 611
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 612
            {27, 47, 48, 134}, // state 613
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 614
            {27, 47, 134}, // state 615
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 616
            {27, 134}, // state 617
            {134}, // state 618
            {}, // state 619
            {}, // state 620
            {}, // state 621
            {134}, // state 622
            {}, // state 623
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 624
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 625
            {}, // state 626
            {27, 29, 73, 134}, // state 627
            {25, 28, 36, 64, 159, 160, 161, 162}, // state 628
            {27, 73, 134}, // state 629
            {26, 34, 47, 48, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 630
            {27, 134}, // state 631
            {165}, // state 632
            {134}, // state 633
            {}, // state 634
            {}, // state 635
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 636
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 637
            {}, // state 638
            {47}, // state 639
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 640
            {}, // state 641
            {}, // state 642
            {}, // state 643
            {}, // state 644
            {}, // state 645
            {}, // state 646
            {}, // state 647
            {}, // state 648
            {133}, // state 649
            {25, 28, 36, 64, 159, 160, 161, 162}, // state 650
            {}, // state 651
            {47}, // state 652
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 653
            {}, // state 654
            {}, // state 655
            {134}, // state 656
            {134}, // state 657
            {}, // state 658
            {}, // state 659
            {133, 134}, // state 660
            {}, // state 661
            {133, 134}, // state 662
            {}, // state 663
            {133, 134}, // state 664
            {}, // state 665
            {165}, // state 666
            {}, // state 667
            {}, // state 668
            {162}, // state 669
            {135}, // state 670
            {0, 4, 8, 9, 11, 22, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166}, // state 671
            {22}, // state 672
            {}, // state 673
            {155}, // state 674
            {135}, // state 675
            {0, 4, 8, 9, 11, 22, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166}, // state 676
            {22}, // state 677
            {}, // state 678
            {133, 162}, // state 679
            {155}, // state 680
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 156, 159, 160, 161, 162}, // state 681
            {135}, // state 682
            {5, 6, 10, 14, 17, 30, 34, 38, 40, 51, 52, 54, 55, 67, 74, 155, 159, 160, 161, 162, 165}, // state 683
            {}, // state 684
            {5, 6, 10, 14, 17, 30, 34, 38, 40, 51, 52, 54, 55, 67, 74, 155, 159, 160, 161, 162}, // state 685
            {134}, // state 686
            {}, // state 687
            {134}, // state 688
            {134}, // state 689
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 690
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 691
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 692
            {132, 133}, // state 693
            {}, // state 694
            {6, 10, 22, 34, 52, 74, 155, 159, 160, 161, 162}, // state 695
            {157}, // state 696
            {162}, // state 697
            {133, 134}, // state 698
            {144}, // state 699
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 700
            {}, // state 701
            {162}, // state 702
            {}, // state 703
            {144}, // state 704
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 705
            {}, // state 706
            {}, // state 707
            {}, // state 708
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 709
            {133, 134}, // state 710
            {}, // state 711
            {133, 135}, // state 712
            {6, 10, 34, 52, 74, 155, 159, 160, 161, 162}, // state 713
            {6, 10, 22, 34, 52, 74, 155, 159, 160, 161, 162}, // state 714
            {}, // state 715
            {133, 134}, // state 716
            {}, // state 717
            {133, 135}, // state 718
            {6, 10, 34, 52, 74, 155, 159, 160, 161, 162}, // state 719
            {6, 10, 20, 21, 22, 34, 52, 74, 155, 159, 160, 161, 162}, // state 720
            {20, 21, 22}, // state 721
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 722
            {6, 10, 34, 52, 74, 155, 159, 160, 161, 162}, // state 723
            {22}, // state 724
            {}, // state 725
            {6, 10, 34, 52, 74, 155, 159, 160, 161, 162}, // state 726
            {133, 135}, // state 727
            {6, 10, 34, 52, 74, 155, 159, 160, 161, 162}, // state 728
            {6, 10, 34, 52, 74, 155, 159, 160, 161, 162}, // state 729
            {}, // state 730
            {}, // state 731
            {}, // state 732
            {134, 156}, // state 733
            {162}, // state 734
            {133}, // state 735
            {5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 159, 160, 161, 162}, // state 736
            {}, // state 737
            {162}, // state 738
            {133}, // state 739
            {133, 134}, // state 740
            {}, // state 741
            {144}, // state 742
            {162}, // state 743
            {133, 134}, // state 744
            {}, // state 745
            {}, // state 746
            {133, 134}, // state 747
            {13, 144}, // state 748
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 749
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 750
            {}, // state 751
            {13}, // state 752
            {}, // state 753
            {}, // state 754
            {162}, // state 755
            {}, // state 756
            {}, // state 757
            {162}, // state 758
            {133, 134}, // state 759
            {144}, // state 760
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 761
            {}, // state 762
            {162}, // state 763
            {}, // state 764
            {144}, // state 765
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 766
            {}, // state 767
            {162}, // state 768
            {133, 134}, // state 769
            {144}, // state 770
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 771
            {}, // state 772
            {162}, // state 773
            {}, // state 774
            {144}, // state 775
            {26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165}, // state 776
            {}, // state 777
        };
    }

    /** See {@code Parser.firstTerminalsReduced}. */
    private static final class FirstTerminalsReduced {
        /** See {@code Parser.firstTerminalsReduced}. */
        private static final int[][][] FIRST_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {2, 170},
                {5, 0, 4, 8, 9, 11, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166},
            },
            {}, // state 1
            { // state 2
                {0, 12, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165},
                {10, 135},
                {112, 37, 166},
                {65, 4, 39},
                {66, 25},
                {67, 5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162},
            },
            {}, // state 3
            { // state 4
                {92, 162},
            },
            { // state 5
                {92, 162},
            },
            { // state 6
                {10, 13, 144},
                {46, 133, 134},
            },
            {}, // state 7
            { // state 8
                {10, 144},
            },
            { // state 9
                {10, 136, 144},
                {49, 133, 134},
            },
            { // state 10
                {90, 133, 162},
            },
            { // state 11
                {10, 135},
            },
            { // state 12
                {11, 133, 134},
            },
            { // state 13
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 14
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 15
            { // state 16
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {84, 27, 29, 73, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 17
                {12, 134},
            },
            {}, // state 18
            { // state 19
                {12, 134},
            },
            {}, // state 20
            {}, // state 21
            {}, // state 22
            { // state 23
                {10, 144},
                {13, 133, 134},
            },
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            { // state 29
                {64, 133, 134},
                {91, 162},
            },
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
            {}, // state 34
            {}, // state 35
            {}, // state 36
            {}, // state 37
            {}, // state 38
            {}, // state 39
            { // state 40
                {1, 155},
                {10, 135},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {106, 45},
                {111, 45, 136},
                {52, 133, 134},
                {97, 15},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 41
            {}, // state 42
            {}, // state 43
            {}, // state 44
            {}, // state 45
            { // state 46
                {10, 155},
            },
            {}, // state 47
            { // state 48
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 49
            { // state 50
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 51
            {}, // state 52
            {}, // state 53
            {}, // state 54
            {}, // state 55
            {}, // state 56
            {}, // state 57
            {}, // state 58
            {}, // state 59
            {}, // state 60
            {}, // state 61
            {}, // state 62
            {}, // state 63
            {}, // state 64
            {}, // state 65
            {}, // state 66
            {}, // state 67
            {}, // state 68
            {}, // state 69
            {}, // state 70
            {}, // state 71
            {}, // state 72
            {}, // state 73
            {}, // state 74
            {}, // state 75
            {}, // state 76
            {}, // state 77
            {}, // state 78
            {}, // state 79
            {}, // state 80
            {}, // state 81
            {}, // state 82
            {}, // state 83
            {}, // state 84
            {}, // state 85
            {}, // state 86
            {}, // state 87
            {}, // state 88
            {}, // state 89
            {}, // state 90
            {}, // state 91
            {}, // state 92
            {}, // state 93
            {}, // state 94
            {}, // state 95
            {}, // state 96
            {}, // state 97
            {}, // state 98
            { // state 99
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            { // state 100
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            {}, // state 101
            { // state 102
                {92, 147},
            },
            { // state 103
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            { // state 104
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            { // state 105
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {107, 133, 154},
                {111, 136},
                {95, 133, 154},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 106
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 133, 156},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 107
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 108
            {}, // state 109
            {}, // state 110
            {}, // state 111
            {}, // state 112
            {}, // state 113
            {}, // state 114
            {}, // state 115
            {}, // state 116
            {}, // state 117
            {}, // state 118
            {}, // state 119
            {}, // state 120
            {}, // state 121
            {}, // state 122
            {}, // state 123
            {}, // state 124
            {}, // state 125
            {}, // state 126
            {}, // state 127
            {}, // state 128
            {}, // state 129
            { // state 130
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 156},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 131
            {}, // state 132
            {}, // state 133
            {}, // state 134
            {}, // state 135
            {}, // state 136
            {}, // state 137
            { // state 138
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 139
            {}, // state 140
            { // state 141
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {99, 124},
            },
            { // state 142
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129},
                {99, 124},
            },
            { // state 143
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129},
                {99, 124},
            },
            {}, // state 144
            {}, // state 145
            {}, // state 146
            { // state 147
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            {}, // state 148
            { // state 149
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 150
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 151
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 152
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 153
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 154
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 155
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 156
                {1, 155},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            {}, // state 157
            { // state 158
                {1, 155},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            { // state 159
                {1, 155},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
            },
            {}, // state 160
            { // state 161
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            { // state 162
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            { // state 163
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            { // state 164
                {1, 155},
                {104, 155, 157},
                {111, 136},
            },
            {}, // state 165
            {}, // state 166
            {}, // state 167
            {}, // state 168
            {}, // state 169
            {}, // state 170
            {}, // state 171
            {}, // state 172
            {}, // state 173
            {}, // state 174
            {}, // state 175
            {}, // state 176
            { // state 177
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 178
            { // state 179
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 180
            { // state 181
                {1, 155},
                {10, 135},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {106, 45},
                {111, 45, 136},
                {97, 15},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 182
            {}, // state 183
            {}, // state 184
            { // state 185
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 45, 136},
                {97, 15},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 186
            {}, // state 187
            { // state 188
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 189
            {}, // state 190
            {}, // state 191
            { // state 192
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 45, 136},
                {4, 22},
                {7, 0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166},
                {97, 15},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 193
            { // state 194
                {0, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165},
                {112, 37, 41, 166},
                {32, 41, 49, 50, 56, 57, 58, 59, 60, 166},
                {65, 39},
                {66, 25},
                {67, 5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162},
            },
            { // state 195
                {25, 133, 134},
            },
            { // state 196
                {92, 162},
            },
            { // state 197
                {25, 133, 134},
            },
            {}, // state 198
            {}, // state 199
            {}, // state 200
            { // state 201
                {112, 41, 166},
                {68, 49, 50, 56, 57, 58, 59, 60},
            },
            {}, // state 202
            {}, // state 203
            { // state 204
                {1, 155},
                {10, 135},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {106, 45},
                {111, 45, 136},
                {52, 133, 134},
                {97, 15},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 205
                {1, 155},
                {10, 135},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {106, 45},
                {111, 45, 136},
                {52, 133, 134},
                {97, 15},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 206
            {}, // state 207
            { // state 208
                {92, 162},
            },
            { // state 209
                {10, 134, 135},
            },
            {}, // state 210
            {}, // state 211
            { // state 212
                {114, 133, 156},
            },
            {}, // state 213
            {}, // state 214
            {}, // state 215
            {}, // state 216
            { // state 217
                {116, 156},
            },
            {}, // state 218
            {}, // state 219
            {}, // state 220
            {}, // state 221
            { // state 222
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 223
            { // state 224
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 225
            {}, // state 226
            { // state 227
                {0, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165},
                {34, 19, 24, 36, 39, 42, 70, 75, 76, 77},
                {65, 39},
            },
            {}, // state 228
            {}, // state 229
            { // state 230
                {0, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165},
                {34, 19, 24, 36, 39, 42, 70, 75, 76, 77},
                {65, 39},
            },
            { // state 231
                {111, 137, 138},
                {26, 31, 134},
                {30, 18, 46, 73, 133},
            },
            { // state 232
                {10, 136, 144},
                {49, 133, 134},
            },
            { // state 233
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 234
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 235
            {}, // state 236
            {}, // state 237
            { // state 238
                {0, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165},
                {65, 39},
            },
            {}, // state 239
            {}, // state 240
            {}, // state 241
            {}, // state 242
            {}, // state 243
            {}, // state 244
            {}, // state 245
            {}, // state 246
            {}, // state 247
            {}, // state 248
            {}, // state 249
            {}, // state 250
            { // state 251
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 252
            { // state 253
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 254
            { // state 255
                {10, 136, 144},
            },
            {}, // state 256
            {}, // state 257
            { // state 258
                {111, 157},
                {56, 133},
                {59, 132},
            },
            {}, // state 259
            {}, // state 260
            { // state 261
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 18, 46, 133},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 262
            {}, // state 263
            { // state 264
                {27, 18, 46},
            },
            {}, // state 265
            { // state 266
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 267
            {}, // state 268
            { // state 269
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 270
                {111, 137, 138},
            },
            { // state 271
                {28, 18},
            },
            {}, // state 272
            {}, // state 273
            { // state 274
                {111, 157},
                {56, 133},
                {59, 132},
            },
            {}, // state 275
            { // state 276
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 277
                {111, 157},
                {59, 133},
            },
            {}, // state 278
            { // state 279
                {60, 157},
            },
            {}, // state 280
            {}, // state 281
            { // state 282
                {111, 157},
                {59, 132},
            },
            {}, // state 283
            { // state 284
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 285
            {}, // state 286
            {}, // state 287
            {}, // state 288
            {}, // state 289
            { // state 290
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 291
            {}, // state 292
            { // state 293
                {111, 157},
                {58, 133, 156},
            },
            {}, // state 294
            {}, // state 295
            { // state 296
                {111, 157},
            },
            {}, // state 297
            {}, // state 298
            {}, // state 299
            { // state 300
                {111, 157},
                {56, 20, 21, 22, 133},
                {59, 132},
            },
            { // state 301
                {62, 20, 21, 22},
            },
            { // state 302
                {63, 22},
            },
            { // state 303
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 304
                {111, 157},
                {56, 133},
                {59, 132},
            },
            {}, // state 305
            {}, // state 306
            {}, // state 307
            {}, // state 308
            { // state 309
                {111, 157},
                {56, 133},
                {59, 132},
            },
            {}, // state 310
            {}, // state 311
            {}, // state 312
            { // state 313
                {10, 134},
            },
            {}, // state 314
            {}, // state 315
            {}, // state 316
            { // state 317
                {28, 18},
            },
            {}, // state 318
            {}, // state 319
            {}, // state 320
            {}, // state 321
            { // state 322
                {0, 26, 34, 53, 61, 64, 66, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 128, 130, 138, 142, 148, 149, 153, 155, 157, 159, 160, 161, 162, 163, 164, 165},
                {65, 39},
            },
            {}, // state 323
            {}, // state 324
            {}, // state 325
            { // state 326
                {92, 155},
            },
            {}, // state 327
            {}, // state 328
            {}, // state 329
            {}, // state 330
            {}, // state 331
            {}, // state 332
            {}, // state 333
            { // state 334
                {64, 133, 134},
            },
            {}, // state 335
            {}, // state 336
            {}, // state 337
            {}, // state 338
            {}, // state 339
            { // state 340
                {92, 162},
                {93, 134, 156},
            },
            {}, // state 341
            {}, // state 342
            { // state 343
                {64, 133},
            },
            {}, // state 344
            { // state 345
                {92, 162},
            },
            {}, // state 346
            {}, // state 347
            {}, // state 348
            { // state 349
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 152, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 350
            {}, // state 351
            { // state 352
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 353
            {}, // state 354
            {}, // state 355
            {}, // state 356
            {}, // state 357
            { // state 358
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 152},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 359
            { // state 360
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 361
            {}, // state 362
            {}, // state 363
            { // state 364
                {90, 133, 156},
            },
            {}, // state 365
            {}, // state 366
            {}, // state 367
            {}, // state 368
            {}, // state 369
            {}, // state 370
            {}, // state 371
            { // state 372
                {92, 135},
            },
            {}, // state 373
            { // state 374
                {92, 156},
            },
            {}, // state 375
            {}, // state 376
            {}, // state 377
            {}, // state 378
            {}, // state 379
            {}, // state 380
            {}, // state 381
            {}, // state 382
            {}, // state 383
            {}, // state 384
            {}, // state 385
            {}, // state 386
            { // state 387
                {10, 126, 144},
                {44, 133, 134},
            },
            {}, // state 388
            {}, // state 389
            {}, // state 390
            {}, // state 391
            { // state 392
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 393
            {}, // state 394
            { // state 395
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 154},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 396
            {}, // state 397
            { // state 398
                {10, 126, 144},
            },
            {}, // state 399
            {}, // state 400
            {}, // state 401
            {}, // state 402
            {}, // state 403
            {}, // state 404
            { // state 405
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 156},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 406
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {96, 135},
                {97, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 407
            {}, // state 408
            { // state 409
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {96, 158},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 410
            {}, // state 411
            {}, // state 412
            {}, // state 413
            {}, // state 414
            {}, // state 415
            {}, // state 416
            {}, // state 417
            { // state 418
                {55, 133, 154},
            },
            {}, // state 419
            {}, // state 420
            {}, // state 421
            {}, // state 422
            {}, // state 423
            {}, // state 424
            {}, // state 425
            {}, // state 426
            {}, // state 427
            {}, // state 428
            {}, // state 429
            { // state 430
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 156},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 431
            {}, // state 432
            {}, // state 433
            {}, // state 434
            {}, // state 435
            {}, // state 436
            {}, // state 437
            {}, // state 438
            { // state 439
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 440
            { // state 441
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 442
            {}, // state 443
            { // state 444
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 445
            {}, // state 446
            {}, // state 447
            {}, // state 448
            { // state 449
                {111, 136},
            },
            {}, // state 450
            {}, // state 451
            {}, // state 452
            {}, // state 453
            { // state 454
                {109, 22},
                {110, 7, 21},
            },
            { // state 455
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 456
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 457
            {}, // state 458
            { // state 459
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 460
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 461
            {}, // state 462
            { // state 463
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 464
            {}, // state 465
            {}, // state 466
            {}, // state 467
            { // state 468
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 469
            {}, // state 470
            { // state 471
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 20, 21},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 472
                {108, 20, 21},
            },
            {}, // state 473
            { // state 474
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 475
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 22},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 476
            {}, // state 477
            {}, // state 478
            { // state 479
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 480
            { // state 481
                {37, 135},
            },
            { // state 482
                {111, 162},
                {38, 134, 156},
                {66, 25},
                {67, 5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162},
            },
            {}, // state 483
            { // state 484
                {4, 22},
                {7, 0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166},
            },
            {}, // state 485
            {}, // state 486
            { // state 487
                {92, 162},
            },
            { // state 488
                {64, 133},
            },
            {}, // state 489
            {}, // state 490
            {}, // state 491
            { // state 492
                {10, 137, 138, 139},
                {40, 133},
                {91, 162},
            },
            { // state 493
                {64, 133},
            },
            {}, // state 494
            { // state 495
                {10, 137, 138, 139},
                {40, 133},
                {91, 162},
            },
            {}, // state 496
            {}, // state 497
            {}, // state 498
            { // state 499
                {10, 137, 138, 139},
                {40, 133},
            },
            { // state 500
                {42, 137, 138, 139},
            },
            {}, // state 501
            {}, // state 502
            {}, // state 503
            {}, // state 504
            {}, // state 505
            {}, // state 506
            {}, // state 507
            { // state 508
                {42, 137, 138, 139},
            },
            { // state 509
                {10, 137, 138, 139},
            },
            {}, // state 510
            {}, // state 511
            {}, // state 512
            { // state 513
                {10, 137, 138, 139},
                {40, 133},
            },
            {}, // state 514
            { // state 515
                {111, 162},
                {66, 25},
                {67, 5, 14, 17, 30, 38, 40, 51, 54, 55, 67, 72, 159, 160, 161, 162},
            },
            {}, // state 516
            {}, // state 517
            {}, // state 518
            { // state 519
                {64, 133},
            },
            {}, // state 520
            { // state 521
                {10, 135},
            },
            { // state 522
                {10, 155},
            },
            {}, // state 523
            { // state 524
                {4, 22},
                {7, 0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166},
            },
            {}, // state 525
            {}, // state 526
            { // state 527
                {37, 135},
            },
            {}, // state 528
            { // state 529
                {4, 22},
                {7, 0, 1, 8, 9, 11, 16, 23, 24, 25, 36, 37, 39, 41, 42, 43, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 166},
            },
            {}, // state 530
            {}, // state 531
            { // state 532
                {64, 133, 134},
                {91, 162},
            },
            { // state 533
                {64, 133, 134},
            },
            {}, // state 534
            {}, // state 535
            {}, // state 536
            {}, // state 537
            {}, // state 538
            { // state 539
                {111, 155},
            },
            { // state 540
                {36, 134},
            },
            { // state 541
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 156},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 542
            {}, // state 543
            {}, // state 544
            {}, // state 545
            {}, // state 546
            { // state 547
                {64, 133, 134},
            },
            {}, // state 548
            {}, // state 549
            {}, // state 550
            {}, // state 551
            {}, // state 552
            {}, // state 553
            { // state 554
                {10, 144},
            },
            {}, // state 555
            {}, // state 556
            {}, // state 557
            {}, // state 558
            {}, // state 559
            {}, // state 560
            { // state 561
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 3, 63},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 562
                {77, 71},
            },
            {}, // state 563
            {}, // state 564
            {}, // state 565
            { // state 566
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 27, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 567
                {71, 134},
            },
            {}, // state 568
            {}, // state 569
            {}, // state 570
            {}, // state 571
            {}, // state 572
            { // state 573
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 65},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 574
            { // state 575
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 133},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 576
            { // state 577
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 27, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 578
                {71, 134},
            },
            {}, // state 579
            {}, // state 580
            { // state 581
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 18, 25},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 582
            { // state 583
                {111, 157},
                {56, 27, 133, 134},
                {59, 132},
            },
            { // state 584
                {79, 27, 134},
            },
            { // state 585
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 586
            { // state 587
                {71, 134},
            },
            {}, // state 588
            {}, // state 589
            {}, // state 590
            { // state 591
                {111, 20, 21},
            },
            { // state 592
                {80, 21},
                {81, 20, 22},
            },
            { // state 593
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 594
            {}, // state 595
            { // state 596
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 597
            {}, // state 598
            {}, // state 599
            {}, // state 600
            { // state 601
                {111, 22},
            },
            {}, // state 602
            {}, // state 603
            {}, // state 604
            {}, // state 605
            {}, // state 606
            { // state 607
                {71, 134},
            },
            {}, // state 608
            {}, // state 609
            {}, // state 610
            {}, // state 611
            { // state 612
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 27, 47, 48, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 613
                {73, 27, 47, 134},
            },
            { // state 614
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 615
                {74, 27, 134},
            },
            { // state 616
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 617
                {71, 134},
            },
            {}, // state 618
            {}, // state 619
            {}, // state 620
            {}, // state 621
            {}, // state 622
            {}, // state 623
            { // state 624
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 625
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 47},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 626
            { // state 627
                {85, 27, 73, 134},
            },
            { // state 628
                {86, 133},
            },
            { // state 629
                {88, 27, 134},
            },
            { // state 630
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 631
                {89, 134},
            },
            {}, // state 632
            {}, // state 633
            {}, // state 634
            {}, // state 635
            { // state 636
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 637
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 47},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 638
            {}, // state 639
            { // state 640
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 641
            {}, // state 642
            {}, // state 643
            {}, // state 644
            {}, // state 645
            {}, // state 646
            {}, // state 647
            {}, // state 648
            {}, // state 649
            {}, // state 650
            {}, // state 651
            {}, // state 652
            { // state 653
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 654
            {}, // state 655
            {}, // state 656
            {}, // state 657
            {}, // state 658
            {}, // state 659
            {}, // state 660
            {}, // state 661
            {}, // state 662
            {}, // state 663
            {}, // state 664
            {}, // state 665
            {}, // state 666
            {}, // state 667
            {}, // state 668
            { // state 669
                {10, 155},
            },
            {}, // state 670
            { // state 671
                {3, 22},
                {5, 0, 4, 8, 9, 11, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166},
            },
            {}, // state 672
            {}, // state 673
            { // state 674
                {37, 135},
            },
            {}, // state 675
            { // state 676
                {3, 22},
                {5, 0, 4, 8, 9, 11, 23, 24, 25, 30, 32, 35, 36, 37, 39, 42, 44, 49, 50, 56, 57, 58, 59, 60, 68, 69, 75, 76, 77, 162, 166},
            },
            {}, // state 677
            {}, // state 678
            { // state 679
                {10, 155},
            },
            { // state 680
                {16, 135},
            },
            { // state 681
                {17, 134, 156},
                {92, 162},
            },
            {}, // state 682
            { // state 683
                {12, 134},
                {19, 5, 6, 10, 14, 17, 30, 34, 38, 40, 51, 52, 54, 55, 67, 74, 155, 159, 160, 161, 162},
            },
            {}, // state 684
            { // state 685
                {111, 157},
                {21, 6, 10, 22, 34, 52, 74, 155, 159, 160, 161, 162},
                {58, 132, 133},
                {92, 162},
            },
            {}, // state 686
            {}, // state 687
            {}, // state 688
            {}, // state 689
            { // state 690
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 691
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 692
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 693
            {}, // state 694
            { // state 695
                {111, 157},
                {58, 132, 133},
            },
            { // state 696
                {60, 157},
            },
            { // state 697
                {10, 144},
                {20, 133, 134},
            },
            {}, // state 698
            {}, // state 699
            { // state 700
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 701
            { // state 702
                {10, 144},
            },
            {}, // state 703
            {}, // state 704
            { // state 705
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 706
            {}, // state 707
            {}, // state 708
            { // state 709
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 134},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 710
            {}, // state 711
            {}, // state 712
            { // state 713
                {111, 157},
                {21, 6, 10, 22, 34, 52, 74, 155, 159, 160, 161, 162},
                {58, 132, 133},
            },
            { // state 714
                {111, 157},
                {58, 132, 133},
            },
            {}, // state 715
            {}, // state 716
            {}, // state 717
            {}, // state 718
            { // state 719
                {111, 157},
                {21, 6, 10, 20, 21, 22, 34, 52, 74, 155, 159, 160, 161, 162},
                {58, 132, 133},
            },
            { // state 720
                {111, 157},
                {23, 20, 21, 22},
                {58, 132, 133},
            },
            { // state 721
                {24, 22},
            },
            { // state 722
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {95, 133, 135},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 723
                {111, 157},
                {21, 6, 10, 34, 52, 74, 155, 159, 160, 161, 162},
                {58, 132, 133},
            },
            {}, // state 724
            {}, // state 725
            { // state 726
                {111, 157},
                {58, 132, 133},
            },
            {}, // state 727
            { // state 728
                {111, 157},
                {21, 6, 10, 34, 52, 74, 155, 159, 160, 161, 162},
                {58, 132, 133},
            },
            { // state 729
                {111, 157},
                {58, 132, 133},
            },
            {}, // state 730
            {}, // state 731
            {}, // state 732
            {}, // state 733
            { // state 734
                {64, 133},
            },
            {}, // state 735
            { // state 736
                {92, 162},
            },
            {}, // state 737
            { // state 738
                {64, 133},
            },
            {}, // state 739
            {}, // state 740
            {}, // state 741
            {}, // state 742
            { // state 743
                {64, 133, 134},
            },
            {}, // state 744
            {}, // state 745
            {}, // state 746
            {}, // state 747
            {}, // state 748
            { // state 749
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            { // state 750
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {97, 13},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 751
            {}, // state 752
            {}, // state 753
            {}, // state 754
            { // state 755
                {10, 13, 144},
            },
            {}, // state 756
            {}, // state 757
            { // state 758
                {10, 144},
                {14, 133, 134},
            },
            {}, // state 759
            {}, // state 760
            { // state 761
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 762
            { // state 763
                {10, 144},
            },
            {}, // state 764
            {}, // state 765
            { // state 766
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 767
            { // state 768
                {10, 144},
                {15, 133, 134},
            },
            {}, // state 769
            {}, // state 770
            { // state 771
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 772
            { // state 773
                {10, 144},
            },
            {}, // state 774
            {}, // state 775
            { // state 776
                {1, 155},
                {100, 126, 131, 142, 143, 144, 145, 146, 147},
                {101, 148, 149},
                {102, 125, 127, 140, 141},
                {104, 155, 157},
                {111, 136},
                {98, 129, 150, 151},
                {99, 124},
            },
            {}, // state 777
        };
    }

    /** See {@code Parser.reducibleNonTerminals}. */
    private static final class ReducibleNonTerminals {
        /** See {@code Parser.reducibleNonTerminals}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS = new int[][][] {
            { // state 0
                {2, 0},
                {3, 0},
                {5, 0},
            },
            { // state 1
                {2, 1},
            },
            { // state 2
                {112, 0},
                {3, 1},
                {65, 0},
                {66, 0},
            },
            {}, // state 3
            {}, // state 4
            {}, // state 5
            {}, // state 6
            { // state 7
                {67, 1},
            },
            {}, // state 8
            {}, // state 9
            {}, // state 10
            {}, // state 11
            {}, // state 12
            {}, // state 13
            {}, // state 14
            {}, // state 15
            {}, // state 16
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            { // state 24
                {67, 1},
            },
            { // state 25
                {0, 1},
            },
            { // state 26
                {0, 1},
            },
            { // state 27
                {0, 1},
            },
            { // state 28
                {10, 1},
            },
            { // state 29
                {66, 1},
            },
            { // state 30
                {6, 1},
            },
            { // state 31
                {5, 2},
            },
            {}, // state 32
            { // state 33
                {9, 1},
            },
            { // state 34
                {9, 1},
            },
            {}, // state 35
            {}, // state 36
            {}, // state 37
            { // state 38
                {69, 1},
            },
            { // state 39
                {69, 1},
            },
            { // state 40
                {65, 1},
            },
            { // state 41
                {69, 1},
            },
            { // state 42
                {69, 1},
            },
            { // state 43
                {69, 1},
            },
            { // state 44
                {69, 1},
            },
            { // state 45
                {69, 1},
            },
            {}, // state 46
            { // state 47
                {105, 1},
            },
            {}, // state 48
            { // state 49
                {105, 1},
            },
            {}, // state 50
            { // state 51
                {105, 1},
            },
            { // state 52
                {105, 1},
            },
            { // state 53
                {1, 1},
            },
            { // state 54
                {1, 1},
            },
            { // state 55
                {1, 1},
            },
            { // state 56
                {1, 1},
            },
            { // state 57
                {1, 1},
            },
            { // state 58
                {1, 1},
            },
            { // state 59
                {1, 1},
            },
            { // state 60
                {1, 1},
            },
            { // state 61
                {1, 1},
            },
            { // state 62
                {1, 1},
            },
            { // state 63
                {1, 1},
            },
            { // state 64
                {1, 1},
            },
            { // state 65
                {1, 1},
            },
            { // state 66
                {1, 1},
            },
            { // state 67
                {1, 1},
            },
            { // state 68
                {1, 1},
            },
            { // state 69
                {1, 1},
            },
            { // state 70
                {1, 1},
            },
            { // state 71
                {1, 1},
            },
            { // state 72
                {1, 1},
            },
            { // state 73
                {1, 1},
            },
            { // state 74
                {1, 1},
            },
            { // state 75
                {1, 1},
            },
            { // state 76
                {1, 1},
            },
            { // state 77
                {1, 1},
            },
            { // state 78
                {1, 1},
            },
            { // state 79
                {1, 1},
            },
            { // state 80
                {1, 1},
            },
            { // state 81
                {1, 1},
            },
            { // state 82
                {1, 1},
            },
            { // state 83
                {1, 1},
            },
            { // state 84
                {1, 1},
            },
            { // state 85
                {1, 1},
            },
            { // state 86
                {1, 1},
            },
            { // state 87
                {1, 1},
            },
            { // state 88
                {1, 1},
            },
            { // state 89
                {1, 1},
            },
            { // state 90
                {1, 1},
            },
            { // state 91
                {1, 1},
            },
            { // state 92
                {1, 1},
            },
            { // state 93
                {1, 1},
            },
            { // state 94
                {1, 1},
            },
            { // state 95
                {1, 1},
            },
            { // state 96
                {1, 1},
            },
            { // state 97
                {1, 1},
            },
            { // state 98
                {1, 1},
            },
            {}, // state 99
            {}, // state 100
            { // state 101
                {105, 1},
            },
            {}, // state 102
            {}, // state 103
            {}, // state 104
            {}, // state 105
            {}, // state 106
            {}, // state 107
            { // state 108
                {111, 1},
            },
            { // state 109
                {111, 1},
            },
            { // state 110
                {111, 1},
            },
            { // state 111
                {105, 1},
            },
            { // state 112
                {105, 1},
            },
            { // state 113
                {12, 1},
            },
            { // state 114
                {100, 1},
            },
            { // state 115
                {98, 1},
            },
            { // state 116
                {99, 1},
            },
            { // state 117
                {53, 1},
            },
            { // state 118
                {104, 1},
            },
            { // state 119
                {103, 1},
            },
            { // state 120
                {111, 1},
            },
            { // state 121
                {52, 1},
            },
            {}, // state 122
            { // state 123
                {101, 1},
            },
            { // state 124
                {105, 1},
            },
            { // state 125
                {105, 1},
            },
            { // state 126
                {97, 1},
            },
            {}, // state 127
            { // state 128
                {105, 1},
            },
            { // state 129
                {102, 1},
            },
            {}, // state 130
            { // state 131
                {104, 3},
            },
            { // state 132
                {95, 1},
            },
            {}, // state 133
            { // state 134
                {111, 1},
            },
            { // state 135
                {105, 1},
            },
            { // state 136
                {105, 1},
            },
            { // state 137
                {105, 2},
            },
            {}, // state 138
            { // state 139
                {104, 4},
            },
            { // state 140
                {95, 3},
            },
            {}, // state 141
            {}, // state 142
            {}, // state 143
            { // state 144
                {97, 3},
            },
            { // state 145
                {97, 3},
            },
            { // state 146
                {98, 3},
            },
            {}, // state 147
            { // state 148
                {99, 3},
            },
            {}, // state 149
            {}, // state 150
            {}, // state 151
            {}, // state 152
            {}, // state 153
            {}, // state 154
            {}, // state 155
            {}, // state 156
            { // state 157
                {100, 3},
            },
            {}, // state 158
            {}, // state 159
            { // state 160
                {101, 3},
            },
            {}, // state 161
            {}, // state 162
            {}, // state 163
            {}, // state 164
            { // state 165
                {102, 3},
            },
            { // state 166
                {102, 3},
            },
            { // state 167
                {102, 3},
            },
            { // state 168
                {102, 3},
            },
            { // state 169
                {101, 3},
            },
            { // state 170
                {100, 3},
            },
            { // state 171
                {100, 3},
            },
            { // state 172
                {100, 3},
            },
            { // state 173
                {100, 3},
            },
            { // state 174
                {100, 3},
            },
            { // state 175
                {100, 3},
            },
            { // state 176
                {100, 3},
            },
            {}, // state 177
            { // state 178
                {53, 3},
            },
            {}, // state 179
            { // state 180
                {53, 3},
            },
            {}, // state 181
            { // state 182
                {51, 3},
            },
            { // state 183
                {111, 1},
            },
            { // state 184
                {52, 3},
            },
            {}, // state 185
            { // state 186
                {53, 3},
            },
            { // state 187
                {105, 1},
            },
            {}, // state 188
            { // state 189
                {53, 5},
            },
            {}, // state 190
            { // state 191
                {53, 5},
            },
            { // state 192
                {7, 0},
            },
            {}, // state 193
            { // state 194
                {112, 0},
                {65, 0},
                {66, 0},
            },
            {}, // state 195
            {}, // state 196
            {}, // state 197
            { // state 198
                {7, 2},
            },
            { // state 199
                {8, 1},
            },
            { // state 200
                {32, 1},
            },
            { // state 201
                {112, 0},
                {4, 2},
                {68, 0},
            },
            {}, // state 202
            {}, // state 203
            { // state 204
                {65, 1},
            },
            {}, // state 205
            {}, // state 206
            { // state 207
                {51, 4},
            },
            {}, // state 208
            {}, // state 209
            { // state 210
                {113, 1},
            },
            { // state 211
                {112, 2},
            },
            {}, // state 212
            { // state 213
                {113, 3},
            },
            {}, // state 214
            {}, // state 215
            { // state 216
                {114, 1},
            },
            { // state 217
                {116, 0},
            },
            { // state 218
                {116, 1},
            },
            {}, // state 219
            { // state 220
                {113, 5},
            },
            { // state 221
                {114, 3},
            },
            {}, // state 222
            { // state 223
                {115, 3},
            },
            {}, // state 224
            { // state 225
                {115, 3},
            },
            { // state 226
                {33, 3},
            },
            { // state 227
                {65, 0},
            },
            {}, // state 228
            { // state 229
                {33, 4},
            },
            { // state 230
                {65, 0},
            },
            {}, // state 231
            {}, // state 232
            {}, // state 233
            {}, // state 234
            {}, // state 235
            { // state 236
                {35, 1},
            },
            { // state 237
                {34, 1},
            },
            { // state 238
                {33, 5},
                {65, 0},
            },
            { // state 239
                {34, 2},
            },
            { // state 240
                {35, 2},
            },
            { // state 241
                {35, 2},
            },
            {}, // state 242
            { // state 243
                {35, 3},
            },
            { // state 244
                {35, 2},
            },
            {}, // state 245
            { // state 246
                {35, 3},
            },
            { // state 247
                {49, 1},
            },
            {}, // state 248
            {}, // state 249
            {}, // state 250
            {}, // state 251
            { // state 252
                {50, 3},
            },
            {}, // state 253
            { // state 254
                {50, 4},
            },
            {}, // state 255
            { // state 256
                {35, 3},
            },
            { // state 257
                {49, 3},
            },
            {}, // state 258
            { // state 259
                {26, 1},
                {29, 0},
            },
            { // state 260
                {31, 1},
            },
            {}, // state 261
            {}, // state 262
            { // state 263
                {30, 1},
            },
            { // state 264
                {26, 1},
                {27, 0},
            },
            { // state 265
                {31, 1},
            },
            { // state 266
                {31, 2},
            },
            { // state 267
                {31, 2},
            },
            { // state 268
                {31, 3},
            },
            {}, // state 269
            {}, // state 270
            { // state 271
                {26, 2},
                {28, 0},
            },
            { // state 272
                {28, 1},
            },
            { // state 273
                {26, 3},
                {29, 0},
            },
            {}, // state 274
            { // state 275
                {26, 4},
            },
            {}, // state 276
            {}, // state 277
            {}, // state 278
            { // state 279
                {59, 1},
            },
            { // state 280
                {56, 1},
            },
            { // state 281
                {29, 2},
            },
            {}, // state 282
            { // state 283
                {56, 3},
            },
            {}, // state 284
            { // state 285
                {60, 1},
            },
            { // state 286
                {59, 2},
            },
            { // state 287
                {60, 2},
            },
            {}, // state 288
            { // state 289
                {61, 3},
            },
            {}, // state 290
            { // state 291
                {57, 3},
            },
            {}, // state 292
            {}, // state 293
            { // state 294
                {58, 1},
            },
            {}, // state 295
            {}, // state 296
            { // state 297
                {59, 5},
            },
            { // state 298
                {58, 3},
            },
            {}, // state 299
            {}, // state 300
            { // state 301
                {62, 0},
            },
            { // state 302
                {63, 0},
            },
            {}, // state 303
            {}, // state 304
            {}, // state 305
            { // state 306
                {57, 7},
            },
            { // state 307
                {63, 2},
            },
            {}, // state 308
            {}, // state 309
            { // state 310
                {62, 5},
            },
            { // state 311
                {30, 3},
            },
            { // state 312
                {27, 2},
            },
            {}, // state 313
            { // state 314
                {35, 3},
            },
            {}, // state 315
            { // state 316
                {35, 5},
            },
            { // state 317
                {26, 2},
                {28, 0},
            },
            { // state 318
                {26, 3},
                {29, 0},
            },
            { // state 319
                {26, 4},
            },
            { // state 320
                {26, 2},
            },
            { // state 321
                {26, 2},
            },
            { // state 322
                {33, 4},
                {65, 0},
            },
            { // state 323
                {92, 1},
            },
            {}, // state 324
            {}, // state 325
            {}, // state 326
            { // state 327
                {92, 1},
            },
            {}, // state 328
            { // state 329
                {92, 1},
            },
            {}, // state 330
            { // state 331
                {92, 1},
            },
            {}, // state 332
            { // state 333
                {92, 1},
            },
            {}, // state 334
            { // state 335
                {64, 1},
            },
            {}, // state 336
            {}, // state 337
            { // state 338
                {9, 5},
            },
            { // state 339
                {64, 3},
            },
            {}, // state 340
            { // state 341
                {93, 1},
            },
            {}, // state 342
            {}, // state 343
            { // state 344
                {94, 2},
            },
            {}, // state 345
            { // state 346
                {92, 4},
            },
            { // state 347
                {93, 3},
            },
            { // state 348
                {92, 2},
            },
            {}, // state 349
            { // state 350
                {92, 2},
            },
            {}, // state 351
            {}, // state 352
            {}, // state 353
            { // state 354
                {92, 5},
            },
            {}, // state 355
            {}, // state 356
            { // state 357
                {92, 7},
            },
            {}, // state 358
            {}, // state 359
            {}, // state 360
            {}, // state 361
            { // state 362
                {92, 6},
            },
            {}, // state 363
            {}, // state 364
            { // state 365
                {92, 4},
            },
            { // state 366
                {90, 1},
            },
            {}, // state 367
            {}, // state 368
            { // state 369
                {92, 5},
            },
            { // state 370
                {90, 3},
            },
            { // state 371
                {92, 2},
            },
            {}, // state 372
            {}, // state 373
            {}, // state 374
            {}, // state 375
            { // state 376
                {92, 6},
            },
            { // state 377
                {32, 2},
            },
            {}, // state 378
            { // state 379
                {4, 3},
            },
            { // state 380
                {68, 2},
            },
            { // state 381
                {8, 2},
            },
            {}, // state 382
            { // state 383
                {25, 1},
            },
            {}, // state 384
            { // state 385
                {8, 3},
            },
            { // state 386
                {25, 3},
            },
            {}, // state 387
            { // state 388
                {44, 1},
            },
            {}, // state 389
            { // state 390
                {45, 1},
            },
            {}, // state 391
            {}, // state 392
            { // state 393
                {45, 3},
            },
            { // state 394
                {45, 3},
            },
            {}, // state 395
            {}, // state 396
            { // state 397
                {45, 5},
            },
            {}, // state 398
            { // state 399
                {8, 4},
            },
            { // state 400
                {44, 3},
            },
            { // state 401
                {8, 2},
            },
            {}, // state 402
            { // state 403
                {8, 3},
            },
            { // state 404
                {6, 5},
            },
            {}, // state 405
            { // state 406
                {96, 0},
            },
            { // state 407
                {96, 1},
            },
            {}, // state 408
            { // state 409
                {96, 0},
            },
            { // state 410
                {96, 1},
            },
            {}, // state 411
            { // state 412
                {104, 6},
            },
            { // state 413
                {104, 4},
            },
            { // state 414
                {104, 3},
            },
            {}, // state 415
            { // state 416
                {104, 4},
            },
            {}, // state 417
            {}, // state 418
            { // state 419
                {53, 3},
            },
            { // state 420
                {53, 3},
            },
            { // state 421
                {55, 1},
            },
            {}, // state 422
            {}, // state 423
            { // state 424
                {54, 3},
            },
            { // state 425
                {55, 3},
            },
            { // state 426
                {105, 2},
            },
            {}, // state 427
            { // state 428
                {105, 3},
            },
            {}, // state 429
            {}, // state 430
            { // state 431
                {105, 3},
            },
            {}, // state 432
            { // state 433
                {105, 5},
            },
            { // state 434
                {105, 2},
            },
            {}, // state 435
            { // state 436
                {95, 1},
            },
            {}, // state 437
            { // state 438
                {106, 3},
            },
            {}, // state 439
            { // state 440
                {107, 3},
            },
            {}, // state 441
            { // state 442
                {105, 3},
            },
            {}, // state 443
            {}, // state 444
            { // state 445
                {107, 5},
            },
            { // state 446
                {103, 2},
            },
            { // state 447
                {103, 2},
            },
            {}, // state 448
            {}, // state 449
            { // state 450
                {105, 4},
            },
            { // state 451
                {103, 2},
            },
            { // state 452
                {103, 2},
            },
            {}, // state 453
            {}, // state 454
            {}, // state 455
            {}, // state 456
            {}, // state 457
            { // state 458
                {109, 1},
            },
            {}, // state 459
            {}, // state 460
            { // state 461
                {109, 3},
            },
            {}, // state 462
            {}, // state 463
            { // state 464
                {110, 5},
            },
            { // state 465
                {105, 5},
            },
            { // state 466
                {109, 2},
            },
            {}, // state 467
            {}, // state 468
            { // state 469
                {110, 4},
            },
            {}, // state 470
            {}, // state 471
            { // state 472
                {108, 0},
            },
            {}, // state 473
            {}, // state 474
            {}, // state 475
            {}, // state 476
            { // state 477
                {105, 8},
            },
            {}, // state 478
            {}, // state 479
            { // state 480
                {108, 5},
            },
            {}, // state 481
            { // state 482
                {66, 0},
            },
            {}, // state 483
            { // state 484
                {7, 0},
            },
            {}, // state 485
            { // state 486
                {6, 7},
            },
            {}, // state 487
            {}, // state 488
            { // state 489
                {37, 2},
            },
            { // state 490
                {38, 1},
            },
            {}, // state 491
            { // state 492
                {66, 1},
            },
            {}, // state 493
            {}, // state 494
            {}, // state 495
            { // state 496
                {91, 1},
            },
            { // state 497
                {40, 1},
            },
            { // state 498
                {39, 3},
            },
            {}, // state 499
            { // state 500
                {111, 1},
                {41, 1},
                {42, 0},
            },
            { // state 501
                {91, 1},
            },
            { // state 502
                {41, 2},
            },
            { // state 503
                {43, 1},
            },
            { // state 504
                {43, 1},
            },
            { // state 505
                {43, 1},
            },
            { // state 506
                {42, 2},
            },
            { // state 507
                {39, 4},
            },
            { // state 508
                {41, 1},
                {42, 0},
            },
            {}, // state 509
            { // state 510
                {40, 3},
            },
            { // state 511
                {39, 2},
            },
            { // state 512
                {39, 2},
            },
            {}, // state 513
            { // state 514
                {39, 3},
            },
            { // state 515
                {66, 0},
            },
            { // state 516
                {37, 3},
            },
            { // state 517
                {38, 3},
            },
            { // state 518
                {39, 2},
            },
            {}, // state 519
            { // state 520
                {39, 3},
            },
            {}, // state 521
            {}, // state 522
            {}, // state 523
            { // state 524
                {7, 0},
            },
            {}, // state 525
            { // state 526
                {6, 6},
            },
            {}, // state 527
            {}, // state 528
            { // state 529
                {7, 0},
            },
            {}, // state 530
            { // state 531
                {6, 8},
            },
            {}, // state 532
            {}, // state 533
            { // state 534
                {111, 1},
                {64, 1},
            },
            {}, // state 535
            { // state 536
                {9, 4},
            },
            {}, // state 537
            { // state 538
                {9, 5},
            },
            {}, // state 539
            {}, // state 540
            {}, // state 541
            {}, // state 542
            { // state 543
                {6, 5},
            },
            { // state 544
                {36, 2},
            },
            {}, // state 545
            { // state 546
                {36, 3},
            },
            {}, // state 547
            {}, // state 548
            { // state 549
                {9, 3},
            },
            {}, // state 550
            { // state 551
                {9, 4},
            },
            {}, // state 552
            {}, // state 553
            {}, // state 554
            { // state 555
                {9, 3},
            },
            {}, // state 556
            {}, // state 557
            { // state 558
                {13, 5},
            },
            {}, // state 559
            { // state 560
                {13, 3},
            },
            {}, // state 561
            {}, // state 562
            {}, // state 563
            { // state 564
                {77, 1},
            },
            {}, // state 565
            {}, // state 566
            { // state 567
                {71, 0},
            },
            {}, // state 568
            {}, // state 569
            { // state 570
                {76, 8},
            },
            { // state 571
                {71, 2},
            },
            { // state 572
                {77, 2},
            },
            {}, // state 573
            {}, // state 574
            {}, // state 575
            {}, // state 576
            {}, // state 577
            { // state 578
                {71, 0},
            },
            {}, // state 579
            { // state 580
                {75, 9},
            },
            {}, // state 581
            {}, // state 582
            {}, // state 583
            {}, // state 584
            {}, // state 585
            { // state 586
                {79, 1},
            },
            { // state 587
                {71, 0},
            },
            {}, // state 588
            { // state 589
                {78, 7},
            },
            {}, // state 590
            {}, // state 591
            { // state 592
                {80, 0},
            },
            {}, // state 593
            {}, // state 594
            { // state 595
                {80, 1},
            },
            {}, // state 596
            { // state 597
                {79, 6},
            },
            {}, // state 598
            {}, // state 599
            { // state 600
                {81, 5},
            },
            {}, // state 601
            {}, // state 602
            { // state 603
                {79, 8},
            },
            {}, // state 604
            {}, // state 605
            { // state 606
                {81, 4},
            },
            { // state 607
                {71, 0},
            },
            {}, // state 608
            { // state 609
                {78, 7},
            },
            {}, // state 610
            { // state 611
                {70, 3},
            },
            {}, // state 612
            { // state 613
                {73, 0},
            },
            {}, // state 614
            { // state 615
                {74, 0},
            },
            {}, // state 616
            { // state 617
                {71, 0},
            },
            {}, // state 618
            { // state 619
                {72, 7},
            },
            { // state 620
                {74, 2},
            },
            { // state 621
                {73, 2},
            },
            {}, // state 622
            { // state 623
                {82, 3},
            },
            {}, // state 624
            {}, // state 625
            { // state 626
                {84, 1},
            },
            { // state 627
                {85, 0},
            },
            {}, // state 628
            { // state 629
                {88, 0},
            },
            {}, // state 630
            { // state 631
                {89, 0},
            },
            {}, // state 632
            {}, // state 633
            { // state 634
                {83, 6},
            },
            { // state 635
                {89, 2},
            },
            {}, // state 636
            {}, // state 637
            { // state 638
                {88, 2},
            },
            { // state 639
                {88, 3},
            },
            {}, // state 640
            { // state 641
                {88, 5},
            },
            { // state 642
                {88, 3},
            },
            { // state 643
                {87, 1},
            },
            { // state 644
                {87, 1},
            },
            { // state 645
                {87, 1},
            },
            { // state 646
                {87, 1},
            },
            { // state 647
                {87, 1},
            },
            { // state 648
                {86, 1},
            },
            { // state 649
                {85, 2},
            },
            {}, // state 650
            { // state 651
                {86, 3},
            },
            { // state 652
                {84, 2},
            },
            {}, // state 653
            { // state 654
                {84, 4},
            },
            { // state 655
                {84, 2},
            },
            {}, // state 656
            {}, // state 657
            { // state 658
                {6, 3},
            },
            { // state 659
                {6, 3},
            },
            {}, // state 660
            { // state 661
                {9, 3},
            },
            {}, // state 662
            { // state 663
                {9, 3},
            },
            {}, // state 664
            { // state 665
                {11, 1},
            },
            {}, // state 666
            { // state 667
                {6, 3},
            },
            { // state 668
                {11, 3},
            },
            {}, // state 669
            {}, // state 670
            { // state 671
                {3, 0},
                {5, 0},
            },
            {}, // state 672
            { // state 673
                {6, 5},
            },
            {}, // state 674
            {}, // state 675
            { // state 676
                {3, 0},
                {5, 0},
            },
            {}, // state 677
            { // state 678
                {6, 7},
            },
            {}, // state 679
            {}, // state 680
            {}, // state 681
            {}, // state 682
            { // state 683
                {19, 0},
            },
            { // state 684
                {6, 6},
            },
            {}, // state 685
            {}, // state 686
            { // state 687
                {18, 2},
            },
            {}, // state 688
            {}, // state 689
            {}, // state 690
            {}, // state 691
            {}, // state 692
            {}, // state 693
            { // state 694
                {21, 1},
            },
            {}, // state 695
            { // state 696
                {59, 1},
                {92, 1},
            },
            {}, // state 697
            {}, // state 698
            { // state 699
                {20, 1},
            },
            {}, // state 700
            { // state 701
                {20, 3},
            },
            {}, // state 702
            { // state 703
                {19, 4},
            },
            { // state 704
                {20, 3},
            },
            {}, // state 705
            { // state 706
                {20, 5},
            },
            { // state 707
                {18, 3},
            },
            { // state 708
                {21, 2},
            },
            {}, // state 709
            {}, // state 710
            { // state 711
                {22, 4},
            },
            {}, // state 712
            {}, // state 713
            {}, // state 714
            { // state 715
                {22, 5},
            },
            {}, // state 716
            { // state 717
                {22, 3},
            },
            {}, // state 718
            {}, // state 719
            { // state 720
                {23, 0},
            },
            { // state 721
                {24, 0},
            },
            {}, // state 722
            {}, // state 723
            {}, // state 724
            { // state 725
                {22, 7},
            },
            { // state 726
                {24, 2},
            },
            {}, // state 727
            {}, // state 728
            { // state 729
                {23, 5},
            },
            { // state 730
                {22, 2},
            },
            { // state 731
                {22, 2},
            },
            { // state 732
                {16, 2},
            },
            {}, // state 733
            {}, // state 734
            { // state 735
                {17, 2},
            },
            {}, // state 736
            { // state 737
                {16, 3},
            },
            {}, // state 738
            { // state 739
                {17, 4},
            },
            {}, // state 740
            { // state 741
                {9, 3},
            },
            {}, // state 742
            {}, // state 743
            {}, // state 744
            { // state 745
                {9, 5},
            },
            { // state 746
                {46, 1},
            },
            {}, // state 747
            { // state 748
                {47, 1},
                {48, 0},
            },
            {}, // state 749
            {}, // state 750
            { // state 751
                {47, 2},
            },
            { // state 752
                {47, 3},
                {48, 0},
            },
            { // state 753
                {47, 4},
            },
            { // state 754
                {48, 2},
            },
            {}, // state 755
            { // state 756
                {9, 3},
            },
            { // state 757
                {46, 3},
            },
            {}, // state 758
            {}, // state 759
            {}, // state 760
            {}, // state 761
            { // state 762
                {14, 3},
            },
            {}, // state 763
            { // state 764
                {9, 4},
            },
            {}, // state 765
            {}, // state 766
            { // state 767
                {14, 5},
            },
            {}, // state 768
            {}, // state 769
            { // state 770
                {15, 1},
            },
            {}, // state 771
            { // state 772
                {15, 3},
            },
            {}, // state 773
            { // state 774
                {9, 4},
            },
            { // state 775
                {15, 3},
            },
            {}, // state 776
            { // state 777
                {15, 5},
            },
        };
    }

    /** See {@code Parser.reducibleNonTerminalsReduced}. */
    private static final class ReducibleNonTerminalsReduced {
        /** See {@code Parser.reducibleNonTerminalsReduced}. */
        private static final int[][][] REDUCIBLE_NON_TERMINALS_REDUCED = new int[][][] {
            { // state 0
                {3, 2, 0},
                {5, 3, 0},
            },
            {}, // state 1
            { // state 2
                {0, 65, 0},
                {51, 9, 0},
                {6, 5, 1},
                {67, 66, 0},
                {69, 9, 0},
                {70, 69, 0},
                {72, 69, 0},
                {75, 69, 0},
                {76, 69, 0},
                {78, 69, 0},
                {82, 69, 0},
                {83, 69, 0},
                {9, 6, 0},
            },
            {}, // state 3
            { // state 4
                {10, 111, 0},
                {111, 92, 0},
            },
            { // state 5
                {10, 111, 0},
                {111, 92, 0},
            },
            { // state 6
                {10, 47, 0},
                {47, 46, 0},
            },
            {}, // state 7
            {}, // state 8
            { // state 9
                {50, 49, 0},
            },
            { // state 10
                {10, 111, 0},
                {111, 92, 0},
                {92, 90, 0},
            },
            {}, // state 11
            { // state 12
                {12, 11, 0},
            },
            { // state 13
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 14
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 15
            { // state 16
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 84, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 17
            {}, // state 18
            {}, // state 19
            {}, // state 20
            {}, // state 21
            {}, // state 22
            {}, // state 23
            {}, // state 24
            {}, // state 25
            {}, // state 26
            {}, // state 27
            {}, // state 28
            { // state 29
                {10, 111, 0},
                {10, 64, 0},
                {111, 92, 0},
                {92, 91, 0},
            },
            {}, // state 30
            {}, // state 31
            {}, // state 32
            {}, // state 33
            {}, // state 34
            { // state 35
                {113, 112, 1},
            },
            {}, // state 36
            {}, // state 37
            {}, // state 38
            {}, // state 39
            { // state 40
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {53, 52, 0},
                {97, 53, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 41
            {}, // state 42
            {}, // state 43
            {}, // state 44
            {}, // state 45
            {}, // state 46
            {}, // state 47
            { // state 48
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 49
            { // state 50
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 51
            {}, // state 52
            {}, // state 53
            {}, // state 54
            {}, // state 55
            {}, // state 56
            {}, // state 57
            {}, // state 58
            {}, // state 59
            {}, // state 60
            {}, // state 61
            {}, // state 62
            {}, // state 63
            {}, // state 64
            {}, // state 65
            {}, // state 66
            {}, // state 67
            {}, // state 68
            {}, // state 69
            {}, // state 70
            {}, // state 71
            {}, // state 72
            {}, // state 73
            {}, // state 74
            {}, // state 75
            {}, // state 76
            {}, // state 77
            {}, // state 78
            {}, // state 79
            {}, // state 80
            {}, // state 81
            {}, // state 82
            {}, // state 83
            {}, // state 84
            {}, // state 85
            {}, // state 86
            {}, // state 87
            {}, // state 88
            {}, // state 89
            {}, // state 90
            {}, // state 91
            {}, // state 92
            {}, // state 93
            {}, // state 94
            {}, // state 95
            {}, // state 96
            {}, // state 97
            {}, // state 98
            { // state 99
                {10, 111, 0},
                {103, 103, 1},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 100
                {10, 111, 0},
                {104, 103, 1},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            {}, // state 101
            { // state 102
                {10, 111, 0},
                {111, 92, 0},
            },
            { // state 103
                {10, 111, 0},
                {103, 103, 1},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 104
                {10, 111, 0},
                {103, 103, 1},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 105
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 106
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 107
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 108
            {}, // state 109
            {}, // state 110
            {}, // state 111
            {}, // state 112
            {}, // state 113
            {}, // state 114
            {}, // state 115
            {}, // state 116
            {}, // state 117
            {}, // state 118
            {}, // state 119
            {}, // state 120
            {}, // state 121
            {}, // state 122
            {}, // state 123
            {}, // state 124
            {}, // state 125
            {}, // state 126
            {}, // state 127
            {}, // state 128
            {}, // state 129
            { // state 130
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 131
            {}, // state 132
            {}, // state 133
            {}, // state 134
            {}, // state 135
            {}, // state 136
            {}, // state 137
            { // state 138
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 139
            {}, // state 140
            { // state 141
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {99, 98, 2},
            },
            { // state 142
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 2},
                {99, 98, 0},
            },
            { // state 143
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 2},
                {99, 98, 0},
            },
            {}, // state 144
            {}, // state 145
            {}, // state 146
            { // state 147
                {10, 111, 0},
                {100, 99, 2},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            {}, // state 148
            { // state 149
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 150
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 151
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 152
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 153
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 154
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 155
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 156
                {10, 111, 0},
                {101, 100, 2},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            {}, // state 157
            { // state 158
                {10, 111, 0},
                {102, 101, 2},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 159
                {10, 111, 0},
                {102, 101, 2},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            {}, // state 160
            { // state 161
                {10, 111, 0},
                {103, 102, 2},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 162
                {10, 111, 0},
                {103, 102, 2},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 163
                {10, 111, 0},
                {103, 102, 2},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            { // state 164
                {10, 111, 0},
                {103, 102, 2},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            {}, // state 165
            {}, // state 166
            {}, // state 167
            {}, // state 168
            {}, // state 169
            {}, // state 170
            {}, // state 171
            {}, // state 172
            {}, // state 173
            {}, // state 174
            {}, // state 175
            {}, // state 176
            { // state 177
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 53, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 178
            { // state 179
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 53, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 180
            { // state 181
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {53, 52, 2},
                {97, 53, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 182
            {}, // state 183
            {}, // state 184
            { // state 185
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 53, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 186
            {}, // state 187
            { // state 188
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 53, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 189
            { // state 190
                {10, 111, 0},
                {111, 53, 4},
            },
            {}, // state 191
            { // state 192
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 53, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 193
            { // state 194
                {0, 65, 0},
                {32, 4, 1},
                {33, 32, 0},
                {51, 9, 0},
                {67, 66, 0},
                {69, 9, 0},
                {70, 69, 0},
                {72, 69, 0},
                {75, 69, 0},
                {76, 69, 0},
                {78, 69, 0},
                {8, 7, 1},
                {82, 69, 0},
                {83, 69, 0},
                {9, 8, 0},
            },
            { // state 195
                {10, 111, 0},
                {111, 25, 0},
            },
            { // state 196
                {10, 111, 0},
                {111, 92, 0},
            },
            { // state 197
                {10, 111, 0},
                {111, 25, 0},
            },
            {}, // state 198
            {}, // state 199
            {}, // state 200
            { // state 201
                {33, 32, 1},
                {68, 4, 2},
            },
            { // state 202
                {113, 112, 1},
            },
            {}, // state 203
            { // state 204
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {53, 52, 0},
                {97, 53, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 205
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {53, 52, 0},
                {97, 53, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 206
            {}, // state 207
            { // state 208
                {10, 111, 0},
                {111, 92, 0},
            },
            {}, // state 209
            {}, // state 210
            {}, // state 211
            { // state 212
                {115, 114, 0},
            },
            {}, // state 213
            {}, // state 214
            {}, // state 215
            {}, // state 216
            {}, // state 217
            { // state 218
                {115, 114, 2},
            },
            {}, // state 219
            {}, // state 220
            {}, // state 221
            { // state 222
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 115, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 223
            { // state 224
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 115, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 225
            {}, // state 226
            { // state 227
                {0, 65, 0},
                {34, 33, 3},
                {35, 34, 0},
                {51, 35, 0},
            },
            {}, // state 228
            {}, // state 229
            { // state 230
                {0, 65, 0},
                {34, 33, 4},
                {35, 34, 0},
                {51, 35, 0},
            },
            { // state 231
                {10, 111, 0},
                {111, 31, 0},
                {30, 26, 0},
                {31, 30, 0},
            },
            { // state 232
                {50, 49, 0},
            },
            { // state 233
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 234
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 235
            {}, // state 236
            {}, // state 237
            { // state 238
                {0, 65, 0},
                {35, 34, 1},
                {51, 35, 0},
            },
            {}, // state 239
            {}, // state 240
            {}, // state 241
            {}, // state 242
            {}, // state 243
            {}, // state 244
            {}, // state 245
            {}, // state 246
            {}, // state 247
            {}, // state 248
            {}, // state 249
            {}, // state 250
            { // state 251
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 50, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 252
            { // state 253
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 50, 3},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 254
            { // state 255
                {50, 49, 2},
            },
            {}, // state 256
            {}, // state 257
            { // state 258
                {10, 111, 0},
                {111, 59, 0},
                {56, 26, 1},
                {57, 56, 0},
            },
            { // state 259
                {29, 26, 1},
            },
            {}, // state 260
            { // state 261
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {95, 26, 1},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 262
            {}, // state 263
            { // state 264
                {27, 26, 1},
            },
            {}, // state 265
            { // state 266
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 31, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 267
            {}, // state 268
            { // state 269
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {95, 27, 1},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 270
                {10, 111, 0},
                {111, 31, 0},
                {31, 30, 2},
            },
            { // state 271
                {28, 26, 2},
            },
            {}, // state 272
            { // state 273
                {29, 26, 3},
            },
            { // state 274
                {10, 111, 0},
                {111, 59, 0},
                {56, 29, 1},
                {57, 56, 0},
            },
            {}, // state 275
            { // state 276
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 277
                {10, 111, 0},
                {111, 59, 0},
            },
            {}, // state 278
            { // state 279
                {60, 59, 1},
                {61, 60, 0},
            },
            {}, // state 280
            {}, // state 281
            { // state 282
                {10, 111, 0},
                {111, 59, 0},
                {57, 56, 2},
            },
            {}, // state 283
            { // state 284
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 285
            { // state 286
                {61, 60, 1},
            },
            {}, // state 287
            {}, // state 288
            {}, // state 289
            { // state 290
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 57, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 291
            {}, // state 292
            { // state 293
                {10, 111, 0},
                {111, 59, 0},
                {59, 58, 0},
            },
            {}, // state 294
            {}, // state 295
            { // state 296
                {10, 111, 0},
                {111, 59, 0},
                {59, 58, 2},
            },
            {}, // state 297
            {}, // state 298
            {}, // state 299
            { // state 300
                {10, 111, 0},
                {111, 59, 0},
                {57, 56, 0},
            },
            {}, // state 301
            {}, // state 302
            { // state 303
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 304
                {10, 111, 0},
                {111, 59, 0},
                {56, 63, 1},
                {57, 56, 0},
            },
            {}, // state 305
            {}, // state 306
            {}, // state 307
            {}, // state 308
            { // state 309
                {10, 111, 0},
                {111, 59, 0},
                {56, 62, 4},
                {57, 56, 0},
            },
            {}, // state 310
            {}, // state 311
            {}, // state 312
            {}, // state 313
            {}, // state 314
            {}, // state 315
            {}, // state 316
            { // state 317
                {28, 26, 2},
            },
            { // state 318
                {29, 26, 3},
            },
            {}, // state 319
            {}, // state 320
            {}, // state 321
            { // state 322
                {0, 65, 0},
                {35, 34, 1},
                {51, 35, 0},
            },
            {}, // state 323
            {}, // state 324
            { // state 325
                {10, 111, 0},
                {111, 92, 0},
                {92, 92, 1},
            },
            { // state 326
                {10, 111, 0},
                {111, 92, 0},
            },
            {}, // state 327
            { // state 328
                {10, 111, 0},
                {111, 92, 0},
                {92, 92, 1},
            },
            {}, // state 329
            { // state 330
                {10, 111, 0},
                {111, 92, 0},
                {92, 92, 1},
            },
            {}, // state 331
            {}, // state 332
            {}, // state 333
            { // state 334
                {10, 64, 0},
            },
            {}, // state 335
            {}, // state 336
            { // state 337
                {10, 64, 2},
            },
            {}, // state 338
            {}, // state 339
            { // state 340
                {10, 111, 0},
                {111, 92, 0},
                {94, 93, 0},
            },
            {}, // state 341
            {}, // state 342
            { // state 343
                {10, 64, 0},
                {64, 94, 1},
            },
            {}, // state 344
            { // state 345
                {10, 111, 0},
                {111, 92, 0},
                {94, 93, 2},
            },
            {}, // state 346
            {}, // state 347
            {}, // state 348
            { // state 349
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 350
            {}, // state 351
            { // state 352
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 353
                {10, 111, 0},
                {111, 92, 0},
                {92, 92, 4},
            },
            {}, // state 354
            {}, // state 355
            { // state 356
                {10, 111, 0},
                {111, 92, 0},
                {92, 92, 6},
            },
            {}, // state 357
            { // state 358
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 359
            { // state 360
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 361
            {}, // state 362
            {}, // state 363
            { // state 364
                {10, 111, 0},
                {111, 92, 0},
                {92, 90, 0},
            },
            {}, // state 365
            {}, // state 366
            {}, // state 367
            { // state 368
                {10, 111, 0},
                {111, 92, 0},
                {92, 90, 2},
            },
            {}, // state 369
            {}, // state 370
            {}, // state 371
            { // state 372
                {10, 111, 0},
                {111, 92, 0},
            },
            {}, // state 373
            { // state 374
                {10, 111, 0},
                {111, 92, 0},
            },
            {}, // state 375
            {}, // state 376
            {}, // state 377
            { // state 378
                {113, 112, 1},
            },
            { // state 379
                {69, 68, 1},
                {70, 69, 0},
                {72, 69, 0},
                {75, 69, 0},
                {76, 69, 0},
                {78, 69, 0},
                {82, 69, 0},
                {83, 69, 0},
            },
            {}, // state 380
            {}, // state 381
            {}, // state 382
            {}, // state 383
            { // state 384
                {10, 111, 0},
                {111, 25, 2},
            },
            {}, // state 385
            {}, // state 386
            { // state 387
                {10, 45, 0},
                {45, 44, 0},
            },
            {}, // state 388
            {}, // state 389
            {}, // state 390
            {}, // state 391
            { // state 392
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 45, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 393
            {}, // state 394
            { // state 395
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 396
            {}, // state 397
            { // state 398
                {10, 45, 0},
                {45, 44, 2},
            },
            {}, // state 399
            {}, // state 400
            {}, // state 401
            {}, // state 402
            {}, // state 403
            {}, // state 404
            { // state 405
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 406
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 96, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 407
            {}, // state 408
            { // state 409
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 96, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 410
            {}, // state 411
            {}, // state 412
            {}, // state 413
            {}, // state 414
            {}, // state 415
            {}, // state 416
            { // state 417
                {10, 111, 0},
                {111, 53, 2},
                {54, 53, 2},
            },
            { // state 418
                {10, 111, 0},
                {111, 55, 0},
            },
            {}, // state 419
            {}, // state 420
            {}, // state 421
            {}, // state 422
            { // state 423
                {10, 111, 0},
                {111, 55, 2},
            },
            {}, // state 424
            {}, // state 425
            {}, // state 426
            {}, // state 427
            {}, // state 428
            {}, // state 429
            { // state 430
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 431
            {}, // state 432
            {}, // state 433
            {}, // state 434
            {}, // state 435
            {}, // state 436
            {}, // state 437
            {}, // state 438
            { // state 439
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 107, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 440
            { // state 441
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 442
            {}, // state 443
            { // state 444
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 107, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 445
            {}, // state 446
            {}, // state 447
            {}, // state 448
            { // state 449
                {10, 111, 0},
                {105, 105, 3},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
            },
            {}, // state 450
            {}, // state 451
            {}, // state 452
            {}, // state 453
            { // state 454
                {110, 109, 0},
            },
            { // state 455
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 456
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 109, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 457
            {}, // state 458
            { // state 459
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 460
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 109, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 461
            {}, // state 462
            { // state 463
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 110, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 464
            {}, // state 465
            {}, // state 466
            {}, // state 467
            { // state 468
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 110, 3},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 469
            {}, // state 470
            { // state 471
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 472
            {}, // state 473
            { // state 474
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 475
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 476
            {}, // state 477
            {}, // state 478
            { // state 479
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 108, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 480
            {}, // state 481
            { // state 482
                {10, 111, 0},
                {39, 38, 0},
                {67, 66, 0},
            },
            {}, // state 483
            {}, // state 484
            {}, // state 485
            {}, // state 486
            { // state 487
                {10, 111, 0},
                {111, 92, 0},
            },
            { // state 488
                {10, 64, 0},
                {64, 39, 1},
            },
            {}, // state 489
            {}, // state 490
            {}, // state 491
            { // state 492
                {10, 111, 0},
                {10, 41, 0},
                {111, 92, 0},
                {40, 39, 1},
                {41, 40, 0},
                {92, 91, 0},
            },
            { // state 493
                {10, 64, 0},
                {64, 39, 1},
            },
            {}, // state 494
            { // state 495
                {10, 111, 0},
                {10, 41, 0},
                {111, 92, 0},
                {40, 39, 2},
                {41, 40, 0},
                {92, 91, 0},
            },
            {}, // state 496
            {}, // state 497
            {}, // state 498
            { // state 499
                {10, 41, 0},
                {40, 39, 3},
                {41, 40, 0},
            },
            { // state 500
                {42, 41, 1},
            },
            {}, // state 501
            { // state 502
                {43, 42, 1},
            },
            {}, // state 503
            {}, // state 504
            {}, // state 505
            {}, // state 506
            {}, // state 507
            { // state 508
                {42, 41, 1},
            },
            { // state 509
                {10, 41, 0},
                {41, 40, 2},
            },
            {}, // state 510
            {}, // state 511
            {}, // state 512
            { // state 513
                {10, 41, 0},
                {40, 39, 2},
                {41, 40, 0},
            },
            {}, // state 514
            { // state 515
                {10, 111, 0},
                {39, 38, 2},
                {67, 66, 0},
            },
            {}, // state 516
            {}, // state 517
            {}, // state 518
            { // state 519
                {10, 64, 0},
                {64, 39, 2},
            },
            {}, // state 520
            {}, // state 521
            {}, // state 522
            {}, // state 523
            {}, // state 524
            {}, // state 525
            {}, // state 526
            {}, // state 527
            {}, // state 528
            {}, // state 529
            {}, // state 530
            {}, // state 531
            { // state 532
                {10, 111, 0},
                {10, 64, 0},
                {111, 92, 0},
                {92, 91, 0},
            },
            { // state 533
                {10, 64, 0},
            },
            {}, // state 534
            {}, // state 535
            {}, // state 536
            {}, // state 537
            {}, // state 538
            { // state 539
                {10, 111, 0},
            },
            {}, // state 540
            { // state 541
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 542
            {}, // state 543
            {}, // state 544
            {}, // state 545
            {}, // state 546
            { // state 547
                {10, 64, 0},
            },
            {}, // state 548
            {}, // state 549
            {}, // state 550
            {}, // state 551
            {}, // state 552
            {}, // state 553
            {}, // state 554
            {}, // state 555
            {}, // state 556
            { // state 557
                {10, 111, 0},
                {111, 92, 0},
                {92, 13, 4},
            },
            {}, // state 558
            { // state 559
                {10, 111, 0},
                {111, 92, 0},
                {92, 13, 2},
            },
            {}, // state 560
            { // state 561
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 562
            { // state 563
                {12, 77, 1},
            },
            {}, // state 564
            {}, // state 565
            { // state 566
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 567
            { // state 568
                {12, 71, 1},
            },
            {}, // state 569
            {}, // state 570
            {}, // state 571
            {}, // state 572
            { // state 573
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 574
            { // state 575
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 576
            { // state 577
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 578
            {}, // state 579
            {}, // state 580
            { // state 581
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 582
            { // state 583
                {10, 111, 0},
                {111, 59, 0},
                {57, 56, 0},
            },
            { // state 584
                {10, 111, 0},
                {111, 79, 0},
            },
            { // state 585
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 586
            {}, // state 587
            {}, // state 588
            {}, // state 589
            {}, // state 590
            { // state 591
                {10, 111, 0},
            },
            { // state 592
                {81, 80, 0},
            },
            { // state 593
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 594
            {}, // state 595
            { // state 596
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 597
            {}, // state 598
            { // state 599
                {10, 111, 0},
                {111, 81, 4},
            },
            {}, // state 600
            { // state 601
                {10, 111, 0},
            },
            {}, // state 602
            {}, // state 603
            {}, // state 604
            { // state 605
                {10, 111, 0},
                {111, 81, 3},
            },
            {}, // state 606
            {}, // state 607
            {}, // state 608
            {}, // state 609
            {}, // state 610
            {}, // state 611
            { // state 612
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 613
            { // state 614
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 73, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 615
            { // state 616
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 74, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 617
            {}, // state 618
            {}, // state 619
            {}, // state 620
            {}, // state 621
            {}, // state 622
            {}, // state 623
            { // state 624
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 84, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 625
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 84, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 626
            {}, // state 627
            { // state 628
                {10, 111, 0},
                {111, 87, 0},
                {86, 85, 1},
                {87, 86, 0},
            },
            {}, // state 629
            { // state 630
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 88, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 631
            { // state 632
                {12, 89, 1},
            },
            {}, // state 633
            {}, // state 634
            {}, // state 635
            { // state 636
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 88, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 637
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 88, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 638
            {}, // state 639
            { // state 640
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 88, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 641
            {}, // state 642
            {}, // state 643
            {}, // state 644
            {}, // state 645
            {}, // state 646
            {}, // state 647
            {}, // state 648
            {}, // state 649
            { // state 650
                {10, 111, 0},
                {111, 87, 0},
                {87, 86, 2},
            },
            {}, // state 651
            {}, // state 652
            { // state 653
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 84, 3},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 654
            {}, // state 655
            {}, // state 656
            {}, // state 657
            {}, // state 658
            {}, // state 659
            {}, // state 660
            {}, // state 661
            {}, // state 662
            {}, // state 663
            {}, // state 664
            {}, // state 665
            { // state 666
                {12, 11, 2},
            },
            {}, // state 667
            {}, // state 668
            {}, // state 669
            {}, // state 670
            { // state 671
                {5, 3, 0},
            },
            {}, // state 672
            {}, // state 673
            {}, // state 674
            {}, // state 675
            { // state 676
                {5, 3, 0},
            },
            {}, // state 677
            {}, // state 678
            {}, // state 679
            {}, // state 680
            { // state 681
                {10, 111, 0},
                {111, 92, 0},
            },
            {}, // state 682
            { // state 683
                {18, 6, 5},
            },
            {}, // state 684
            { // state 685
                {10, 111, 0},
                {111, 59, 0},
                {111, 92, 0},
                {22, 21, 0},
                {59, 58, 0},
            },
            {}, // state 686
            {}, // state 687
            {}, // state 688
            {}, // state 689
            { // state 690
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 691
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 692
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 693
            {}, // state 694
            { // state 695
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 1},
                {59, 58, 0},
            },
            { // state 696
                {60, 59, 1},
                {61, 60, 0},
            },
            { // state 697
                {10, 20, 0},
            },
            {}, // state 698
            {}, // state 699
            { // state 700
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 20, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 701
            { // state 702
                {10, 20, 2},
            },
            {}, // state 703
            {}, // state 704
            { // state 705
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 20, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 706
            {}, // state 707
            {}, // state 708
            { // state 709
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 710
            {}, // state 711
            {}, // state 712
            { // state 713
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 0},
                {59, 58, 0},
            },
            { // state 714
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 1},
                {59, 58, 0},
            },
            {}, // state 715
            {}, // state 716
            {}, // state 717
            {}, // state 718
            { // state 719
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 0},
                {59, 58, 0},
            },
            { // state 720
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 1},
                {59, 58, 0},
            },
            {}, // state 721
            { // state 722
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 95, 0},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 723
                {10, 111, 0},
                {111, 59, 0},
                {21, 24, 1},
                {22, 21, 0},
                {59, 58, 0},
            },
            {}, // state 724
            {}, // state 725
            { // state 726
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 1},
                {59, 58, 0},
            },
            {}, // state 727
            { // state 728
                {10, 111, 0},
                {111, 59, 0},
                {21, 23, 4},
                {22, 21, 0},
                {59, 58, 0},
            },
            { // state 729
                {10, 111, 0},
                {111, 59, 0},
                {22, 21, 1},
                {59, 58, 0},
            },
            {}, // state 730
            {}, // state 731
            {}, // state 732
            {}, // state 733
            { // state 734
                {10, 64, 0},
                {64, 17, 1},
            },
            {}, // state 735
            { // state 736
                {10, 111, 0},
                {111, 92, 0},
            },
            {}, // state 737
            { // state 738
                {10, 64, 0},
                {64, 17, 3},
            },
            {}, // state 739
            {}, // state 740
            {}, // state 741
            {}, // state 742
            { // state 743
                {10, 64, 0},
            },
            {}, // state 744
            {}, // state 745
            {}, // state 746
            {}, // state 747
            { // state 748
                {48, 47, 1},
            },
            { // state 749
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 48, 1},
                {98, 97, 0},
                {99, 98, 0},
            },
            { // state 750
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 47, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 751
            { // state 752
                {48, 47, 3},
            },
            {}, // state 753
            {}, // state 754
            { // state 755
                {10, 47, 0},
                {47, 46, 2},
            },
            {}, // state 756
            {}, // state 757
            {}, // state 758
            {}, // state 759
            {}, // state 760
            { // state 761
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 14, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 762
            {}, // state 763
            {}, // state 764
            {}, // state 765
            { // state 766
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 14, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 767
            { // state 768
                {10, 15, 0},
            },
            {}, // state 769
            {}, // state 770
            { // state 771
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 15, 2},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 772
            { // state 773
                {10, 15, 2},
            },
            {}, // state 774
            {}, // state 775
            { // state 776
                {10, 111, 0},
                {100, 99, 0},
                {101, 100, 0},
                {102, 101, 0},
                {103, 102, 0},
                {104, 103, 0},
                {105, 104, 0},
                {106, 105, 0},
                {111, 105, 0},
                {12, 105, 0},
                {97, 15, 4},
                {98, 97, 0},
                {99, 98, 0},
            },
            {}, // state 777
        };
    }

    /** Parser call back hooks for {@link CifParser}. */
    public interface Hooks extends ParserHooksBase {
        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SupKind : @PLANTKW;}</p>
         *
         * @param t1 {@code PLANTKW}.
         * @return The parser call back hook result.
         */
        public Token parseSupKind1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SupKind : @REQUIREMENTKW;}</p>
         *
         * @param t1 {@code REQUIREMENTKW}.
         * @return The parser call back hook result.
         */
        public Token parseSupKind2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SupKind : @SUPERVISORKW;}</p>
         *
         * @param t1 {@code SUPERVISORKW}.
         * @return The parser call back hook result.
         */
        public Token parseSupKind3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ACOSHKW;}</p>
         *
         * @param t1 {@code ACOSHKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ACOSKW;}</p>
         *
         * @param t1 {@code ACOSKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ASINHKW;}</p>
         *
         * @param t1 {@code ASINHKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ASINKW;}</p>
         *
         * @param t1 {@code ASINKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ATANHKW;}</p>
         *
         * @param t1 {@code ATANHKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ATANKW;}</p>
         *
         * @param t1 {@code ATANKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @COSHKW;}</p>
         *
         * @param t1 {@code COSHKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction07(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @COSKW;}</p>
         *
         * @param t1 {@code COSKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction08(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @SINHKW;}</p>
         *
         * @param t1 {@code SINHKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction09(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @SINKW;}</p>
         *
         * @param t1 {@code SINKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction10(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @TANHKW;}</p>
         *
         * @param t1 {@code TANHKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction11(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @TANKW;}</p>
         *
         * @param t1 {@code TANKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction12(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ABSKW;}</p>
         *
         * @param t1 {@code ABSKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction13(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @CBRTKW;}</p>
         *
         * @param t1 {@code CBRTKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction14(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @CEILKW;}</p>
         *
         * @param t1 {@code CEILKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction15(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @DELKW;}</p>
         *
         * @param t1 {@code DELKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction16(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @EMPTYKW;}</p>
         *
         * @param t1 {@code EMPTYKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction17(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @EXPKW;}</p>
         *
         * @param t1 {@code EXPKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction18(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @FLOORKW;}</p>
         *
         * @param t1 {@code FLOORKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction19(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @FMTKW;}</p>
         *
         * @param t1 {@code FMTKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction20(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @LNKW;}</p>
         *
         * @param t1 {@code LNKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction21(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @LOGKW;}</p>
         *
         * @param t1 {@code LOGKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction22(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @MAXKW;}</p>
         *
         * @param t1 {@code MAXKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction23(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @MINKW;}</p>
         *
         * @param t1 {@code MINKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction24(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @POPKW;}</p>
         *
         * @param t1 {@code POPKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction25(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @POWKW;}</p>
         *
         * @param t1 {@code POWKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction26(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ROUNDKW;}</p>
         *
         * @param t1 {@code ROUNDKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction27(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @SCALEKW;}</p>
         *
         * @param t1 {@code SCALEKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction28(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @SIGNKW;}</p>
         *
         * @param t1 {@code SIGNKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction29(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @SIZEKW;}</p>
         *
         * @param t1 {@code SIZEKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction30(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @SQRTKW;}</p>
         *
         * @param t1 {@code SQRTKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction31(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @BERNOULLIKW;}</p>
         *
         * @param t1 {@code BERNOULLIKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction32(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @BETAKW;}</p>
         *
         * @param t1 {@code BETAKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction33(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @BINOMIALKW;}</p>
         *
         * @param t1 {@code BINOMIALKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction34(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @CONSTANTKW;}</p>
         *
         * @param t1 {@code CONSTANTKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction35(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @ERLANGKW;}</p>
         *
         * @param t1 {@code ERLANGKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction36(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @EXPONENTIALKW;}</p>
         *
         * @param t1 {@code EXPONENTIALKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction37(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @GAMMAKW;}</p>
         *
         * @param t1 {@code GAMMAKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction38(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @GEOMETRICKW;}</p>
         *
         * @param t1 {@code GEOMETRICKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction39(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @LOGNORMALKW;}</p>
         *
         * @param t1 {@code LOGNORMALKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction40(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @NORMALKW;}</p>
         *
         * @param t1 {@code NORMALKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction41(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @POISSONKW;}</p>
         *
         * @param t1 {@code POISSONKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction42(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @RANDOMKW;}</p>
         *
         * @param t1 {@code RANDOMKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction43(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @TRIANGLEKW;}</p>
         *
         * @param t1 {@code TRIANGLEKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction44(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @UNIFORMKW;}</p>
         *
         * @param t1 {@code UNIFORMKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction45(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StdLibFunction : @WEIBULLKW;}</p>
         *
         * @param t1 {@code WEIBULLKW}.
         * @return The parser call back hook result.
         */
        public Token parseStdLibFunction46(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Specification : GroupBody;}</p>
         *
         * @param a1 {@code GroupBody}.
         * @return The parser call back hook result.
         */
        public ASpecification parseSpecification1(AGroupBody a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupBody : OptGroupDecls;}</p>
         *
         * @param l1 {@code OptGroupDecls}.
         * @return The parser call back hook result.
         */
        public AGroupBody parseGroupBody1(List<ADecl> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutomatonBody : OptAutDecls Locations OptIoDecls;}</p>
         *
         * @param l1 {@code OptAutDecls}.
         * @param l2 {@code Locations}.
         * @param l3 {@code OptIoDecls}.
         * @return The parser call back hook result.
         */
        public AAutomatonBody parseAutomatonBody1(List<ADecl> l1, List<ALocation> l2, List<AIoDecl> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptGroupDecls : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<ADecl> parseOptGroupDecls1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptGroupDecls : OptGroupDecls GroupDecl;}</p>
         *
         * @param l1 {@code OptGroupDecls}.
         * @param a2 {@code GroupDecl}.
         * @return The parser call back hook result.
         */
        public List<ADecl> parseOptGroupDecls2(List<ADecl> l1, ADecl a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : Decl;}</p>
         *
         * @param a1 {@code Decl}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl01(ADecl a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : @IMPORTKW Imports SEMICOLTK;}</p>
         *
         * @param t1 {@code IMPORTKW}.
         * @param l2 {@code Imports}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl02(Token t1, List<AImport> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : @NAMESPACEKW @IDENTIFIERTK SEMICOLTK;}</p>
         *
         * @param t1 {@code NAMESPACEKW}.
         * @param t2 {@code IDENTIFIERTK}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl03(Token t1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : @NAMESPACEKW @RELATIVENAMETK SEMICOLTK;}</p>
         *
         * @param t1 {@code NAMESPACEKW}.
         * @param t2 {@code RELATIVENAMETK}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl04(Token t1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : @FUNCKW Types Identifier FuncParams COLONTK FuncBody;}</p>
         *
         * @param t1 {@code FUNCKW}.
         * @param l2 {@code Types}.
         * @param a3 {@code Identifier}.
         * @param l4 {@code FuncParams}.
         * @param a6 {@code FuncBody}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl05(Token t1, List<ACifType> l2, AIdentifier a3, List<AFuncParam> l4, AFuncBody a6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : Identifier COLONTK Name CompInstArgs @SEMICOLTK;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Name}.
         * @param l4 {@code CompInstArgs}.
         * @param t5 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl06(AIdentifier a1, AName a3, List<AExpression> l4, Token t5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : @GROUPKW DEFKW Identifier CompDefParms COLONTK GroupBody @ENDKW;}</p>
         *
         * @param t1 {@code GROUPKW}.
         * @param a3 {@code Identifier}.
         * @param l4 {@code CompDefParms}.
         * @param a6 {@code GroupBody}.
         * @param t7 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl07(Token t1, AIdentifier a3, List<AParameter> l4, AGroupBody a6, Token t7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : OptSupKind @AUTOMATONKW DEFKW Identifier CompDefParms COLONTK AutomatonBody @ENDKW;}</p>
         *
         * @param t1 {@code OptSupKind}.
         * @param t2 {@code AUTOMATONKW}.
         * @param a4 {@code Identifier}.
         * @param l5 {@code CompDefParms}.
         * @param a7 {@code AutomatonBody}.
         * @param t8 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl08(Token t1, Token t2, AIdentifier a4, List<AParameter> l5, AAutomatonBody a7, Token t8);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : SupKind DEFKW Identifier CompDefParms COLONTK AutomatonBody @ENDKW;}</p>
         *
         * @param t1 {@code SupKind}.
         * @param a3 {@code Identifier}.
         * @param l4 {@code CompDefParms}.
         * @param a6 {@code AutomatonBody}.
         * @param t7 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl09(Token t1, AIdentifier a3, List<AParameter> l4, AAutomatonBody a6, Token t7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : @GROUPKW Identifier COLONTK GroupBody @ENDKW;}</p>
         *
         * @param t1 {@code GROUPKW}.
         * @param a2 {@code Identifier}.
         * @param a4 {@code GroupBody}.
         * @param t5 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl10(Token t1, AIdentifier a2, AGroupBody a4, Token t5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : OptSupKind @AUTOMATONKW Identifier COLONTK AutomatonBody @ENDKW;}</p>
         *
         * @param t1 {@code OptSupKind}.
         * @param t2 {@code AUTOMATONKW}.
         * @param a3 {@code Identifier}.
         * @param a5 {@code AutomatonBody}.
         * @param t6 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl11(Token t1, Token t2, AIdentifier a3, AAutomatonBody a5, Token t6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code GroupDecl : SupKind Identifier COLONTK AutomatonBody @ENDKW;}</p>
         *
         * @param t1 {@code SupKind}.
         * @param a2 {@code Identifier}.
         * @param a4 {@code AutomatonBody}.
         * @param t5 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseGroupDecl12(Token t1, AIdentifier a2, AAutomatonBody a4, Token t5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptAutDecls : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<ADecl> parseOptAutDecls1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptAutDecls : OptAutDecls AutDecl;}</p>
         *
         * @param l1 {@code OptAutDecls}.
         * @param a2 {@code AutDecl}.
         * @return The parser call back hook result.
         */
        public List<ADecl> parseOptAutDecls2(List<ADecl> l1, ADecl a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutDecl : Decl;}</p>
         *
         * @param a1 {@code Decl}.
         * @return The parser call back hook result.
         */
        public ADecl parseAutDecl1(ADecl a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutDecl : @ALPHABETKW Events SEMICOLTK;}</p>
         *
         * @param t1 {@code ALPHABETKW}.
         * @param l2 {@code Events}.
         * @return The parser call back hook result.
         */
        public ADecl parseAutDecl2(Token t1, List<AName> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutDecl : @ALPHABETKW SEMICOLTK;}</p>
         *
         * @param t1 {@code ALPHABETKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseAutDecl3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutDecl : @MONITORKW Events SEMICOLTK;}</p>
         *
         * @param t1 {@code MONITORKW}.
         * @param l2 {@code Events}.
         * @return The parser call back hook result.
         */
        public ADecl parseAutDecl4(Token t1, List<AName> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutDecl : @MONITORKW SEMICOLTK;}</p>
         *
         * @param t1 {@code MONITORKW}.
         * @return The parser call back hook result.
         */
        public ADecl parseAutDecl5(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AutDecl : @DISCKW Type DiscDecls SEMICOLTK;}</p>
         *
         * @param t1 {@code DISCKW}.
         * @param a2 {@code Type}.
         * @param l3 {@code DiscDecls}.
         * @return The parser call back hook result.
         */
        public ADecl parseAutDecl6(Token t1, ACifType a2, List<ADiscVariable> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @TYPEKW TypeDefs SEMICOLTK;}</p>
         *
         * @param t1 {@code TYPEKW}.
         * @param l2 {@code TypeDefs}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl01(Token t1, List<ATypeDef> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : ENUMKW Identifier EQTK Identifiers SEMICOLTK;}</p>
         *
         * @param a2 {@code Identifier}.
         * @param l4 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl02(AIdentifier a2, List<AIdentifier> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : OptControllability @EVENTKW Identifiers SEMICOLTK;}</p>
         *
         * @param t1 {@code OptControllability}.
         * @param t2 {@code EVENTKW}.
         * @param l3 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl03(Token t1, Token t2, List<AIdentifier> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : OptControllability @EVENTKW EventType Identifiers SEMICOLTK;}</p>
         *
         * @param t1 {@code OptControllability}.
         * @param t2 {@code EVENTKW}.
         * @param a3 {@code EventType}.
         * @param l4 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl04(Token t1, Token t2, ACifType a3, List<AIdentifier> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : Controllability Identifiers SEMICOLTK;}</p>
         *
         * @param t1 {@code Controllability}.
         * @param l2 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl05(Token t1, List<AIdentifier> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : Controllability EventType Identifiers SEMICOLTK;}</p>
         *
         * @param t1 {@code Controllability}.
         * @param a2 {@code EventType}.
         * @param l3 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl06(Token t1, ACifType a2, List<AIdentifier> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @CONSTKW Type ConstantDefs SEMICOLTK;}</p>
         *
         * @param t1 {@code CONSTKW}.
         * @param a2 {@code Type}.
         * @param l3 {@code ConstantDefs}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl07(Token t1, ACifType a2, List<AConstant> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @ALGKW Type AlgVarsDefs SEMICOLTK;}</p>
         *
         * @param t1 {@code ALGKW}.
         * @param a2 {@code Type}.
         * @param l3 {@code AlgVarsDefs}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl08(Token t1, ACifType a2, List<AAlgVariable> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : OptAnnos @INPUTKW Type Identifiers SEMICOLTK;}</p>
         *
         * @param l1 {@code OptAnnos}.
         * @param t2 {@code INPUTKW}.
         * @param a3 {@code Type}.
         * @param l4 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl09(List<AAnnotation> l1, Token t2, ACifType a3, List<AIdentifier> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @CONTKW ContDecls SEMICOLTK;}</p>
         *
         * @param t1 {@code CONTKW}.
         * @param l2 {@code ContDecls}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl10(Token t1, List<AContVariable> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @EQUATIONKW Equations SEMICOLTK;}</p>
         *
         * @param t1 {@code EQUATIONKW}.
         * @param l2 {@code Equations}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl11(Token t1, List<AEquation> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @INITIALKW Expressions SEMICOLTK;}</p>
         *
         * @param t1 {@code INITIALKW}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl12(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : InvariantDecls;}</p>
         *
         * @param a1 {@code InvariantDecls}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl13(AInvariantDecl a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : @MARKEDKW Expressions SEMICOLTK;}</p>
         *
         * @param t1 {@code MARKEDKW}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl14(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Decl : IoDecl;}</p>
         *
         * @param a1 {@code IoDecl}.
         * @return The parser call back hook result.
         */
        public ADecl parseDecl15(AIoDecl a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Identifier : @IDENTIFIERTK;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @return The parser call back hook result.
         */
        public AIdentifier parseIdentifier1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Imports : StringToken;}</p>
         *
         * @param a1 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public List<AImport> parseImports1(AStringToken a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Imports : Imports COMMATK StringToken;}</p>
         *
         * @param l1 {@code Imports}.
         * @param a3 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public List<AImport> parseImports2(List<AImport> l1, AStringToken a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code StringToken : @STRINGTK;}</p>
         *
         * @param t1 {@code STRINGTK}.
         * @return The parser call back hook result.
         */
        public AStringToken parseStringToken1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code TypeDefs : Identifier EQTK Type;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Type}.
         * @return The parser call back hook result.
         */
        public List<ATypeDef> parseTypeDefs1(AIdentifier a1, ACifType a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code TypeDefs : TypeDefs COMMATK Identifier EQTK Type;}</p>
         *
         * @param l1 {@code TypeDefs}.
         * @param a3 {@code Identifier}.
         * @param a5 {@code Type}.
         * @return The parser call back hook result.
         */
        public List<ATypeDef> parseTypeDefs2(List<ATypeDef> l1, AIdentifier a3, ACifType a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ConstantDefs : Identifier EQTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AConstant> parseConstantDefs1(AIdentifier a1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ConstantDefs : ConstantDefs COMMATK Identifier EQTK Expression;}</p>
         *
         * @param l1 {@code ConstantDefs}.
         * @param a3 {@code Identifier}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AConstant> parseConstantDefs2(List<AConstant> l1, AIdentifier a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AlgVarsDefs : Identifier;}</p>
         *
         * @param a1 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public List<AAlgVariable> parseAlgVarsDefs1(AIdentifier a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AlgVarsDefs : Identifier EQTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AAlgVariable> parseAlgVarsDefs2(AIdentifier a1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AlgVarsDefs : AlgVarsDefs COMMATK Identifier;}</p>
         *
         * @param l1 {@code AlgVarsDefs}.
         * @param a3 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public List<AAlgVariable> parseAlgVarsDefs3(List<AAlgVariable> l1, AIdentifier a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AlgVarsDefs : AlgVarsDefs COMMATK Identifier EQTK Expression;}</p>
         *
         * @param l1 {@code AlgVarsDefs}.
         * @param a3 {@code Identifier}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AAlgVariable> parseAlgVarsDefs4(List<AAlgVariable> l1, AIdentifier a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncParams : PAROPENTK PARCLOSETK;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AFuncParam> parseFuncParams1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncParams : PAROPENTK FuncParamDecls PARCLOSETK;}</p>
         *
         * @param l2 {@code FuncParamDecls}.
         * @return The parser call back hook result.
         */
        public List<AFuncParam> parseFuncParams2(List<AFuncParam> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncParamDecls : Type Identifiers;}</p>
         *
         * @param a1 {@code Type}.
         * @param l2 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public List<AFuncParam> parseFuncParamDecls1(ACifType a1, List<AIdentifier> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncParamDecls : FuncParamDecls SEMICOLTK Type Identifiers;}</p>
         *
         * @param l1 {@code FuncParamDecls}.
         * @param a3 {@code Type}.
         * @param l4 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public List<AFuncParam> parseFuncParamDecls2(List<AFuncParam> l1, ACifType a3, List<AIdentifier> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncBody : FuncVarDecls FuncStatements @ENDKW;}</p>
         *
         * @param l1 {@code FuncVarDecls}.
         * @param l2 {@code FuncStatements}.
         * @param t3 {@code ENDKW}.
         * @return The parser call back hook result.
         */
        public AFuncBody parseFuncBody1(List<ADiscVariableDecl> l1, List<AFuncStatement> l2, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncBody : StringToken SEMICOLTK;}</p>
         *
         * @param a1 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public AFuncBody parseFuncBody2(AStringToken a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncVarDecls : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<ADiscVariableDecl> parseFuncVarDecls1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncVarDecls : FuncVarDecls Type FuncVarDecl SEMICOLTK;}</p>
         *
         * @param l1 {@code FuncVarDecls}.
         * @param a2 {@code Type}.
         * @param l3 {@code FuncVarDecl}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariableDecl> parseFuncVarDecls2(List<ADiscVariableDecl> l1, ACifType a2, List<ADiscVariable> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncVarDecl : Identifier;}</p>
         *
         * @param a1 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariable> parseFuncVarDecl1(AIdentifier a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncVarDecl : Identifier EQTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariable> parseFuncVarDecl2(AIdentifier a1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncVarDecl : FuncVarDecl COMMATK Identifier;}</p>
         *
         * @param l1 {@code FuncVarDecl}.
         * @param a3 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariable> parseFuncVarDecl3(List<ADiscVariable> l1, AIdentifier a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncVarDecl : FuncVarDecl COMMATK Identifier EQTK Expression;}</p>
         *
         * @param l1 {@code FuncVarDecl}.
         * @param a3 {@code Identifier}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariable> parseFuncVarDecl4(List<ADiscVariable> l1, AIdentifier a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatements : FuncStatement;}</p>
         *
         * @param a1 {@code FuncStatement}.
         * @return The parser call back hook result.
         */
        public List<AFuncStatement> parseFuncStatements1(AFuncStatement a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatements : FuncStatements FuncStatement;}</p>
         *
         * @param l1 {@code FuncStatements}.
         * @param a2 {@code FuncStatement}.
         * @return The parser call back hook result.
         */
        public List<AFuncStatement> parseFuncStatements2(List<AFuncStatement> l1, AFuncStatement a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatement : Addressables @BECOMESTK Expressions SEMICOLTK;}</p>
         *
         * @param l1 {@code Addressables}.
         * @param t2 {@code BECOMESTK}.
         * @param l3 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public AFuncStatement parseFuncStatement1(List<AExpression> l1, Token t2, List<AExpression> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatement : @IFKW Expressions COLONTK FuncStatements OptElifFuncStats OptElseFuncStat ENDKW;}</p>
         *
         * @param t1 {@code IFKW}.
         * @param l2 {@code Expressions}.
         * @param l4 {@code FuncStatements}.
         * @param l5 {@code OptElifFuncStats}.
         * @param a6 {@code OptElseFuncStat}.
         * @return The parser call back hook result.
         */
        public AFuncStatement parseFuncStatement2(Token t1, List<AExpression> l2, List<AFuncStatement> l4, List<AElifFuncStatement> l5, AElseFuncStatement a6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatement : @WHILEKW Expressions COLONTK FuncStatements ENDKW;}</p>
         *
         * @param t1 {@code WHILEKW}.
         * @param l2 {@code Expressions}.
         * @param l4 {@code FuncStatements}.
         * @return The parser call back hook result.
         */
        public AFuncStatement parseFuncStatement3(Token t1, List<AExpression> l2, List<AFuncStatement> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatement : @BREAKKW SEMICOLTK;}</p>
         *
         * @param t1 {@code BREAKKW}.
         * @return The parser call back hook result.
         */
        public AFuncStatement parseFuncStatement4(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatement : @CONTINUEKW SEMICOLTK;}</p>
         *
         * @param t1 {@code CONTINUEKW}.
         * @return The parser call back hook result.
         */
        public AFuncStatement parseFuncStatement5(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncStatement : @RETURNKW Expressions SEMICOLTK;}</p>
         *
         * @param t1 {@code RETURNKW}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public AFuncStatement parseFuncStatement6(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElifFuncStats : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AElifFuncStatement> parseOptElifFuncStats1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElifFuncStats : OptElifFuncStats @ELIFKW Expressions COLONTK FuncStatements;}</p>
         *
         * @param l1 {@code OptElifFuncStats}.
         * @param t2 {@code ELIFKW}.
         * @param l3 {@code Expressions}.
         * @param l5 {@code FuncStatements}.
         * @return The parser call back hook result.
         */
        public List<AElifFuncStatement> parseOptElifFuncStats2(List<AElifFuncStatement> l1, Token t2, List<AExpression> l3, List<AFuncStatement> l5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElseFuncStat : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public AElseFuncStatement parseOptElseFuncStat1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElseFuncStat : @ELSEKW FuncStatements;}</p>
         *
         * @param t1 {@code ELSEKW}.
         * @param l2 {@code FuncStatements}.
         * @return The parser call back hook result.
         */
        public AElseFuncStatement parseOptElseFuncStat2(Token t1, List<AFuncStatement> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Events : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public List<AName> parseEvents1(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Events : Events COMMATK Name;}</p>
         *
         * @param l1 {@code Events}.
         * @param a3 {@code Name}.
         * @return The parser call back hook result.
         */
        public List<AName> parseEvents2(List<AName> l1, AName a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CoreEdge : EdgeEvents OptEdgeGuard OptEdgeUrgent OptEdgeUpdate;}</p>
         *
         * @param l1 {@code EdgeEvents}.
         * @param l2 {@code OptEdgeGuard}.
         * @param t3 {@code OptEdgeUrgent}.
         * @param l4 {@code OptEdgeUpdate}.
         * @return The parser call back hook result.
         */
        public ACoreEdge parseCoreEdge1(List<AEdgeEvent> l1, List<AExpression> l2, TextPosition t3, List<AUpdate> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CoreEdge : WHENKW Expressions OptEdgeUrgent OptEdgeUpdate;}</p>
         *
         * @param l2 {@code Expressions}.
         * @param t3 {@code OptEdgeUrgent}.
         * @param l4 {@code OptEdgeUpdate}.
         * @return The parser call back hook result.
         */
        public ACoreEdge parseCoreEdge2(List<AExpression> l2, TextPosition t3, List<AUpdate> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CoreEdge : @NOWKW OptEdgeUpdate;}</p>
         *
         * @param t1 {@code NOWKW}.
         * @param l2 {@code OptEdgeUpdate}.
         * @return The parser call back hook result.
         */
        public ACoreEdge parseCoreEdge3(Token t1, List<AUpdate> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CoreEdge : DOKW Updates;}</p>
         *
         * @param l2 {@code Updates}.
         * @return The parser call back hook result.
         */
        public ACoreEdge parseCoreEdge4(List<AUpdate> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEdgeGuard : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AExpression> parseOptEdgeGuard1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEdgeGuard : WHENKW Expressions;}</p>
         *
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public List<AExpression> parseOptEdgeGuard2(List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEdgeUrgent : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public TextPosition parseOptEdgeUrgent1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEdgeUrgent : @NOWKW;}</p>
         *
         * @param t1 {@code NOWKW}.
         * @return The parser call back hook result.
         */
        public TextPosition parseOptEdgeUrgent2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEdgeUpdate : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AUpdate> parseOptEdgeUpdate1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEdgeUpdate : DOKW Updates;}</p>
         *
         * @param l2 {@code Updates}.
         * @return The parser call back hook result.
         */
        public List<AUpdate> parseOptEdgeUpdate2(List<AUpdate> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvents : EdgeEvent;}</p>
         *
         * @param a1 {@code EdgeEvent}.
         * @return The parser call back hook result.
         */
        public List<AEdgeEvent> parseEdgeEvents1(AEdgeEvent a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvents : EdgeEvents COMMATK EdgeEvent;}</p>
         *
         * @param l1 {@code EdgeEvents}.
         * @param a3 {@code EdgeEvent}.
         * @return The parser call back hook result.
         */
        public List<AEdgeEvent> parseEdgeEvents2(List<AEdgeEvent> l1, AEdgeEvent a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvent : @TAUKW;}</p>
         *
         * @param t1 {@code TAUKW}.
         * @return The parser call back hook result.
         */
        public AEdgeEvent parseEdgeEvent1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvent : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public AEdgeEvent parseEdgeEvent2(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvent : Name @EXCLAMATIONTK;}</p>
         *
         * @param a1 {@code Name}.
         * @param t2 {@code EXCLAMATIONTK}.
         * @return The parser call back hook result.
         */
        public AEdgeEvent parseEdgeEvent3(AName a1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvent : Name @EXCLAMATIONTK Expression;}</p>
         *
         * @param a1 {@code Name}.
         * @param t2 {@code EXCLAMATIONTK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AEdgeEvent parseEdgeEvent4(AName a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EdgeEvent : Name @QUESTIONTK;}</p>
         *
         * @param a1 {@code Name}.
         * @param t2 {@code QUESTIONTK}.
         * @return The parser call back hook result.
         */
        public AEdgeEvent parseEdgeEvent5(AName a1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Locations : Location;}</p>
         *
         * @param a1 {@code Location}.
         * @return The parser call back hook result.
         */
        public List<ALocation> parseLocations1(ALocation a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Locations : Locations Location;}</p>
         *
         * @param l1 {@code Locations}.
         * @param a2 {@code Location}.
         * @return The parser call back hook result.
         */
        public List<ALocation> parseLocations2(List<ALocation> l1, ALocation a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Location : OptAnnos @LOCATIONKW SEMICOLTK;}</p>
         *
         * @param l1 {@code OptAnnos}.
         * @param t2 {@code LOCATIONKW}.
         * @return The parser call back hook result.
         */
        public ALocation parseLocation1(List<AAnnotation> l1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Location : OptAnnos @LOCATIONKW Identifier SEMICOLTK;}</p>
         *
         * @param l1 {@code OptAnnos}.
         * @param t2 {@code LOCATIONKW}.
         * @param a3 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public ALocation parseLocation2(List<AAnnotation> l1, Token t2, AIdentifier a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Location : OptAnnos @LOCATIONKW COLONTK LocationElements;}</p>
         *
         * @param l1 {@code OptAnnos}.
         * @param t2 {@code LOCATIONKW}.
         * @param l4 {@code LocationElements}.
         * @return The parser call back hook result.
         */
        public ALocation parseLocation3(List<AAnnotation> l1, Token t2, List<ALocationElement> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Location : OptAnnos @LOCATIONKW Identifier COLONTK LocationElements;}</p>
         *
         * @param l1 {@code OptAnnos}.
         * @param t2 {@code LOCATIONKW}.
         * @param a3 {@code Identifier}.
         * @param l5 {@code LocationElements}.
         * @return The parser call back hook result.
         */
        public ALocation parseLocation4(List<AAnnotation> l1, Token t2, AIdentifier a3, List<ALocationElement> l5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElements : LocationElement;}</p>
         *
         * @param a1 {@code LocationElement}.
         * @return The parser call back hook result.
         */
        public List<ALocationElement> parseLocationElements1(ALocationElement a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElements : LocationElements LocationElement;}</p>
         *
         * @param l1 {@code LocationElements}.
         * @param a2 {@code LocationElement}.
         * @return The parser call back hook result.
         */
        public List<ALocationElement> parseLocationElements2(List<ALocationElement> l1, ALocationElement a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @INITIALKW SEMICOLTK;}</p>
         *
         * @param t1 {@code INITIALKW}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @INITIALKW Expressions SEMICOLTK;}</p>
         *
         * @param t1 {@code INITIALKW}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement2(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : InvariantDecls;}</p>
         *
         * @param a1 {@code InvariantDecls}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement3(AInvariantDecl a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @EQUATIONKW Equations SEMICOLTK;}</p>
         *
         * @param t1 {@code EQUATIONKW}.
         * @param l2 {@code Equations}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement4(Token t1, List<AEquation> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @MARKEDKW SEMICOLTK;}</p>
         *
         * @param t1 {@code MARKEDKW}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement5(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @MARKEDKW Expressions SEMICOLTK;}</p>
         *
         * @param t1 {@code MARKEDKW}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement6(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @URGENTKW SEMICOLTK;}</p>
         *
         * @param t1 {@code URGENTKW}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement7(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @EDGEKW CoreEdge SEMICOLTK;}</p>
         *
         * @param t1 {@code EDGEKW}.
         * @param a2 {@code CoreEdge}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement8(Token t1, ACoreEdge a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code LocationElement : @EDGEKW CoreEdge GOTOKW Identifier SEMICOLTK;}</p>
         *
         * @param t1 {@code EDGEKW}.
         * @param a2 {@code CoreEdge}.
         * @param a4 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public ALocationElement parseLocationElement9(Token t1, ACoreEdge a2, AIdentifier a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompInstArgs : PAROPENTK PARCLOSETK;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AExpression> parseCompInstArgs1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompInstArgs : PAROPENTK Expressions PARCLOSETK;}</p>
         *
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public List<AExpression> parseCompInstArgs2(List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefParms : PAROPENTK PARCLOSETK;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AParameter> parseCompDefParms1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefParms : PAROPENTK CompDefDecls PARCLOSETK;}</p>
         *
         * @param l2 {@code CompDefDecls}.
         * @return The parser call back hook result.
         */
        public List<AParameter> parseCompDefParms2(List<AParameter> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDecls : CompDefDeclaration;}</p>
         *
         * @param a1 {@code CompDefDeclaration}.
         * @return The parser call back hook result.
         */
        public List<AParameter> parseCompDefDecls1(AParameter a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDecls : CompDefDecls SEMICOLTK CompDefDeclaration;}</p>
         *
         * @param l1 {@code CompDefDecls}.
         * @param a3 {@code CompDefDeclaration}.
         * @return The parser call back hook result.
         */
        public List<AParameter> parseCompDefDecls2(List<AParameter> l1, AParameter a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : OptControllability @EVENTKW EventParamIds;}</p>
         *
         * @param t1 {@code OptControllability}.
         * @param t2 {@code EVENTKW}.
         * @param l3 {@code EventParamIds}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration1(Token t1, Token t2, List<AEventParameterPart> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : OptControllability @EVENTKW EventType EventParamIds;}</p>
         *
         * @param t1 {@code OptControllability}.
         * @param t2 {@code EVENTKW}.
         * @param a3 {@code EventType}.
         * @param l4 {@code EventParamIds}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration2(Token t1, Token t2, ACifType a3, List<AEventParameterPart> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : Controllability EventParamIds;}</p>
         *
         * @param t1 {@code Controllability}.
         * @param l2 {@code EventParamIds}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration3(Token t1, List<AEventParameterPart> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : Controllability EventType EventParamIds;}</p>
         *
         * @param t1 {@code Controllability}.
         * @param a2 {@code EventType}.
         * @param l3 {@code EventParamIds}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration4(Token t1, ACifType a2, List<AEventParameterPart> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : Name Identifiers;}</p>
         *
         * @param a1 {@code Name}.
         * @param l2 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration5(AName a1, List<AIdentifier> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : @LOCATIONKW Identifiers;}</p>
         *
         * @param t1 {@code LOCATIONKW}.
         * @param l2 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration6(Token t1, List<AIdentifier> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompDefDeclaration : @ALGKW Type Identifiers;}</p>
         *
         * @param t1 {@code ALGKW}.
         * @param a2 {@code Type}.
         * @param l3 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public AParameter parseCompDefDeclaration7(Token t1, ACifType a2, List<AIdentifier> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventParamIds : EventParamId;}</p>
         *
         * @param a1 {@code EventParamId}.
         * @return The parser call back hook result.
         */
        public List<AEventParameterPart> parseEventParamIds1(AEventParameterPart a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventParamIds : EventParamIds COMMATK EventParamId;}</p>
         *
         * @param l1 {@code EventParamIds}.
         * @param a3 {@code EventParamId}.
         * @return The parser call back hook result.
         */
        public List<AEventParameterPart> parseEventParamIds2(List<AEventParameterPart> l1, AEventParameterPart a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventParamId : Identifier OptEventParamFlags;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param l2 {@code OptEventParamFlags}.
         * @return The parser call back hook result.
         */
        public AEventParameterPart parseEventParamId1(AIdentifier a1, List<AEventParamFlag> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEventParamFlags : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AEventParamFlag> parseOptEventParamFlags1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptEventParamFlags : OptEventParamFlags EventParamFlag;}</p>
         *
         * @param l1 {@code OptEventParamFlags}.
         * @param a2 {@code EventParamFlag}.
         * @return The parser call back hook result.
         */
        public List<AEventParamFlag> parseOptEventParamFlags2(List<AEventParamFlag> l1, AEventParamFlag a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventParamFlag : @EXCLAMATIONTK;}</p>
         *
         * @param t1 {@code EXCLAMATIONTK}.
         * @return The parser call back hook result.
         */
        public AEventParamFlag parseEventParamFlag1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventParamFlag : @QUESTIONTK;}</p>
         *
         * @param t1 {@code QUESTIONTK}.
         * @return The parser call back hook result.
         */
        public AEventParamFlag parseEventParamFlag2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventParamFlag : @TILDETK;}</p>
         *
         * @param t1 {@code TILDETK}.
         * @return The parser call back hook result.
         */
        public AEventParamFlag parseEventParamFlag3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DiscDecls : DiscDecl;}</p>
         *
         * @param a1 {@code DiscDecl}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariable> parseDiscDecls1(ADiscVariable a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DiscDecls : DiscDecls COMMATK DiscDecl;}</p>
         *
         * @param l1 {@code DiscDecls}.
         * @param a3 {@code DiscDecl}.
         * @return The parser call back hook result.
         */
        public List<ADiscVariable> parseDiscDecls2(List<ADiscVariable> l1, ADiscVariable a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DiscDecl : Identifier;}</p>
         *
         * @param a1 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public ADiscVariable parseDiscDecl1(AIdentifier a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DiscDecl : Identifier INKW @ANYKW;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param t3 {@code ANYKW}.
         * @return The parser call back hook result.
         */
        public ADiscVariable parseDiscDecl2(AIdentifier a1, Token t3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DiscDecl : Identifier EQTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public ADiscVariable parseDiscDecl3(AIdentifier a1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DiscDecl : Identifier INKW CUROPENTK Expressions CURCLOSETK;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param l4 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public ADiscVariable parseDiscDecl4(AIdentifier a1, List<AExpression> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ContDecls : ContDecl;}</p>
         *
         * @param a1 {@code ContDecl}.
         * @return The parser call back hook result.
         */
        public List<AContVariable> parseContDecls1(AContVariable a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ContDecls : ContDecls COMMATK ContDecl;}</p>
         *
         * @param l1 {@code ContDecls}.
         * @param a3 {@code ContDecl}.
         * @return The parser call back hook result.
         */
        public List<AContVariable> parseContDecls2(List<AContVariable> l1, AContVariable a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ContDecl : Identifier OptDerivative;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a2 {@code OptDerivative}.
         * @return The parser call back hook result.
         */
        public AContVariable parseContDecl1(AIdentifier a1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ContDecl : Identifier EQTK Expression OptDerivative;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @param a4 {@code OptDerivative}.
         * @return The parser call back hook result.
         */
        public AContVariable parseContDecl2(AIdentifier a1, AExpression a3, AExpression a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptDerivative : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public AExpression parseOptDerivative1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptDerivative : DERKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseOptDerivative2(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Equations : Equation;}</p>
         *
         * @param a1 {@code Equation}.
         * @return The parser call back hook result.
         */
        public List<AEquation> parseEquations1(AEquation a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Equations : Equations COMMATK Equation;}</p>
         *
         * @param l1 {@code Equations}.
         * @param a3 {@code Equation}.
         * @return The parser call back hook result.
         */
        public List<AEquation> parseEquations2(List<AEquation> l1, AEquation a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Equation : Identifier APOSTROPHETK @EQTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param t3 {@code EQTK}.
         * @param a4 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AEquation parseEquation1(AIdentifier a1, Token t3, AExpression a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Equation : Identifier @EQTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param t2 {@code EQTK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AEquation parseEquation2(AIdentifier a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code InvariantDecls : OptSupKind @INVARIANTKW Invariants SEMICOLTK;}</p>
         *
         * @param t1 {@code OptSupKind}.
         * @param t2 {@code INVARIANTKW}.
         * @param l3 {@code Invariants}.
         * @return The parser call back hook result.
         */
        public AInvariantDecl parseInvariantDecls1(Token t1, Token t2, List<AInvariant> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code InvariantDecls : SupKind Invariants SEMICOLTK;}</p>
         *
         * @param t1 {@code SupKind}.
         * @param l2 {@code Invariants}.
         * @return The parser call back hook result.
         */
        public AInvariantDecl parseInvariantDecls2(Token t1, List<AInvariant> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariants : Invariant;}</p>
         *
         * @param a1 {@code Invariant}.
         * @return The parser call back hook result.
         */
        public List<AInvariant> parseInvariants1(AInvariant a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariants : Invariants COMMATK Invariant;}</p>
         *
         * @param l1 {@code Invariants}.
         * @param a3 {@code Invariant}.
         * @return The parser call back hook result.
         */
        public List<AInvariant> parseInvariants2(List<AInvariant> l1, AInvariant a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Expression;}</p>
         *
         * @param a1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Identifier COLONTK Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant2(AIdentifier a1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Name @NEEDSKW Expression;}</p>
         *
         * @param a1 {@code Name}.
         * @param t2 {@code NEEDSKW}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant3(AName a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Identifier COLONTK Name @NEEDSKW Expression;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Name}.
         * @param t4 {@code NEEDSKW}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant4(AIdentifier a1, AName a3, Token t4, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : NonEmptySetExpression @NEEDSKW Expression;}</p>
         *
         * @param a1 {@code NonEmptySetExpression}.
         * @param t2 {@code NEEDSKW}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant5(ASetExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Expression @DISABLESKW Name;}</p>
         *
         * @param a1 {@code Expression}.
         * @param t2 {@code DISABLESKW}.
         * @param a3 {@code Name}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant6(AExpression a1, Token t2, AName a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Identifier COLONTK Expression @DISABLESKW Name;}</p>
         *
         * @param a1 {@code Identifier}.
         * @param a3 {@code Expression}.
         * @param t4 {@code DISABLESKW}.
         * @param a5 {@code Name}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant7(AIdentifier a1, AExpression a3, Token t4, AName a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Invariant : Expression @DISABLESKW NamesSet;}</p>
         *
         * @param a1 {@code Expression}.
         * @param t2 {@code DISABLESKW}.
         * @param l3 {@code NamesSet}.
         * @return The parser call back hook result.
         */
        public AInvariant parseInvariant8(AExpression a1, Token t2, List<AName> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code NamesSet : CUROPENTK Names CURCLOSETK;}</p>
         *
         * @param l2 {@code Names}.
         * @return The parser call back hook result.
         */
        public List<AName> parseNamesSet1(List<AName> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Names : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public List<AName> parseNames1(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Names : Names COMMATK Name;}</p>
         *
         * @param l1 {@code Names}.
         * @param a3 {@code Name}.
         * @return The parser call back hook result.
         */
        public List<AName> parseNames2(List<AName> l1, AName a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Updates : Update;}</p>
         *
         * @param a1 {@code Update}.
         * @return The parser call back hook result.
         */
        public List<AUpdate> parseUpdates1(AUpdate a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Updates : Updates COMMATK Update;}</p>
         *
         * @param l1 {@code Updates}.
         * @param a3 {@code Update}.
         * @return The parser call back hook result.
         */
        public List<AUpdate> parseUpdates2(List<AUpdate> l1, AUpdate a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Update : Addressable @BECOMESTK Expression;}</p>
         *
         * @param a1 {@code Addressable}.
         * @param t2 {@code BECOMESTK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AUpdate parseUpdate1(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Update : @IFKW Expressions COLONTK Updates OptElifUpdates OptElseUpdate ENDKW;}</p>
         *
         * @param t1 {@code IFKW}.
         * @param l2 {@code Expressions}.
         * @param l4 {@code Updates}.
         * @param l5 {@code OptElifUpdates}.
         * @param l6 {@code OptElseUpdate}.
         * @return The parser call back hook result.
         */
        public AUpdate parseUpdate2(Token t1, List<AExpression> l2, List<AUpdate> l4, List<AElifUpdate> l5, List<AUpdate> l6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Addressables : Addressable;}</p>
         *
         * @param a1 {@code Addressable}.
         * @return The parser call back hook result.
         */
        public List<AExpression> parseAddressables1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Addressables : Addressables COMMATK Addressable;}</p>
         *
         * @param l1 {@code Addressables}.
         * @param a3 {@code Addressable}.
         * @return The parser call back hook result.
         */
        public List<AExpression> parseAddressables2(List<AExpression> l1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Addressable : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public AExpression parseAddressable1(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Addressable : Name Projections;}</p>
         *
         * @param a1 {@code Name}.
         * @param l2 {@code Projections}.
         * @return The parser call back hook result.
         */
        public AExpression parseAddressable2(AName a1, List<AProjectionExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Addressable : @PAROPENTK Addressable COMMATK Addressables PARCLOSETK;}</p>
         *
         * @param t1 {@code PAROPENTK}.
         * @param a2 {@code Addressable}.
         * @param l4 {@code Addressables}.
         * @return The parser call back hook result.
         */
        public AExpression parseAddressable3(Token t1, AExpression a2, List<AExpression> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Projections : Projection;}</p>
         *
         * @param a1 {@code Projection}.
         * @return The parser call back hook result.
         */
        public List<AProjectionExpression> parseProjections1(AProjectionExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Projections : Projections Projection;}</p>
         *
         * @param l1 {@code Projections}.
         * @param a2 {@code Projection}.
         * @return The parser call back hook result.
         */
        public List<AProjectionExpression> parseProjections2(List<AProjectionExpression> l1, AProjectionExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Projection : @SQOPENTK Expression SQCLOSETK;}</p>
         *
         * @param t1 {@code SQOPENTK}.
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AProjectionExpression parseProjection1(Token t1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElifUpdates : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AElifUpdate> parseOptElifUpdates1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElifUpdates : OptElifUpdates @ELIFKW Expressions COLONTK Updates;}</p>
         *
         * @param l1 {@code OptElifUpdates}.
         * @param t2 {@code ELIFKW}.
         * @param l3 {@code Expressions}.
         * @param l5 {@code Updates}.
         * @return The parser call back hook result.
         */
        public List<AElifUpdate> parseOptElifUpdates2(List<AElifUpdate> l1, Token t2, List<AExpression> l3, List<AUpdate> l5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElseUpdate : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AUpdate> parseOptElseUpdate1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElseUpdate : ELSEKW Updates;}</p>
         *
         * @param l2 {@code Updates}.
         * @return The parser call back hook result.
         */
        public List<AUpdate> parseOptElseUpdate2(List<AUpdate> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Identifiers : Identifier;}</p>
         *
         * @param a1 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public List<AIdentifier> parseIdentifiers1(AIdentifier a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Identifiers : Identifiers COMMATK Identifier;}</p>
         *
         * @param l1 {@code Identifiers}.
         * @param a3 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public List<AIdentifier> parseIdentifiers2(List<AIdentifier> l1, AIdentifier a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSupKind : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public Token parseOptSupKind1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSupKind : SupKind;}</p>
         *
         * @param t1 {@code SupKind}.
         * @return The parser call back hook result.
         */
        public Token parseOptSupKind2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptControllability : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public Token parseOptControllability1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptControllability : Controllability;}</p>
         *
         * @param t1 {@code Controllability}.
         * @return The parser call back hook result.
         */
        public Token parseOptControllability2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Controllability : @CONTROLLABLEKW;}</p>
         *
         * @param t1 {@code CONTROLLABLEKW}.
         * @return The parser call back hook result.
         */
        public Token parseControllability1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Controllability : @UNCONTROLLABLEKW;}</p>
         *
         * @param t1 {@code UNCONTROLLABLEKW}.
         * @return The parser call back hook result.
         */
        public Token parseControllability2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptIoDecls : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AIoDecl> parseOptIoDecls1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptIoDecls : OptIoDecls IoDecl;}</p>
         *
         * @param l1 {@code OptIoDecls}.
         * @param a2 {@code IoDecl}.
         * @return The parser call back hook result.
         */
        public List<AIoDecl> parseOptIoDecls2(List<AIoDecl> l1, AIoDecl a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : SvgFile;}</p>
         *
         * @param a1 {@code SvgFile}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl1(ASvgFile a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : SvgCopy;}</p>
         *
         * @param a1 {@code SvgCopy}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl2(ASvgCopy a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : SvgMove;}</p>
         *
         * @param a1 {@code SvgMove}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl3(ASvgMove a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : SvgOut;}</p>
         *
         * @param a1 {@code SvgOut}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl4(ASvgOut a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : SvgIn;}</p>
         *
         * @param a1 {@code SvgIn}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl5(ASvgIn a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : PrintFile;}</p>
         *
         * @param a1 {@code PrintFile}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl6(APrintFile a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code IoDecl : Print;}</p>
         *
         * @param a1 {@code Print}.
         * @return The parser call back hook result.
         */
        public AIoDecl parseIoDecl7(APrint a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgFile : @SVGFILEKW StringToken SEMICOLTK;}</p>
         *
         * @param t1 {@code SVGFILEKW}.
         * @param a2 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public ASvgFile parseSvgFile1(Token t1, AStringToken a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgFile : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public ASvgFile parseOptSvgFile1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgFile : @FILEKW StringToken;}</p>
         *
         * @param t1 {@code FILEKW}.
         * @param a2 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public ASvgFile parseOptSvgFile2(Token t1, AStringToken a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgCopy : @SVGCOPYKW IDKW Expression OptSvgCopyPre OptSvgCopyPost OptSvgFile @SEMICOLTK;}</p>
         *
         * @param t1 {@code SVGCOPYKW}.
         * @param a3 {@code Expression}.
         * @param a4 {@code OptSvgCopyPre}.
         * @param a5 {@code OptSvgCopyPost}.
         * @param a6 {@code OptSvgFile}.
         * @param t7 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public ASvgCopy parseSvgCopy1(Token t1, AExpression a3, AExpression a4, AExpression a5, ASvgFile a6, Token t7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgCopyPre : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public AExpression parseOptSvgCopyPre1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgCopyPre : PREKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseOptSvgCopyPre2(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgCopyPost : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public AExpression parseOptSvgCopyPost1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgCopyPost : POSTKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseOptSvgCopyPost2(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgMove : @SVGMOVEKW IDKW Expression TOKW Expression COMMATK Expression OptSvgFile @SEMICOLTK;}</p>
         *
         * @param t1 {@code SVGMOVEKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code Expression}.
         * @param a7 {@code Expression}.
         * @param a8 {@code OptSvgFile}.
         * @param t9 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public ASvgMove parseSvgMove1(Token t1, AExpression a3, AExpression a5, AExpression a7, ASvgFile a8, Token t9);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgOut : @SVGOUTKW IDKW Expression SvgAttr VALUEKW Expression OptSvgFile @SEMICOLTK;}</p>
         *
         * @param t1 {@code SVGOUTKW}.
         * @param a3 {@code Expression}.
         * @param a4 {@code SvgAttr}.
         * @param a6 {@code Expression}.
         * @param a7 {@code OptSvgFile}.
         * @param t8 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public ASvgOut parseSvgOut1(Token t1, AExpression a3, AStringToken a4, AExpression a6, ASvgFile a7, Token t8);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgAttr : ATTRKW StringToken;}</p>
         *
         * @param a2 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public AStringToken parseSvgAttr1(AStringToken a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgAttr : @TEXTKW;}</p>
         *
         * @param t1 {@code TEXTKW}.
         * @return The parser call back hook result.
         */
        public AStringToken parseSvgAttr2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgIn : @SVGINKW IDKW Expression EVENTKW SvgInEvent OptSvgFile @SEMICOLTK;}</p>
         *
         * @param t1 {@code SVGINKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code SvgInEvent}.
         * @param a6 {@code OptSvgFile}.
         * @param t7 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public ASvgIn parseSvgIn1(Token t1, AExpression a3, ASvgInEvent a5, ASvgFile a6, Token t7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgIn : @SVGINKW IDKW Expression DOKW Updates OptSvgFile @SEMICOLTK;}</p>
         *
         * @param t1 {@code SVGINKW}.
         * @param a3 {@code Expression}.
         * @param l5 {@code Updates}.
         * @param a6 {@code OptSvgFile}.
         * @param t7 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public ASvgIn parseSvgIn2(Token t1, AExpression a3, List<AUpdate> l5, ASvgFile a6, Token t7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgInEvent : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public ASvgInEvent parseSvgInEvent1(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgInEvent : @IFKW Expression @COLONTK Name OptSvgInEventElifs @ELSEKW Name ENDKW;}</p>
         *
         * @param t1 {@code IFKW}.
         * @param a2 {@code Expression}.
         * @param t3 {@code COLONTK}.
         * @param a4 {@code Name}.
         * @param l5 {@code OptSvgInEventElifs}.
         * @param t6 {@code ELSEKW}.
         * @param a7 {@code Name}.
         * @return The parser call back hook result.
         */
        public ASvgInEvent parseSvgInEvent2(Token t1, AExpression a2, Token t3, AName a4, List<ASvgInEventIfEntry> l5, Token t6, AName a7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgInEvent : @IFKW Expression @COLONTK Name SvgInEventElifs ENDKW;}</p>
         *
         * @param t1 {@code IFKW}.
         * @param a2 {@code Expression}.
         * @param t3 {@code COLONTK}.
         * @param a4 {@code Name}.
         * @param l5 {@code SvgInEventElifs}.
         * @return The parser call back hook result.
         */
        public ASvgInEvent parseSvgInEvent3(Token t1, AExpression a2, Token t3, AName a4, List<ASvgInEventIfEntry> l5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgInEventElifs : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<ASvgInEventIfEntry> parseOptSvgInEventElifs1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptSvgInEventElifs : SvgInEventElifs;}</p>
         *
         * @param l1 {@code SvgInEventElifs}.
         * @return The parser call back hook result.
         */
        public List<ASvgInEventIfEntry> parseOptSvgInEventElifs2(List<ASvgInEventIfEntry> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgInEventElifs : @ELIFKW Expression COLONTK Name;}</p>
         *
         * @param t1 {@code ELIFKW}.
         * @param a2 {@code Expression}.
         * @param a4 {@code Name}.
         * @return The parser call back hook result.
         */
        public List<ASvgInEventIfEntry> parseSvgInEventElifs1(Token t1, AExpression a2, AName a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SvgInEventElifs : SvgInEventElifs @ELIFKW Expression COLONTK Name;}</p>
         *
         * @param l1 {@code SvgInEventElifs}.
         * @param t2 {@code ELIFKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code Name}.
         * @return The parser call back hook result.
         */
        public List<ASvgInEventIfEntry> parseSvgInEventElifs2(List<ASvgInEventIfEntry> l1, Token t2, AExpression a3, AName a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFile : @PRINTFILEKW StringToken SEMICOLTK;}</p>
         *
         * @param t1 {@code PRINTFILEKW}.
         * @param a2 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public APrintFile parsePrintFile1(Token t1, AStringToken a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Print : @PRINTKW PrintTxt OptPrintFors OptPrintWhen OptPrintFile @SEMICOLTK;}</p>
         *
         * @param t1 {@code PRINTKW}.
         * @param a2 {@code PrintTxt}.
         * @param l3 {@code OptPrintFors}.
         * @param a4 {@code OptPrintWhen}.
         * @param a5 {@code OptPrintFile}.
         * @param t6 {@code SEMICOLTK}.
         * @return The parser call back hook result.
         */
        public APrint parsePrint1(Token t1, APrintTxt a2, List<APrintFor> l3, APrintWhen a4, APrintFile a5, Token t6);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintTxt : Expression;}</p>
         *
         * @param a1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintTxt parsePrintTxt1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintTxt : PREKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintTxt parsePrintTxt2(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintTxt : POSTKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintTxt parsePrintTxt3(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintTxt : PREKW Expression POSTKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @param a4 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintTxt parsePrintTxt4(AExpression a2, AExpression a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintFors : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<APrintFor> parseOptPrintFors1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintFors : FORKW PrintFors;}</p>
         *
         * @param l2 {@code PrintFors}.
         * @return The parser call back hook result.
         */
        public List<APrintFor> parseOptPrintFors2(List<APrintFor> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFors : PrintFor;}</p>
         *
         * @param a1 {@code PrintFor}.
         * @return The parser call back hook result.
         */
        public List<APrintFor> parsePrintFors1(APrintFor a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFors : PrintFors COMMATK PrintFor;}</p>
         *
         * @param l1 {@code PrintFors}.
         * @param a3 {@code PrintFor}.
         * @return The parser call back hook result.
         */
        public List<APrintFor> parsePrintFors2(List<APrintFor> l1, APrintFor a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFor : @EVENTKW;}</p>
         *
         * @param t1 {@code EVENTKW}.
         * @return The parser call back hook result.
         */
        public APrintFor parsePrintFor1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFor : @TIMEKW;}</p>
         *
         * @param t1 {@code TIMEKW}.
         * @return The parser call back hook result.
         */
        public APrintFor parsePrintFor2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFor : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public APrintFor parsePrintFor3(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFor : @INITIALKW;}</p>
         *
         * @param t1 {@code INITIALKW}.
         * @return The parser call back hook result.
         */
        public APrintFor parsePrintFor4(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code PrintFor : @FINALKW;}</p>
         *
         * @param t1 {@code FINALKW}.
         * @return The parser call back hook result.
         */
        public APrintFor parsePrintFor5(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintWhen : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public APrintWhen parseOptPrintWhen1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintWhen : WHENKW Expression;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintWhen parseOptPrintWhen2(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintWhen : WHENKW PREKW Expression;}</p>
         *
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintWhen parseOptPrintWhen3(AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintWhen : WHENKW POSTKW Expression;}</p>
         *
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintWhen parseOptPrintWhen4(AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintWhen : WHENKW PREKW Expression POSTKW Expression;}</p>
         *
         * @param a3 {@code Expression}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public APrintWhen parseOptPrintWhen5(AExpression a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintFile : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public APrintFile parseOptPrintFile1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptPrintFile : FILEKW StringToken;}</p>
         *
         * @param a2 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public APrintFile parseOptPrintFile2(AStringToken a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Types : Type;}</p>
         *
         * @param a1 {@code Type}.
         * @return The parser call back hook result.
         */
        public List<ACifType> parseTypes1(ACifType a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Types : Types COMMATK Type;}</p>
         *
         * @param l1 {@code Types}.
         * @param a3 {@code Type}.
         * @return The parser call back hook result.
         */
        public List<ACifType> parseTypes2(List<ACifType> l1, ACifType a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventType : @VOIDKW;}</p>
         *
         * @param t1 {@code VOIDKW}.
         * @return The parser call back hook result.
         */
        public ACifType parseEventType1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code EventType : Type;}</p>
         *
         * @param a1 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseEventType2(ACifType a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @BOOLKW;}</p>
         *
         * @param t1 {@code BOOLKW}.
         * @return The parser call back hook result.
         */
        public ACifType parseType01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @INTKW;}</p>
         *
         * @param t1 {@code INTKW}.
         * @return The parser call back hook result.
         */
        public ACifType parseType02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @INTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK;}</p>
         *
         * @param t1 {@code INTKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public ACifType parseType03(Token t1, AExpression a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @REALKW;}</p>
         *
         * @param t1 {@code REALKW}.
         * @return The parser call back hook result.
         */
        public ACifType parseType04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @STRINGKW;}</p>
         *
         * @param t1 {@code STRINGKW}.
         * @return The parser call back hook result.
         */
        public ACifType parseType05(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LISTKW Type;}</p>
         *
         * @param t1 {@code LISTKW}.
         * @param a2 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType06(Token t1, ACifType a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LISTKW SQOPENTK Expression SQCLOSETK Type;}</p>
         *
         * @param t1 {@code LISTKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType07(Token t1, AExpression a3, ACifType a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @LISTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK Type;}</p>
         *
         * @param t1 {@code LISTKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code Expression}.
         * @param a7 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType08(Token t1, AExpression a3, AExpression a5, ACifType a7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @SETKW Type;}</p>
         *
         * @param t1 {@code SETKW}.
         * @param a2 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType09(Token t1, ACifType a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @DICTKW PAROPENTK Type COLONTK Type PARCLOSETK;}</p>
         *
         * @param t1 {@code DICTKW}.
         * @param a3 {@code Type}.
         * @param a5 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType10(Token t1, ACifType a3, ACifType a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @TUPLEKW PAROPENTK Fields PARCLOSETK;}</p>
         *
         * @param t1 {@code TUPLEKW}.
         * @param l3 {@code Fields}.
         * @return The parser call back hook result.
         */
        public ACifType parseType11(Token t1, List<AField> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @FUNCKW Type PAROPENTK PARCLOSETK;}</p>
         *
         * @param t1 {@code FUNCKW}.
         * @param a2 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType12(Token t1, ACifType a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @FUNCKW Type PAROPENTK Types PARCLOSETK;}</p>
         *
         * @param t1 {@code FUNCKW}.
         * @param a2 {@code Type}.
         * @param l4 {@code Types}.
         * @return The parser call back hook result.
         */
        public ACifType parseType13(Token t1, ACifType a2, List<ACifType> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : @DISTKW Type;}</p>
         *
         * @param t1 {@code DISTKW}.
         * @param a2 {@code Type}.
         * @return The parser call back hook result.
         */
        public ACifType parseType14(Token t1, ACifType a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Type : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public ACifType parseType15(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Fields : Field;}</p>
         *
         * @param a1 {@code Field}.
         * @return The parser call back hook result.
         */
        public List<AField> parseFields1(AField a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Fields : Fields SEMICOLTK Field;}</p>
         *
         * @param l1 {@code Fields}.
         * @param a3 {@code Field}.
         * @return The parser call back hook result.
         */
        public List<AField> parseFields2(List<AField> l1, AField a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Field : Type Identifiers;}</p>
         *
         * @param a1 {@code Type}.
         * @param l2 {@code Identifiers}.
         * @return The parser call back hook result.
         */
        public AField parseField1(ACifType a1, List<AIdentifier> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expressions : Expression;}</p>
         *
         * @param a1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AExpression> parseExpressions1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expressions : Expressions COMMATK Expression;}</p>
         *
         * @param l1 {@code Expressions}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AExpression> parseExpressions2(List<AExpression> l1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptExpression : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public AExpression parseOptExpression1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptExpression : Expression;}</p>
         *
         * @param a1 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseOptExpression2(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : OrExpression;}</p>
         *
         * @param a1 {@code OrExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : OrExpression @IMPLIESTK OrExpression;}</p>
         *
         * @param a1 {@code OrExpression}.
         * @param t2 {@code IMPLIESTK}.
         * @param a3 {@code OrExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Expression : OrExpression @EQUIVALENCETK OrExpression;}</p>
         *
         * @param a1 {@code OrExpression}.
         * @param t2 {@code EQUIVALENCETK}.
         * @param a3 {@code OrExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpression3(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OrExpression : AndExpression;}</p>
         *
         * @param a1 {@code AndExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseOrExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OrExpression : OrExpression @ORKW AndExpression;}</p>
         *
         * @param a1 {@code OrExpression}.
         * @param t2 {@code ORKW}.
         * @param a3 {@code AndExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseOrExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AndExpression : CompareExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseAndExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AndExpression : AndExpression @ANDKW CompareExpression;}</p>
         *
         * @param a1 {@code AndExpression}.
         * @param t2 {@code ANDKW}.
         * @param a3 {@code CompareExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseAndExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : AddExpression;}</p>
         *
         * @param a1 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @LTTK AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code LTTK}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @LETK AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code LETK}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression3(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @EQTK AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code EQTK}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression4(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @NETK AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code NETK}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression5(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @GETK AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code GETK}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression6(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @GTTK AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code GTTK}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression7(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @INKW AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code INKW}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression8(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code CompareExpression : CompareExpression @SUBKW AddExpression;}</p>
         *
         * @param a1 {@code CompareExpression}.
         * @param t2 {@code SUBKW}.
         * @param a3 {@code AddExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseCompareExpression9(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AddExpression : MulExpression;}</p>
         *
         * @param a1 {@code MulExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseAddExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AddExpression : AddExpression @PLUSTK MulExpression;}</p>
         *
         * @param a1 {@code AddExpression}.
         * @param t2 {@code PLUSTK}.
         * @param a3 {@code MulExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseAddExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AddExpression : AddExpression @MINUSTK MulExpression;}</p>
         *
         * @param a1 {@code AddExpression}.
         * @param t2 {@code MINUSTK}.
         * @param a3 {@code MulExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseAddExpression3(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : UnaryExpression;}</p>
         *
         * @param a1 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseMulExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @ASTERISKTK UnaryExpression;}</p>
         *
         * @param a1 {@code MulExpression}.
         * @param t2 {@code ASTERISKTK}.
         * @param a3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseMulExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @SLASHTK UnaryExpression;}</p>
         *
         * @param a1 {@code MulExpression}.
         * @param t2 {@code SLASHTK}.
         * @param a3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseMulExpression3(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @DIVKW UnaryExpression;}</p>
         *
         * @param a1 {@code MulExpression}.
         * @param t2 {@code DIVKW}.
         * @param a3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseMulExpression4(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code MulExpression : MulExpression @MODKW UnaryExpression;}</p>
         *
         * @param a1 {@code MulExpression}.
         * @param t2 {@code MODKW}.
         * @param a3 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseMulExpression5(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : FuncExpression;}</p>
         *
         * @param a1 {@code FuncExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseUnaryExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @MINUSTK UnaryExpression;}</p>
         *
         * @param t1 {@code MINUSTK}.
         * @param a2 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseUnaryExpression2(Token t1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @PLUSTK UnaryExpression;}</p>
         *
         * @param t1 {@code PLUSTK}.
         * @param a2 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseUnaryExpression3(Token t1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @NOTKW UnaryExpression;}</p>
         *
         * @param t1 {@code NOTKW}.
         * @param a2 {@code UnaryExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseUnaryExpression4(Token t1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code UnaryExpression : @SAMPLEKW FuncExpression;}</p>
         *
         * @param t1 {@code SAMPLEKW}.
         * @param a2 {@code FuncExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseUnaryExpression5(Token t1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : ExpressionFactor;}</p>
         *
         * @param a1 {@code ExpressionFactor}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression1(AExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : FuncExpression @SQOPENTK Expression SQCLOSETK;}</p>
         *
         * @param a1 {@code FuncExpression}.
         * @param t2 {@code SQOPENTK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression2(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : FuncExpression @SQOPENTK OptExpression COLONTK OptExpression SQCLOSETK;}</p>
         *
         * @param a1 {@code FuncExpression}.
         * @param t2 {@code SQOPENTK}.
         * @param a3 {@code OptExpression}.
         * @param a5 {@code OptExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression3(AExpression a1, Token t2, AExpression a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : FuncExpression @PAROPENTK PARCLOSETK;}</p>
         *
         * @param a1 {@code FuncExpression}.
         * @param t2 {@code PAROPENTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression4(AExpression a1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : FuncExpression @PAROPENTK Expressions PARCLOSETK;}</p>
         *
         * @param a1 {@code FuncExpression}.
         * @param t2 {@code PAROPENTK}.
         * @param l3 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression5(AExpression a1, Token t2, List<AExpression> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : StdLibFunction @PAROPENTK PARCLOSETK;}</p>
         *
         * @param t1 {@code StdLibFunction}.
         * @param t2 {@code PAROPENTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression6(Token t1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code FuncExpression : StdLibFunction @PAROPENTK Expressions PARCLOSETK;}</p>
         *
         * @param t1 {@code StdLibFunction}.
         * @param t2 {@code PAROPENTK}.
         * @param l3 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public AExpression parseFuncExpression7(Token t1, Token t2, List<AExpression> l3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @TRUEKW;}</p>
         *
         * @param t1 {@code TRUEKW}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor01(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @FALSEKW;}</p>
         *
         * @param t1 {@code FALSEKW}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor02(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @NUMBERTK;}</p>
         *
         * @param t1 {@code NUMBERTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor03(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @REALTK;}</p>
         *
         * @param t1 {@code REALTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor04(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : StringToken;}</p>
         *
         * @param a1 {@code StringToken}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor05(AStringToken a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @TIMEKW;}</p>
         *
         * @param t1 {@code TIMEKW}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor06(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @SQOPENTK SQCLOSETK;}</p>
         *
         * @param t1 {@code SQOPENTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor07(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @SQOPENTK Expressions SQCLOSETK;}</p>
         *
         * @param t1 {@code SQOPENTK}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor08(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @CUROPENTK CURCLOSETK;}</p>
         *
         * @param t1 {@code CUROPENTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor09(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : NonEmptySetExpression;}</p>
         *
         * @param a1 {@code NonEmptySetExpression}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor10(ASetExpression a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @CUROPENTK DictPairs CURCLOSETK;}</p>
         *
         * @param t1 {@code CUROPENTK}.
         * @param l2 {@code DictPairs}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor11(Token t1, List<ADictPair> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @PAROPENTK Expression COMMATK Expressions PARCLOSETK;}</p>
         *
         * @param t1 {@code PAROPENTK}.
         * @param a2 {@code Expression}.
         * @param l4 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor12(Token t1, AExpression a2, List<AExpression> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @LTTK Type GTTK ExpressionFactor;}</p>
         *
         * @param t1 {@code LTTK}.
         * @param a2 {@code Type}.
         * @param a4 {@code ExpressionFactor}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor13(Token t1, ACifType a2, AExpression a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @IFKW Expressions COLONTK Expression OptElifExprs ELSEKW Expression ENDKW;}</p>
         *
         * @param t1 {@code IFKW}.
         * @param l2 {@code Expressions}.
         * @param a4 {@code Expression}.
         * @param l5 {@code OptElifExprs}.
         * @param a7 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor14(Token t1, List<AExpression> l2, AExpression a4, List<AElifExpression> l5, AExpression a7);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @SWITCHKW Expression COLONTK SwitchBody ENDKW;}</p>
         *
         * @param t1 {@code SWITCHKW}.
         * @param a2 {@code Expression}.
         * @param l4 {@code SwitchBody}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor15(Token t1, AExpression a2, List<ASwitchCase> l4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : PAROPENTK Expression PARCLOSETK;}</p>
         *
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor16(AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : Name;}</p>
         *
         * @param a1 {@code Name}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor17(AName a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : Name @APOSTROPHETK;}</p>
         *
         * @param a1 {@code Name}.
         * @param t2 {@code APOSTROPHETK}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor18(AName a1, Token t2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @QUESTIONTK;}</p>
         *
         * @param t1 {@code QUESTIONTK}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor19(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code ExpressionFactor : @SELFKW;}</p>
         *
         * @param t1 {@code SELFKW}.
         * @return The parser call back hook result.
         */
        public AExpression parseExpressionFactor20(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code NonEmptySetExpression : @CUROPENTK Expressions CURCLOSETK;}</p>
         *
         * @param t1 {@code CUROPENTK}.
         * @param l2 {@code Expressions}.
         * @return The parser call back hook result.
         */
        public ASetExpression parseNonEmptySetExpression1(Token t1, List<AExpression> l2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DictPairs : Expression @COLONTK Expression;}</p>
         *
         * @param a1 {@code Expression}.
         * @param t2 {@code COLONTK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ADictPair> parseDictPairs1(AExpression a1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code DictPairs : DictPairs COMMATK Expression @COLONTK Expression;}</p>
         *
         * @param l1 {@code DictPairs}.
         * @param a3 {@code Expression}.
         * @param t4 {@code COLONTK}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ADictPair> parseDictPairs2(List<ADictPair> l1, AExpression a3, Token t4, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElifExprs : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AElifExpression> parseOptElifExprs1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptElifExprs : OptElifExprs @ELIFKW Expressions COLONTK Expression;}</p>
         *
         * @param l1 {@code OptElifExprs}.
         * @param t2 {@code ELIFKW}.
         * @param l3 {@code Expressions}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<AElifExpression> parseOptElifExprs2(List<AElifExpression> l1, Token t2, List<AExpression> l3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SwitchBody : SwitchCases;}</p>
         *
         * @param l1 {@code SwitchCases}.
         * @return The parser call back hook result.
         */
        public List<ASwitchCase> parseSwitchBody1(List<ASwitchCase> l1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SwitchBody : SwitchCases @ELSEKW Expression;}</p>
         *
         * @param l1 {@code SwitchCases}.
         * @param t2 {@code ELSEKW}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ASwitchCase> parseSwitchBody2(List<ASwitchCase> l1, Token t2, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SwitchBody : @ELSEKW Expression;}</p>
         *
         * @param t1 {@code ELSEKW}.
         * @param a2 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ASwitchCase> parseSwitchBody3(Token t1, AExpression a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SwitchCases : @CASEKW Expression COLONTK Expression;}</p>
         *
         * @param t1 {@code CASEKW}.
         * @param a2 {@code Expression}.
         * @param a4 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ASwitchCase> parseSwitchCases1(Token t1, AExpression a2, AExpression a4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code SwitchCases : SwitchCases @CASEKW Expression COLONTK Expression;}</p>
         *
         * @param l1 {@code SwitchCases}.
         * @param t2 {@code CASEKW}.
         * @param a3 {@code Expression}.
         * @param a5 {@code Expression}.
         * @return The parser call back hook result.
         */
        public List<ASwitchCase> parseSwitchCases2(List<ASwitchCase> l1, Token t2, AExpression a3, AExpression a5);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Name : Identifier;}</p>
         *
         * @param a1 {@code Identifier}.
         * @return The parser call back hook result.
         */
        public AName parseName1(AIdentifier a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Name : @RELATIVENAMETK;}</p>
         *
         * @param t1 {@code RELATIVENAMETK}.
         * @return The parser call back hook result.
         */
        public AName parseName2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Name : @ABSOLUTENAMETK;}</p>
         *
         * @param t1 {@code ABSOLUTENAMETK}.
         * @return The parser call back hook result.
         */
        public AName parseName3(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Name : @ROOTNAMETK;}</p>
         *
         * @param t1 {@code ROOTNAMETK}.
         * @return The parser call back hook result.
         */
        public AName parseName4(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptAnnos : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public List<AAnnotation> parseOptAnnos1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptAnnos : OptAnnos Annotation;}</p>
         *
         * @param l1 {@code OptAnnos}.
         * @param a2 {@code Annotation}.
         * @return The parser call back hook result.
         */
        public List<AAnnotation> parseOptAnnos2(List<AAnnotation> l1, AAnnotation a2);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Annotation : @ANNOTATIONNAMETK;}</p>
         *
         * @param t1 {@code ANNOTATIONNAMETK}.
         * @return The parser call back hook result.
         */
        public AAnnotation parseAnnotation1(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Annotation : @ANNOTATIONNAMETK PAROPENTK PARCLOSETK;}</p>
         *
         * @param t1 {@code ANNOTATIONNAMETK}.
         * @return The parser call back hook result.
         */
        public AAnnotation parseAnnotation2(Token t1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code Annotation : @ANNOTATIONNAMETK PAROPENTK AnnotationArgs OptComma PARCLOSETK;}</p>
         *
         * @param t1 {@code ANNOTATIONNAMETK}.
         * @param l3 {@code AnnotationArgs}.
         * @param t4 {@code OptComma}.
         * @return The parser call back hook result.
         */
        public AAnnotation parseAnnotation3(Token t1, List<AAnnotationArgument> l3, Token t4);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AnnotationArgs : AnnotationArg;}</p>
         *
         * @param a1 {@code AnnotationArg}.
         * @return The parser call back hook result.
         */
        public List<AAnnotationArgument> parseAnnotationArgs1(AAnnotationArgument a1);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AnnotationArgs : AnnotationArgs COMMATK AnnotationArg;}</p>
         *
         * @param l1 {@code AnnotationArgs}.
         * @param a3 {@code AnnotationArg}.
         * @return The parser call back hook result.
         */
        public List<AAnnotationArgument> parseAnnotationArgs2(List<AAnnotationArgument> l1, AAnnotationArgument a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AnnotationArg : @IDENTIFIERTK EQTK Expression;}</p>
         *
         * @param t1 {@code IDENTIFIERTK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AAnnotationArgument parseAnnotationArg1(Token t1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code AnnotationArg : @RELATIVENAMETK EQTK Expression;}</p>
         *
         * @param t1 {@code RELATIVENAMETK}.
         * @param a3 {@code Expression}.
         * @return The parser call back hook result.
         */
        public AAnnotationArgument parseAnnotationArg2(Token t1, AExpression a3);

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptComma : ;}</p>
         *
         * @return The parser call back hook result.
         */
        public Token parseOptComma1();

        /**
         * Parser call back hook for rule/production:
         *
         * <p>{@code OptComma : @COMMATK;}</p>
         *
         * @param t1 {@code COMMATK}.
         * @return The parser call back hook result.
         */
        public Token parseOptComma2(Token t1);
    }
}
