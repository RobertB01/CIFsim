//////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010, 2024 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available
// under the terms of the MIT License which is available at
// https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
//////////////////////////////////////////////////////////////////////////////

package org.eclipse.escet.cif.parser;

import java.util.List;

import org.eclipse.escet.cif.parser.ast.ADecl;
import org.eclipse.escet.cif.parser.ast.AEquation;
import org.eclipse.escet.cif.parser.ast.AEventParameterPart;
import org.eclipse.escet.cif.parser.ast.AGroupBody;
import org.eclipse.escet.cif.parser.ast.AImport;
import org.eclipse.escet.cif.parser.ast.AInvariant;
import org.eclipse.escet.cif.parser.ast.AInvariantDecl;
import org.eclipse.escet.cif.parser.ast.AParameter;
import org.eclipse.escet.cif.parser.ast.ASpecification;
import org.eclipse.escet.cif.parser.ast.annotations.AAnnotation;
import org.eclipse.escet.cif.parser.ast.annotations.AAnnotationArgument;
import org.eclipse.escet.cif.parser.ast.automata.AAutomatonBody;
import org.eclipse.escet.cif.parser.ast.automata.ACoreEdge;
import org.eclipse.escet.cif.parser.ast.automata.AEdgeEvent;
import org.eclipse.escet.cif.parser.ast.automata.AElifUpdate;
import org.eclipse.escet.cif.parser.ast.automata.ALocation;
import org.eclipse.escet.cif.parser.ast.automata.ALocationElement;
import org.eclipse.escet.cif.parser.ast.automata.AUpdate;
import org.eclipse.escet.cif.parser.ast.declarations.AAlgVariable;
import org.eclipse.escet.cif.parser.ast.declarations.AConstant;
import org.eclipse.escet.cif.parser.ast.declarations.AContVariable;
import org.eclipse.escet.cif.parser.ast.declarations.ADiscVariable;
import org.eclipse.escet.cif.parser.ast.declarations.ADiscVariableDecl;
import org.eclipse.escet.cif.parser.ast.declarations.ATypeDef;
import org.eclipse.escet.cif.parser.ast.expressions.ADictPair;
import org.eclipse.escet.cif.parser.ast.expressions.AElifExpression;
import org.eclipse.escet.cif.parser.ast.expressions.AExpression;
import org.eclipse.escet.cif.parser.ast.expressions.AProjectionExpression;
import org.eclipse.escet.cif.parser.ast.expressions.ASetExpression;
import org.eclipse.escet.cif.parser.ast.expressions.ASwitchCase;
import org.eclipse.escet.cif.parser.ast.functions.AElifFuncStatement;
import org.eclipse.escet.cif.parser.ast.functions.AElseFuncStatement;
import org.eclipse.escet.cif.parser.ast.functions.AFuncBody;
import org.eclipse.escet.cif.parser.ast.functions.AFuncParam;
import org.eclipse.escet.cif.parser.ast.functions.AFuncStatement;
import org.eclipse.escet.cif.parser.ast.iodecls.AIoDecl;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrint;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintFile;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintFor;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintTxt;
import org.eclipse.escet.cif.parser.ast.iodecls.print.APrintWhen;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgCopy;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgFile;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgIn;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgInEvent;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgInEventIfEntry;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgMove;
import org.eclipse.escet.cif.parser.ast.iodecls.svg.ASvgOut;
import org.eclipse.escet.cif.parser.ast.tokens.AAnnotatedIdentifier;
import org.eclipse.escet.cif.parser.ast.tokens.AEventParamFlag;
import org.eclipse.escet.cif.parser.ast.tokens.AIdentifier;
import org.eclipse.escet.cif.parser.ast.tokens.AName;
import org.eclipse.escet.cif.parser.ast.tokens.AStringToken;
import org.eclipse.escet.cif.parser.ast.types.ACifType;
import org.eclipse.escet.cif.parser.ast.types.AField;
import org.eclipse.escet.common.java.TextPosition;
import org.eclipse.escet.setext.runtime.Parser;
import org.eclipse.escet.setext.runtime.Token;

/**
 * Call back hook methods for:
 * <ul>
 *  <li>{@link CifScanner}</li>
 *  <li>{@link CifParser}</li>
 * </ul>
 */
public final class CifParserHooks
implements CifScanner.Hooks,
           CifParser.Hooks
{
    @Override
    public void setParser(Parser<?> parser) {
    }

    @Override
    public void scanDoubleAnnoName(Token token) {
    }

    @Override
    public void scanRegularAnnoName(Token token) {
    }

    @Override // SupKind : @PLANTKW;
    public Token parseSupKind1(Token t1) {
        // return null;
    }

    @Override // SupKind : @REQUIREMENTKW;
    public Token parseSupKind2(Token t1) {
        // return null;
    }

    @Override // SupKind : @SUPERVISORKW;
    public Token parseSupKind3(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ACOSHKW;
    public Token parseStdLibFunction01(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ACOSKW;
    public Token parseStdLibFunction02(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ASINHKW;
    public Token parseStdLibFunction03(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ASINKW;
    public Token parseStdLibFunction04(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ATANHKW;
    public Token parseStdLibFunction05(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ATANKW;
    public Token parseStdLibFunction06(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @COSHKW;
    public Token parseStdLibFunction07(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @COSKW;
    public Token parseStdLibFunction08(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @SINHKW;
    public Token parseStdLibFunction09(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @SINKW;
    public Token parseStdLibFunction10(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @TANHKW;
    public Token parseStdLibFunction11(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @TANKW;
    public Token parseStdLibFunction12(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ABSKW;
    public Token parseStdLibFunction13(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @CBRTKW;
    public Token parseStdLibFunction14(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @CEILKW;
    public Token parseStdLibFunction15(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @DELKW;
    public Token parseStdLibFunction16(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @EMPTYKW;
    public Token parseStdLibFunction17(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @EXPKW;
    public Token parseStdLibFunction18(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @FLOORKW;
    public Token parseStdLibFunction19(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @FMTKW;
    public Token parseStdLibFunction20(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @LNKW;
    public Token parseStdLibFunction21(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @LOGKW;
    public Token parseStdLibFunction22(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @MAXKW;
    public Token parseStdLibFunction23(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @MINKW;
    public Token parseStdLibFunction24(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @POPKW;
    public Token parseStdLibFunction25(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @POWKW;
    public Token parseStdLibFunction26(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ROUNDKW;
    public Token parseStdLibFunction27(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @SCALEKW;
    public Token parseStdLibFunction28(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @SIGNKW;
    public Token parseStdLibFunction29(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @SIZEKW;
    public Token parseStdLibFunction30(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @SQRTKW;
    public Token parseStdLibFunction31(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @BERNOULLIKW;
    public Token parseStdLibFunction32(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @BETAKW;
    public Token parseStdLibFunction33(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @BINOMIALKW;
    public Token parseStdLibFunction34(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @CONSTANTKW;
    public Token parseStdLibFunction35(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @ERLANGKW;
    public Token parseStdLibFunction36(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @EXPONENTIALKW;
    public Token parseStdLibFunction37(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @GAMMAKW;
    public Token parseStdLibFunction38(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @GEOMETRICKW;
    public Token parseStdLibFunction39(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @LOGNORMALKW;
    public Token parseStdLibFunction40(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @NORMALKW;
    public Token parseStdLibFunction41(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @POISSONKW;
    public Token parseStdLibFunction42(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @RANDOMKW;
    public Token parseStdLibFunction43(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @TRIANGLEKW;
    public Token parseStdLibFunction44(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @UNIFORMKW;
    public Token parseStdLibFunction45(Token t1) {
        // return null;
    }

    @Override // StdLibFunction : @WEIBULLKW;
    public Token parseStdLibFunction46(Token t1) {
        // return null;
    }

    @Override // Specification : OptDoubleAnnos GroupBody;
    public ASpecification parseSpecification1(List<AAnnotation> l1, AGroupBody a2) {
        // return null;
    }

    @Override // GroupBody : OptGroupDecls;
    public AGroupBody parseGroupBody1(List<ADecl> l1) {
        // return null;
    }

    @Override // AutomatonBody : OptAutDecls Locations OptIoDecls;
    public AAutomatonBody parseAutomatonBody1(List<ADecl> l1, List<ALocation> l2, List<AIoDecl> l3) {
        // return null;
    }

    @Override // OptGroupDecls : ;
    public List<ADecl> parseOptGroupDecls1() {
        // return null;
    }

    @Override // OptGroupDecls : OptGroupDecls GroupDecl;
    public List<ADecl> parseOptGroupDecls2(List<ADecl> l1, ADecl a2) {
        // return null;
    }

    @Override // GroupDecl : Decl;
    public ADecl parseGroupDecl01(ADecl a1) {
        // return null;
    }

    @Override // GroupDecl : @IMPORTKW Imports SEMICOLTK;
    public ADecl parseGroupDecl02(Token t1, List<AImport> l2) {
        // return null;
    }

    @Override // GroupDecl : @NAMESPACEKW @IDENTIFIERTK SEMICOLTK;
    public ADecl parseGroupDecl03(Token t1, Token t2) {
        // return null;
    }

    @Override // GroupDecl : @NAMESPACEKW @RELATIVENAMETK SEMICOLTK;
    public ADecl parseGroupDecl04(Token t1, Token t2) {
        // return null;
    }

    @Override // GroupDecl : @FUNCKW Types Identifier FuncParams COLONTK FuncBody;
    public ADecl parseGroupDecl05(Token t1, List<ACifType> l2, AIdentifier a3, List<AFuncParam> l4, AFuncBody a6) {
        // return null;
    }

    @Override // GroupDecl : Annos @FUNCKW Types Identifier FuncParams COLONTK FuncBody;
    public ADecl parseGroupDecl06(List<AAnnotation> l1, Token t2, List<ACifType> l3, AIdentifier a4, List<AFuncParam> l5, AFuncBody a7) {
        // return null;
    }

    @Override // GroupDecl : Identifier COLONTK Name CompInstArgs @SEMICOLTK;
    public ADecl parseGroupDecl07(AIdentifier a1, AName a3, List<AExpression> l4, Token t5) {
        // return null;
    }

    @Override // GroupDecl : @GROUPKW DEFKW Identifier CompDefParms COLONTK GroupBody @ENDKW;
    public ADecl parseGroupDecl08(Token t1, AIdentifier a3, List<AParameter> l4, AGroupBody a6, Token t7) {
        // return null;
    }

    @Override // GroupDecl : OptSupKind @AUTOMATONKW DEFKW Identifier CompDefParms COLONTK AutomatonBody @ENDKW;
    public ADecl parseGroupDecl09(Token t1, Token t2, AIdentifier a4, List<AParameter> l5, AAutomatonBody a7, Token t8) {
        // return null;
    }

    @Override // GroupDecl : SupKind DEFKW Identifier CompDefParms COLONTK AutomatonBody @ENDKW;
    public ADecl parseGroupDecl10(Token t1, AIdentifier a3, List<AParameter> l4, AAutomatonBody a6, Token t7) {
        // return null;
    }

    @Override // GroupDecl : @GROUPKW Identifier COLONTK GroupBody @ENDKW;
    public ADecl parseGroupDecl11(Token t1, AIdentifier a2, AGroupBody a4, Token t5) {
        // return null;
    }

    @Override // GroupDecl : Annos @GROUPKW Identifier COLONTK GroupBody @ENDKW;
    public ADecl parseGroupDecl12(List<AAnnotation> l1, Token t2, AIdentifier a3, AGroupBody a5, Token t6) {
        // return null;
    }

    @Override // GroupDecl : OptSupKind @AUTOMATONKW Identifier COLONTK AutomatonBody @ENDKW;
    public ADecl parseGroupDecl13(Token t1, Token t2, AIdentifier a3, AAutomatonBody a5, Token t6) {
        // return null;
    }

    @Override // GroupDecl : Annos OptSupKind @AUTOMATONKW Identifier COLONTK AutomatonBody @ENDKW;
    public ADecl parseGroupDecl14(List<AAnnotation> l1, Token t2, Token t3, AIdentifier a4, AAutomatonBody a6, Token t7) {
        // return null;
    }

    @Override // GroupDecl : SupKind Identifier COLONTK AutomatonBody @ENDKW;
    public ADecl parseGroupDecl15(Token t1, AIdentifier a2, AAutomatonBody a4, Token t5) {
        // return null;
    }

    @Override // GroupDecl : Annos SupKind Identifier COLONTK AutomatonBody @ENDKW;
    public ADecl parseGroupDecl16(List<AAnnotation> l1, Token t2, AIdentifier a3, AAutomatonBody a5, Token t6) {
        // return null;
    }

    @Override // OptAutDecls : ;
    public List<ADecl> parseOptAutDecls1() {
        // return null;
    }

    @Override // OptAutDecls : OptAutDecls AutDecl;
    public List<ADecl> parseOptAutDecls2(List<ADecl> l1, ADecl a2) {
        // return null;
    }

    @Override // AutDecl : Decl;
    public ADecl parseAutDecl1(ADecl a1) {
        // return null;
    }

    @Override // AutDecl : @ALPHABETKW Events SEMICOLTK;
    public ADecl parseAutDecl2(Token t1, List<AName> l2) {
        // return null;
    }

    @Override // AutDecl : @ALPHABETKW SEMICOLTK;
    public ADecl parseAutDecl3(Token t1) {
        // return null;
    }

    @Override // AutDecl : @MONITORKW Events SEMICOLTK;
    public ADecl parseAutDecl4(Token t1, List<AName> l2) {
        // return null;
    }

    @Override // AutDecl : @MONITORKW SEMICOLTK;
    public ADecl parseAutDecl5(Token t1) {
        // return null;
    }

    @Override // AutDecl : @DISCKW Type DiscDecls SEMICOLTK;
    public ADecl parseAutDecl6(Token t1, ACifType a2, List<ADiscVariable> l3) {
        // return null;
    }

    @Override // AutDecl : Annos @DISCKW Type DiscDecls SEMICOLTK;
    public ADecl parseAutDecl7(List<AAnnotation> l1, Token t2, ACifType a3, List<ADiscVariable> l4) {
        // return null;
    }

    @Override // Decl : @TYPEKW TypeDefs SEMICOLTK;
    public ADecl parseDecl01(Token t1, List<ATypeDef> l2) {
        // return null;
    }

    @Override // Decl : Annos @TYPEKW TypeDefs SEMICOLTK;
    public ADecl parseDecl02(List<AAnnotation> l1, Token t2, List<ATypeDef> l3) {
        // return null;
    }

    @Override // Decl : ENUMKW Identifier EQTK AnnotatedIdentifiers SEMICOLTK;
    public ADecl parseDecl03(AIdentifier a2, List<AAnnotatedIdentifier> l4) {
        // return null;
    }

    @Override // Decl : Annos ENUMKW Identifier EQTK AnnotatedIdentifiers SEMICOLTK;
    public ADecl parseDecl04(List<AAnnotation> l1, AIdentifier a3, List<AAnnotatedIdentifier> l5) {
        // return null;
    }

    @Override // Decl : OptControllability @EVENTKW Identifiers SEMICOLTK;
    public ADecl parseDecl05(Token t1, Token t2, List<AIdentifier> l3) {
        // return null;
    }

    @Override // Decl : Annos OptControllability @EVENTKW Identifiers SEMICOLTK;
    public ADecl parseDecl06(List<AAnnotation> l1, Token t2, Token t3, List<AIdentifier> l4) {
        // return null;
    }

    @Override // Decl : OptControllability @EVENTKW EventType Identifiers SEMICOLTK;
    public ADecl parseDecl07(Token t1, Token t2, ACifType a3, List<AIdentifier> l4) {
        // return null;
    }

    @Override // Decl : Annos OptControllability @EVENTKW EventType Identifiers SEMICOLTK;
    public ADecl parseDecl08(List<AAnnotation> l1, Token t2, Token t3, ACifType a4, List<AIdentifier> l5) {
        // return null;
    }

    @Override // Decl : Controllability Identifiers SEMICOLTK;
    public ADecl parseDecl09(Token t1, List<AIdentifier> l2) {
        // return null;
    }

    @Override // Decl : Annos Controllability Identifiers SEMICOLTK;
    public ADecl parseDecl10(List<AAnnotation> l1, Token t2, List<AIdentifier> l3) {
        // return null;
    }

    @Override // Decl : Controllability EventType Identifiers SEMICOLTK;
    public ADecl parseDecl11(Token t1, ACifType a2, List<AIdentifier> l3) {
        // return null;
    }

    @Override // Decl : Annos Controllability EventType Identifiers SEMICOLTK;
    public ADecl parseDecl12(List<AAnnotation> l1, Token t2, ACifType a3, List<AIdentifier> l4) {
        // return null;
    }

    @Override // Decl : @CONSTKW Type ConstantDefs SEMICOLTK;
    public ADecl parseDecl13(Token t1, ACifType a2, List<AConstant> l3) {
        // return null;
    }

    @Override // Decl : Annos @CONSTKW Type ConstantDefs SEMICOLTK;
    public ADecl parseDecl14(List<AAnnotation> l1, Token t2, ACifType a3, List<AConstant> l4) {
        // return null;
    }

    @Override // Decl : @ALGKW Type AlgVarsDefs SEMICOLTK;
    public ADecl parseDecl15(Token t1, ACifType a2, List<AAlgVariable> l3) {
        // return null;
    }

    @Override // Decl : Annos @ALGKW Type AlgVarsDefs SEMICOLTK;
    public ADecl parseDecl16(List<AAnnotation> l1, Token t2, ACifType a3, List<AAlgVariable> l4) {
        // return null;
    }

    @Override // Decl : @INPUTKW Type Identifiers SEMICOLTK;
    public ADecl parseDecl17(Token t1, ACifType a2, List<AIdentifier> l3) {
        // return null;
    }

    @Override // Decl : Annos @INPUTKW Type Identifiers SEMICOLTK;
    public ADecl parseDecl18(List<AAnnotation> l1, Token t2, ACifType a3, List<AIdentifier> l4) {
        // return null;
    }

    @Override // Decl : @CONTKW ContDecls SEMICOLTK;
    public ADecl parseDecl19(Token t1, List<AContVariable> l2) {
        // return null;
    }

    @Override // Decl : Annos @CONTKW ContDecls SEMICOLTK;
    public ADecl parseDecl20(List<AAnnotation> l1, Token t2, List<AContVariable> l3) {
        // return null;
    }

    @Override // Decl : @EQUATIONKW Equations SEMICOLTK;
    public ADecl parseDecl21(Token t1, List<AEquation> l2) {
        // return null;
    }

    @Override // Decl : @INITIALKW Expressions SEMICOLTK;
    public ADecl parseDecl22(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // Decl : InvariantDecls;
    public ADecl parseDecl23(AInvariantDecl a1) {
        // return null;
    }

    @Override // Decl : Annos InvariantDecls;
    public ADecl parseDecl24(List<AAnnotation> l1, AInvariantDecl a2) {
        // return null;
    }

    @Override // Decl : @MARKEDKW Expressions SEMICOLTK;
    public ADecl parseDecl25(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // Decl : IoDecl;
    public ADecl parseDecl26(AIoDecl a1) {
        // return null;
    }

    @Override // Identifiers : Identifier;
    public List<AIdentifier> parseIdentifiers1(AIdentifier a1) {
        // return null;
    }

    @Override // Identifiers : Identifiers COMMATK Identifier;
    public List<AIdentifier> parseIdentifiers2(List<AIdentifier> l1, AIdentifier a3) {
        // return null;
    }

    @Override // Identifier : @IDENTIFIERTK;
    public AIdentifier parseIdentifier1(Token t1) {
        // return null;
    }

    @Override // AnnotatedIdentifiers : AnnotatedIdentifier;
    public List<AAnnotatedIdentifier> parseAnnotatedIdentifiers1(AAnnotatedIdentifier a1) {
        // return null;
    }

    @Override // AnnotatedIdentifiers : AnnotatedIdentifiers COMMATK AnnotatedIdentifier;
    public List<AAnnotatedIdentifier> parseAnnotatedIdentifiers2(List<AAnnotatedIdentifier> l1, AAnnotatedIdentifier a3) {
        // return null;
    }

    @Override // AnnotatedIdentifier : OptAnnos @IDENTIFIERTK;
    public AAnnotatedIdentifier parseAnnotatedIdentifier1(List<AAnnotation> l1, Token t2) {
        // return null;
    }

    @Override // Imports : StringToken;
    public List<AImport> parseImports1(AStringToken a1) {
        // return null;
    }

    @Override // Imports : Imports COMMATK StringToken;
    public List<AImport> parseImports2(List<AImport> l1, AStringToken a3) {
        // return null;
    }

    @Override // StringToken : @STRINGTK;
    public AStringToken parseStringToken1(Token t1) {
        // return null;
    }

    @Override // TypeDefs : Identifier EQTK Type;
    public List<ATypeDef> parseTypeDefs1(AIdentifier a1, ACifType a3) {
        // return null;
    }

    @Override // TypeDefs : TypeDefs COMMATK Identifier EQTK Type;
    public List<ATypeDef> parseTypeDefs2(List<ATypeDef> l1, AIdentifier a3, ACifType a5) {
        // return null;
    }

    @Override // ConstantDefs : Identifier EQTK Expression;
    public List<AConstant> parseConstantDefs1(AIdentifier a1, AExpression a3) {
        // return null;
    }

    @Override // ConstantDefs : ConstantDefs COMMATK Identifier EQTK Expression;
    public List<AConstant> parseConstantDefs2(List<AConstant> l1, AIdentifier a3, AExpression a5) {
        // return null;
    }

    @Override // AlgVarsDefs : Identifier;
    public List<AAlgVariable> parseAlgVarsDefs1(AIdentifier a1) {
        // return null;
    }

    @Override // AlgVarsDefs : Identifier EQTK Expression;
    public List<AAlgVariable> parseAlgVarsDefs2(AIdentifier a1, AExpression a3) {
        // return null;
    }

    @Override // AlgVarsDefs : AlgVarsDefs COMMATK Identifier;
    public List<AAlgVariable> parseAlgVarsDefs3(List<AAlgVariable> l1, AIdentifier a3) {
        // return null;
    }

    @Override // AlgVarsDefs : AlgVarsDefs COMMATK Identifier EQTK Expression;
    public List<AAlgVariable> parseAlgVarsDefs4(List<AAlgVariable> l1, AIdentifier a3, AExpression a5) {
        // return null;
    }

    @Override // FuncParams : PAROPENTK PARCLOSETK;
    public List<AFuncParam> parseFuncParams1() {
        // return null;
    }

    @Override // FuncParams : PAROPENTK FuncParamDecls PARCLOSETK;
    public List<AFuncParam> parseFuncParams2(List<AFuncParam> l2) {
        // return null;
    }

    @Override // FuncParamDecls : FuncParamDecl;
    public List<AFuncParam> parseFuncParamDecls1(AFuncParam a1) {
        // return null;
    }

    @Override // FuncParamDecls : FuncParamDecls SEMICOLTK FuncParamDecl;
    public List<AFuncParam> parseFuncParamDecls2(List<AFuncParam> l1, AFuncParam a3) {
        // return null;
    }

    @Override // FuncParamDecl : OptAnnos Type Identifiers;
    public AFuncParam parseFuncParamDecl1(List<AAnnotation> l1, ACifType a2, List<AIdentifier> l3) {
        // return null;
    }

    @Override // FuncBody : FuncVarDecls FuncStatements @ENDKW;
    public AFuncBody parseFuncBody1(List<ADiscVariableDecl> l1, List<AFuncStatement> l2, Token t3) {
        // return null;
    }

    @Override // FuncBody : StringToken SEMICOLTK;
    public AFuncBody parseFuncBody2(AStringToken a1) {
        // return null;
    }

    @Override // FuncVarDecls : ;
    public List<ADiscVariableDecl> parseFuncVarDecls1() {
        // return null;
    }

    @Override // FuncVarDecls : FuncVarDecls Type FuncVarDecl SEMICOLTK;
    public List<ADiscVariableDecl> parseFuncVarDecls2(List<ADiscVariableDecl> l1, ACifType a2, List<ADiscVariable> l3) {
        // return null;
    }

    @Override // FuncVarDecls : FuncVarDecls Annos Type FuncVarDecl SEMICOLTK;
    public List<ADiscVariableDecl> parseFuncVarDecls3(List<ADiscVariableDecl> l1, List<AAnnotation> l2, ACifType a3, List<ADiscVariable> l4) {
        // return null;
    }

    @Override // FuncVarDecl : Identifier;
    public List<ADiscVariable> parseFuncVarDecl1(AIdentifier a1) {
        // return null;
    }

    @Override // FuncVarDecl : Identifier EQTK Expression;
    public List<ADiscVariable> parseFuncVarDecl2(AIdentifier a1, AExpression a3) {
        // return null;
    }

    @Override // FuncVarDecl : FuncVarDecl COMMATK Identifier;
    public List<ADiscVariable> parseFuncVarDecl3(List<ADiscVariable> l1, AIdentifier a3) {
        // return null;
    }

    @Override // FuncVarDecl : FuncVarDecl COMMATK Identifier EQTK Expression;
    public List<ADiscVariable> parseFuncVarDecl4(List<ADiscVariable> l1, AIdentifier a3, AExpression a5) {
        // return null;
    }

    @Override // FuncStatements : FuncStatement;
    public List<AFuncStatement> parseFuncStatements1(AFuncStatement a1) {
        // return null;
    }

    @Override // FuncStatements : FuncStatements FuncStatement;
    public List<AFuncStatement> parseFuncStatements2(List<AFuncStatement> l1, AFuncStatement a2) {
        // return null;
    }

    @Override // FuncStatement : Addressables @BECOMESTK Expressions SEMICOLTK;
    public AFuncStatement parseFuncStatement1(List<AExpression> l1, Token t2, List<AExpression> l3) {
        // return null;
    }

    @Override // FuncStatement : @IFKW Expressions COLONTK FuncStatements OptElifFuncStats OptElseFuncStat ENDKW;
    public AFuncStatement parseFuncStatement2(Token t1, List<AExpression> l2, List<AFuncStatement> l4, List<AElifFuncStatement> l5, AElseFuncStatement a6) {
        // return null;
    }

    @Override // FuncStatement : @WHILEKW Expressions COLONTK FuncStatements ENDKW;
    public AFuncStatement parseFuncStatement3(Token t1, List<AExpression> l2, List<AFuncStatement> l4) {
        // return null;
    }

    @Override // FuncStatement : @BREAKKW SEMICOLTK;
    public AFuncStatement parseFuncStatement4(Token t1) {
        // return null;
    }

    @Override // FuncStatement : @CONTINUEKW SEMICOLTK;
    public AFuncStatement parseFuncStatement5(Token t1) {
        // return null;
    }

    @Override // FuncStatement : @RETURNKW Expressions SEMICOLTK;
    public AFuncStatement parseFuncStatement6(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // OptElifFuncStats : ;
    public List<AElifFuncStatement> parseOptElifFuncStats1() {
        // return null;
    }

    @Override // OptElifFuncStats : OptElifFuncStats @ELIFKW Expressions COLONTK FuncStatements;
    public List<AElifFuncStatement> parseOptElifFuncStats2(List<AElifFuncStatement> l1, Token t2, List<AExpression> l3, List<AFuncStatement> l5) {
        // return null;
    }

    @Override // OptElseFuncStat : ;
    public AElseFuncStatement parseOptElseFuncStat1() {
        // return null;
    }

    @Override // OptElseFuncStat : @ELSEKW FuncStatements;
    public AElseFuncStatement parseOptElseFuncStat2(Token t1, List<AFuncStatement> l2) {
        // return null;
    }

    @Override // Events : Name;
    public List<AName> parseEvents1(AName a1) {
        // return null;
    }

    @Override // Events : Events COMMATK Name;
    public List<AName> parseEvents2(List<AName> l1, AName a3) {
        // return null;
    }

    @Override // CoreEdge : EdgeEvents OptEdgeGuard OptEdgeUrgent OptEdgeUpdate;
    public ACoreEdge parseCoreEdge1(List<AEdgeEvent> l1, List<AExpression> l2, TextPosition t3, List<AUpdate> l4) {
        // return null;
    }

    @Override // CoreEdge : WHENKW Expressions OptEdgeUrgent OptEdgeUpdate;
    public ACoreEdge parseCoreEdge2(List<AExpression> l2, TextPosition t3, List<AUpdate> l4) {
        // return null;
    }

    @Override // CoreEdge : @NOWKW OptEdgeUpdate;
    public ACoreEdge parseCoreEdge3(Token t1, List<AUpdate> l2) {
        // return null;
    }

    @Override // CoreEdge : DOKW Updates;
    public ACoreEdge parseCoreEdge4(List<AUpdate> l2) {
        // return null;
    }

    @Override // OptEdgeGuard : ;
    public List<AExpression> parseOptEdgeGuard1() {
        // return null;
    }

    @Override // OptEdgeGuard : WHENKW Expressions;
    public List<AExpression> parseOptEdgeGuard2(List<AExpression> l2) {
        // return null;
    }

    @Override // OptEdgeUrgent : ;
    public TextPosition parseOptEdgeUrgent1() {
        // return null;
    }

    @Override // OptEdgeUrgent : @NOWKW;
    public TextPosition parseOptEdgeUrgent2(Token t1) {
        // return null;
    }

    @Override // OptEdgeUpdate : ;
    public List<AUpdate> parseOptEdgeUpdate1() {
        // return null;
    }

    @Override // OptEdgeUpdate : DOKW Updates;
    public List<AUpdate> parseOptEdgeUpdate2(List<AUpdate> l2) {
        // return null;
    }

    @Override // EdgeEvents : EdgeEvent;
    public List<AEdgeEvent> parseEdgeEvents1(AEdgeEvent a1) {
        // return null;
    }

    @Override // EdgeEvents : EdgeEvents COMMATK EdgeEvent;
    public List<AEdgeEvent> parseEdgeEvents2(List<AEdgeEvent> l1, AEdgeEvent a3) {
        // return null;
    }

    @Override // EdgeEvent : @TAUKW;
    public AEdgeEvent parseEdgeEvent1(Token t1) {
        // return null;
    }

    @Override // EdgeEvent : Name;
    public AEdgeEvent parseEdgeEvent2(AName a1) {
        // return null;
    }

    @Override // EdgeEvent : Name @EXCLAMATIONTK;
    public AEdgeEvent parseEdgeEvent3(AName a1, Token t2) {
        // return null;
    }

    @Override // EdgeEvent : Name @EXCLAMATIONTK Expression;
    public AEdgeEvent parseEdgeEvent4(AName a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // EdgeEvent : Name @QUESTIONTK;
    public AEdgeEvent parseEdgeEvent5(AName a1, Token t2) {
        // return null;
    }

    @Override // Locations : Location;
    public List<ALocation> parseLocations1(ALocation a1) {
        // return null;
    }

    @Override // Locations : Locations Location;
    public List<ALocation> parseLocations2(List<ALocation> l1, ALocation a2) {
        // return null;
    }

    @Override // Location : @LOCATIONKW SEMICOLTK;
    public ALocation parseLocation1(Token t1) {
        // return null;
    }

    @Override // Location : Annos @LOCATIONKW SEMICOLTK;
    public ALocation parseLocation2(List<AAnnotation> l1, Token t2) {
        // return null;
    }

    @Override // Location : @LOCATIONKW Identifier SEMICOLTK;
    public ALocation parseLocation3(Token t1, AIdentifier a2) {
        // return null;
    }

    @Override // Location : Annos @LOCATIONKW Identifier SEMICOLTK;
    public ALocation parseLocation4(List<AAnnotation> l1, Token t2, AIdentifier a3) {
        // return null;
    }

    @Override // Location : @LOCATIONKW COLONTK LocationElements;
    public ALocation parseLocation5(Token t1, List<ALocationElement> l3) {
        // return null;
    }

    @Override // Location : Annos @LOCATIONKW COLONTK LocationElements;
    public ALocation parseLocation6(List<AAnnotation> l1, Token t2, List<ALocationElement> l4) {
        // return null;
    }

    @Override // Location : @LOCATIONKW Identifier COLONTK LocationElements;
    public ALocation parseLocation7(Token t1, AIdentifier a2, List<ALocationElement> l4) {
        // return null;
    }

    @Override // Location : Annos @LOCATIONKW Identifier COLONTK LocationElements;
    public ALocation parseLocation8(List<AAnnotation> l1, Token t2, AIdentifier a3, List<ALocationElement> l5) {
        // return null;
    }

    @Override // LocationElements : LocationElement;
    public List<ALocationElement> parseLocationElements1(ALocationElement a1) {
        // return null;
    }

    @Override // LocationElements : LocationElements LocationElement;
    public List<ALocationElement> parseLocationElements2(List<ALocationElement> l1, ALocationElement a2) {
        // return null;
    }

    @Override // LocationElement : @INITIALKW SEMICOLTK;
    public ALocationElement parseLocationElement1(Token t1) {
        // return null;
    }

    @Override // LocationElement : @INITIALKW Expressions SEMICOLTK;
    public ALocationElement parseLocationElement2(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // LocationElement : OptDoubleAnnos InvariantDecls;
    public ALocationElement parseLocationElement3(List<AAnnotation> l1, AInvariantDecl a2) {
        // return null;
    }

    @Override // LocationElement : @EQUATIONKW Equations SEMICOLTK;
    public ALocationElement parseLocationElement4(Token t1, List<AEquation> l2) {
        // return null;
    }

    @Override // LocationElement : @MARKEDKW SEMICOLTK;
    public ALocationElement parseLocationElement5(Token t1) {
        // return null;
    }

    @Override // LocationElement : @MARKEDKW Expressions SEMICOLTK;
    public ALocationElement parseLocationElement6(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // LocationElement : @URGENTKW SEMICOLTK;
    public ALocationElement parseLocationElement7(Token t1) {
        // return null;
    }

    @Override // LocationElement : @EDGEKW CoreEdge SEMICOLTK;
    public ALocationElement parseLocationElement8(Token t1, ACoreEdge a2) {
        // return null;
    }

    @Override // LocationElement : @EDGEKW CoreEdge GOTOKW Identifier SEMICOLTK;
    public ALocationElement parseLocationElement9(Token t1, ACoreEdge a2, AIdentifier a4) {
        // return null;
    }

    @Override // CompInstArgs : PAROPENTK PARCLOSETK;
    public List<AExpression> parseCompInstArgs1() {
        // return null;
    }

    @Override // CompInstArgs : PAROPENTK Expressions PARCLOSETK;
    public List<AExpression> parseCompInstArgs2(List<AExpression> l2) {
        // return null;
    }

    @Override // CompDefParms : PAROPENTK PARCLOSETK;
    public List<AParameter> parseCompDefParms1() {
        // return null;
    }

    @Override // CompDefParms : PAROPENTK CompDefDecls PARCLOSETK;
    public List<AParameter> parseCompDefParms2(List<AParameter> l2) {
        // return null;
    }

    @Override // CompDefDecls : CompDefDeclaration;
    public List<AParameter> parseCompDefDecls1(AParameter a1) {
        // return null;
    }

    @Override // CompDefDecls : CompDefDecls SEMICOLTK CompDefDeclaration;
    public List<AParameter> parseCompDefDecls2(List<AParameter> l1, AParameter a3) {
        // return null;
    }

    @Override // CompDefDeclaration : OptControllability @EVENTKW EventParamIds;
    public AParameter parseCompDefDeclaration1(Token t1, Token t2, List<AEventParameterPart> l3) {
        // return null;
    }

    @Override // CompDefDeclaration : OptControllability @EVENTKW EventType EventParamIds;
    public AParameter parseCompDefDeclaration2(Token t1, Token t2, ACifType a3, List<AEventParameterPart> l4) {
        // return null;
    }

    @Override // CompDefDeclaration : Controllability EventParamIds;
    public AParameter parseCompDefDeclaration3(Token t1, List<AEventParameterPart> l2) {
        // return null;
    }

    @Override // CompDefDeclaration : Controllability EventType EventParamIds;
    public AParameter parseCompDefDeclaration4(Token t1, ACifType a2, List<AEventParameterPart> l3) {
        // return null;
    }

    @Override // CompDefDeclaration : Name Identifiers;
    public AParameter parseCompDefDeclaration5(AName a1, List<AIdentifier> l2) {
        // return null;
    }

    @Override // CompDefDeclaration : @LOCATIONKW Identifiers;
    public AParameter parseCompDefDeclaration6(Token t1, List<AIdentifier> l2) {
        // return null;
    }

    @Override // CompDefDeclaration : @ALGKW Type Identifiers;
    public AParameter parseCompDefDeclaration7(Token t1, ACifType a2, List<AIdentifier> l3) {
        // return null;
    }

    @Override // EventParamIds : EventParamId;
    public List<AEventParameterPart> parseEventParamIds1(AEventParameterPart a1) {
        // return null;
    }

    @Override // EventParamIds : EventParamIds COMMATK EventParamId;
    public List<AEventParameterPart> parseEventParamIds2(List<AEventParameterPart> l1, AEventParameterPart a3) {
        // return null;
    }

    @Override // EventParamId : Identifier OptEventParamFlags;
    public AEventParameterPart parseEventParamId1(AIdentifier a1, List<AEventParamFlag> l2) {
        // return null;
    }

    @Override // OptEventParamFlags : ;
    public List<AEventParamFlag> parseOptEventParamFlags1() {
        // return null;
    }

    @Override // OptEventParamFlags : OptEventParamFlags EventParamFlag;
    public List<AEventParamFlag> parseOptEventParamFlags2(List<AEventParamFlag> l1, AEventParamFlag a2) {
        // return null;
    }

    @Override // EventParamFlag : @EXCLAMATIONTK;
    public AEventParamFlag parseEventParamFlag1(Token t1) {
        // return null;
    }

    @Override // EventParamFlag : @QUESTIONTK;
    public AEventParamFlag parseEventParamFlag2(Token t1) {
        // return null;
    }

    @Override // EventParamFlag : @TILDETK;
    public AEventParamFlag parseEventParamFlag3(Token t1) {
        // return null;
    }

    @Override // DiscDecls : DiscDecl;
    public List<ADiscVariable> parseDiscDecls1(ADiscVariable a1) {
        // return null;
    }

    @Override // DiscDecls : DiscDecls COMMATK DiscDecl;
    public List<ADiscVariable> parseDiscDecls2(List<ADiscVariable> l1, ADiscVariable a3) {
        // return null;
    }

    @Override // DiscDecl : Identifier;
    public ADiscVariable parseDiscDecl1(AIdentifier a1) {
        // return null;
    }

    @Override // DiscDecl : Identifier INKW @ANYKW;
    public ADiscVariable parseDiscDecl2(AIdentifier a1, Token t3) {
        // return null;
    }

    @Override // DiscDecl : Identifier EQTK Expression;
    public ADiscVariable parseDiscDecl3(AIdentifier a1, AExpression a3) {
        // return null;
    }

    @Override // DiscDecl : Identifier INKW CUROPENTK Expressions CURCLOSETK;
    public ADiscVariable parseDiscDecl4(AIdentifier a1, List<AExpression> l4) {
        // return null;
    }

    @Override // ContDecls : ContDecl;
    public List<AContVariable> parseContDecls1(AContVariable a1) {
        // return null;
    }

    @Override // ContDecls : ContDecls COMMATK ContDecl;
    public List<AContVariable> parseContDecls2(List<AContVariable> l1, AContVariable a3) {
        // return null;
    }

    @Override // ContDecl : Identifier OptDerivative;
    public AContVariable parseContDecl1(AIdentifier a1, AExpression a2) {
        // return null;
    }

    @Override // ContDecl : Identifier EQTK Expression OptDerivative;
    public AContVariable parseContDecl2(AIdentifier a1, AExpression a3, AExpression a4) {
        // return null;
    }

    @Override // OptDerivative : ;
    public AExpression parseOptDerivative1() {
        // return null;
    }

    @Override // OptDerivative : DERKW Expression;
    public AExpression parseOptDerivative2(AExpression a2) {
        // return null;
    }

    @Override // Equations : Equation;
    public List<AEquation> parseEquations1(AEquation a1) {
        // return null;
    }

    @Override // Equations : Equations COMMATK Equation;
    public List<AEquation> parseEquations2(List<AEquation> l1, AEquation a3) {
        // return null;
    }

    @Override // Equation : Identifier APOSTROPHETK @EQTK Expression;
    public AEquation parseEquation1(AIdentifier a1, Token t3, AExpression a4) {
        // return null;
    }

    @Override // Equation : Identifier @EQTK Expression;
    public AEquation parseEquation2(AIdentifier a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // InvariantDecls : OptSupKind @INVARIANTKW Invariants SEMICOLTK;
    public AInvariantDecl parseInvariantDecls1(Token t1, Token t2, List<AInvariant> l3) {
        // return null;
    }

    @Override // InvariantDecls : SupKind Invariants SEMICOLTK;
    public AInvariantDecl parseInvariantDecls2(Token t1, List<AInvariant> l2) {
        // return null;
    }

    @Override // Invariants : Invariant;
    public List<AInvariant> parseInvariants1(AInvariant a1) {
        // return null;
    }

    @Override // Invariants : Invariants COMMATK Invariant;
    public List<AInvariant> parseInvariants2(List<AInvariant> l1, AInvariant a3) {
        // return null;
    }

    @Override // Invariant : Expression;
    public AInvariant parseInvariant1(AExpression a1) {
        // return null;
    }

    @Override // Invariant : Identifier COLONTK Expression;
    public AInvariant parseInvariant2(AIdentifier a1, AExpression a3) {
        // return null;
    }

    @Override // Invariant : Name @NEEDSKW Expression;
    public AInvariant parseInvariant3(AName a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // Invariant : Identifier COLONTK Name @NEEDSKW Expression;
    public AInvariant parseInvariant4(AIdentifier a1, AName a3, Token t4, AExpression a5) {
        // return null;
    }

    @Override // Invariant : NonEmptySetExpression @NEEDSKW Expression;
    public AInvariant parseInvariant5(ASetExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // Invariant : Expression @DISABLESKW Name;
    public AInvariant parseInvariant6(AExpression a1, Token t2, AName a3) {
        // return null;
    }

    @Override // Invariant : Identifier COLONTK Expression @DISABLESKW Name;
    public AInvariant parseInvariant7(AIdentifier a1, AExpression a3, Token t4, AName a5) {
        // return null;
    }

    @Override // Invariant : Expression @DISABLESKW NamesSet;
    public AInvariant parseInvariant8(AExpression a1, Token t2, List<AName> l3) {
        // return null;
    }

    @Override // NamesSet : CUROPENTK Names CURCLOSETK;
    public List<AName> parseNamesSet1(List<AName> l2) {
        // return null;
    }

    @Override // Names : Name;
    public List<AName> parseNames1(AName a1) {
        // return null;
    }

    @Override // Names : Names COMMATK Name;
    public List<AName> parseNames2(List<AName> l1, AName a3) {
        // return null;
    }

    @Override // Updates : Update;
    public List<AUpdate> parseUpdates1(AUpdate a1) {
        // return null;
    }

    @Override // Updates : Updates COMMATK Update;
    public List<AUpdate> parseUpdates2(List<AUpdate> l1, AUpdate a3) {
        // return null;
    }

    @Override // Update : Addressable @BECOMESTK Expression;
    public AUpdate parseUpdate1(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // Update : @IFKW Expressions COLONTK Updates OptElifUpdates OptElseUpdate ENDKW;
    public AUpdate parseUpdate2(Token t1, List<AExpression> l2, List<AUpdate> l4, List<AElifUpdate> l5, List<AUpdate> l6) {
        // return null;
    }

    @Override // Addressables : Addressable;
    public List<AExpression> parseAddressables1(AExpression a1) {
        // return null;
    }

    @Override // Addressables : Addressables COMMATK Addressable;
    public List<AExpression> parseAddressables2(List<AExpression> l1, AExpression a3) {
        // return null;
    }

    @Override // Addressable : Name;
    public AExpression parseAddressable1(AName a1) {
        // return null;
    }

    @Override // Addressable : Name Projections;
    public AExpression parseAddressable2(AName a1, List<AProjectionExpression> l2) {
        // return null;
    }

    @Override // Addressable : @PAROPENTK Addressable COMMATK Addressables PARCLOSETK;
    public AExpression parseAddressable3(Token t1, AExpression a2, List<AExpression> l4) {
        // return null;
    }

    @Override // Projections : Projection;
    public List<AProjectionExpression> parseProjections1(AProjectionExpression a1) {
        // return null;
    }

    @Override // Projections : Projections Projection;
    public List<AProjectionExpression> parseProjections2(List<AProjectionExpression> l1, AProjectionExpression a2) {
        // return null;
    }

    @Override // Projection : @SQOPENTK Expression SQCLOSETK;
    public AProjectionExpression parseProjection1(Token t1, AExpression a2) {
        // return null;
    }

    @Override // OptElifUpdates : ;
    public List<AElifUpdate> parseOptElifUpdates1() {
        // return null;
    }

    @Override // OptElifUpdates : OptElifUpdates @ELIFKW Expressions COLONTK Updates;
    public List<AElifUpdate> parseOptElifUpdates2(List<AElifUpdate> l1, Token t2, List<AExpression> l3, List<AUpdate> l5) {
        // return null;
    }

    @Override // OptElseUpdate : ;
    public List<AUpdate> parseOptElseUpdate1() {
        // return null;
    }

    @Override // OptElseUpdate : ELSEKW Updates;
    public List<AUpdate> parseOptElseUpdate2(List<AUpdate> l2) {
        // return null;
    }

    @Override // OptSupKind : ;
    public Token parseOptSupKind1() {
        // return null;
    }

    @Override // OptSupKind : SupKind;
    public Token parseOptSupKind2(Token t1) {
        // return null;
    }

    @Override // OptControllability : ;
    public Token parseOptControllability1() {
        // return null;
    }

    @Override // OptControllability : Controllability;
    public Token parseOptControllability2(Token t1) {
        // return null;
    }

    @Override // Controllability : @CONTROLLABLEKW;
    public Token parseControllability1(Token t1) {
        // return null;
    }

    @Override // Controllability : @UNCONTROLLABLEKW;
    public Token parseControllability2(Token t1) {
        // return null;
    }

    @Override // OptIoDecls : ;
    public List<AIoDecl> parseOptIoDecls1() {
        // return null;
    }

    @Override // OptIoDecls : OptIoDecls IoDecl;
    public List<AIoDecl> parseOptIoDecls2(List<AIoDecl> l1, AIoDecl a2) {
        // return null;
    }

    @Override // IoDecl : SvgFile;
    public AIoDecl parseIoDecl1(ASvgFile a1) {
        // return null;
    }

    @Override // IoDecl : SvgCopy;
    public AIoDecl parseIoDecl2(ASvgCopy a1) {
        // return null;
    }

    @Override // IoDecl : SvgMove;
    public AIoDecl parseIoDecl3(ASvgMove a1) {
        // return null;
    }

    @Override // IoDecl : SvgOut;
    public AIoDecl parseIoDecl4(ASvgOut a1) {
        // return null;
    }

    @Override // IoDecl : SvgIn;
    public AIoDecl parseIoDecl5(ASvgIn a1) {
        // return null;
    }

    @Override // IoDecl : PrintFile;
    public AIoDecl parseIoDecl6(APrintFile a1) {
        // return null;
    }

    @Override // IoDecl : Print;
    public AIoDecl parseIoDecl7(APrint a1) {
        // return null;
    }

    @Override // SvgFile : @SVGFILEKW StringToken SEMICOLTK;
    public ASvgFile parseSvgFile1(Token t1, AStringToken a2) {
        // return null;
    }

    @Override // OptSvgFile : ;
    public ASvgFile parseOptSvgFile1() {
        // return null;
    }

    @Override // OptSvgFile : @FILEKW StringToken;
    public ASvgFile parseOptSvgFile2(Token t1, AStringToken a2) {
        // return null;
    }

    @Override // SvgCopy : @SVGCOPYKW IDKW Expression OptSvgCopyPre OptSvgCopyPost OptSvgFile @SEMICOLTK;
    public ASvgCopy parseSvgCopy1(Token t1, AExpression a3, AExpression a4, AExpression a5, ASvgFile a6, Token t7) {
        // return null;
    }

    @Override // OptSvgCopyPre : ;
    public AExpression parseOptSvgCopyPre1() {
        // return null;
    }

    @Override // OptSvgCopyPre : PREKW Expression;
    public AExpression parseOptSvgCopyPre2(AExpression a2) {
        // return null;
    }

    @Override // OptSvgCopyPost : ;
    public AExpression parseOptSvgCopyPost1() {
        // return null;
    }

    @Override // OptSvgCopyPost : POSTKW Expression;
    public AExpression parseOptSvgCopyPost2(AExpression a2) {
        // return null;
    }

    @Override // SvgMove : @SVGMOVEKW IDKW Expression TOKW Expression COMMATK Expression OptSvgFile @SEMICOLTK;
    public ASvgMove parseSvgMove1(Token t1, AExpression a3, AExpression a5, AExpression a7, ASvgFile a8, Token t9) {
        // return null;
    }

    @Override // SvgOut : @SVGOUTKW IDKW Expression SvgAttr VALUEKW Expression OptSvgFile @SEMICOLTK;
    public ASvgOut parseSvgOut1(Token t1, AExpression a3, AStringToken a4, AExpression a6, ASvgFile a7, Token t8) {
        // return null;
    }

    @Override // SvgAttr : ATTRKW StringToken;
    public AStringToken parseSvgAttr1(AStringToken a2) {
        // return null;
    }

    @Override // SvgAttr : @TEXTKW;
    public AStringToken parseSvgAttr2(Token t1) {
        // return null;
    }

    @Override // SvgIn : @SVGINKW IDKW Expression EVENTKW SvgInEvent OptSvgFile @SEMICOLTK;
    public ASvgIn parseSvgIn1(Token t1, AExpression a3, ASvgInEvent a5, ASvgFile a6, Token t7) {
        // return null;
    }

    @Override // SvgIn : @SVGINKW IDKW Expression DOKW Updates OptSvgFile @SEMICOLTK;
    public ASvgIn parseSvgIn2(Token t1, AExpression a3, List<AUpdate> l5, ASvgFile a6, Token t7) {
        // return null;
    }

    @Override // SvgInEvent : Name;
    public ASvgInEvent parseSvgInEvent1(AName a1) {
        // return null;
    }

    @Override // SvgInEvent : @IFKW Expression @COLONTK Name OptSvgInEventElifs @ELSEKW Name ENDKW;
    public ASvgInEvent parseSvgInEvent2(Token t1, AExpression a2, Token t3, AName a4, List<ASvgInEventIfEntry> l5, Token t6, AName a7) {
        // return null;
    }

    @Override // SvgInEvent : @IFKW Expression @COLONTK Name SvgInEventElifs ENDKW;
    public ASvgInEvent parseSvgInEvent3(Token t1, AExpression a2, Token t3, AName a4, List<ASvgInEventIfEntry> l5) {
        // return null;
    }

    @Override // OptSvgInEventElifs : ;
    public List<ASvgInEventIfEntry> parseOptSvgInEventElifs1() {
        // return null;
    }

    @Override // OptSvgInEventElifs : SvgInEventElifs;
    public List<ASvgInEventIfEntry> parseOptSvgInEventElifs2(List<ASvgInEventIfEntry> l1) {
        // return null;
    }

    @Override // SvgInEventElifs : @ELIFKW Expression COLONTK Name;
    public List<ASvgInEventIfEntry> parseSvgInEventElifs1(Token t1, AExpression a2, AName a4) {
        // return null;
    }

    @Override // SvgInEventElifs : SvgInEventElifs @ELIFKW Expression COLONTK Name;
    public List<ASvgInEventIfEntry> parseSvgInEventElifs2(List<ASvgInEventIfEntry> l1, Token t2, AExpression a3, AName a5) {
        // return null;
    }

    @Override // PrintFile : @PRINTFILEKW StringToken SEMICOLTK;
    public APrintFile parsePrintFile1(Token t1, AStringToken a2) {
        // return null;
    }

    @Override // Print : @PRINTKW PrintTxt OptPrintFors OptPrintWhen OptPrintFile @SEMICOLTK;
    public APrint parsePrint1(Token t1, APrintTxt a2, List<APrintFor> l3, APrintWhen a4, APrintFile a5, Token t6) {
        // return null;
    }

    @Override // PrintTxt : Expression;
    public APrintTxt parsePrintTxt1(AExpression a1) {
        // return null;
    }

    @Override // PrintTxt : PREKW Expression;
    public APrintTxt parsePrintTxt2(AExpression a2) {
        // return null;
    }

    @Override // PrintTxt : POSTKW Expression;
    public APrintTxt parsePrintTxt3(AExpression a2) {
        // return null;
    }

    @Override // PrintTxt : PREKW Expression POSTKW Expression;
    public APrintTxt parsePrintTxt4(AExpression a2, AExpression a4) {
        // return null;
    }

    @Override // OptPrintFors : ;
    public List<APrintFor> parseOptPrintFors1() {
        // return null;
    }

    @Override // OptPrintFors : FORKW PrintFors;
    public List<APrintFor> parseOptPrintFors2(List<APrintFor> l2) {
        // return null;
    }

    @Override // PrintFors : PrintFor;
    public List<APrintFor> parsePrintFors1(APrintFor a1) {
        // return null;
    }

    @Override // PrintFors : PrintFors COMMATK PrintFor;
    public List<APrintFor> parsePrintFors2(List<APrintFor> l1, APrintFor a3) {
        // return null;
    }

    @Override // PrintFor : @EVENTKW;
    public APrintFor parsePrintFor1(Token t1) {
        // return null;
    }

    @Override // PrintFor : @TIMEKW;
    public APrintFor parsePrintFor2(Token t1) {
        // return null;
    }

    @Override // PrintFor : Name;
    public APrintFor parsePrintFor3(AName a1) {
        // return null;
    }

    @Override // PrintFor : @INITIALKW;
    public APrintFor parsePrintFor4(Token t1) {
        // return null;
    }

    @Override // PrintFor : @FINALKW;
    public APrintFor parsePrintFor5(Token t1) {
        // return null;
    }

    @Override // OptPrintWhen : ;
    public APrintWhen parseOptPrintWhen1() {
        // return null;
    }

    @Override // OptPrintWhen : WHENKW Expression;
    public APrintWhen parseOptPrintWhen2(AExpression a2) {
        // return null;
    }

    @Override // OptPrintWhen : WHENKW PREKW Expression;
    public APrintWhen parseOptPrintWhen3(AExpression a3) {
        // return null;
    }

    @Override // OptPrintWhen : WHENKW POSTKW Expression;
    public APrintWhen parseOptPrintWhen4(AExpression a3) {
        // return null;
    }

    @Override // OptPrintWhen : WHENKW PREKW Expression POSTKW Expression;
    public APrintWhen parseOptPrintWhen5(AExpression a3, AExpression a5) {
        // return null;
    }

    @Override // OptPrintFile : ;
    public APrintFile parseOptPrintFile1() {
        // return null;
    }

    @Override // OptPrintFile : FILEKW StringToken;
    public APrintFile parseOptPrintFile2(AStringToken a2) {
        // return null;
    }

    @Override // Types : Type;
    public List<ACifType> parseTypes1(ACifType a1) {
        // return null;
    }

    @Override // Types : Types COMMATK Type;
    public List<ACifType> parseTypes2(List<ACifType> l1, ACifType a3) {
        // return null;
    }

    @Override // EventType : @VOIDKW;
    public ACifType parseEventType1(Token t1) {
        // return null;
    }

    @Override // EventType : Type;
    public ACifType parseEventType2(ACifType a1) {
        // return null;
    }

    @Override // Type : @BOOLKW;
    public ACifType parseType01(Token t1) {
        // return null;
    }

    @Override // Type : @INTKW;
    public ACifType parseType02(Token t1) {
        // return null;
    }

    @Override // Type : @INTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK;
    public ACifType parseType03(Token t1, AExpression a3, AExpression a5) {
        // return null;
    }

    @Override // Type : @REALKW;
    public ACifType parseType04(Token t1) {
        // return null;
    }

    @Override // Type : @STRINGKW;
    public ACifType parseType05(Token t1) {
        // return null;
    }

    @Override // Type : @LISTKW Type;
    public ACifType parseType06(Token t1, ACifType a2) {
        // return null;
    }

    @Override // Type : @LISTKW SQOPENTK Expression SQCLOSETK Type;
    public ACifType parseType07(Token t1, AExpression a3, ACifType a5) {
        // return null;
    }

    @Override // Type : @LISTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK Type;
    public ACifType parseType08(Token t1, AExpression a3, AExpression a5, ACifType a7) {
        // return null;
    }

    @Override // Type : @SETKW Type;
    public ACifType parseType09(Token t1, ACifType a2) {
        // return null;
    }

    @Override // Type : @DICTKW PAROPENTK Type COLONTK Type PARCLOSETK;
    public ACifType parseType10(Token t1, ACifType a3, ACifType a5) {
        // return null;
    }

    @Override // Type : @TUPLEKW PAROPENTK Fields PARCLOSETK;
    public ACifType parseType11(Token t1, List<AField> l3) {
        // return null;
    }

    @Override // Type : @FUNCKW Type PAROPENTK PARCLOSETK;
    public ACifType parseType12(Token t1, ACifType a2) {
        // return null;
    }

    @Override // Type : @FUNCKW Type PAROPENTK Types PARCLOSETK;
    public ACifType parseType13(Token t1, ACifType a2, List<ACifType> l4) {
        // return null;
    }

    @Override // Type : @DISTKW Type;
    public ACifType parseType14(Token t1, ACifType a2) {
        // return null;
    }

    @Override // Type : Name;
    public ACifType parseType15(AName a1) {
        // return null;
    }

    @Override // Fields : Field;
    public List<AField> parseFields1(AField a1) {
        // return null;
    }

    @Override // Fields : Fields SEMICOLTK Field;
    public List<AField> parseFields2(List<AField> l1, AField a3) {
        // return null;
    }

    @Override // Field : Type Identifiers;
    public AField parseField1(ACifType a1, List<AIdentifier> l2) {
        // return null;
    }

    @Override // Expressions : Expression;
    public List<AExpression> parseExpressions1(AExpression a1) {
        // return null;
    }

    @Override // Expressions : Expressions COMMATK Expression;
    public List<AExpression> parseExpressions2(List<AExpression> l1, AExpression a3) {
        // return null;
    }

    @Override // OptExpression : ;
    public AExpression parseOptExpression1() {
        // return null;
    }

    @Override // OptExpression : Expression;
    public AExpression parseOptExpression2(AExpression a1) {
        // return null;
    }

    @Override // Expression : OrExpression;
    public AExpression parseExpression1(AExpression a1) {
        // return null;
    }

    @Override // Expression : OrExpression @IMPLIESTK OrExpression;
    public AExpression parseExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // Expression : OrExpression @EQUIVALENCETK OrExpression;
    public AExpression parseExpression3(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // OrExpression : AndExpression;
    public AExpression parseOrExpression1(AExpression a1) {
        // return null;
    }

    @Override // OrExpression : OrExpression @ORKW AndExpression;
    public AExpression parseOrExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // AndExpression : CompareExpression;
    public AExpression parseAndExpression1(AExpression a1) {
        // return null;
    }

    @Override // AndExpression : AndExpression @ANDKW CompareExpression;
    public AExpression parseAndExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : AddExpression;
    public AExpression parseCompareExpression1(AExpression a1) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @LTTK AddExpression;
    public AExpression parseCompareExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @LETK AddExpression;
    public AExpression parseCompareExpression3(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @EQTK AddExpression;
    public AExpression parseCompareExpression4(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @NETK AddExpression;
    public AExpression parseCompareExpression5(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @GETK AddExpression;
    public AExpression parseCompareExpression6(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @GTTK AddExpression;
    public AExpression parseCompareExpression7(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @INKW AddExpression;
    public AExpression parseCompareExpression8(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // CompareExpression : CompareExpression @SUBKW AddExpression;
    public AExpression parseCompareExpression9(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // AddExpression : MulExpression;
    public AExpression parseAddExpression1(AExpression a1) {
        // return null;
    }

    @Override // AddExpression : AddExpression @PLUSTK MulExpression;
    public AExpression parseAddExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // AddExpression : AddExpression @MINUSTK MulExpression;
    public AExpression parseAddExpression3(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // MulExpression : UnaryExpression;
    public AExpression parseMulExpression1(AExpression a1) {
        // return null;
    }

    @Override // MulExpression : MulExpression @ASTERISKTK UnaryExpression;
    public AExpression parseMulExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // MulExpression : MulExpression @SLASHTK UnaryExpression;
    public AExpression parseMulExpression3(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // MulExpression : MulExpression @DIVKW UnaryExpression;
    public AExpression parseMulExpression4(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // MulExpression : MulExpression @MODKW UnaryExpression;
    public AExpression parseMulExpression5(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // UnaryExpression : FuncExpression;
    public AExpression parseUnaryExpression1(AExpression a1) {
        // return null;
    }

    @Override // UnaryExpression : @MINUSTK UnaryExpression;
    public AExpression parseUnaryExpression2(Token t1, AExpression a2) {
        // return null;
    }

    @Override // UnaryExpression : @PLUSTK UnaryExpression;
    public AExpression parseUnaryExpression3(Token t1, AExpression a2) {
        // return null;
    }

    @Override // UnaryExpression : @NOTKW UnaryExpression;
    public AExpression parseUnaryExpression4(Token t1, AExpression a2) {
        // return null;
    }

    @Override // UnaryExpression : @SAMPLEKW FuncExpression;
    public AExpression parseUnaryExpression5(Token t1, AExpression a2) {
        // return null;
    }

    @Override // FuncExpression : ExpressionFactor;
    public AExpression parseFuncExpression1(AExpression a1) {
        // return null;
    }

    @Override // FuncExpression : FuncExpression @SQOPENTK Expression SQCLOSETK;
    public AExpression parseFuncExpression2(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // FuncExpression : FuncExpression @SQOPENTK OptExpression COLONTK OptExpression SQCLOSETK;
    public AExpression parseFuncExpression3(AExpression a1, Token t2, AExpression a3, AExpression a5) {
        // return null;
    }

    @Override // FuncExpression : FuncExpression @PAROPENTK PARCLOSETK;
    public AExpression parseFuncExpression4(AExpression a1, Token t2) {
        // return null;
    }

    @Override // FuncExpression : FuncExpression @PAROPENTK Expressions PARCLOSETK;
    public AExpression parseFuncExpression5(AExpression a1, Token t2, List<AExpression> l3) {
        // return null;
    }

    @Override // FuncExpression : StdLibFunction @PAROPENTK PARCLOSETK;
    public AExpression parseFuncExpression6(Token t1, Token t2) {
        // return null;
    }

    @Override // FuncExpression : StdLibFunction @PAROPENTK Expressions PARCLOSETK;
    public AExpression parseFuncExpression7(Token t1, Token t2, List<AExpression> l3) {
        // return null;
    }

    @Override // ExpressionFactor : @TRUEKW;
    public AExpression parseExpressionFactor01(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : @FALSEKW;
    public AExpression parseExpressionFactor02(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : @NUMBERTK;
    public AExpression parseExpressionFactor03(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : @REALTK;
    public AExpression parseExpressionFactor04(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : StringToken;
    public AExpression parseExpressionFactor05(AStringToken a1) {
        // return null;
    }

    @Override // ExpressionFactor : @TIMEKW;
    public AExpression parseExpressionFactor06(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : @SQOPENTK SQCLOSETK;
    public AExpression parseExpressionFactor07(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : @SQOPENTK Expressions SQCLOSETK;
    public AExpression parseExpressionFactor08(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // ExpressionFactor : @CUROPENTK CURCLOSETK;
    public AExpression parseExpressionFactor09(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : NonEmptySetExpression;
    public AExpression parseExpressionFactor10(ASetExpression a1) {
        // return null;
    }

    @Override // ExpressionFactor : @CUROPENTK DictPairs CURCLOSETK;
    public AExpression parseExpressionFactor11(Token t1, List<ADictPair> l2) {
        // return null;
    }

    @Override // ExpressionFactor : @PAROPENTK Expression COMMATK Expressions PARCLOSETK;
    public AExpression parseExpressionFactor12(Token t1, AExpression a2, List<AExpression> l4) {
        // return null;
    }

    @Override // ExpressionFactor : @LTTK Type GTTK ExpressionFactor;
    public AExpression parseExpressionFactor13(Token t1, ACifType a2, AExpression a4) {
        // return null;
    }

    @Override // ExpressionFactor : @IFKW Expressions COLONTK Expression OptElifExprs ELSEKW Expression ENDKW;
    public AExpression parseExpressionFactor14(Token t1, List<AExpression> l2, AExpression a4, List<AElifExpression> l5, AExpression a7) {
        // return null;
    }

    @Override // ExpressionFactor : @SWITCHKW Expression COLONTK SwitchBody ENDKW;
    public AExpression parseExpressionFactor15(Token t1, AExpression a2, List<ASwitchCase> l4) {
        // return null;
    }

    @Override // ExpressionFactor : PAROPENTK Expression PARCLOSETK;
    public AExpression parseExpressionFactor16(AExpression a2) {
        // return null;
    }

    @Override // ExpressionFactor : Name;
    public AExpression parseExpressionFactor17(AName a1) {
        // return null;
    }

    @Override // ExpressionFactor : Name @APOSTROPHETK;
    public AExpression parseExpressionFactor18(AName a1, Token t2) {
        // return null;
    }

    @Override // ExpressionFactor : @QUESTIONTK;
    public AExpression parseExpressionFactor19(Token t1) {
        // return null;
    }

    @Override // ExpressionFactor : @SELFKW;
    public AExpression parseExpressionFactor20(Token t1) {
        // return null;
    }

    @Override // NonEmptySetExpression : @CUROPENTK Expressions CURCLOSETK;
    public ASetExpression parseNonEmptySetExpression1(Token t1, List<AExpression> l2) {
        // return null;
    }

    @Override // DictPairs : Expression @COLONTK Expression;
    public List<ADictPair> parseDictPairs1(AExpression a1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // DictPairs : DictPairs COMMATK Expression @COLONTK Expression;
    public List<ADictPair> parseDictPairs2(List<ADictPair> l1, AExpression a3, Token t4, AExpression a5) {
        // return null;
    }

    @Override // OptElifExprs : ;
    public List<AElifExpression> parseOptElifExprs1() {
        // return null;
    }

    @Override // OptElifExprs : OptElifExprs @ELIFKW Expressions COLONTK Expression;
    public List<AElifExpression> parseOptElifExprs2(List<AElifExpression> l1, Token t2, List<AExpression> l3, AExpression a5) {
        // return null;
    }

    @Override // SwitchBody : SwitchCases;
    public List<ASwitchCase> parseSwitchBody1(List<ASwitchCase> l1) {
        // return null;
    }

    @Override // SwitchBody : SwitchCases @ELSEKW Expression;
    public List<ASwitchCase> parseSwitchBody2(List<ASwitchCase> l1, Token t2, AExpression a3) {
        // return null;
    }

    @Override // SwitchBody : @ELSEKW Expression;
    public List<ASwitchCase> parseSwitchBody3(Token t1, AExpression a2) {
        // return null;
    }

    @Override // SwitchCases : @CASEKW Expression COLONTK Expression;
    public List<ASwitchCase> parseSwitchCases1(Token t1, AExpression a2, AExpression a4) {
        // return null;
    }

    @Override // SwitchCases : SwitchCases @CASEKW Expression COLONTK Expression;
    public List<ASwitchCase> parseSwitchCases2(List<ASwitchCase> l1, Token t2, AExpression a3, AExpression a5) {
        // return null;
    }

    @Override // Name : Identifier;
    public AName parseName1(AIdentifier a1) {
        // return null;
    }

    @Override // Name : @RELATIVENAMETK;
    public AName parseName2(Token t1) {
        // return null;
    }

    @Override // Name : @ABSOLUTENAMETK;
    public AName parseName3(Token t1) {
        // return null;
    }

    @Override // Name : @ROOTNAMETK;
    public AName parseName4(Token t1) {
        // return null;
    }

    @Override // OptDoubleAnnos : ;
    public List<AAnnotation> parseOptDoubleAnnos1() {
        // return null;
    }

    @Override // OptDoubleAnnos : OptDoubleAnnos DoubleAnnotation;
    public List<AAnnotation> parseOptDoubleAnnos2(List<AAnnotation> l1, AAnnotation a2) {
        // return null;
    }

    @Override // DoubleAnnotation : @DOUBLE_ANNOTATION_NAMETK;
    public AAnnotation parseDoubleAnnotation1(Token t1) {
        // return null;
    }

    @Override // DoubleAnnotation : @DOUBLE_ANNOTATION_NAMETK PAROPENTK PARCLOSETK;
    public AAnnotation parseDoubleAnnotation2(Token t1) {
        // return null;
    }

    @Override // DoubleAnnotation : @DOUBLE_ANNOTATION_NAMETK PAROPENTK AnnotationArgs OptComma PARCLOSETK;
    public AAnnotation parseDoubleAnnotation3(Token t1, List<AAnnotationArgument> l3, Token t4) {
        // return null;
    }

    @Override // OptAnnos : ;
    public List<AAnnotation> parseOptAnnos1() {
        // return null;
    }

    @Override // OptAnnos : OptAnnos Annotation;
    public List<AAnnotation> parseOptAnnos2(List<AAnnotation> l1, AAnnotation a2) {
        // return null;
    }

    @Override // Annos : Annotation;
    public List<AAnnotation> parseAnnos1(AAnnotation a1) {
        // return null;
    }

    @Override // Annos : Annos Annotation;
    public List<AAnnotation> parseAnnos2(List<AAnnotation> l1, AAnnotation a2) {
        // return null;
    }

    @Override // Annotation : @REGULAR_ANNOTATION_NAMETK;
    public AAnnotation parseAnnotation1(Token t1) {
        // return null;
    }

    @Override // Annotation : @REGULAR_ANNOTATION_NAMETK PAROPENTK PARCLOSETK;
    public AAnnotation parseAnnotation2(Token t1) {
        // return null;
    }

    @Override // Annotation : @REGULAR_ANNOTATION_NAMETK PAROPENTK AnnotationArgs OptComma PARCLOSETK;
    public AAnnotation parseAnnotation3(Token t1, List<AAnnotationArgument> l3, Token t4) {
        // return null;
    }

    @Override // AnnotationArgs : AnnotationArg;
    public List<AAnnotationArgument> parseAnnotationArgs1(AAnnotationArgument a1) {
        // return null;
    }

    @Override // AnnotationArgs : AnnotationArgs COMMATK AnnotationArg;
    public List<AAnnotationArgument> parseAnnotationArgs2(List<AAnnotationArgument> l1, AAnnotationArgument a3) {
        // return null;
    }

    @Override // AnnotationArg : @IDENTIFIERTK COLONTK Expression;
    public AAnnotationArgument parseAnnotationArg1(Token t1, AExpression a3) {
        // return null;
    }

    @Override // AnnotationArg : @RELATIVENAMETK COLONTK Expression;
    public AAnnotationArgument parseAnnotationArg2(Token t1, AExpression a3) {
        // return null;
    }

    @Override // AnnotationArg : Expression;
    public AAnnotationArgument parseAnnotationArg3(AExpression a1) {
        // return null;
    }

    @Override // OptComma : ;
    public Token parseOptComma1() {
        // return null;
    }

    @Override // OptComma : @COMMATK;
    public Token parseOptComma2(Token t1) {
        // return null;
    }
}
