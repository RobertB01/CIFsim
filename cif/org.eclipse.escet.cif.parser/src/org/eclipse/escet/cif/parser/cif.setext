// ------------------------------------------------------------------------------
// Copyright (c) 2010, 2023 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the terms
// of the MIT License which is available at https://opensource.org/licenses/MIT
//
// SPDX-License-Identifier: MIT
// ------------------------------------------------------------------------------

@scanner org.eclipse.escet.cif.parser.CifScanner;

@terminals:
  // CIF keywords also in:
  //  - Syntax highlighting files for LaTeX.
  //  - Syntax highlighting files for AsciiDoctor.
  //  - Textual syntax description in  CIF documentation.
  @keywords Keywords = alg
                       alphabet
                       any
                       attr
                       automaton
                       bool
                       break
                       case
                       const
                       cont
                       continue
                       controllable
                       def
                       der
                       dict
                       disables
                       disc
                       dist
                       do
                       edge
                       elif
                       else
                       $end
                       enum
                       equation
                       event
                       false
                       file
                       final
                       for
                       func
                       goto
                       group
                       id
                       if
                       $import
                       initial
                       input
                       int
                       invariant
                       list
                       location
                       marked
                       monitor
                       namespace
                       needs
                       now
                       post
                       pre
                       print
                       printfile
                       real
                       return
                       self
                       set
                       string
                       svgcopy
                       svgfile
                       svgin
                       svgmove
                       svgout
                       switch
                       tau
                       text
                       time
                       to
                       true
                       tuple
                       type
                       uncontrollable
                       urgent
                       value
                       void
                       when
                       while;

  // Supervisory kinds.
  @keywords SupKind = plant
                      requirement
                      supervisor;

  // Standard library functions.
  @keywords StdLibFunction = // Trigonometric functions.
                             acosh
                             acos
                             asinh
                             asin
                             atanh
                             atan
                             cosh
                             cos
                             sinh
                             sin
                             tanh
                             tan
                             // General functions.
                             abs
                             cbrt
                             ceil
                             del
                             empty
                             exp
                             floor
                             fmt
                             ln
                             log
                             max
                             min
                             pop
                             pow
                             round
                             scale
                             sign
                             size
                             sqrt
                             // Distribution functions.
                             bernoulli
                             beta
                             binomial
                             constant
                             erlang
                             exponential
                             gamma
                             geometric
                             lognormal
                             normal
                             poisson
                             random
                             triangle
                             uniform
                             weibull;

  @keywords Operator = and
                       div
                       in // Keyword/operator conflict.
                       mod
                       not
                       or
                       sample
                       sub;
end

@terminals:
  BECOMESTK        = ":=";
  COMMATK          = ",";
  SEMICOLTK        = ";";
  COLONTK          = ":";
  APOSTROPHETK     = "'";
  EXCLAMATIONTK    = "!";
  QUESTIONTK       = "\?";
  TILDETK          = "~";

  ASTERISKTK       = "\*";
  SLASHTK          = "/";
  LTTK             = "<";
  LETK             = "<=";
  EQTK             = "=";
  NETK             = "!=";
  GETK             = ">=";
  GTTK             = ">";
  PLUSTK           = "\+";
  MINUSTK          = "\-";
  IMPLIESTK        = "=>";
  EQUIVALENCETK    = "<=>";
  DOTDOTTK         = "\.\.";

  CUROPENTK        = "\{";
  CURCLOSETK       = "\}";
  PAROPENTK        = "\(";
  PARCLOSETK       = "\)";
  SQOPENTK         = "\[";
  SQCLOSETK        = "\]";
end

@shortcut uidentifier = "[a-zA-Z_][a-zA-Z0-9_]*";
@shortcut identifier  = "$?{uidentifier}";

@terminals:
  // Literals.
  RELATIVENAMETK   = "{identifier}(\.{identifier})+"
                     [a name];
  ABSOLUTENAMETK   = "\.{identifier}(\.{identifier})*"
                     [a name];
  ROOTNAMETK       = "\^{identifier}(\.{identifier})*"
                     [a name];
  IDENTIFIERTK     = "{identifier}"
                     [an identifier];
  NUMBERTK         = "(0|[1-9][0-9]*)"
                     [an integer literal];
  REALTK           = "(0|[1-9][0-9]*)(\.[0-9]+|(\.[0-9]+)?[eE][\-\+]?[0-9]+)"
                     [a real literal];
  STRINGTK         = "\"([^\\\"\n]|\\[nt\\\"])*\""
                     [a string literal];
  ANNOTATIONNAMETK = "@{uidentifier}(:{uidentifier})*"
                     [an annotation name];

  // Comments.
  "//.*";
  "/\*" -> BLOCK_COMMENT;

  // Whitespace and EOF.
  "[ \t\r\n]+";
  @eof;
end

@terminals BLOCK_COMMENT:
  "\*/" ->;
  ".";
  "\n";
end


@main Specification: org.eclipse.escet.cif.parser.CifParser;

@hooks org.eclipse.escet.cif.parser.CifParserHooks;

@import org.eclipse.escet.common.java as common_java;
@import org.eclipse.escet.cif.parser.ast as cif;
@import org.eclipse.escet.cif.parser.ast.annotations as annos;
@import org.eclipse.escet.cif.parser.ast.automata;
@import org.eclipse.escet.cif.parser.ast.declarations as decls;
@import org.eclipse.escet.cif.parser.ast.expressions as exprs;
@import org.eclipse.escet.cif.parser.ast.functions as funcs;
@import org.eclipse.escet.cif.parser.ast.iodecls;
@import org.eclipse.escet.cif.parser.ast.iodecls.print;
@import org.eclipse.escet.cif.parser.ast.iodecls.svg;
@import org.eclipse.escet.cif.parser.ast.tokens;
@import org.eclipse.escet.cif.parser.ast.types;
@import org.eclipse.escet.setext;
@import java.util.List;

{cif.ASpecification}
Specification : GroupBody
              ;

{cif.AGroupBody}
GroupBody : OptGroupDecls
          ;

{automata.AAutomatonBody}
AutomatonBody : OptAutDecls Locations OptIoDecls
              ;

{List<cif.ADecl>}
OptGroupDecls : /* empty */
              | OptGroupDecls GroupDecl
              ;

{cif.ADecl}
GroupDecl : Decl
          | @IMPORTKW Imports SEMICOLTK
          | @NAMESPACEKW @IDENTIFIERTK SEMICOLTK
          | @NAMESPACEKW @RELATIVENAMETK SEMICOLTK
          | @FUNCKW Types Identifier FuncParams COLONTK FuncBody
          | Identifier COLONTK Name CompInstArgs @SEMICOLTK
          | @GROUPKW                 DEFKW Identifier CompDefParms COLONTK GroupBody     @ENDKW
          | OptSupKind @AUTOMATONKW  DEFKW Identifier CompDefParms COLONTK AutomatonBody @ENDKW
          |    SupKind               DEFKW Identifier CompDefParms COLONTK AutomatonBody @ENDKW
          | @GROUPKW                       Identifier              COLONTK GroupBody     @ENDKW
          | OptSupKind @AUTOMATONKW        Identifier              COLONTK AutomatonBody @ENDKW
          |    SupKind                     Identifier              COLONTK AutomatonBody @ENDKW
          ;

{List<cif.ADecl>}
OptAutDecls : /* empty */
            | OptAutDecls AutDecl
            ;

{cif.ADecl}
AutDecl : Decl
        | @ALPHABETKW Events SEMICOLTK
        | @ALPHABETKW SEMICOLTK
        | @MONITORKW Events SEMICOLTK
        | @MONITORKW SEMICOLTK
        | OptAnnos @DISCKW Type DiscDecls SEMICOLTK
        ;

{cif.ADecl}
Decl : @TYPEKW TypeDefs SEMICOLTK
     | ENUMKW Identifier EQTK Identifiers SEMICOLTK
     | OptControllability @EVENTKW           Identifiers SEMICOLTK
     | OptControllability @EVENTKW EventType Identifiers SEMICOLTK
     |    Controllability                    Identifiers SEMICOLTK
     |    Controllability          EventType Identifiers SEMICOLTK
     | @CONSTKW Type ConstantDefs SEMICOLTK
     | @ALGKW Type AlgVarsDefs SEMICOLTK
     | OptAnnos @INPUTKW Type Identifiers SEMICOLTK
     | @CONTKW ContDecls SEMICOLTK
     | @EQUATIONKW Equations SEMICOLTK
     | @INITIALKW Expressions SEMICOLTK
     | InvariantDecls
     | @MARKEDKW Expressions SEMICOLTK
     | IoDecl
     ;

{tokens.AIdentifier}
Identifier : @IDENTIFIERTK
           ;

{List<cif.AImport>}
Imports : StringToken
        | Imports COMMATK StringToken
        ;

{tokens.AStringToken}
StringToken : @STRINGTK
            ;

{List<decls.ATypeDef>}
TypeDefs : Identifier EQTK Type
         | TypeDefs COMMATK Identifier EQTK Type
         ;

{List<decls.AConstant>}
ConstantDefs : Identifier EQTK Expression
             | ConstantDefs COMMATK Identifier EQTK Expression
             ;

{List<decls.AAlgVariable>}
AlgVarsDefs : Identifier
            | Identifier EQTK Expression
            | AlgVarsDefs COMMATK Identifier
            | AlgVarsDefs COMMATK Identifier EQTK Expression
            ;

{List<funcs.AFuncParam>}
FuncParams : PAROPENTK PARCLOSETK
           | PAROPENTK FuncParamDecls PARCLOSETK
           ;

{List<funcs.AFuncParam>}
FuncParamDecls : Type Identifiers
               | FuncParamDecls SEMICOLTK Type Identifiers
               ;

{funcs.AFuncBody}
FuncBody : FuncVarDecls FuncStatements @ENDKW
         | StringToken SEMICOLTK
         ;

{List<decls.ADiscVariableDecl>}
FuncVarDecls : /* empty */
             | FuncVarDecls Type FuncVarDecl SEMICOLTK
             ;

{List<decls.ADiscVariable>}
FuncVarDecl : Identifier
            | Identifier EQTK Expression
            | FuncVarDecl COMMATK Identifier
            | FuncVarDecl COMMATK Identifier EQTK Expression
            ;

{List<funcs.AFuncStatement>}
FuncStatements : FuncStatement
               | FuncStatements FuncStatement
               ;

{funcs.AFuncStatement}
FuncStatement : Addressables @BECOMESTK Expressions SEMICOLTK
              | @IFKW Expressions COLONTK FuncStatements
                OptElifFuncStats OptElseFuncStat ENDKW
              | @WHILEKW Expressions COLONTK FuncStatements ENDKW
              | @BREAKKW SEMICOLTK
              | @CONTINUEKW SEMICOLTK
              | @RETURNKW Expressions SEMICOLTK
              ;

{List<funcs.AElifFuncStatement>}
OptElifFuncStats : /* empty */
                 | OptElifFuncStats @ELIFKW Expressions COLONTK FuncStatements
                 ;

{funcs.AElseFuncStatement}
OptElseFuncStat : /* empty */
                | @ELSEKW FuncStatements
                ;

{List<tokens.AName>}
Events : Name
       | Events COMMATK Name
       ;

{automata.ACoreEdge}
CoreEdge : EdgeEvents         OptEdgeGuard OptEdgeUrgent OptEdgeUpdate
         | WHENKW Expressions              OptEdgeUrgent OptEdgeUpdate
         | @NOWKW                                        OptEdgeUpdate
         | DOKW Updates
         ;

{List<exprs.AExpression>}
OptEdgeGuard : /* empty */
             | WHENKW Expressions
             ;

{common_java.TextPosition}
OptEdgeUrgent : /* empty */
              | @NOWKW
              ;

{List<automata.AUpdate>}
OptEdgeUpdate : /* empty */
              | DOKW Updates
              ;

{List<automata.AEdgeEvent>}
EdgeEvents : EdgeEvent
           | EdgeEvents COMMATK EdgeEvent
           ;

{automata.AEdgeEvent}
EdgeEvent : @TAUKW
          | Name
          | Name @EXCLAMATIONTK
          | Name @EXCLAMATIONTK Expression
          | Name @QUESTIONTK
          ;

{List<automata.ALocation>}
Locations : Location
          | Locations Location
          ;

{automata.ALocation}
Location : OptAnnos @LOCATIONKW SEMICOLTK
         | OptAnnos @LOCATIONKW Identifier SEMICOLTK
         | OptAnnos @LOCATIONKW COLONTK LocationElements
         | OptAnnos @LOCATIONKW Identifier COLONTK LocationElements
         ;

{List<automata.ALocationElement>}
LocationElements : LocationElement
                 | LocationElements LocationElement
                 ;

{automata.ALocationElement}
LocationElement : @INITIALKW SEMICOLTK
                | @INITIALKW Expressions SEMICOLTK
                | InvariantDecls
                | @EQUATIONKW Equations SEMICOLTK
                | @MARKEDKW SEMICOLTK
                | @MARKEDKW Expressions SEMICOLTK
                | @URGENTKW SEMICOLTK
                | @EDGEKW CoreEdge SEMICOLTK
                | @EDGEKW CoreEdge GOTOKW Identifier SEMICOLTK
                ;

{List<exprs.AExpression>}
CompInstArgs : PAROPENTK PARCLOSETK
             | PAROPENTK Expressions PARCLOSETK
             ;

{List<cif.AParameter>}
CompDefParms : PAROPENTK PARCLOSETK
             | PAROPENTK CompDefDecls PARCLOSETK
             ;

{List<cif.AParameter>}
CompDefDecls : CompDefDeclaration
             | CompDefDecls SEMICOLTK CompDefDeclaration
             ;

{cif.AParameter}
CompDefDeclaration : OptControllability @EVENTKW           EventParamIds
                   | OptControllability @EVENTKW EventType EventParamIds
                   |    Controllability                    EventParamIds
                   |    Controllability          EventType EventParamIds
                   | Name Identifiers
                   | @LOCATIONKW Identifiers
                   | @ALGKW Type Identifiers
                   ;

{List<cif.AEventParameterPart>}
EventParamIds : EventParamId
              | EventParamIds COMMATK EventParamId
              ;

{cif.AEventParameterPart}
EventParamId : Identifier OptEventParamFlags
             ;

{List<tokens.AEventParamFlag>}
OptEventParamFlags : /* empty */
                   | OptEventParamFlags EventParamFlag
                   ;

{tokens.AEventParamFlag}
EventParamFlag : @EXCLAMATIONTK
               | @QUESTIONTK
               | @TILDETK
               ;

{List<decls.ADiscVariable>}
DiscDecls : DiscDecl
          | DiscDecls COMMATK DiscDecl
          ;

{decls.ADiscVariable}
DiscDecl : Identifier
         | Identifier INKW @ANYKW
         | Identifier EQTK Expression
         | Identifier INKW CUROPENTK Expressions CURCLOSETK
         ;

{List<decls.AContVariable>}
ContDecls : ContDecl
          | ContDecls COMMATK ContDecl
          ;

{decls.AContVariable}
ContDecl : Identifier OptDerivative
         | Identifier EQTK Expression OptDerivative
         ;

{exprs.AExpression}
OptDerivative : /* empty */
              | DERKW Expression
              ;

{List<cif.AEquation>}
Equations : Equation
          | Equations COMMATK Equation
          ;

{cif.AEquation}
Equation : Identifier APOSTROPHETK @EQTK Expression
         | Identifier @EQTK Expression
         ;

{cif.AInvariantDecl}
InvariantDecls : OptSupKind @INVARIANTKW Invariants SEMICOLTK
               |    SupKind              Invariants SEMICOLTK
               ;

{List<cif.AInvariant>}
Invariants : Invariant
           | Invariants COMMATK Invariant
           ;

{cif.AInvariant}
Invariant :                    Expression
          | Identifier COLONTK Expression
          |                    Name                  @NEEDSKW    Expression
          | Identifier COLONTK Name                  @NEEDSKW    Expression
            // NonEmptySetExpression instead of NamesSet to avoid conflict with Expression.
          |                    NonEmptySetExpression @NEEDSKW    Expression
          |                    Expression            @DISABLESKW Name
          | Identifier COLONTK Expression            @DISABLESKW Name
          |                    Expression            @DISABLESKW NamesSet
          ;

{List<tokens.AName>}
NamesSet : CUROPENTK Names CURCLOSETK
         ;

{List<tokens.AName>}
Names : Name
      | Names COMMATK Name
      ;

{List<automata.AUpdate>}
Updates : Update
        | Updates COMMATK Update
        ;

{automata.AUpdate}
Update : Addressable @BECOMESTK Expression
       | @IFKW Expressions COLONTK Updates
         OptElifUpdates OptElseUpdate ENDKW
       ;

{List<exprs.AExpression>}
Addressables : Addressable
             | Addressables COMMATK Addressable
             ;

{exprs.AExpression}
Addressable : Name
            | Name Projections
            | @PAROPENTK Addressable COMMATK Addressables PARCLOSETK
            ;

{List<exprs.AProjectionExpression>}
Projections : Projection
            | Projections Projection
            ;

{exprs.AProjectionExpression}
Projection : @SQOPENTK Expression SQCLOSETK
           ;

{List<automata.AElifUpdate>}
OptElifUpdates : /* empty */
               | OptElifUpdates @ELIFKW Expressions COLONTK Updates
               ;

{List<automata.AUpdate>}
OptElseUpdate : /* empty */
              | ELSEKW Updates
              ;

{List<tokens.AIdentifier>}
Identifiers : Identifier
            | Identifiers COMMATK Identifier
            ;

{setext.runtime.Token}
OptSupKind : /* empty */
           | SupKind
           ;

{setext.runtime.Token}
OptControllability : /* empty */
                   | Controllability
                   ;

{setext.runtime.Token}
Controllability : @CONTROLLABLEKW
                | @UNCONTROLLABLEKW
                ;

///////////////////////////////////////////////////////////////////////////////

{List<iodecls.AIoDecl>}
OptIoDecls : /* empty */
           | OptIoDecls IoDecl
           ;

{iodecls.AIoDecl}
IoDecl : SvgFile
       | SvgCopy
       | SvgMove
       | SvgOut
       | SvgIn
       | PrintFile
       | Print
       ;

{svg.ASvgFile}
SvgFile : @SVGFILEKW StringToken SEMICOLTK
        ;

{svg.ASvgFile}
OptSvgFile : /* empty */
           | @FILEKW StringToken
           ;

{svg.ASvgCopy}
SvgCopy : @SVGCOPYKW IDKW Expression OptSvgCopyPre OptSvgCopyPost OptSvgFile
          @SEMICOLTK
        ;

{exprs.AExpression}
OptSvgCopyPre : /* empty */
              | PREKW Expression
              ;

{exprs.AExpression}
OptSvgCopyPost : /* empty */
               | POSTKW Expression
               ;

{svg.ASvgMove}
SvgMove : @SVGMOVEKW IDKW Expression TOKW Expression COMMATK Expression
          OptSvgFile @SEMICOLTK
        ;

{svg.ASvgOut}
SvgOut : @SVGOUTKW IDKW Expression SvgAttr VALUEKW Expression OptSvgFile
         @SEMICOLTK
       ;

{tokens.AStringToken}
SvgAttr : ATTRKW StringToken
        | @TEXTKW
        ;

{svg.ASvgIn}
SvgIn : @SVGINKW IDKW Expression EVENTKW SvgInEvent OptSvgFile @SEMICOLTK
      | @SVGINKW IDKW Expression DOKW Updates OptSvgFile @SEMICOLTK
      ;

{svg.ASvgInEvent}
SvgInEvent : Name
           | @IFKW Expression @COLONTK Name OptSvgInEventElifs @ELSEKW Name ENDKW
           | @IFKW Expression @COLONTK Name SvgInEventElifs ENDKW
           ;

{List<svg.ASvgInEventIfEntry>}
OptSvgInEventElifs : /* empty */
                   | SvgInEventElifs
                   ;

{List<svg.ASvgInEventIfEntry>}
SvgInEventElifs : @ELIFKW Expression COLONTK Name
                | SvgInEventElifs @ELIFKW Expression COLONTK Name
                ;

{print.APrintFile}
PrintFile : @PRINTFILEKW StringToken SEMICOLTK
          ;

{print.APrint}
Print : @PRINTKW PrintTxt OptPrintFors OptPrintWhen OptPrintFile @SEMICOLTK
      ;

{print.APrintTxt}
PrintTxt : Expression
         | PREKW Expression
         | POSTKW Expression
         | PREKW Expression POSTKW Expression
         ;

{List<print.APrintFor>}
OptPrintFors : /* empty */
             | FORKW PrintFors
             ;

{List<print.APrintFor>}
PrintFors : PrintFor
          | PrintFors COMMATK PrintFor
          ;

{print.APrintFor}
PrintFor : @EVENTKW
         | @TIMEKW
         | Name
         | @INITIALKW
         | @FINALKW
         ;

{print.APrintWhen}
OptPrintWhen : /* empty */
             | WHENKW Expression
             | WHENKW PREKW Expression
             | WHENKW POSTKW Expression
             | WHENKW PREKW Expression POSTKW Expression
             ;

{print.APrintFile}
OptPrintFile : /* empty */
             | FILEKW StringToken
             ;

///////////////////////////////////////////////////////////////////////////////

{List<types.ACifType>}
Types : Type
      | Types COMMATK Type
      ;

{types.ACifType}
EventType : @VOIDKW
          | Type
          ;

{types.ACifType}
Type : @BOOLKW
     | @INTKW
     | @INTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK
     | @REALKW
     | @STRINGKW
     | @LISTKW Type
     | @LISTKW SQOPENTK Expression SQCLOSETK Type
     | @LISTKW SQOPENTK Expression DOTDOTTK Expression SQCLOSETK Type
     | @SETKW Type
     | @DICTKW PAROPENTK Type COLONTK Type PARCLOSETK
     | @TUPLEKW PAROPENTK Fields PARCLOSETK
     | @FUNCKW Type PAROPENTK PARCLOSETK
     | @FUNCKW Type PAROPENTK Types PARCLOSETK
     | @DISTKW Type
     | Name
     ;

{List<types.AField>}
Fields : Field
       | Fields SEMICOLTK Field
       ;

{types.AField}
Field : Type Identifiers
      ;

///////////////////////////////////////////////////////////////////////////////

{List<exprs.AExpression>}
Expressions : Expression
            | Expressions COMMATK Expression
            ;

{exprs.AExpression}
OptExpression : /* empty */
              | Expression
              ;

{exprs.AExpression}
Expression : OrExpression
           | OrExpression @IMPLIESTK OrExpression
           | OrExpression @EQUIVALENCETK OrExpression
           ;

{exprs.AExpression}
OrExpression : AndExpression
             | OrExpression @ORKW AndExpression
             ;

{exprs.AExpression}
AndExpression : CompareExpression
              | AndExpression @ANDKW CompareExpression
              ;

{exprs.AExpression}
CompareExpression : AddExpression
                  | CompareExpression @LTTK AddExpression
                  | CompareExpression @LETK AddExpression
                  | CompareExpression @EQTK AddExpression
                  | CompareExpression @NETK AddExpression
                  | CompareExpression @GETK AddExpression
                  | CompareExpression @GTTK AddExpression
                  | CompareExpression @INKW AddExpression
                  | CompareExpression @SUBKW AddExpression
                  ;

{exprs.AExpression}
AddExpression : MulExpression
              | AddExpression @PLUSTK MulExpression
              | AddExpression @MINUSTK MulExpression
              ;

{exprs.AExpression}
MulExpression : UnaryExpression
              | MulExpression @ASTERISKTK UnaryExpression
              | MulExpression @SLASHTK UnaryExpression
              | MulExpression @DIVKW UnaryExpression
              | MulExpression @MODKW UnaryExpression
              ;

{exprs.AExpression}
UnaryExpression : FuncExpression
                | @MINUSTK UnaryExpression
                | @PLUSTK UnaryExpression
                | @NOTKW UnaryExpression
                | @SAMPLEKW FuncExpression
                ;

{exprs.AExpression}
FuncExpression : ExpressionFactor
               | FuncExpression @SQOPENTK Expression SQCLOSETK
               | FuncExpression
                 @SQOPENTK OptExpression COLONTK OptExpression SQCLOSETK
               | FuncExpression @PAROPENTK PARCLOSETK
               | FuncExpression @PAROPENTK Expressions PARCLOSETK
               | StdLibFunction @PAROPENTK PARCLOSETK
               | StdLibFunction @PAROPENTK Expressions PARCLOSETK
               ;

{exprs.AExpression}
ExpressionFactor : @TRUEKW
                 | @FALSEKW
                 | @NUMBERTK
                 | @REALTK
                 | StringToken
                 | @TIMEKW
                 | @SQOPENTK SQCLOSETK
                 | @SQOPENTK Expressions SQCLOSETK
                 | @CUROPENTK CURCLOSETK
                 | NonEmptySetExpression
                 | @CUROPENTK DictPairs CURCLOSETK
                 | @PAROPENTK Expression COMMATK Expressions PARCLOSETK
                 | @LTTK Type GTTK ExpressionFactor
                 | @IFKW Expressions COLONTK Expression
                   OptElifExprs ELSEKW Expression ENDKW
                 | @SWITCHKW Expression COLONTK SwitchBody ENDKW
                 | PAROPENTK Expression PARCLOSETK
                 | Name
                 | Name @APOSTROPHETK
                 | @QUESTIONTK
                 | @SELFKW
                 ;

{exprs.ASetExpression}
NonEmptySetExpression : @CUROPENTK Expressions CURCLOSETK
                      ;

{List<exprs.ADictPair>}
DictPairs : Expression @COLONTK Expression
          | DictPairs COMMATK Expression @COLONTK Expression
          ;

{List<exprs.AElifExpression>}
OptElifExprs : /* empty */
             | OptElifExprs @ELIFKW Expressions COLONTK Expression
             ;

{List<exprs.ASwitchCase>}
SwitchBody : SwitchCases
           | SwitchCases @ELSEKW Expression
           |             @ELSEKW Expression
           ;

{List<exprs.ASwitchCase>}
SwitchCases : @CASEKW Expression COLONTK Expression
            | SwitchCases @CASEKW Expression COLONTK Expression
            ;

{tokens.AName}
Name : Identifier
     | @RELATIVENAMETK
     | @ABSOLUTENAMETK
     | @ROOTNAMETK
     ;

///////////////////////////////////////////////////////////////////////////////

{List<annos.AAnnotation>}
OptAnnos : /* empty */
         | OptAnnos Annotation
         ;

{annos.AAnnotation}
Annotation : @ANNOTATIONNAMETK
           | @ANNOTATIONNAMETK PAROPENTK PARCLOSETK
           | @ANNOTATIONNAMETK PAROPENTK AnnotationArgs OptComma PARCLOSETK
           ;

{List<annos.AAnnotationArgument>}
AnnotationArgs : AnnotationArg
               | AnnotationArgs COMMATK AnnotationArg
               ;

{annos.AAnnotationArgument}
AnnotationArg : @IDENTIFIERTK   EQTK Expression
              | @RELATIVENAMETK EQTK Expression
              ;

{setext.runtime.Token}
OptComma : /* empty */
         | @COMMATK
         ;
